/*global location history */
sap.ui.define([
	"ugiaiwui/mdg/aiw/request/controller/BaseController",
	"sap/ui/model/json/JSONModel",
	"sap/ui/core/routing/History",
	"ugiaiwui/mdg/aiw/request/model/formatter",
	"sap/ui/model/Filter",
	"sap/ui/model/FilterOperator",
	"sap/m/Dialog",
	"sap/m/BusyDialog",
	// "ugiaiwui/mdg/aiw/request/util/common",
	"ugiaiwui/mdg/aiw/request/util/ValueHelpRequest",
	// "ugiaiwui/mdg/aiw/request/util/Common",
	"ugiaiwui/mdg/aiw/library/js/ValueHelpProvider",
	"sap/ui/core/library",
	"sap/ui/core/message/Message",
	"ugiaiwui/mdg/aiw/request/util/CRPersoService2",
	"sap/m/TablePersoController",
], function (BaseController, JSONModel, History, formatter, Filter, FilterOperator, Dialog, BusyDialog, ValueHelpRequest,
	ValueHelpProvider, library, Message, CRPersoService2, TablePersoController) { //common, Common
	"use strict";

	jQuery.sap.require("sap.ui.core.format.DateFormat");
	var timeFormat = sap.ui.core.format.DateFormat.getTimeInstance({
		pattern: "KK:mm:ss"
	});

	var ValueState = library.ValueState;

	// shortcut for sap.ui.core.MessageType
	var MessageType = library.MessageType;

	// var oMessageTemplate = new sap.m.MessageItem({
	// 	type: '{type}',
	// 	title: '{title}'
	// });

	// var oMessagePopover = new sap.m.MessagePopover({
	// 	items: {
	// 		path: '/',
	// 		template: oMessageTemplate
	// 	}
	// });
	return BaseController.extend("ugiaiwui.mdg.aiw.request.controller.Main", {

		formatter: formatter,

		/* =========================================================== */
		/* lifecycle methods                                           */
		/* =========================================================== */

		/**
		 * Called when the Main controller is instantiated.
		 * @public
		 */
		onInit: function () {
			var g = this;
			this._oView = this.getView();
			//Test changes
			this._oComponent = sap.ui.component(sap.ui.core.Component.getOwnerIdFor(this._oView));

			this.setMode(this._oComponent.getComponentData().startupParameters.mode[0]);
			if (this._oComponent.getComponentData().startupParameters.hasOwnProperty("state")) {
				this.setState(this._oComponent.getComponentData().startupParameters.state[0]);
				if (this._oComponent.getComponentData().startupParameters.hasOwnProperty("isHierarchy")) {
					this.setHierarchy(this._oComponent.getComponentData().startupParameters.isHierarchy[0]);
				}
				if (this._oComponent.getComponentData().startupParameters.hasOwnProperty("hMode")) {
					this.hMode = this._oComponent.getComponentData().startupParameters.hMode[0];
				}
				if (sap.ui.getCore().getModel("mocrRefresh")) {
					sap.ui.getCore().getModel("mocrRefresh").setProperty("/refresh", true);
				}
			}
			// var serviceUrl = this._oComponent.getModel().sServiceUrl;
			// var oModel = new sap.ui.model.odata.v2.ODataModel(serviceUrl, {
			// 	json: true,
			// 	useBatch: false,
			// 	defaultCountMode: sap.ui.model.odata.CountMode.None
			// });
			// var vhServiceUrl = this._oComponent.getModel("NewModel").sServiceUrl;
			// var vhModel = new sap.ui.model.odata.v2.ODataModel(vhServiceUrl, {
			// 	json: true,
			// 	useBatch: false,
			// 	defaultCountMode: sap.ui.model.odata.CountMode.None
			// });
			var model = new JSONModel({
				isChangeRequest: true,
				isHeader: false
			});
			this.getView().setModel(model, "mode");
			// this.getView().setModel(oModel);
			// this.getView().setModel(vhModel, "valueHelp");
			// sap.ui.getCore().setModel(oModel, "main");
			// sap.ui.getCore().setModel(vhModel, "valueHelp");
			// var vhServiceUrl = this._oComponent.getModel("NewModel2").sServiceUrl;
			// var vhModel = new sap.ui.model.odata.v2.ODataModel(vhServiceUrl, {
			// 	json: true,
			// 	useBatch: false,
			// 	loadMetadataAsync: true,
			// 	refreshAfterChange: false,
			// 	defaultCountMode: sap.ui.model.odata.CountMode.None
			// });
			// this.getView().setModel(oModel);
			// this.getView().setModel(vhModel, "valueHelp2");

			var oModel = this._oComponent.getModel();
			oModel.setDefaultCountMode(sap.ui.model.odata.CountMode.None);
			oModel.setRefreshAfterChange(false)
			this.getView().setModel(oModel);

			var vhModel = this._oComponent.getModel("NewModel");
			this.getView().setModel(vhModel, "valueHelp");

			var vhModel2 = this._oComponent.getModel("NewModel2");
			this.getView().setModel(vhModel2, "valueHelp2");

			var ApprovalModel = this._oComponent.getModel("ApprovalModel");
			this.getView().setModel(ApprovalModel, "ApprModel");

			// if (this._oComponent.getComponentData().startupParameters.hasOwnProperty("caller") && !sap.ui.getCore().getModel("MatNavModel")) {
			// 	this.bomPath = this._oComponent.getComponentData().startupParameters.path[0];
			// 	this.uid = this._oComponent.getComponentData().startupParameters.uid[0];
			// 	// this.bufferRead(this.bomPath, this.uid);
			// }

			this._initializeAttachments();

			var CountData = {
				"WCCount": "",
				"GTLCount": "",
				"ETLCount": "",
				"FTLCount": "",
				"TotalTLCount": "",
				"OLCount": "",

				"MatBomCount": "",
				"EqBomCount": "",
				"FLBomCount": "",
				"WbsBomCount": "",
				"TotalBomCount": "",
				"ONCount": ""
			};
			var CountModel = new JSONModel(CountData);
			this.getView().setModel(CountModel, "CountModel");
			// sap.ui.getCore().setModel(CountModel, "CountModel");

			var EnableData = {
				"deleteMAT": false,
				"deleteEQ": false,
				"deleteFL": false,
				"deleteWBS": false,
				"deleteON": false,
				"actionEnable": true,
				"tableType": "MultiSelect",
				"submitcancelEnable": false,
				"approverejectEnable": false,
				"Measuring Point": false,
				"Maintenance Plan": false,
				"Work Center": false,
				"Task List": false,
				"Object Link": false,
				"Object Network": false,
				"notes": false,
				"isEnable": false,
				"attach": false,
				"AIWModeVis": true
			};
			var EnableModel = new JSONModel(EnableData);
			this.getView().setModel(EnableModel, "EnableModel");
			sap.ui.getCore().setModel(EnableModel, "EnableModel");
			/* Common Function Call for all objects */
			this.adjustScreenElements();

			// var mainModel = this._oComponent.getModel("mainModel");
			// if (!mainModel.getProperty("/init")) {
			// this.getView().addEventDelegate({
			// onAfterShow: jQuery.proxy(function() {
			var sFlagMaterial = false;
			if (this._oComponent.getComponentData().startupParameters.hasOwnProperty("caller")) {
				sFlagMaterial = true;
				var sBomPath = this._oComponent.getComponentData().startupParameters.path[0];
				this.bomPath = sBomPath.split("-")[0];
				this.fragmentName = sBomPath.split("-")[1];
				this.uid = this._oComponent.getComponentData().startupParameters.uid[0];
				this.case = this._oComponent.getComponentData().startupParameters.case[0];
			}

			if (this.getMode() !== 'display' && !sFlagMaterial) {
				this.readChangeRequestType();
			}

			// }, this)
			// });
			// mainModel.setProperty("/init", true);

			// }
			this.getView().getModel().setProperty("/init", true);
			this.onFirstObjectInit();
			this.onNextObjectInit();
			this.onLastObjectInit();
			if (this.getMode() === "display") {
				this.getRouter().getRoute("mainDetail").attachPatternMatched(this._onRouteMatched, this);
			} else {
				this.getRouter().getRoute("main").attachPatternMatched(this._onRouteMatched, this);
			}

			var PRTVisibleEnableData = {
				PRTVisible: false,
				PRTEnable: false
			};
			var PRTVisibleEnableModel = new JSONModel(PRTVisibleEnableData);
			sap.ui.getCore().setModel(PRTVisibleEnableModel, "PRTVisibleEnableModel");

			this.AltKeyDerivation();
			var dataOriginMOP = new JSONModel({
				EQ: [],
				FL: []
			});
			sap.ui.getCore().setModel(dataOriginMOP, "dataOriginMOP");
			this.readDOIList("EQUI");
			this.readDOIList("FUNCLOC");

			var ainMOP = new JSONModel([]);
			sap.ui.getCore().setModel(ainMOP, "ainMOP");

			var oMessageManager = sap.ui.getCore().getMessageManager();
			this.getView().setModel(oMessageManager.getMessageModel(), "message");

			// or just do it for the whole view
			oMessageManager.registerObject(this.getView(), true);

			this.AIWModelDelete = false;
			var oAIWModel = {
				modelName: "",
				modelNameVS: "None",
				modelDesc: "",
				modelDescVS: "None",
				modelVer: "000",
				modelParKey: "",
				modelParKeyVS: "None",
				modelEnable: true,
				crtEnable: true,
				delEnable: false
			};
			var mAIWModel = new JSONModel(oAIWModel);
			this.getView().setModel(mAIWModel, "AIWModel");
			sap.ui.getCore().setModel(mAIWModel, "AIWModel");

			if (!this._oTPC) {
				this._oTPC = new TablePersoController({
					table: this.getView().byId("draftRequests"),
					componentName: "ugiaiwui-mdg-aiw-request", //"ugieamui.mdg.eam.objectlink.create",
					persoService: CRPersoService2
				}).activate();
			}

			this.setPriority();

			var M = this.getView().getModel("valueHelp2");
			var aFilter = [new sap.ui.model.Filter("Object", "EQ", "AIW")];
			M.read("/DraftSearchSet", {
				filters: aFilter,
				success: function (r) {
					var aDrafts = r.results;
					var mDrafts = new JSONModel(aDrafts);
					g.getView().byId("draftRequests").setModel(mDrafts);
					g.getView().byId("idDraftTab").setText("Drafts(" + aDrafts.length + ")");
				},
				error: function (err) {}
			});

			var aNotes = [];
			var mNotes = new JSONModel({
				items: aNotes
			});
			this.getView().setModel(mNotes, "notes");

			this.isLam();
		},

		onPersoButtonPressed: function (oEvent) {
			this._oTPC.openDialog();
		},

		onTablePersoRefresh: function () {
			CRPersoService2.resetPersData();
			this._oTPC.refresh();
		},

		isLam: function () {
			var g = this;
			var m = this.getView().getModel("valueHelp");
			var mLamVis = new JSONModel({
				LamEnbl: false
			});
			this.getView().setModel(mLamVis, "mLamVis");

			m.read("/LAM_switchSet('')", {
				success: function (r, a) {
					g.lamSwitch = r.lam_switch;
					if (g.lamSwitch === "X") {
						g.getView().getModel("mLamVis").getData().LamEnbl = true;
						g.getView().getModel("mLamVis").refresh();
					} else {
						g.getView().getModel("mLamVis").getData().LamEnbl = false;
						g.getView().getModel("mLamVis").refresh();
					}
				},
				error: function (err) {}
			});
		},

		onExit: function () {
			this._oTPC.destroyPersoService();
			this._oTPC.destroy();
		},

		/** Internal method
		 *  Called from setChangeReqType.
		 *  Loads the "Priority" select.
		 **/
		setPriority: function () {
			var g = this;
			var m = this.getView().getModel("valueHelp2");
			var aFilters = [];
			m.read("/CRPrioritySet", {
				filters: aFilters,
				success: function (r) {
					if (r.results.length > 0) {
						var rModel = new sap.ui.model.json.JSONModel(r.results);
						g._oView.byId("idPriority").setModel(rModel);
						g._oView.byId("idPriority").bindItems("/", new sap.ui.core.Item({
							key: "{UsmdPriority}",
							text: "{Txtmi}"
						}));
					}
				},
				error: function () {}
			});

		},

		onGenDataChange: function () {
			this.setCrType();
		},

		/**
		 * Called when the Main view has been rendered, and therefore, its HTML is part of the document; used to do post-rendering manipulations of the HTML
		 * @public
		 */
		onAfterRendering: function () {
			// 	// this.readChangeRequestType();
			if (this.getMode() === "display") {
				// 		this.handleApprovalLoad();
				// this.updateCountOnLoad();
			}
		},

		/* =========================================================== */
		/* Internal methods                                                                                                   */
		/* =========================================================== */
		/*
		 * Function to handle 'attachPatternMatched' of main controller
		 * @public
		 */
		_onRouteMatched: function (oEvent, _route, caller) {
			var sParameter;
			if (oEvent) {
				sParameter = oEvent.getParameter("name");
			}

			if (sParameter === "main" || sParameter === "mainDetail" || _route === "main" || _route === "mainDetail") {
				// BOM/ON
				if (this.getMode() === "display") {
					this.itemPath = decodeURIComponent(oEvent.getParameter("arguments").itemPath);
					this.crType = oEvent.getParameter("arguments").crType;
					this.cReqNo = oEvent.getParameter("arguments").cReqNo;
					this.crDesc = decodeURIComponent(oEvent.getParameter("arguments").crDesc);
					this.getView().setModel(this._oComponent.getModel("crCollection"), "crCollection");
					// this.getView().byId("_iconTabBar").setSelectedKey("FLOCTab");
					var oModel = new JSONModel();
					if (this._oComponent.getModel("crCollection")) {
						oModel.setData(this._oComponent.getModel("crCollection").getProperty(this.itemPath));
						this.getView().setModel(oModel, "crDetail");
					}

					if (!this.getRejectDialog()) {
						this.setRejectDialog(sap.ui.xmlfragment("ugiaiwui.mdg.aiw.request.Fragments.Common.RejectionNote", this));
						this.getView().addDependent(this.getRejectDialog());
						this.bindRejectReason();
					}
					var a = this.getView().getModel("i18n").getProperty("ChangeRequest") + ": " + decodeURIComponent(this.crDesc) +
						' (' + this.cReqNo + ')';
					this.getView().byId('crId').setText(a);
					this.decisionDialog = new sap.m.BusyDialog();
					this.getDecision();
				}
				var sObj = {
					titleName: this.getView().getModel("i18n").getProperty("title")
				};
				var oJsonModel = new JSONModel();
				oJsonModel.setData(sObj);
				this.getView().setModel(oJsonModel, "applicationModel");

				var onFirstLoadFlag = sap.ui.getCore().getModel("onFirstLoadFlag").FirstLoadFlag;
				if (this.mode === "display" && onFirstLoadFlag) {
					var AIWListMatModel = new JSONModel([]);
					sap.ui.getCore().setModel(AIWListMatModel, "AIWListMatModel");
					this.getView().setModel(AIWListMatModel, "AIWListMatModel");

					var AIWListEqModel = new JSONModel([]);
					sap.ui.getCore().setModel(AIWListEqModel, "AIWListEqModel");
					this.getView().setModel(AIWListEqModel, "AIWListEqModel");

					var AIWListFLModel = new JSONModel([]);
					sap.ui.getCore().setModel(AIWListFLModel, "AIWListFLModel");
					this.getView().setModel(AIWListFLModel, "AIWListFLModel");

					var AIWListWBSModel = new JSONModel([]);
					sap.ui.getCore().setModel(AIWListWBSModel, "AIWListWBSModel");
					this.getView().setModel(AIWListWBSModel, "AIWListWBSModel");

					var AIWListONModel = new JSONModel([]);
					sap.ui.getCore().setModel(AIWListONModel, "AIWListONModel");
					this.getView().setModel(AIWListONModel, "AIWListONModel");

					this.updateCountOnLoad();
					sap.ui.getCore().setModel(new JSONModel([]), "AIWAPPROVE");

					this.AIWModelDelete = false;
					var oAIWModel = {
						modelName: "",
						modelNameVS: "None",
						modelDesc: "",
						modelDescVS: "None",
						modelVer: "000",
						modelParKey: "",
						modelParKeyVS: "None",
						modelEnable: false,
						crtEnable: false,
						delEnable: false
					};
					var mAIWModel = new JSONModel(oAIWModel);
					this.getView().setModel(mAIWModel, "AIWModel");
					sap.ui.getCore().setModel(mAIWModel, "AIWModel");

					// this.handleApprovalLoad();
					onFirstLoadFlag = false;
					sap.ui.getCore().setModel({
						FirstLoadFlag: onFirstLoadFlag
					}, "onFirstLoadFlag");
				} else {
					var AIWFLOCModel = sap.ui.getCore().getModel(this.oModelAIWFLOC);
					this.getView().getModel(this.oModelAIWFLOC).setData(AIWFLOCModel.getData());
					this.onUpdateTitleCount(this.oModelAIWFLOC, AIWFLOCModel.getData());

					var AIWEQUIModel = sap.ui.getCore().getModel(this.oModelAIWEQUI);
					this.getView().getModel(this.oModelAIWEQUI).setData(AIWEQUIModel.getData());
					this.onUpdateTitleCount(this.oModelAIWEQUI, AIWEQUIModel.getData());

					var AIWMSPTModel = sap.ui.getCore().getModel(this.oModelAIWMSPT);
					this.getView().getModel(this.oModelAIWMSPT).setData(AIWMSPTModel.getData());
					this.onUpdateTitleCount(this.oModelAIWMSPT, AIWMSPTModel.getData());

					var AIWMPMIModel = sap.ui.getCore().getModel(this.oModelAIWMPMI);
					this.getView().getModel(this.oModelAIWMPMI).setData(AIWMPMIModel.getData());
					this.onUpdateTitleCount(this.oModelAIWMPMI, AIWMPMIModel.getData());

					// BOM ON
					var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");
					this.getView().getModel("AIWListMatModel").setData(AIWListMatModel.getData());
					this.updateCount("MaterialBom", AIWListMatModel.getData());

					var AIWListEqModel = sap.ui.getCore().getModel("AIWListEqModel");
					this.getView().getModel("AIWListEqModel").setData(AIWListEqModel.getData());
					this.updateCount("EquipmentBom", AIWListEqModel.getData());

					var AIWListFLModel = sap.ui.getCore().getModel("AIWListFLModel");
					this.getView().getModel("AIWListFLModel").setData(AIWListFLModel.getData());
					this.updateCount("FLBom", AIWListFLModel.getData());

					var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
					this.getView().getModel("AIWListWBSModel").setData(AIWListWBSModel.getData());
					this.updateCount("WbsBom", AIWListWBSModel.getData());

					var AIWListONModel = sap.ui.getCore().getModel("AIWListONModel");
					this.getView().getModel("AIWListONModel").setData(AIWListONModel.getData());
					this.updateCount("ObjNet", AIWListONModel.getData());
				}

				var EnableModel = this.getView().getModel("EnableModel");
				var EnableData = EnableModel.getData();
				if (this.getMode() === "request") {
					EnableData.actionEnable = true;
					EnableData.tableType = "MultiSelect";
					EnableData.submitcancelEnable = true;
					EnableData.approverejectEnable = false;
					EnableData.notes = false;
					EnableData.attach = false;
					this.enableFields();
					if (this.getState() === "MOCR") {
						var refresh = sap.ui.getCore().getModel("mocrRefresh");
						var refProp;
						if (refresh) {
							refProp = refresh.getProperty("/refresh");
						}
						if (refresh === undefined) {
							var oModel = new JSONModel({
								refresh: true
							});
							sap.ui.getCore().setModel(oModel, "mocrRefresh");
						}
						var prop = sap.ui.getCore().getModel("mocrRefresh").getProperty("/refresh");
						if (caller !== "clear" && prop) {
							this.readBufferData();
						}
					}
				} else {
					EnableData.actionEnable = false;
					EnableData.tableType = "None";
					EnableData.submitcancelEnable = false;
					EnableData.approverejectEnable = true;
					EnableData.notes = true;
					EnableData.attach = true;
					EnableData.isEnable = true;
					this.disableFields();
				}

				EnableModel.setData(EnableData);

				this.getView().byId("idMessagePopover").setText("0");
				this.getView().byId("idMessagePopover").setEnabled(false);

				// TL | WC | OL
				var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel");
				this.getView().getModel("AIWListWCModel").setData(AIWListWCModel.getData());
				this.updateCount("workCenter", AIWListWCModel.getData());

				var AIWListGTLModel = sap.ui.getCore().getModel("AIWListGTLModel");
				this.getView().getModel("AIWListGTLModel").setData(AIWListGTLModel.getData());
				this.updateCount("generalTL", AIWListGTLModel.getData());

				if (this.action === "createGTL") {
					var AIWListGTLData = AIWListGTLModel.getData();
					var GTLHeaderModel = this.getView().getModel("GTLHeaderModel");
					var gtlHeader = [];
					for (var i = 0; i < AIWListGTLData.length; i++) {
						if (this.gtlPath === i) {
							//AIWListGTLData[i].header[0] = (header);
							gtlHeader.push(AIWListGTLData[i].header);
						}
					}
					GTLHeaderModel.setData(gtlHeader);
					this.getView().setModel(GTLHeaderModel, "GTLHeaderModel");
				}

				var AIWListETLModel = sap.ui.getCore().getModel("AIWListETLModel");
				this.getView().getModel("AIWListETLModel").setData(AIWListETLModel.getData());
				this.updateCount("equiTL", AIWListETLModel.getData());
				if (this.action === "createETL") {
					var AIWListETLData = AIWListETLModel.getData();
					var ETLHeaderModel = this.getView().getModel("ETLHeaderModel");
					var etlHeader = [];
					for (var i = 0; i < AIWListETLData.length; i++) {
						if (this.etlPath === i) {
							etlHeader.push(AIWListETLData[i].header);
						}
					}
					ETLHeaderModel.setData(etlHeader);
					this.getView().setModel(ETLHeaderModel, "ETLHeaderModel");
				}

				var AIWListFTLModel = sap.ui.getCore().getModel("AIWListFTLModel");
				this.getView().getModel("AIWListFTLModel").setData(AIWListFTLModel.getData());
				this.updateCount("flocTL", AIWListFTLModel.getData());
				if (this.action === "createFTL") {
					var AIWListFTLData = AIWListFTLModel.getData();
					var FTLHeaderModel = this.getView().getModel("FTLHeaderModel");
					var ftlHeader = [];
					for (var i = 0; i < AIWListFTLData.length; i++) {
						if (this.ftlPath === i) {
							ftlHeader.push(AIWListFTLData[i].header);
						}
					}

					FTLHeaderModel.setData(ftlHeader);
					this.getView().setModel(FTLHeaderModel, "FTLHeaderModel");
				}

				var AIWListOLModel = sap.ui.getCore().getModel("AIWListOLModel");
				this.getView().getModel("AIWListOLModel").setData(AIWListOLModel.getData());
				this.updateCount("objLink", AIWListOLModel.getData());

				var flocImportFlag = sap.ui.getCore().getModel("flocImportFlag");
				if (flocImportFlag) {
					flocImportFlag = false;
					sap.ui.getCore().setModel(flocImportFlag, "flocImportFlag");
					this.readAIWModel("R");
				}

				if (this._oComponent.getComponentData().startupParameters.hasOwnProperty("caller")) { //&& !sap.ui.getCore().getModel("MatNavModel")
					if (this._oComponent.getComponentData().startupParameters.caller[0] === "Material" && !sap.ui.getCore().getModel("MatNavModel")) {
						this.bufferRead(this.bomPath, this.uid, this.fragmentName, this.case);
					}
					if (this._oComponent.getComponentData().startupParameters.caller[0] === "BOMCH" && !sap.ui.getCore().getModel("BOMCHNavModel")) {
						this.navigateToBom();
					}
				}
				// if (this._oComponent.getComponentData().startupParameters.hasOwnProperty("caller") && !sap.ui.getCore().getModel("BOMCHNavModel")) { //this._oComponent.getComponentData().startupParameters.caller[0] === "BOMCH"

				// }

			} else {
				return;
			}

		},

		navigateToBom: function () {
			var g = this;
			var AIWFLOCModel = sap.ui.getCore().getModel("AIWFLOCBackup").getData();
			var atempFL = $.map(AIWFLOCModel, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempFL), "AIWFLOC");
			var AIWEQUIModel = sap.ui.getCore().getModel("AIWEQUIBackup").getData();
			var atempEQ = $.map(AIWEQUIModel, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempEQ), "AIWEQUI");
			var AIWMSPTModel = sap.ui.getCore().getModel("AIWMSPTBackup").getData();
			var atempMS = $.map(AIWMSPTModel, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempMS), "AIWMSPT");
			var AIWMPMIModel = sap.ui.getCore().getModel("AIWMPMIBackup").getData();
			var atempMP = $.map(AIWMPMIModel, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempMP), "AIWMPMI");
			var AIWListMatData = sap.ui.getCore().getModel("AIWListMatModelBackup").getData();
			var atempMB = $.map(AIWListMatData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempMB), "AIWListMatModel");
			var AIWListEqData = sap.ui.getCore().getModel("AIWListEqModelBackup").getData();
			var atempEB = $.map(AIWListEqData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempEB), "AIWListEqModel");
			var AIWListFLData = sap.ui.getCore().getModel("AIWListFLModelBackup").getData();
			var atempFB = $.map(AIWListFLData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempFB), "AIWListFLModel");
			var AIWListWBSData = sap.ui.getCore().getModel("AIWListWBSModelBackup").getData();
			var atempWB = $.map(AIWListWBSData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempWB), "AIWListWBSModel");
			var AIWListONData = sap.ui.getCore().getModel("AIWListONModelBackup").getData();
			var atempON = $.map(AIWListONData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempON), "AIWListONModel");
			var AIWListWCData = sap.ui.getCore().getModel("AIWListWCModelBackup").getData();
			var atempWC = $.map(AIWListWCData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempWC), "AIWListWCModel");
			var AIWListGTLData = sap.ui.getCore().getModel("AIWListGTLModelBackup").getData();
			var atempGTL = $.map(AIWListGTLData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempGTL), "AIWListGTLModel");
			var AIWListETLData = sap.ui.getCore().getModel("AIWListETLModelBackup").getData();
			var atempETL = $.map(AIWListGTLData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempETL), "AIWListETLModel");
			var AIWListFTLData = sap.ui.getCore().getModel("AIWListFTLModelBackup").getData();
			var atempFTL = $.map(AIWListFTLData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempFTL), "AIWListFTLModel");
			var AIWListOLData = sap.ui.getCore().getModel("AIWListOLModelBackup").getData();
			var atempOL = $.map(AIWListFTLData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempOL), "AIWListOLModel");
			var dataOriginMOPdata = sap.ui.getCore().getModel("dataOriginMOPBackup").getData()
			var atempDOI = $.map(dataOriginMOPdata, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempDOI[0]), "dataOriginMOP");
			var EnableModeldata = sap.ui.getCore().getModel("EnableModelBackup").getData();
			var atempEnableModel = $.map(EnableModeldata, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempEnableModel[0]), "EnableModel");
			g.getView().setModel(new JSONModel(atempEnableModel[0]), "EnableModel");
			var AIWModeldata = sap.ui.getCore().getModel("AIWModelBackup").getData();
			var atempAIWModel = $.map(AIWModeldata, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempAIWModel[0]), "AIWModel");
			g.getView().setModel(new JSONModel(atempAIWModel[0]), "AIWModel");
			var ainMOPdata = sap.ui.getCore().getModel("ainMOPBackup").getData();
			var atempainMOP = $.map(ainMOPdata, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempainMOP), "ainMOP");
			var aCrDetails = sap.ui.getCore().getModel("tempCrTypeModelBackup").getData();
			var atempCrDetails = $.map(aCrDetails, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempCrDetails[0]), "tempCrTypeModel");
			g.crType = atempCrDetails[0].crtype;
			g.getView().byId("Description").setValue(atempCrDetails[0].desc);
			g.getView().byId("idPriority").setSelectedKey(atempCrDetails[0].priority);
			g.getView().byId("idDueDate").setDateValue(atempCrDetails[0].duedate);

			g.getRouter().navTo("detail", {
				FragmentName: g.fragmentName,
				itemPath: g.bomPath,
				e: " ",
				p: " ",
				u: " ",
				cr: " ",
				w: " ",
				mode: g.getMode(),
				mat: false,
				uid: g.uid
			});

			sap.ui.getCore().setModel("X", "BOMCHNavModel");
		},

		bufferRead: function (bomPath, uid, fragName, matCase) {
			var g = this;

			var AIWFLOCModel = sap.ui.getCore().getModel("AIWFLOCBackup").getData();
			var atempFL = $.map(AIWFLOCModel, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempFL), "AIWFLOC");
			var AIWEQUIModel = sap.ui.getCore().getModel("AIWEQUIBackup").getData();
			var atempEQ = $.map(AIWEQUIModel, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempEQ), "AIWEQUI");
			var AIWMSPTModel = sap.ui.getCore().getModel("AIWMSPTBackup").getData();
			var atempMS = $.map(AIWMSPTModel, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempMS), "AIWMSPT");
			var AIWMPMIModel = sap.ui.getCore().getModel("AIWMPMIBackup").getData();
			var atempMP = $.map(AIWMPMIModel, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempMP), "AIWMPMI");
			var AIWListMatData = sap.ui.getCore().getModel("AIWListMatModelBackup").getData();
			var atempMB = $.map(AIWListMatData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempMB), "AIWListMatModel");
			var AIWListEqData = sap.ui.getCore().getModel("AIWListEqModelBackup").getData();
			var atempEB = $.map(AIWListEqData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempEB), "AIWListEqModel");
			var AIWListFLData = sap.ui.getCore().getModel("AIWListFLModelBackup").getData();
			var atempFB = $.map(AIWListFLData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempFB), "AIWListFLModel");
			var AIWListWBSData = sap.ui.getCore().getModel("AIWListWBSModelBackup").getData();
			var atempWB = $.map(AIWListWBSData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempWB), "AIWListWBSModel");
			var AIWListONData = sap.ui.getCore().getModel("AIWListONModelBackup").getData();
			var atempON = $.map(AIWListONData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempON), "AIWListONModel");
			var AIWListWCData = sap.ui.getCore().getModel("AIWListWCModelBackup").getData();
			var atempWC = $.map(AIWListWCData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempWC), "AIWListWCModel");
			var AIWListGTLData = sap.ui.getCore().getModel("AIWListGTLModelBackup").getData();
			var atempGTL = $.map(AIWListGTLData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempGTL), "AIWListGTLModel");
			var AIWListETLData = sap.ui.getCore().getModel("AIWListETLModelBackup").getData();
			var atempETL = $.map(AIWListGTLData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempETL), "AIWListETLModel");
			var AIWListFTLData = sap.ui.getCore().getModel("AIWListFTLModelBackup").getData();
			var atempFTL = $.map(AIWListFTLData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempFTL), "AIWListFTLModel");
			var AIWListOLData = sap.ui.getCore().getModel("AIWListOLModelBackup").getData();
			var atempOL = $.map(AIWListFTLData, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempOL), "AIWListOLModel");
			var dataOriginMOPdata = sap.ui.getCore().getModel("dataOriginMOPBackup").getData()
			var atempDOI = $.map(dataOriginMOPdata, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempDOI[0]), "dataOriginMOP");
			var EnableModeldata = sap.ui.getCore().getModel("EnableModelBackup").getData();
			var atempEnableModel = $.map(EnableModeldata, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempEnableModel[0]), "EnableModel");
			g.getView().setModel(new JSONModel(atempEnableModel[0]), "EnableModel");
			var AIWModeldata = sap.ui.getCore().getModel("AIWModelBackup").getData();
			var atempAIWModel = $.map(AIWModeldata, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempAIWModel[0]), "AIWModel");
			g.getView().setModel(new JSONModel(atempAIWModel[0]), "AIWModel");
			var ainMOPdata = sap.ui.getCore().getModel("ainMOPBackup").getData();
			var atempainMOP = $.map(ainMOPdata, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempainMOP), "ainMOP");
			var aCrDetails = sap.ui.getCore().getModel("tempCrTypeModelBackup").getData();
			var atempCrDetails = $.map(aCrDetails, function (obj) {
				return $.extend(true, {}, obj);
			});
			sap.ui.getCore().setModel(new JSONModel(atempCrDetails[0]), "tempCrTypeModel");
			g.crType = atempCrDetails[0].crtype;
			g.getView().byId("Description").setValue(atempCrDetails[0].desc);
			g.getView().byId("idPriority").setSelectedKey(atempCrDetails[0].priority);
			g.getView().byId("idDueDate").setDateValue(atempCrDetails[0].duedate);

			g.getRouter().navTo("detail", {
				FragmentName: fragName, //g.fragmentName, //"CreateMaterialBom",
				itemPath: bomPath, //g.bomPath,
				e: " ",
				p: " ",
				u: " ",
				cr: " ",
				w: " ",
				mode: g.getMode(),
				mat: true,
				uid: uid,
				case: matCase
			});

			sap.ui.getCore().setModel("X", "MatNavModel");

			// var m = this.getView().getModel();
			// var url = "/ChangeRequestSet";
			// var aFilter = [new sap.ui.model.Filter("MbomBuffer", "EQ", true)];
			// var aExpand = ["EqClass", "EqAddr", "EqAddrI", "EqEmail", "EqFax", "EqMltxt", "EqPermt", "Equipment", "EqLAM", "EqLAMCH", "EqPRT",
			// 	"EqPRTNR", "EqStock", "EqTel", "EqUrl", "EqVal", "Equi_DOI", "AINHeaderinfo", "AINAttachments", "AINCharacteristics",
			// 	"AINAnnounce", "EqDFPS", "FLClass", "FLAddr", "FLAddrI", "FLEmail", "FLFax", "FLMltxt", "FLPermit", "FuncLoc", "FLLAM", "FLLAMCH",
			// 	"FLPrtnr", "FLTele", "FLUrl", "FLVal", "FLALTLBEL", "MSClass", "MSLAM", "MSPoint", "MSVal", "DataOrigin_N", "MPCycle", "MPItem",
			// 	"MPLAM", "MPLAN", "MPOBList", "ClassMpl", "ValuaMpl", "MRBHeader", "MRBItem", "MRBSBIT"
			// ];
			// m.read(url, {
			// 	filters: aFilter,
			// 	urlParameters: {
			// 		"$expand": aExpand
			// 	},
			// 	success: function (r) {
			// 		g.getView().byId("Description").setValue(r.results[0].CrDescription);
			// 		g.setCrType(r.results[0].ChangeRequestType);
			// 		var AIWListMatData = sap.ui.getCore().getModel("AIWListMatModel").getData();
			// 		var aMbomHdr = r.results[0].MRBHeader.results;
			// 		var aMbomItem = r.results[0].MRBItem.results;
			// 		var aMbomSitem = r.results[0].MRBSBIT.results;
			// 		if (aMbomHdr.length > 0) {
			// 			for (var i = 0; i < aMbomHdr.length; i++) {
			// 				var h = aMbomHdr[i];
			// 				var mObj = {
			// 					Matnr: h.Matnr,
			// 					Werks: h.Werks,
			// 					Stlan: h.Stlan,
			// 					Stalt: h.Stalt,
			// 					Bomstatus: h.Bomstatus,
			// 					Lngtxt: h.Txtmi,
			// 					Validfrom: g.getDateFormat(h.Validfrom),
			// 					BaseQty: h.Baseqty,
			// 					BaseUom: h.Baseuom,
			// 					Validtoda: g.getDateFormat(h.Validtoda),
			// 					MatDesc: h.Maktx,
			// 					WerksDesc: h.Plantname,
			// 					StlanDesc: h.Bomusagetxt,
			// 					BomstatusText: h.Bomstatustxt,
			// 					matEnable: false,
			// 					plantEnable: false,
			// 					usageEnable: false,
			// 					altbomEnable: false,
			// 					addItemEnable: true,
			// 					matValueState: "None",
			// 					plantValueState: "None",
			// 					usageValueState: "None",
			// 					statusValueState: "None",
			// 					BaseQtyValueState: "None",
			// 					// bomType: "Change",
			// 					// modeFlag: "Delete",
			// 					matItem: [],
			// 					matSubItem: []
			// 				};

			// 				for (var j = 0; j < aMbomItem.length; j++) {
			// 					if (aMbomItem[j].Matnr === mObj.Matnr && aMbomItem[j].Werks === mObj.Werks && aMbomItem[j].Stlan === mObj.Stlan) {
			// 						aMbomItem[j].itmCatState = "None";
			// 						aMbomItem[j].itmCompState = "None";
			// 						aMbomItem[j].itmQtyState = "None";
			// 						aMbomItem[j].itmUOMState = "None";
			// 						aMbomItem[j].itmCatEnable = false;
			// 						aMbomItem[j].itmQtyEnable = true;
			// 						aMbomItem[j].Costgrelv = aMbomItem[j].Costgrelv === "" ? "0" : aMbomItem[j].Costgrelv;
			// 						aMbomItem[j].Rvrel = aMbomItem[j].Rvrel === "" ? "0" : aMbomItem[j].Rvrel;
			// 						mObj.matItem.push(aMbomItem[j]);
			// 					}
			// 				}

			// 				for (var k = 0; k < aMbomSitem.length; k++) {
			// 					if (aMbomSitem[k].Matnr === mObj.Matnr && aMbomSitem[k].Werks === mObj.Werks && aMbomSitem[k].Stlan ===
			// 						mObj.Stlan) {
			// 						aMbomSitem[k].intPointEnable = false;
			// 						aMbomSitem[k].subQtyEnable = false;
			// 						aMbomSitem[k].subTextEnable = false;
			// 						mObj.matSubItem.push(aMbomSitem[k]);
			// 					}
			// 				}

			// 				AIWListMatData.push(mObj);
			// 				sap.ui.getCore().getModel("AIWListMatModel").setSizeLimit(AIWListMatData.length);
			// 				sap.ui.getCore().getModel("AIWListMatModel").refresh();
			// 			}
			// 		}
			// 	},
			// 	error: function (d) {}
			// });
		},

		/*
		 * Called from onInit. Function to initialize models & views of EQ, FL, MSPT & MPMI
		 * @public
		 */
		onFirstObjectInit: function () {
			this._oView = this.getView();
			// this._oComponent = sap.ui.component(sap.ui.core.Component.getOwnerIdFor(this.getView()));
			// this.mode = this._oComponent.getComponentData().startupParameters.mode[0]; 
			// this.mode = "display";

			this.oModelAIWFLOC = "AIWFLOC";
			this.oModelAIWEQUI = "AIWEQUI";
			this.oModelAIWMSPT = "AIWMSPT";
			this.oModelAIWMPMI = "AIWMPMI";
			this.getView().setModel(new JSONModel([]), this.oModelAIWFLOC);
			this.getView().setModel(new JSONModel([]), this.oModelAIWEQUI);
			this.getView().setModel(new JSONModel([]), this.oModelAIWMSPT);
			this.getView().setModel(new JSONModel([]), this.oModelAIWMPMI);
			sap.ui.getCore().setModel(new JSONModel([]), this.oModelAIWFLOC);
			sap.ui.getCore().setModel(new JSONModel([]), this.oModelAIWEQUI);
			sap.ui.getCore().setModel(new JSONModel([]), this.oModelAIWMSPT);
			sap.ui.getCore().setModel(new JSONModel([]), this.oModelAIWMPMI);
			sap.ui.getCore().setModel(new JSONModel([]), "AIWAPPROVE");
			sap.ui.getCore().setModel(new JSONModel([]), "onFirstLoadFlag");
			sap.ui.getCore().setModel(new JSONModel([]), "flocAddressView");
			sap.ui.getCore().setModel(new JSONModel([]), "equiAddressView");
			sap.ui.getCore().setModel(new JSONModel([]), "SUP_FLOC_DATA");
			sap.ui.getCore().setModel(new JSONModel([]), "SUP_EQUI_DATA");
			this.getView().setModel(new JSONModel([]), "copyModel");

			// var serviceUrl = this._oComponent.getModel().sServiceUrl;
			// var oModel = new sap.ui.model.odata.v2.ODataModel(serviceUrl, {
			// 	json: true,
			// 	useBatch: false,
			// 	defaultCountMode: sap.ui.model.odata.CountMode.None
			// });
			// var vhServiceUrl = this._oComponent.getModel("NewModel").sServiceUrl;
			// var vhModel = new sap.ui.model.odata.v2.ODataModel(vhServiceUrl, {
			// 	json: true,
			// 	useBatch: false,
			// 	defaultCountMode: sap.ui.model.odata.CountMode.None
			// });
			// var approveServiceUrl = this._oComponent.getModel("ApprovalModel").sServiceUrl;
			// var approveModel = new sap.ui.model.odata.v2.ODataModel(approveServiceUrl, {
			// 	json: true,
			// 	useBatch: false,
			// 	defaultCountMode: sap.ui.model.odata.CountMode.None
			// });

			// oModel.attachRequestCompleted(this.onTableUpdateFinished, this);
			// this.getView().setModel(oModel);
			// this.getView().setModel(vhModel, "valueHelp");
			// this.getView().setModel(approveModel, "ApprovalModel");

			this.resultArr = []; //p2
			this.submitBtn = false;

			// this.readMaintPlanCat();
			sap.ui.getCore().setModel(new JSONModel([]), "itemCycleModel");
			this.readEAMCRType();

			this.getView().setModel(new JSONModel([]), "ApproveModel");
			this.handleApproveModel(true, "MultiSelect", true, false, true, true);

			var sAttachRequest = {
				attachFlocFlag: true,
				attachEquiFlag: true,
				attachMsptFlag: true,
				attachMpmiFlag: true,
			};
			sap.ui.getCore().setModel(new JSONModel(sAttachRequest), "ClassAttachRequest");

			var oMainData = {
				deleteFLOC: false,
				deleteEQUI: false,
				deleteMSPT: false,
				deleteMPMI: false
			};
			this.getView().setModel(new JSONModel(oMainData), "mainView");

			this.configureMessagePopover();
			// this.getRouter().getRoute("main").attachPatternMatched(this._onRouteMatched, this);
		},
		/*
		 * Called from onInit. Function to initialize models & views of BOM & ON
		 * @public
		 */
		onNextObjectInit: function () {
			var AIWListMatModel = new JSONModel([]);
			sap.ui.getCore().setModel(AIWListMatModel, "AIWListMatModel");
			this.getView().setModel(AIWListMatModel, "AIWListMatModel");

			var AIWListEqModel = new JSONModel([]);
			sap.ui.getCore().setModel(AIWListEqModel, "AIWListEqModel");
			this.getView().setModel(AIWListEqModel, "AIWListEqModel");

			var AIWListFLModel = new JSONModel([]);
			sap.ui.getCore().setModel(AIWListFLModel, "AIWListFLModel");
			this.getView().setModel(AIWListFLModel, "AIWListFLModel");

			var AIWListWBSModel = new JSONModel([]);
			sap.ui.getCore().setModel(AIWListWBSModel, "AIWListWBSModel");
			this.getView().setModel(AIWListWBSModel, "AIWListWBSModel");

			var AIWListONModel = new JSONModel([]);
			sap.ui.getCore().setModel(AIWListONModel, "AIWListONModel");
			this.getView().setModel(AIWListONModel, "AIWListONModel");

			this.BusyDialog = new BusyDialog();
			// this.mode = "Create";
			this.readSystem();
			// var apprServiceUrl = this._oComponent.getModel("ApprovalModel").sServiceUrl;
			// var apprModel = new sap.ui.model.odata.v2.ODataModel(apprServiceUrl, {
			// 	json: true,
			// 	useBatch: false,
			// 	defaultCountMode: sap.ui.model.odata.CountMode.None
			// });
			// this.getView().setModel(apprModel, "ApprModel");
			var BusySetData = {
				AiwTblBusy: false
			};
			var BusyModel = new JSONModel();
			BusyModel.setData(BusySetData);
			this.getView().setModel(BusyModel, "BusyModel");
			// Declaring model to handle refresh of SOP screen
			var refreshModel = new sap.ui.model.json.JSONModel({
				"refresh": true
			});
			sap.ui.getCore().setModel(refreshModel, "refreshModel");

			var onFirstLoadFlag = true;
			sap.ui.getCore().setModel({
				FirstLoadFlag: onFirstLoadFlag
			}, "onFirstLoadFlag");

			// this.getBomUsageItemStatusFlags();

		},
		/*
		 * Called from onInit. Function to initialize models & views of WC, TL and OL
		 * @public
		 */
		onLastObjectInit: function (draftFlag) { //draftFlag
			// this._Common = new Common();
			this._oView = this.getView();
			this.BusyDialog = new BusyDialog();

			// var serviceUrl = this._oComponent.getModel().sServiceUrl;
			// var oModel = new sap.ui.model.odata.v2.ODataModel(serviceUrl, {
			// 	json: true,
			// 	useBatch: false,
			// 	defaultCountMode: sap.ui.model.odata.CountMode.None
			// });
			// var vhServiceUrl = this._oComponent.getModel("NewModel").sServiceUrl;
			// var vhModel = new sap.ui.model.odata.v2.ODataModel(vhServiceUrl, {
			// 	json: true,
			// 	useBatch: false,
			// 	defaultCountMode: sap.ui.model.odata.CountMode.None
			// });
			// this.getView().setModel(vhModel, "valueHelp");
			// this.getView().setModel(oModel);
			// sap.ui.getCore().setModel(oModel, "main");
			// sap.ui.getCore().setModel(vhModel, "valueHelp");

			// var apprServiceUrl = this._oComponent.getModel("ApprovalModel").sServiceUrl;
			// var apprModel = new sap.ui.model.odata.v2.ODataModel(apprServiceUrl, {
			// 	json: true,
			// 	useBatch: false,
			// 	defaultCountMode: sap.ui.model.odata.CountMode.None
			// });
			// this.getView().setModel(apprModel, "ApprModel");

			/*this.tlBasic = {
				grp: "",
				validFrm: formatter.currentDate(),
				addGTLCounter: false
			};*/

			// for Work Center
			var AIWListWCModel = new JSONModel([]);
			sap.ui.getCore().setModel(AIWListWCModel, "AIWListWCModel");
			this.getView().setModel(AIWListWCModel, "AIWListWCModel");

			// For Task List
			var aCounterModel = new JSONModel([]);
			aCounterModel.getData().addGTLCounter = false;
			aCounterModel.getData().addETLCounter = false;
			aCounterModel.getData().addFTLCounter = false;
			this.getView().setModel(aCounterModel, "aCounterModel");

			var GTLHeaderModel = new JSONModel([]);
			this.getView().setModel(GTLHeaderModel, "GTLHeaderModel");

			var ETLHeaderModel = new JSONModel([]);
			this.getView().setModel(ETLHeaderModel, "ETLHeaderModel");

			var FTLHeaderModel = new JSONModel([]);
			this.getView().setModel(FTLHeaderModel, "FTLHeaderModel");

			var AIWListGTLModel = new JSONModel([]);
			AIWListGTLModel.getData().addCounter = false;
			sap.ui.getCore().setModel(AIWListGTLModel, "AIWListGTLModel");
			this.getView().setModel(AIWListGTLModel, "AIWListGTLModel");

			var AIWListETLModel = new JSONModel([]);
			AIWListETLModel.getData().addCounter = false;
			sap.ui.getCore().setModel(AIWListETLModel, "AIWListETLModel");
			this.getView().setModel(AIWListETLModel, "AIWListETLModel");

			var AIWListFTLModel = new JSONModel([]);
			AIWListFTLModel.getData().addCounter = false;
			sap.ui.getCore().setModel(AIWListFTLModel, "AIWListFTLModel");
			this.getView().setModel(AIWListFTLModel, "AIWListFTLModel");

			// for Object Link
			var AIWListOLModel = new JSONModel([]);
			sap.ui.getCore().setModel(AIWListOLModel, "AIWListOLModel");
			this.getView().setModel(AIWListOLModel, "AIWListOLModel");

			if (!draftFlag) {
				this._wcFragment = sap.ui.xmlfragment(this.getView().getId(), "ugiaiwui.mdg.aiw.request.DomainParts.WC.WorkCenter", this);
				this.getView().addDependent(this._wcFragment);

				this._genTLFragment = sap.ui.xmlfragment(this.getView().getId(), "ugiaiwui.mdg.aiw.request.DomainParts.TL.GeneralTaskList", this);
				this.getView().addDependent(this._genTLFragment);

				this._eqTLFragment = sap.ui.xmlfragment(this.getView().getId(), "ugiaiwui.mdg.aiw.request.DomainParts.TL.EquipmentTaskList",
					this);
				this.getView().addDependent(this._eqTLFragment);

				this._flocTLFragment = sap.ui.xmlfragment(this.getView().getId(), "ugiaiwui.mdg.aiw.request.DomainParts.TL.FLOCTaskList", this);
				this.getView().addDependent(this._flocTLFragment);

				this._olFragment = sap.ui.xmlfragment(this.getView().getId(), "ugiaiwui.mdg.aiw.request.DomainParts.OL.ObjectLink", this);
				this.getView().addDependent(this._olFragment);

				// this.readEAMCRType();
			}

			var EnableWCData = {
				"deleteWC": false,
				"deleteOL": false,
				"deleteGTL": false,
				"deleteETL": false,
				"deleteFTL": false
			};
			var EnableDELModel = new JSONModel(EnableWCData);
			this.getView().setModel(EnableDELModel, "EnableDELModel");
		},
		/*
		 * Function to adjust Screen elements
		 * @public
		 */
		adjustScreenElements: function () {
			if (this.getMode() === "display") {
				this.getView().getModel("mode").setProperty("/isChangeRequest", false);
				this.getView().getModel("mode").setProperty("/isHeader", true);
				this.getView().byId("_iconTabBar").setSelectedKey("FLOCTab");
			} else {
				this.getView().getModel("mode").setProperty("/isChangeRequest", true);
				this.getView().getModel("mode").setProperty("/isHeader", false);
				this.getView().byId("_iconTabBar").setSelectedKey("general");
			}
		},
		/*
		 * Function to read Change request type list and display in a dialog
		 * @public
		 */
		readChangeRequestType: function () {
			var sPath = "/AIWCRTypeSet";
			var g = this;
			if (this.getMode() !== "display") {
				var M = this.getView().getModel("valueHelp");
				M.read(sPath, {
					success: function (h, E) {
						if (h.results.length > 0) {
							g.crTypeResults = h.results;
							var l = new sap.m.List({
								mode: "SingleSelectMaster",
								itemPress: function (e) {
									B.close();
									var item = e.getParameters().listItem.getProperty("title");
									g.setCrType(item);
									g.fetchReason();
								}
							});
							var B = new sap.m.Dialog({
								title: g.getView().getModel("i18n").getProperty("crTypeTitle"),
								content: [l],
								leftButton: new sap.m.Button({
									text: g.getView().getModel("i18n").getProperty("cancel"),
									type: sap.m.ButtonType.Up,
									press: function () {
										B.close();
										window.history.back();
									}
								})
							});
							var I = new sap.m.StandardListItem({
								title: "{CRType}",
								description: "{Description}",
								active: true,
								icon: "sap-icon://request",
								type: "Active"

							});
							var e = new sap.ui.model.json.JSONModel();
							e.setData(h);
							l.setModel(e);
							// l.setGrowingThreshold(h.results.length);
							l.bindAggregation("items", "/results", I);

							B.open();
						} else {
							var bCompact = !!g.getView().$().closest(".sapUiSizeCompact").length;
							sap.m.MessageBox.information(
								g.getView().getModel("i18n").getProperty("CR_CHECK"), {
									actions: [sap.m.MessageBox.Action.OK],
									styleClass: bCompact ? "sapUiSizeCompact" : "",
									onClose: function (sAction) {
										window.history.back();
									}
								}
							);
						}
					}
				});
			}
		},
		/*
		 * Function to read DOI list of fields
		 * @param {string} entity - Object name (EQUI/FUNCLOC)
		 * @public
		 */
		readDOIList: function (entity) {
			var oModel = this.getView().getModel("valueHelp2");
			var g = this;
			var oFilter = [new sap.ui.model.Filter("Entity", "EQ", entity)];
			oModel.read("/DOIListSet", {
				filters: oFilter,
				success: function (r) {
					var rModel = new sap.ui.model.json.JSONModel();
					var results = r.results;
					var arr = [];
					for (var s = 0; s < results.length; s++) {
						var obj = new Object();
						var value = r.results[s].Property;
						obj["SupFlVal"] = "";
						obj["instLoc"] = false;
						obj["maintenance"] = false;
						obj["Label"] = r.results[s].Label;
						obj["property"] = r.results[s].Property;
						obj["currentVal"] = "";
						// obj["currentValDesc"] = "";
						obj["doiIcon"] = true;
						obj[r.results[s].Property] = "";
						if (r.results[s].Property === "Maintplant") {
							obj["locEnable"] = false;
							obj["maintEnable"] = false;
						} else {
							obj["locEnable"] = true;
							obj["maintEnable"] = true;
						}
						arr.push(obj);
					}
					if (entity === "EQUI") {
						g.DOIarrayEQ = arr;
					}
					if (entity === "FUNCLOC") {
						g.DOIarrayFL = arr;
					}

					// rModel.setData(arr);
					// g.getView().setModel(rModel, "dataOrigin");
				},
				error: function (err) {

				}
			});
		},
		/*
		 * Function to read Default values
		 * @public
		 */
		AltKeyDerivation: function () {
			var sPath = "/DefaultValueSet";
			var g = this;
			var M = this.getView().getModel("valueHelp");
			M.read(sPath, {
				success: function (h, E) {
					g.AltLblDerv = h.results[0].AltLabel;
					g.AltKeyDerv = h.results[0].Alkey;
					g.AltKeyDescDerv = h.results[0].Altxt;
					g.StrcIndDerv = h.results[0].StrucIndicator;
					g.StrcIndDescDerv = h.results[0].StrucIndicatorDesc;
					g.EditMaskDerv = h.results[0].Editm;
					g.HierDerv = h.results[0].Stufm;
				}
			});
		},
		/*
		 * Function to set State
		 * @param {string} f
		 * @public
		 */
		setState: function (f) {
			this.state = f;
		},
		/*
		 * Function to get State
		 * @public
		 */
		getState: function () {
			return this.state;
		},
		/*
		 * Function to set Hierarchy
		 * @param {string} f
		 * @public
		 */
		setHierarchy: function (f) {
			this.isHierarchy = f;
		},
		/*
		 * Function to get Hierarchy
		 * @public
		 */
		getHierarchy: function () {
			return this.isHierarchy;
		},
		/*
		 * Function to read task list Header default data
		 * @param {string} sFrom - id of field triggering the function
		 * @param {string} index - row index
		 * @param {array} hData - TL data list
		 * @public
		 */
		readHdrDefaults: function (sFrom, index, hData) {
			var g = this;
			var _model = this.getView().getModel();
			var defaults = [];
			var q = "/ProfileDataSet";
			var oFilter = [new sap.ui.model.Filter("Profidnetz", "EQ", '')];
			_model.read(q, {
				filters: oFilter,
				success: function (r) {
					defaults = r.results[0];
					if (defaults) {
						if (g.action.indexOf("GTL") > 0) {
							var GTLHeaderModel = g.getView().getModel("GTLHeaderModel");
							var gtlData = GTLHeaderModel.getData();
							if (sFrom === "planningPlant") {
								gtlData[0][index].tlusg = defaults.Verwe;
								gtlData[0][index].Statu = defaults.Statu;
								gtlData[0][index].usageDesc = defaults.Vtext;
								gtlData[0][index].statusDesc = defaults.Sttext;
							}
							if (sFrom === "status") {
								gtlData[0][index].tlusg = defaults.Verwe;
								gtlData[0][index].usageDesc = defaults.Vtext;
							}
							if (sFrom === "usage") {
								gtlData[0][index].Statu = defaults.Statu;
								gtlData[0][index].statusDesc = defaults.Sttext;
							}
							if (sFrom === "tlDesc") {
								gtlData[0][index].tlusg = defaults.Verwe;
								gtlData[0][index].Statu = defaults.Statu;
								gtlData[0][index].usageDesc = defaults.Vtext;
								gtlData[0][index].statusDesc = defaults.Sttext;
							}
							GTLHeaderModel.setData(gtlData);
						} else if (g.action.indexOf("ETL") > 0) {
							var ETLHeaderModel = g.getView().getModel("ETLHeaderModel");
							var etlData = ETLHeaderModel.getData();
							if (sFrom === "planningPlant") {
								etlData[0][index].tlusg = defaults.Verwe;
								etlData[0][index].Statu = defaults.Statu;
								etlData[0][index].usageDesc = defaults.Vtext;
								etlData[0][index].statusDesc = defaults.Sttext;
							}
							if (sFrom === "status") {
								etlData[0][index].tlusg = defaults.Verwe;
								etlData[0][index].usageDesc = defaults.Vtext;
							}
							if (sFrom === "usage") {
								etlData[0][index].Statu = defaults.Statu;
								etlData[0][index].statusDesc = defaults.Sttext;
							}
							if (sFrom === "tlDesc") {
								etlData[0][index].tlusg = defaults.Verwe;
								etlData[0][index].Statu = defaults.Statu;
								etlData[0][index].usageDesc = defaults.Vtext;
								etlData[0][index].statusDesc = defaults.Sttext;
							}
							ETLHeaderModel.setData(etlData);
						} else if (g.action.indexOf("FTL") > 0) {
							var FTLHeaderModel = g.getView().getModel("FTLHeaderModel");
							var ftlData = FTLHeaderModel.getData();
							if (sFrom === "planningPlant") {
								ftlData[0][index].tlusg = defaults.Verwe;
								ftlData[0][index].Statu = defaults.Statu;
								ftlData[0][index].usageDesc = defaults.Vtext;
								ftlData[0][index].statusDesc = defaults.Sttext;
							}
							if (sFrom === "status") {
								ftlData[0][index].tlusg = defaults.Verwe;
								ftlData[0][index].usageDesc = defaults.Vtext;
							}
							if (sFrom === "usage") {
								ftlData[0][index].Statu = defaults.Statu;
								ftlData[0][index].statusDesc = defaults.Sttext;
							}
							if (sFrom === "tlDesc") {
								ftlData[0][index].tlusg = defaults.Verwe;
								ftlData[0][index].Statu = defaults.Statu;
								ftlData[0][index].usageDesc = defaults.Vtext;
								ftlData[0][index].statusDesc = defaults.Sttext;
							}
							FTLHeaderModel.setData(ftlData);
						}
					}
				},
				error: function (err) {}
			});
		},
		/*
		 * Called when delete button is clicked of Task List Header
		 * @param {sap.ui.base.Event} oEvent
		 * @public
		 */
		onHeaderDlt: function (oEvent) {
			var g = this;
			var sPath, grpC, opData, compData, cls, char;
			if (g.action.indexOf("GTL") > 0) {
				sPath = oEvent.getSource().getBindingContext("GTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var AIWListGTLModel = this.getView().getModel("AIWListGTLModel");
				var AIWListGTLData = AIWListGTLModel.getData();
				var gtlData = AIWListGTLData[g.gtlPath];
				grpC = gtlData.header[g.sindex].Plnal;

				if (gtlData.operation) {
					opData = gtlData.operation;
					for (var o = 0; o < opData.length; o++) {
						if (grpC === opData[o].Plnal) {
							opData.splice(o, 1);
						}
					}
				}
				if (gtlData.component) {
					compData = gtlData.component;
					for (var c = 0; c < compData.length; c++) {
						if (grpC === compData[c].Plnal) {
							compData.splice(c, 1);
						}
					}
				}
				if (gtlData.Char) {
					char = gtlData.Char;
				}
				if (gtlData.Class) {
					cls = gtlData.Class;
					for (var cl = 0; cl < cls.length; cl++) {
						if (grpC === cls[cl].Plnal) {
							if (char) {
								for (var chr = char.length - 1; chr >= 0; chr--) {
									if (cls[cl].Class === char[chr].Class) {
										char.pop(chr);
									}
								}
							}
							cls.splice(cl, 1);
						}
					}
				}

				if (gtlData.header) {
					gtlData.header.splice(g.sindex, 1);
				}
				if (gtlData.lHeader) {
					delete gtlData.lHeader;
				}

				g.getView().getModel("GTLHeaderModel").refresh();
				g.getView().setModel(AIWListGTLModel, "AIWListGTLModel");
				sap.ui.getCore().setModel(AIWListGTLModel, "AIWListGTLModel");
			} else if (g.action.indexOf("ETL") > 0) {
				sPath = oEvent.getSource().getBindingContext("ETLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var AIWListETLModel = this.getView().getModel("AIWListETLModel");
				var AIWListETLData = AIWListETLModel.getData();
				var etlData = AIWListETLData[g.etlPath];
				grpC = etlData.header[g.sindex].Plnal;

				if (etlData.operation) {
					opData = etlData.operation;
					for (var o = 0; o < opData.length; o++) {
						if (grpC === opData[o].Plnal) {
							opData.splice(o, 1);
						}
					}
				}
				if (etlData.component) {
					compData = etlData.component;
					for (var c = 0; c < compData.length; c++) {
						if (grpC === compData[c].Plnal) {
							compData.splice(c, 1);
						}
					}
				}
				if (etlData.Char) {
					char = etlData.Char;
				}
				if (etlData.Class) {
					cls = etlData.Class;
					for (var cl = 0; cl < cls.length; cl++) {
						if (grpC === cls[cl].Plnal) {
							if (char) {
								for (var chr = char.length - 1; chr >= 0; chr--) {
									if (cls[cl].Class === char[chr].Class) {
										char.pop(chr);
									}
								}
							}
							cls.splice(cl, 1);
						}
					}
				}

				if (etlData.header) {
					etlData.header.splice(g.sindex, 1);
				}
				if (etlData.lHeader) {
					delete etlData.lHeader;
				}

				g.getView().getModel("ETLHeaderModel").refresh();
				g.getView().setModel(AIWListETLModel, "AIWListETLModel");
				sap.ui.getCore().setModel(AIWListETLModel, "AIWListETLModel");
			} else if (g.action.indexOf("FTL") > 0) {
				sPath = oEvent.getSource().getBindingContext("FTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var AIWListFTLModel = this.getView().getModel("AIWListFTLModel");
				var AIWListFTLData = AIWListFTLModel.getData();
				var ftlData = AIWListFTLData[g.ftlPath];
				grpC = ftlData.header[g.sindex].Plnal;

				if (ftlData.operation) {
					opData = ftlData.operation;
					for (var o = 0; o < opData.length; o++) {
						if (grpC === opData[o].Plnal) {
							opData.splice(o, 1);
						}
					}
				}
				if (ftlData.component) {
					compData = ftlData.component;
					for (var c = 0; c < compData.length; c++) {
						if (grpC === compData[c].Plnal) {
							compData.splice(c, 1);
						}
					}
				}
				if (ftlData.Char) {
					char = ftlData.Char;
				}
				if (ftlData.Class) {
					cls = ftlData.Class;
					for (var cl = 0; cl < cls.length; cl++) {
						if (grpC === cls[cl].Plnal) {
							if (char) {
								for (var chr = char.length - 1; chr >= 0; chr--) {
									if (cls[cl].Class === char[chr].Class) {
										char.pop(chr);
									}
								}
							}
							cls.splice(cl, 1);
						}
					}
				}
				if (ftlData.header) {
					ftlData.header.splice(g.sindex, 1);
				}
				if (ftlData.lHeader) {
					delete ftlData.lHeader;
				}

				g.getView().getModel("FTLHeaderModel").refresh();
				g.getView().setModel(AIWListFTLModel, "AIWListFTLModel");
				sap.ui.getCore().setModel(AIWListFTLModel, "AIWListFTLModel");
			}
		},
		/*
		 * Function to initialize uploadCollection list
		 */
		_initializeAttachments: function () {
			var g = this;
			this.oAttach = [];
			this.getView().setModel(new sap.ui.model.json.JSONModel(), "json");
			this.oFileUpload = this.byId('fileupload');
			this.oFileUpload.setUploadUrl(this._oComponent.getModel().sServiceUrl + "/Attachments");
			var d = {
				dataitems: []
			};
			g.mockDataModel = new sap.ui.model.json.JSONModel(d);
			g.oFileUpload.setModel(g.mockDataModel); //, "json"
		},
		/*
		 * Function to handle 'change' event of uploadCollection
		 */
		onBeforeUploadFile: function (e) {
			var t = this.getXsrfToken();
			var c = new sap.m.UploadCollectionParameter({
				name: "x-csrf-token",
				value: t
			});
			var h = this.oFileUpload.getHeaderParameters();
			if (h[0] === undefined) {
				this.oFileUpload.addHeaderParameter(c);
			}
			var a = this.oFileUpload.getHeaderParameters()[0].getValue("x-csrf-token");
			if (a === "") {
				this.oFileUpload.addHeaderParameter(c);
			}
			var f = e.getParameter("mParameters").files[0].name;
			var C = new sap.m.UploadCollectionParameter({
				name: "slug",
				value: encodeURIComponent(f)
			});
			var custom = new sap.m.UploadCollectionParameter({
				name: "Content-Type",
				value: f
			});

			this.oFileUpload.removeHeaderParameter(h[1]);
			this.oFileUpload.addHeaderParameter(C);
			this.oFileUpload.addHeaderParameter(custom);
		},
		/*
		 * Function to handle 'uploadComplete' event of uploadCollection
		 * @param {sap.ui.base.Event} e
		 */
		onUploadFile: function (e) {
			var c, m, g, u, n, file;
			var r = e.getParameters().getParameters().responseRaw;
			if (((navigator.userAgent.indexOf("Safari") > -1) || navigator.userAgent.indexOf("Chrome") > -1) && window.DOMParser) {
				var p = jQuery.sap.parseXML(r);
				/*var x = $(p);
				c = x.find("CreatedBy").text();
				m = x.find("MimeType").text();
				g = x.find("Guid").text();
				u = x.find("id").text();
				file = x.find("FileName").text();
				n = u + '/$value';*/
				// code added */</*
				c = p.querySelectorAll("CreatedBy")[0].textContent;
				m = p.querySelectorAll("MimeType")[0].textContent;
				g = p.querySelectorAll("Guid")[0].textContent;
				u = p.querySelectorAll("id")[0].textContent;
				file = p.querySelectorAll("FileName")[0].textContent;
				n = u + "/$value";
				// */>/*
			} else {
				var a = new DOMParser();
				var b = a.parseFromString(r, "text/xml");
				c = b.getElementsByTagName("d:CreatedBy")[0].childNodes[0].nodeValue;
				m = b.getElementsByTagName("d:MimeType")[0].childNodes[0].nodeValue;
				g = b.getElementsByTagName("d:Guid")[0].childNodes[0].nodeValue;
				u = b.getElementsByTagName("id")[0].childNodes[0].nodeValue;
				n = u + "/$value";
			}

			var f = e.getParameters().getParameters().fileName;
			var C = function () {
				var i = new Date();
				var j = i.getDate();
				var k = i.getMonth() + 1;
				var y = i.getFullYear();
				if (j < 10) {
					j = "0" + j;
				}
				if (k < 10) {
					k = "0" + k;
				}
				return y + "-" + k + "-" + j;
			};
			if (g !== "") {
				var d = this.mockDataModel.getData();
				var o = {
					"mimeType": m,
					// "contributor": c,
					// "uploaded": C(),
					"enableEdit": false,
					"enableDelete": true,
					"filename": f,
					"url": n,
					"documentId": g,
					"attributes": [{
						"title": "Uploaded By",
						"text": c
							// "active": true
					}, {
						"title": "Uploaded On",
						"text": C(),
						"active": false
					}]
				};
				d.dataitems.unshift(o);
				this.mockDataModel.setData(d);
				this.oFileUpload.getBinding("items").refresh(true);
				this.oFileUpload.rerender();
				var G = {
					Guid: g
				};
				this.oAttach.push(G);
				// this.getView().byId("attachments").setCount(this.oAttach.length);
			}
		},

		// onUploadFile: function (e) {
		// 	var c, m, g, u, n, file;
		// 	var r = e.getParameters().getParameters().responseRaw;
		// 	if (((navigator.userAgent.indexOf("Safari") > -1) || navigator.userAgent.indexOf("Chrome") > -1) && window.DOMParser) {
		// 		var p = jQuery.sap.parseXML(r);
		// 		/*var x = $(p);
		// 		c = x.find("CreatedBy").text();
		// 		m = x.find("MimeType").text();
		// 		g = x.find("Guid").text();
		// 		u = x.find("id").text();
		// 		file = x.find("FileName").text();
		// 		n = u + '/$value';*/
		// 		// code added */</*
		// 		c = p.querySelectorAll("CreatedBy")[0].textContent;
		// 		m = p.querySelectorAll("MimeType")[0].textContent;
		// 		g = p.querySelectorAll("Guid")[0].textContent;
		// 		u = p.querySelectorAll("id")[0].textContent;
		// 		file = p.querySelectorAll("FileName")[0].textContent;
		// 		n = u + '/$value';
		// 		//  */>/*
		// 	} else {
		// 		var a = new DOMParser();
		// 		var b = a.parseFromString(r, "text/xml");
		// 		c = b.getElementsByTagName("d:CreatedBy")[0].childNodes[0].nodeValue;
		// 		m = b.getElementsByTagName("d:MimeType")[0].childNodes[0].nodeValue;
		// 		g = b.getElementsByTagName("d:Guid")[0].childNodes[0].nodeValue;
		// 		u = b.getElementsByTagName("id")[0].childNodes[0].nodeValue;
		// 		n = u + '/$value';
		// 	}

		// 	var f = e.getParameters().getParameters().fileName;
		// 	var C = function () {
		// 		var i = new Date();
		// 		var j = i.getDate();
		// 		var k = i.getMonth() + 1;
		// 		var y = i.getFullYear();
		// 		if (j < 10) {
		// 			j = '0' + j;
		// 		}
		// 		if (k < 10) {
		// 			k = '0' + k;
		// 		}
		// 		return y + '-' + k + '-' + j;
		// 	};
		// 	if (g !== "") {
		// 		var d = this.mockDataModel.getData();
		// 		var o = {
		// 			"mimeType": m,
		// 			"contributor": c,
		// 			"uploaded": C(),
		// 			"enableEdit": false,
		// 			"enableDelete": true,
		// 			"filename": f,
		// 			"url": n,
		// 			"documentId": g
		// 		};
		// 		d.dataitems.unshift(o);
		// 		this.mockDataModel.setData(d);
		// 		this.oFileUpload.getBinding("items").refresh(true);
		// 		this.oFileUpload.rerender();
		// 		var G = {
		// 			Guid: g
		// 		};
		// 		this.oAttach.push(G);
		// 		this.getView().byId("attachments").setCount(this.oAttach.length);

		// 	}

		// },

		/*
		 * Function to handle failed upload
		 * @param {sap.ui.base.Event} e
		 */
		onFileUploadFailed: function (e) {
			var bCompact = !!this.getView().$().closest(".sapUiSizeCompact").length;
			sap.m.MessageBox.error(
				e.getParameters().exception.message, {
					styleClass: bCompact ? "sapUiSizeCompact" : ""
				}
			);

		},
		/*
		 * Function to handle 'fileDeleted' event of uploadCollection
		 * @param {sap.ui.base.Event} e
		 */
		onFileDeleted: function (e) {
			var d = e.getParameter("documentId");
			var a = this.mockDataModel.getData();
			for (var i = 0; i < a.dataitems.length; i++) {
				if (a.dataitems[i].documentId === d) {
					a.dataitems.splice(i, 1);
					break;
				}
			}
			for (var i = 0; i < this.oAttach.length; i++) {
				if (this.oAttach[i].Guid === d) {
					this.oAttach.splice(i, 1);
					break;
				}
			}
			// this.getView().byId("fileupload").setCount(this.oAttach.length);
			this.mockDataModel.setData(a);
			this.oFileUpload.getBinding("items").refresh(true);
			this.oFileUpload.rerender();
		},
		/*
		 * Function to handle 'uploadTerminated' event of uploadCollection
		 * @param {sap.ui.base.Event} e
		 */
		uploadTerminated: function (e) {
			var i = this.oFileUpload.getItems();
			var a = i.length;
			if (a === 1) {
				this.oFileUpload.removeItem(i[0]);
			} else {
				this.oFileUpload.removeItem(i[0]);
			}
			this.oFileUpload.rerender();
			this.oFileUpload.getBinding("items").refresh(true);
		},
		/*
		 * Function to get Xsrf token
		 * @returns t - Xsrf token
		 */
		getXsrfToken: function () {
			var l = this;
			var t = this.getView().getModel().getHeaders()['x-csrf-token'];
			if (!t) {
				this.getView().getModel().refreshSecurityToken(function (e, o) {
					t = o.headers['x-csrf-token'];
				}, function () {
					var bCompact = !!this.getView().$().closest(".sapUiSizeCompact").length;
					sap.m.MessageBox.error(
						l.getView().getModel("i18n").getProperty("TOKEN_MSG"), {
							styleClass: bCompact ? "sapUiSizeCompact" : ""
						}
					);
				}, false);
			}
			return t;
		},
		/*
		 * Function to set Mode
		 * @public
		 */
		setMode: function (m) {
			this.mode = m;
		},
		/*
		 * Function to get Mode
		 * @public
		 */
		getMode: function () {
			return this.mode;
		},
		/*
		 * Function to read REASON values
		 * @public
		 */
		fetchReason: function () {
			var M = this.getView().getModel("valueHelp");
			var url = "/ReasonforReqSet";
			var oFilter = [new sap.ui.model.Filter("CreqType", "EQ", this.getCrType())];
			var _arr = [];
			var t = this;
			var fnSuccess = function (r) {
				if (r.results.length > 0) {
					var obj = {
						CreqType: "",
						Description: "",
						Langu: "",
						Reason: ""
					};
					_arr[0] = obj;
					for (var i = 0; i < r.results.length; i++) {
						_arr.push(r.results[i]);
					}
				}
				var rModel = new JSONModel();
				rModel.setData(_arr);
				t.getView().byId("reasonForRequest").setModel(rModel);
				t.getView().byId("reasonForRequest").bindItems("/", new sap.ui.core.Item({
					key: "{Reason}",
					text: "{Description}"
				}));
			};
			var fnError = function (e) {};
			this._readData(url, M, fnSuccess, fnError, oFilter, {});
		},
		/*
		 * Function to set Change request type
		 * @param {string} f
		 * @public
		 */
		setCrType: function (f) {
			if (f) {
				this.crType = f;
			}

			// Data required in payload for CHECK
			var oCrType = {
				crtype: this.crType,
				desc: this.getView().byId("Description").getValue(),
				priority: this.getView().byId("idPriority").getSelectedKey(),
				duedate: this.getView().byId("idDueDate").getDateValue()
			};
			var tempCrTypeModel = new JSONModel(oCrType);
			sap.ui.getCore().setModel(tempCrTypeModel, "tempCrTypeModel");
		},
		/*
		 * Function to get Change request type
		 * @public
		 */
		getCrType: function () {
			return this.crType;
		},
		/*
		 * Called when delete button is clicked of Task List Group & Work center
		 * @param {sap.ui.base.Event} oEvent
		 * @public
		 */
		onMulDltTab: function (oEvent) {
			var emptyData = [];
			var tempArray = [];
			var index;
			if (this.action.indexOf("WC") > 0) {
				var AIWListWCModel = this.getView().getModel("AIWListWCModel");
				var AIWListWCData = AIWListWCModel.getData();

				//this.selectedRowsWC.sort();
				// for (var i = this.selectedRowsWC.length - 1; i >= 0; i--) {
				// 	var index = this.selectedRowsWC[i].split("/")[1];
				// 	index = parseInt(index);
				// 	AIWListWCData.splice(index, 1);
				// }
				for (var z = 0; z < this.selectedRowsWC.length; z++) {
					tempArray.push(parseInt(this.selectedRowsWC[z].split("/")[1]));
				}
				// tempArray.sort();
				tempArray.sort(function (a, b) {
					return a - b;
				});

				this.checkDependantObject(tempArray, "AIWListWCModel");

				// for (var i = tempArray.length - 1; i >= 0; i--) {
				// 	//var index = this.selectedRowsMAT[i].split("/")[1];
				// 	index = tempArray[i];
				// 	AIWListWCData.splice(index, 1);
				// }
				// sap.ui.getCore().byId(this.tableId).removeSelections();
				// AIWListWCModel.setData(AIWListWCData);
				// this.updateCount("workCenter", AIWListWCData);
				// this.selectedRowsWC = [];

				// var EnableDELModel = this.getView().getModel("EnableDELModel");
				// var EnableDELData = EnableDELModel.getData();
				// EnableDELData.deleteWC = false;
				// EnableDELModel.setData(EnableDELData);
			} else if (this.action.indexOf("GTL") > 0) {
				var AIWListGTLModel = this.getView().getModel("AIWListGTLModel");
				var AIWListGTLData = AIWListGTLModel.getData();
				if (this.getView().getModel("GTLHeaderModel").getData().length > 0) {
					this.getView().getModel("GTLHeaderModel").setData(emptyData);
				}
				//this.selectedRowsGTL.sort();
				for (var z = 0; z < this.selectedRowsGTL.length; z++) {
					tempArray.push(parseInt(this.selectedRowsGTL[z].split("/")[1]));
				}
				// tempArray.sort();
				tempArray.sort(function (a, b) {
					return a - b;
				});

				this.checkDependantObject(tempArray, "AIWListGTLModel");

				// for (var i = tempArray.length - 1; i >= 0; i--) {
				// 	//var index = this.selectedRowsMAT[i].split("/")[1];
				// 	index = tempArray[i];
				// 	AIWListGTLData.splice(index, 1);
				// }
				// sap.ui.getCore().byId(this.tableId).removeSelections();
				// AIWListGTLModel.setData(AIWListGTLData);

				// this.updateCount("generalTL", AIWListGTLData);
				// this.selectedRowsGTL = [];

				// var EnableDELModel = this.getView().getModel("EnableDELModel");
				// var EnableDELData = EnableDELModel.getData();
				// EnableDELData.deleteGTL = false;
				// EnableDELModel.setData(EnableDELData);

				// var aCounterModel = this.getView().getModel("aCounterModel");
				// var aCounterData = aCounterModel.getData();
				// aCounterData.addGTLCounter = false;
				// aCounterModel.setData(aCounterData);
			} else if (this.action.indexOf("ETL") > 0) {
				var AIWListETLModel = this.getView().getModel("AIWListETLModel");
				var AIWListETLData = AIWListETLModel.getData();
				if (this.getView().getModel("ETLHeaderModel").getData().length > 0) {
					this.getView().getModel("ETLHeaderModel").setData(emptyData);
				}
				//this.selectedRowsETL.sort();
				// for (var i = this.selectedRowsETL.length - 1; i >= 0; i--) {
				// 	var index = this.selectedRowsETL[i].split("/")[1];
				// 	index = parseInt(index);
				// 	AIWListETLData.splice(index, 1);
				// }
				for (var z = 0; z < this.selectedRowsETL.length; z++) {
					tempArray.push(parseInt(this.selectedRowsETL[z].split("/")[1]));
				}
				// tempArray.sort();
				tempArray.sort(function (a, b) {
					return a - b;
				});

				this.checkDependantObject(tempArray, "AIWListETLModel");

				// for (var i = tempArray.length - 1; i >= 0; i--) {
				// 	//var index = this.selectedRowsMAT[i].split("/")[1];
				// 	index = tempArray[i];
				// 	AIWListETLData.splice(index, 1);
				// }
				// sap.ui.getCore().byId(this.tableId).removeSelections();
				// AIWListETLModel.setData(AIWListETLData);
				// this.updateCount("equiTL", AIWListETLData);
				// this.selectedRowsETL = [];

				// var EnableDELModel = this.getView().getModel("EnableDELModel");
				// var EnableDELData = EnableDELModel.getData();
				// EnableDELData.deleteETL = false;
				// EnableDELModel.setData(EnableDELData);

				// var aCounterModel = this.getView().getModel("aCounterModel");
				// var aCounterData = aCounterModel.getData();
				// aCounterData.addETLCounter = false;
				// aCounterModel.setData(aCounterData);
			} else if (this.action.indexOf("FTL") > 0) {
				var AIWListFTLModel = this.getView().getModel("AIWListFTLModel");
				var AIWListFTLData = AIWListFTLModel.getData();
				if (this.getView().getModel("FTLHeaderModel").getData().length > 0) {
					this.getView().getModel("FTLHeaderModel").setData(emptyData);
				}
				//this.selectedRowsFTL.sort();
				// for (var i = this.selectedRowsFTL.length - 1; i >= 0; i--) {
				// 	var index = this.selectedRowsFTL[i].split("/")[1];
				// 	index = parseInt(index);
				// 	AIWListFTLData.splice(index, 1);
				// }
				for (var z = 0; z < this.selectedRowsFTL.length; z++) {
					tempArray.push(parseInt(this.selectedRowsFTL[z].split("/")[1]));
				}
				// tempArray.sort();
				tempArray.sort(function (a, b) {
					return a - b;
				});

				this.checkDependantObject(tempArray, "AIWListFTLModel");

				// for (var i = tempArray.length - 1; i >= 0; i--) {
				// 	//var index = this.selectedRowsMAT[i].split("/")[1];
				// 	index = tempArray[i];
				// 	AIWListFTLData.splice(index, 1);
				// }
				// sap.ui.getCore().byId(this.tableId).removeSelections();
				// AIWListFTLModel.setData(AIWListFTLData);
				// this.updateCount("flocTL", AIWListFTLData);
				// this.selectedRowsFTL = [];

				// var EnableDELModel = this.getView().getModel("EnableDELModel");
				// var EnableDELData = EnableDELModel.getData();
				// EnableDELData.deleteFTL = false;
				// EnableDELModel.setData(EnableDELData);

				// var aCounterModel = this.getView().getModel("aCounterModel");
				// var aCounterData = aCounterModel.getData();
				// aCounterData.addFTLCounter = false;
				// aCounterModel.setData(aCounterData);
			} else if (this.action.indexOf("OL") > 0) {
				var AIWListOLModel = this.getView().getModel("AIWListOLModel");
				var AIWListOLData = AIWListOLModel.getData();

				//this.selectedRowsOL.sort();
				// for (var i = this.selectedRowsOL.length - 1; i >= 0; i--) {
				// 	var index = this.selectedRowsOL[i].split("/")[1];
				// 	index = parseInt(index);
				// 	AIWListOLData.splice(index, 1);
				// }
				for (var z = 0; z < this.selectedRowsOL.length; z++) {
					tempArray.push(parseInt(this.selectedRowsOL[z].split("/")[1]));
				}
				tempArray.sort();
				for (var i = tempArray.length - 1; i >= 0; i--) {
					//var index = this.selectedRowsMAT[i].split("/")[1];
					index = tempArray[i];
					AIWListOLData.splice(index, 1);
				}
				sap.ui.getCore().byId(this.tableId).removeSelections();
				AIWListOLModel.setData(AIWListOLData);
				this.updateCount("objLink", AIWListOLData);
				this.selectedRowsOL = [];

				var EnableDELModel = this.getView().getModel("EnableDELModel");
				var EnableDELData = EnableDELModel.getData();
				EnableDELData.deleteOL = false;
				EnableDELModel.setData(EnableDELData);
			}
		},
		/*
		 * Function to handle 'selectionChange' event of Work center table
		 * @param {sap.ui.base.Event} oEvent
		 */
		onWCRowSelect: function (oEvent) {
			this.updateDeleteEnable("WC", oEvent);
		},
		/*
		 * Function to handle 'selectionChange' event of Object Link table
		 * @param {sap.ui.base.Event} oEvent
		 */
		onOLRowSelect: function (oEvent) {
			this.updateDeleteEnable("OL", oEvent);
		},
		/*
		 * Function to set enable/disable of delete button
		 * @param {string} sFrom - Object flag
		 * @param {sap.ui.base.Event} oEvent
		 * @public
		 */
		updateDeleteEnable: function (sFrom, oEvent) {
			var EnableDELModel = this.getView().getModel("EnableDELModel");
			var EnableDELData = EnableDELModel.getData();

			this.tableId = oEvent.getSource().getId();
			if (sFrom === "WC" && this.mode !== "display") {
				this.selectedRowsWC = oEvent.getSource()._aSelectedPaths;
				if (this.selectedRowsWC.length > 0) {
					EnableDELData.deleteWC = true;
				} else {
					EnableDELData.deleteWC = false;
				}
			}
			if (sFrom === "GTL" && this.mode !== "display") {
				this.selectedRowsGTL = oEvent.getSource()._aSelectedPaths;
				if (this.selectedRowsGTL.length > 0) {
					EnableDELData.deleteGTL = true;
				} else {
					EnableDELData.deleteGTL = false;
				}
			}
			if (sFrom === "ETL" && this.mode !== "display") {
				this.selectedRowsETL = oEvent.getSource()._aSelectedPaths;
				if (this.selectedRowsETL.length > 0) {
					EnableDELData.deleteETL = true;
				} else {
					EnableDELData.deleteETL = false;
				}
			}
			if (sFrom === "FTL" && this.mode !== "display") {
				this.selectedRowsFTL = oEvent.getSource()._aSelectedPaths;
				if (this.selectedRowsFTL.length > 0) {
					EnableDELData.deleteFTL = true;
				} else {
					EnableDELData.deleteFTL = false;
				}
			}
			if (sFrom === "OL" && this.mode !== "display") {
				this.selectedRowsOL = oEvent.getSource()._aSelectedPaths;
				if (this.selectedRowsOL.length > 0) {
					EnableDELData.deleteOL = true;
				} else {
					EnableDELData.deleteOL = false;
				}
			}

			EnableDELModel.setData(EnableDELData);
		},
		/*
		 * Function to read approve data of WC, TL & OL
		 * @param {string} sSelectedTab
		 * @public
		 */
		readLastApprovalData: function (sSelectedTab) {
			var g = this;
			var m = this.getView().getModel("ApprModel");
			var oExpand, oFilter = [];
			if (sSelectedTab === "WCTab") {
				var AIWListWCData = sap.ui.getCore().getModel("AIWListWCModel").getData();
				if (AIWListWCData.length > 0) {
					return;
				}
				oFilter = new sap.ui.model.Filter("ChangeRequestId", "EQ", this.cReqNo);
				oExpand = ["WCCapa", "WCCost", "Workcenter", "CrAttachments", "Notes"];
			} else if (sSelectedTab === "GTLTab") {
				var AIWListGTLData = sap.ui.getCore().getModel("AIWListGTLModel").getData();
				if (AIWListGTLData.length > 0) {
					return;
				}
				oFilter = new sap.ui.model.Filter("ChangeRequestId", "EQ", this.cReqNo);
				oExpand = ["GTClass", "GTHdr", "GTComp", "GTInsp", "GTList", "GTMPack", "GTOprs", "GTPRT", "GTRel", "GTSpack",
					"GTVal", "CrAttachments", "Notes"
				];
			} else if (sSelectedTab === "EqTLTab") {
				var AIWListETLData = sap.ui.getCore().getModel("AIWListETLModel").getData();
				if (AIWListETLData.length > 0) {
					return;
				}
				oFilter = new sap.ui.model.Filter("ChangeRequestId", "EQ", this.cReqNo);
				oExpand = ["ETClass", "ETComp", "ETInsp", "ETList", "ETMPack", "ETOprs", "ETPRT", "ETRel", "ETSpack", "ETVal",
					"ETHdr", "CrAttachments", "Notes"
				];
			} else if (sSelectedTab === "FLOCTLTab") {
				var AIWListFTLData = sap.ui.getCore().getModel("AIWListFTLModel").getData();
				if (AIWListFTLData.length > 0) {
					return;
				}
				oFilter = new sap.ui.model.Filter("ChangeRequestId", "EQ", this.cReqNo);
				oExpand = ["FTHdr", "FTClass", "FTComp", "FTInsp", "FTList", "FTMPack", "FTOprs", "FTPRT", "FTRel", "FTSpack",
					"FTVal", "CrAttachments", "Notes"
				];
			} else if (sSelectedTab === "OLTab") {
				var AIWListOLData = sap.ui.getCore().getModel("AIWListOLModel").getData();
				if (AIWListOLData.length > 0) {
					return;
				}
				oFilter = new sap.ui.model.Filter("ChangeRequestId", "EQ", this.cReqNo);
				oExpand = ["OLClass", "Olink", "OLLAM", "OLVal", "CrAttachments", "Notes"];
			}

			function readStatusProf(d, l) {
				//var q = "/DeriveOLstatusSet(NETYP='" + d + "',STSMA='')";
				var q = "/DeriveOLstatusSet('" + d + "')";
				m.read(q, {
					success: function (r) {
						if (r.Statproftxt !== "" && (r.Ustw_oln !== "" || r.Uswo_oln !== "")) {
							AIWListOLData[l - 1].usrSts = r.Usta_oln;
							AIWListOLData[l - 1].stProfLblV = true;
							AIWListOLData[l - 1].stsProf = r.Stsm_oln;
							AIWListOLData[l - 1].stsProfV = true;
							AIWListOLData[l - 1].stsProfDesc = r.Statproftxt;
							AIWListOLData[l - 1].stsProfDescV = true;
							AIWListOLData[l - 1].stsObj = r.Ustw_oln;
							AIWListOLData[l - 1].stsObjLblV = true;
							AIWListOLData[l - 1].stsObjV = true;
							AIWListOLData[l - 1].stsWoLblV = true;
							AIWListOLData[l - 1].stsWoNoV = true;
							AIWListOLData[l - 1].stsWoNo = r.Uswo_oln;
							AIWListOLData[l - 1].sysSts = r.Stattext;
						} else {
							AIWListOLData[l - 1].stProfLblV = false;
							AIWListOLData[l - 1].stsProfV = false;
							AIWListOLData[l - 1].stsProfDescV = false;
							AIWListOLData[l - 1].stsObjLblV = false;
							AIWListOLData[l - 1].stsObjV = false;
							AIWListOLData[l - 1].stsWoLblV = false;
							AIWListOLData[l - 1].stsWoNoV = false;
							AIWListOLData[l - 1].usrSts = "";
							AIWListOLData[l - 1].stsProf = "";
							AIWListOLData[l - 1].stsProfDesc = "";
							AIWListOLData[l - 1].stsObj = "";
							AIWListOLData[l - 1].stsWoNo = "";
							AIWListOLData[l - 1].sysSts = "";
						}
						// AIWListOLData.push(objLink);
						// }
						if (l > 1) {
							l--;
							readStatusProf(AIWListOLData[l - 1].linkCat, l);
						}
						sap.ui.getCore().getModel("AIWListOLModel").setSizeLimit(AIWListOLData.length);
						sap.ui.getCore().getModel("AIWListOLModel").setData(AIWListOLData);
						//g.updateCount("objLink", AIWListOLData);
						sap.ui.getCore().getModel("AIWListOLModel").refresh();
					},
					error: function (err) {
						var error = [];
						if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
							.errordetails
							.length === 0) {
							error[0] = JSON.parse(err.responseText).error.message.value;
						} else {
							for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
								error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
							}
						}
						var value = error.join("\n");
						g.BusyDialog.close();
						g.invokeMessage(value);
					}
				});
			}

			function fnSuccess(data) {
				var results = data.results[0];
				if (results) {
					if (sSelectedTab === "WCTab") {
						if (results.Workcenter) {
							var wcData = results.Workcenter.results[0];
							if (wcData) {
								wcData.wc = wcData.Arbpl;
								wcData.wcDesc = wcData.Txtmi;
								wcData.plant = wcData.Werks;
								wcData.plantDesc = wcData.Plantdesc;
								wcData.wcCat = wcData.Verwe;
								wcData.wcCatDesc = wcData.Ktext;
								wcData.person = wcData.Crveran;
								wcData.personDesc = wcData.Persresptxt;
								wcData.usg = wcData.Planv;
								wcData.usgDesc = wcData.UsageTxt;
								wcData.stdVal = wcData.Vgwts;
								wcData.stdValDesc = wcData.Vgwtx;
								wcData.ctrlKey = wcData.Crsteus;
								wcData.ctrlKeyDesc = wcData.Steutxt;

								wcData.wcValueState = "None";
								wcData.wcDescValueState = "None";
								wcData.plantValueState = "None";
								wcData.wcCatValueState = "None";
								wcData.personResValueState = "None";
								wcData.usgValueState = "None";
								wcData.stdValueState = "None";
								wcData.cntrlKeyValueState = "None";

								wcData.wcValueStateTxt = "";
								wcData.wcDescValueStateTxt = "";
								wcData.plantValueStateTxt = "";
								wcData.wcCatValueStateTxt = "";
								wcData.personResValueStateTxt = "";
								wcData.usgValueStateTxt = "";
								wcData.stdValueStateTxt = "";
								wcData.cntrlKeyValueStateTxt = "";
								wcData.enable = false;
								wcData.cost = [];
								wcData.capacity = [];
							}
							var cost = results.WCCost.results;
							if (cost) {
								if (cost.length > 0) {
									var cModel = new sap.ui.model.json.JSONModel();
									cModel.setData(cost);
									// g.cost.setModel(cModel);
									wcData.cost = cost;
								}
							}
							var capacity = results.WCCapa.results;
							if (capacity) {
								if (capacity.length > 0) {
									var capModel = new sap.ui.model.json.JSONModel();
									capModel.setData(capacity);
									wcData.capacity = capacity;
								}
							}
							AIWListWCData.push(wcData);
							sap.ui.getCore().getModel("AIWListWCModel").setData(AIWListWCData);
							// g.updateCount("workCenter", AIWListWCData);
						}
					} else if (sSelectedTab === "GTLTab") {
						if (results.GTList) {
							// var header = d.GTList.results[0];
							var basic = results.GTList.results[0];
							var gtlData = {
								validFrm: formatter.getDateFormat(basic.Gdatuv),
								grp: basic.Tlgnhdr,
								Plnal: basic.Tplnal,
								Ktext: basic.Ktext,
								wc: basic.Tarbpl,
								plant: basic.Wcplant,
								usg: basic.Tverwe,
								Statu: basic.Statu,
								// Ktext: basic.Werks,
								vEquiLbl: false,
								vEqui: false,
								vEquiDesc: false,
								vFlocLbl: false,
								vFloc: false,
								vFlocDesc: false,
								bAddComponent: true,
								enable: false,
								header: [],
								operation: [],
								component: [],
								Class: [],
								Char: []
							};
							var header = results.GTList.results;
							if (header.length > 0) {
								gtlData.header = header;
								for (var h = 0; h < header.length; h++) {
									gtlData.header[h].pPlantDesc = header[h].Iwerktxt;
									gtlData.header[h].usageDesc = header[h].TlUsgTxt;
									gtlData.header[h].plGrpDesc = header[h].Plnnrgrptxt;
									gtlData.header[h].statusDesc = header[h].Statustxt;
									gtlData.header[h].sysCondDesc = header[h].Anlzux;
									gtlData.header[h].stratDesc = header[h].Strattxt;
									gtlData.header[h].Plnal = header[h].Tplnal;
									gtlData.header[h].Verwe = header[h].Tverwe;
									gtlData.header[h].plEnable = false;
									gtlData.header[h].valueStateT = "None";
									gtlData.header[h].valueStatePP = "None";
									gtlData.header[h].valueStateU = "None";
									gtlData.header[h].valueStateS = "None";
									gtlData.header[h].groupCounter = header[h].Plnal;
									gtlData.header[h].Ktext = header[h].Ktext;
									gtlData.header[h].profile = header[h].Profident;
									gtlData.header[h].Ktext = header[h].Werks2gtl;
									gtlData.header[h].workCenter = header[h].Tarbpl;
									gtlData.header[h].keydate = header[h].Keydate;
									gtlData.header[h].plant = header[h].Gplnt2tR;
									gtlData.header[h].usage = header[h].Tverwe;
									gtlData.header[h].plannerGrp = header[h].Vagrp2gtl;
									gtlData.header[h].Statu = header[h].Statu;
									gtlData.header[h].systemCond = header[h].Anlzu;
									gtlData.header[h].groupVal = header[h].Tlgnhdr;
									gtlData.header[h].groupCounterDesc = header[h].Ktext;
									gtlData.header[h].workCenterDesc = header[h].Wcdescription;
									gtlData.header[h].assembly = header[h].Istru;
									gtlData.header[h].deletion = header[h].Delkz;
									gtlData.header[h].TlUsgTxt = header[h].TlUsgTxt;
									gtlData.header[h].Plnnrgrptxt = header[h].Plnnrgrptxt;
									gtlData.header[h].Statustxt = header[h].Statustxt;
									gtlData.header[h].Anlzux = header[h].Anlzux;
									gtlData.header[h].Istrux = header[h].Istrux;
									// added
									gtlData.header[h].insPtDesc = header[h].Slwbeztxt;
									gtlData.header[h].insPt = header[h].Slwbez;
									gtlData.header[h].extNum = header[h].Extnumtxt;
								}
								/*	var oModel = new sap.ui.model.json.JSONModel();
									oModel.setData(header);*/
								// g.getModel("tlDetailModel").setProperty("/header", headerDetails);
							}
							var operation = results.GTOprs.results;
							if (operation.length > 0) {
								gtlData.operation = operation;
								for (var o = 0; o < operation.length; o++) {
									gtlData.operation[o].calcKeyDesc = "";
									gtlData.operation[o].actTypDesc = "";
									gtlData.operation[o].flag = operation[o].Plnal + "-" + operation[o].Vornr;
									gtlData.operation[o].Arbpl = operation[o].TlArbpl;
									gtlData.operation[o].Plnal = operation[o].Tplnal;
									gtlData.operation[o].opState = "None";
									gtlData.operation[o].opDescState = "None";
									gtlData.operation[o].wcState = "None";
									gtlData.operation[o].plantState = "None";
									gtlData.operation[o].ctrlKeyState = "None";

									gtlData.operation[o].operation = operation[o].Gvornr2op;
									gtlData.operation[o].subOp = operation[o].Uvorn;
									gtlData.operation[o].workCenter = operation[o].TlArbpl;
									gtlData.operation[o].plant = operation[o].Werks2gop;
									gtlData.operation[o].controlKey = operation[o].Steus2gop;
									gtlData.operation[o].shortText = operation[o].Ltxa1;
									gtlData.operation[o].work = operation[o].Arbei;
									gtlData.operation[o].unitForWork = operation[o].Arbeh;
									gtlData.operation[o].number = operation[o].Anzzl;
									gtlData.operation[o].calcKey = operation[o].Indet;
									gtlData.operation[o].normDuration = operation[o].Dauno;
									gtlData.operation[o].uomDuration = operation[o].Daune;
									gtlData.operation[o].workPerc = operation[o].Prznt.toString();
									gtlData.operation[o].exeFactor = operation[o].Aufkt;
									gtlData.operation[o].actType = operation[o].Larnt2gop;
									gtlData.operation[o].stdTextKey = operation[o].Ktsch;
									gtlData.operation[o].assembly = operation[o].Tistru;
									gtlData.operation[o].noOfTime = operation[o].Loanz;
									gtlData.operation[o].sutability = operation[o].Qualf2gop;
									gtlData.operation[o].wageGroup = operation[o].Logrp2gop;
									gtlData.operation[o].wageType = operation[o].Loart;
									gtlData.operation[o].sysCondition = operation[o].Tanlzu;
									gtlData.operation[o].orderQty = operation[o].Bmvrg;
									gtlData.operation[o].ordQtyUnit = operation[o].Bmeih;
									gtlData.operation[o].netPrice = operation[o].Opreis;
									gtlData.operation[o].currency = operation[o].Owaers;
									gtlData.operation[o].priceUnit = operation[o].Opeinh;
									gtlData.operation[o].planDelTime = operation[o].Plifz;
									gtlData.operation[o].costElement = operation[o].Sakto2gop;
									gtlData.operation[o].materialGrp = operation[o].Omatkl;
									gtlData.operation[o].puchGroup = operation[o].Oekgrp;
									gtlData.operation[o].vendor = operation[o].Lifnr;
									gtlData.operation[o].purchOrg = operation[o].Ekorg;
									gtlData.operation[o].shortTerm = operation[o].Sortl;
									gtlData.operation[o].purchInfo = operation[o].Infnr;
									gtlData.operation[o].fieldKey = operation[o].Slwid;
									gtlData.operation[o].purchDoc = operation[o].Ebeln;
									gtlData.operation[o].purchDocItem = operation[o].Ebelp2gop;
									gtlData.operation[o].userFld = operation[o].Slwid;
									gtlData.operation[o].capCat = operation[o].Qlkapar;
									gtlData.operation[o].capCatDesc = operation[o].Kapartxt;
									gtlData.operation[o].quantity1_ = operation[o].Use04;
									gtlData.operation[o].quantity1 = operation[o].Usr04;
									gtlData.operation[o].quantity2 = operation[o].Usr05;
									gtlData.operation[o].quantity2_ = operation[o].Use05;
									gtlData.operation[o].value3 = operation[o].Usr06;
									gtlData.operation[o].value4 = operation[o].Usr07;
									gtlData.operation[o].value3_ = operation[o].Use06;
									gtlData.operation[o].value4_ = operation[o].Use07;
									gtlData.operation[o].text1 = operation[o].Usr00;
									gtlData.operation[o].text2 = operation[o].Usr01;
									gtlData.operation[o].text3 = operation[o].Usr03;
									gtlData.operation[o].text4 = operation[o].Usr04;
									gtlData.operation[o].date1 = operation[o].Usr08;
									gtlData.operation[o].date2 = operation[o].Usr09;
									gtlData.operation[o].indicator1 = operation[o].Usr10;
									gtlData.operation[o].indicator2 = operation[o].Usr11;
									gtlData.operation[o].Usrtxtname1 = operation[o].Usrtxtname1;
									gtlData.operation[o].Usrtxtflg1 = operation[o].Usrtxtflg1;
									gtlData.operation[o].Usrtxtname2 = operation[o].Usrtxtname2;
									gtlData.operation[o].Usrtxtflg2 = operation[o].Usrtxtflg2;
									gtlData.operation[o].Usrtxtname3 = operation[o].Usrtxtname3;
									gtlData.operation[o].Usrtxtflg3 = operation[o].Usrtxtflg3;
									gtlData.operation[o].Usrtxtname4 = operation[o].Usrtxtname4;
									gtlData.operation[o].Usrtxtflg4 = operation[o].Usrtxtflg4;
									gtlData.operation[o].Usrqtyname1 = operation[o].Usrqtyname1;
									gtlData.operation[o].Usrqtyflg1 = operation[o].Usrqtyflg1;
									gtlData.operation[o].Usrqtyname2 = operation[o].Usrqtyname2;
									gtlData.operation[o].Usrqtyflg2 = operation[o].Usrqtyflg2;
									gtlData.operation[o].Usrvalname1 = operation[o].Usrvalname1;
									gtlData.operation[o].Usrvalflg1 = operation[o].Usrvalflg1;
									gtlData.operation[o].Usrvalname2 = operation[o].Usrvalname2;
									gtlData.operation[o].Usrvalflg2 = operation[o].Usrvalflg2;
									gtlData.operation[o].Usrdatename1 = operation[o].Usrdatename1;
									gtlData.operation[o].Usrdatflg1 = operation[o].Usrdatflg1;
									gtlData.operation[o].Usrdatename2 = operation[o].Usrdatename2;
									gtlData.operation[o].Usrdatflg2 = operation[o].Usrdatflg2;
									gtlData.operation[o].Usrindname1 = operation[o].Usrindname1;
									gtlData.operation[o].Usrindflag1 = operation[o].Usrindflag1;
									gtlData.operation[o].Usrindname2 = operation[o].Usrindname2;
									gtlData.operation[o].Usrindflag2 = operation[o].Usrindflag2;
									gtlData.operation[o].qual = operation[o].Qlotype;
									gtlData.operation[o].search = operation[o].Qsearchtm;
									gtlData.operation[o].groupCounter = operation[o].Plnal;
								}
								/*var oprModel = new sap.ui.model.json.JSONModel();
								oprModel.setData(operation);*/
								// g.getModel("tlDetailModel").setProperty("/operation", operationDetails);
							}
							var component = results.GTComp.results;
							if (component.length > 0) {
								gtlData.component = component;
								for (var c = 0; c < component.length; c++) {
									gtlData.component[c].matDesc = component[c].Maktx;
									gtlData.component[c].slNo = c + 1;
									gtlData.component[c].flag = component[c].Plnal + "-" + component[c].Vornr + "-" + component[c].slNo;
									gtlData.component[c].hFlag = component[c].Plnal + "-" + component[c].Vornr;
									gtlData.component[c].group = component[c].Tlgnhdr;
									gtlData.component[c].groupCounter = component[c].Plnal;
									gtlData.component[c].activity = component[c].Vorn2gcmp;
									gtlData.component[c].component = component[c].Idnrk;
									gtlData.component[c].compDesc = component[c].Maktx;
									gtlData.component[c].compQty = component[c].Menge;
									gtlData.component[c].compUnit = component[c].MeinsGcp;
									gtlData.component[c].backFlush = component[c].RgekzGcp;
									gtlData.component[c].resv = component[c].Disp;
									gtlData.component[c].resvDesc = component[c].Disptxt;
									gtlData.component[c].storageLoc = component[c].Lgortgcmp;
									gtlData.component[c].costElement = component[c].Saktogcmp;
									gtlData.component[c].bom = component[c].Stlnrgcmp;
									gtlData.component[c].bomCat = component[c].Stltygcmp;
									gtlData.component[c].bomCatDesc = component[c].Stltygcmptxt;
									gtlData.component[c].itCat = component[c].Postp;
									gtlData.component[c].assembly = component[c].Istru;
									gtlData.component[c].sortStr = component[c].Sortf;
									gtlData.component[c].itemNo = component[c].Posnr;
									gtlData.component[c].plantMaint = component[c].Sanin;
									gtlData.component[c].relSales = component[c].Rvrel;
									gtlData.component[c].relCost = component[c].Sanka;
									gtlData.component[c].pmAssembly = component[c].Stkkz;
									gtlData.component[c].spare = component[c].Erskz;
									gtlData.component[c].matProv = component[c].Beikz;
									gtlData.component[c].isPlant = component[c].Pswrk;
									gtlData.component[c].bulkMat = component[c].Schgt;
									gtlData.component[c].plant = component[c].Werksgcmp;
									gtlData.component[c].purchGrp = component[c].Ekgrp;
									gtlData.component[c].price = component[c].Preis;
									gtlData.component[c].currency = component[c].Waers;
									gtlData.component[c].prUnit = component[c].Peinh;
									gtlData.component[c].delTimeD = component[c].Lifzt;
									gtlData.component[c].matGrp = component[c].Matkl;
									gtlData.component[c].qtyFix = component[c].Fmeng;
									gtlData.component[c].altBom = component[c].Stlal;
								}
								g.cmpData = component;
								/*compModel = new sap.ui.model.json.JSONModel();
								compModel.setData(component);*/
								// g.getModel("tlDetailModel").setProperty("/component", component);
							}
							var classList = results.GTClass.results;
							if (classList) {
								if (classList.length > 0) {
									for (var i = 0; i < classList.length; i++) {
										classList[i].ctEnable = false;
										classList[i].classEnable = false;
										classList[i].ClassTypeDesc = classList[i].Artxt;
										delete classList[i].Artxt;
										delete classList[i].Changerequestid;
										delete classList[i].Clint;
										delete classList[i].Service;
										classList[i].slNo = i + 1;
										classList[i].flag = classList[i].Plnal + "-" + classList[i].slNo;
									}
									g.cData = classList;
									gtlData.Class = classList;
									/*cModel = new sap.ui.model.json.JSONModel();
									cModel.setData(classList);
									g.class.setModel(cModel);*/
									// g.getView().byId("newClass").setEnabled(true); // check
								}
							}
							var charList = results.GTVal.results;
							if (charList) {
								if (charList.length > 0) {
									for (var j = 0; j < charList.length; j++) {
										charList[j].cNameEnable = false;
										delete charList[j].Ataut;
										delete charList[j].Ataw1;
										delete charList[j].Atawe;
										delete charList[j].Atcod;
										delete charList[j].Atflb;
										delete charList[j].Atflv;
										delete charList[j].Atimb;
										delete charList[j].Atsrt;
										delete charList[j].Atvglart;
										delete charList[j].Atzis;
										delete charList[j].Changerequestid;
										delete charList[j].CharName;
										delete charList[j].Charid;
										delete charList[j].Classtype;
										delete charList[j].Service;
										delete charList[j].Valcnt;
										charList[j].slNo = j + 1;
										charList[j].flag = charList[j].Plnal + "-" + charList[j].Class + "-" + charList[j].slNo;
									}
									g.chData = charList;
									/*_cModel = new sap.ui.model.json.JSONModel();
									_cModel.setData(charList);
									g.char.setModel(_cModel);*/
									gtlData.Char = charList;
								}
							}
							// g.getView().setModel(tlDetailModel, "tlDetailModel");
							AIWListGTLData.push(gtlData);
							sap.ui.getCore().getModel("AIWListGTLModel").setData(AIWListGTLData);
							// g.updateCount("generalTL", AIWListGTLData);
						}
					} else if (sSelectedTab === "EqTLTab") {
						if (results.ETList.results.length > 0) {
							var basic = results.ETList.results[0];
							var etlData = {
								validFrm: formatter.getDateFormat(basic.Edatuv),
								grp: basic.Tleqhdr,
								Plnal: basic.Tplnal,
								Ktext: basic.Ktext,
								wc: basic.Tarbpl,
								plant: basic.Wcplant,
								usg: basic.Tverwe,
								Statu: basic.Statu,
								// Ktext: basic.Werks,
								vEquiLbl: true,
								vEqui: true,
								vEquiDesc: true,
								equipment: basic.Eq2tl,
								equipmentDesc: basic.Etxt2tlR,
								vFlocLbl: false,
								vFloc: false,
								vFlocDesc: false,
								bAddComponent: true,
								enable: false,
								equiEnb: false,

								header: [],
								operation: [],
								component: [],
								Class: [],
								Char: []
							};
							// tlDetailModel.setData(g.currentObj);
							var header = results.ETList.results;
							if (header.length > 0) {
								etlData.header = header;
								for (var h = 0; h < header.length; h++) {
									etlData.header[h].pPlantDesc = header[h].Iwerktxt;
									etlData.header[h].usageDesc = header[h].TlUsgTxt;
									etlData.header[h].plGrpDesc = header[h].Plnnrgrptxt;
									etlData.header[h].statusDesc = header[h].Statustxt;
									etlData.header[h].sysCondDesc = header[h].Anlzux;
									etlData.header[h].stratDesc = header[h].Strattxt;
									etlData.header[h].Plnal = header[h].Tplnal;
									etlData.header[h].Verwe = header[h].Tverwe;
									etlData.header[h].plEnable = false;
									etlData.header[h].Ktext = header.Eqktx;
									etlData.header[h].valueStateT = "None";
									etlData.header[h].valueStatePP = "None";
									etlData.header[h].valueStateU = "None";
									etlData.header[h].valueStateS = "None";

									etlData.header[h].groupCounter = header[h].Plnal;
									etlData.header[h].profile = header[h].Profident;
									etlData.header[h].Ktext = header[h].Eqktx;
									etlData.header[h].keydate = header[h].Keydate;
									etlData.header[h].Ktext = header[h].Werks2etl;
									etlData.header[h].workCenter = header[h].Tarbpl;
									etlData.header[h].plant = header[h].Eplnt2tR;
									etlData.header[h].usage = header[h].Tverwe;
									etlData.header[h].plannerGrp = header[h].Vagrp2etl;
									etlData.header[h].Statu = header[h].Statu;
									etlData.header[h].systemCond = header[h].Anlzu;
									etlData.header[h].groupVal = header[h].Tleqhdr;
									etlData.header[h].groupCounterDesc = header[h].Eqktx;
									etlData.header[h].workCenterDesc = header[h].Wcdescription;
									etlData.header[h].assembly = header[h].Istru;
									etlData.header[h].equipment = header[h].Eq2tl;
									etlData.header[h].equipmentDesc = header[h].Eqktx;
									etlData.header[h].deletion = header[h].Delkz;
									etlData.header[h].TlUsgTxt = header[h].TlUsgTxt;
									etlData.header[h].Plnnrgrptxt = header[h].Plnnrgrptxt;
									etlData.header[h].Statustxt = header[h].Statustxt;
									etlData.header[h].Anlzux = header[h].Anlzux;
									etlData.header[h].Istrux = header[h].Istrux;
								}
								/*var oModel = new sap.ui.model.json.JSONModel();
								oModel.setData(etlData.header);*/
							}
							var operation = results.ETOprs.results;
							if (operation.length > 0) {
								etlData.operation = operation;
								for (var o = 0; o < operation.length; o++) {
									etlData.operation[o].calcKeyDesc = "";
									etlData.operation[o].actTypDesc = "";
									etlData.operation[o].flag = operation[o].Plnal + "-" + operation[o].Vornr;
									etlData.operation[o].Arbpl = operation[o].TlArbpl;
									etlData.operation[o].Plnal = operation[o].Tplnal;
									etlData.operation[o].opState = "None";
									etlData.operation[o].opDescState = "None";
									etlData.operation[o].wcState = "None";
									etlData.operation[o].plantState = "None";
									etlData.operation[o].ctrlKeyState = "None";

									etlData.operation[o].operation = operation[o].Evornr2op;
									etlData.operation[o].groupCounter = operation[o].Plnal;
									etlData.operation[o].subOp = operation[o].Uvorn;
									etlData.operation[o].workCenter = operation[o].TlArbpl;
									etlData.operation[o].plant = operation[o].Werks2eop;
									etlData.operation[o].controlKey = operation[o].Steus2eop;
									etlData.operation[o].shortText = operation[o].Ltxa1;
									etlData.operation[o].work = operation[o].Arbei;
									etlData.operation[o].unitForWork = operation[o].Arbeh;
									etlData.operation[o].number = operation[o].Anzzl;
									etlData.operation[o].calcKey = operation[o].Indet;
									etlData.operation[o].normDuration = operation[o].Dauno;
									etlData.operation[o].uomDuration = operation[o].Daune;
									etlData.operation[o].workPerc = operation[o].Prznt.toString();
									etlData.operation[o].exeFactor = operation[o].Aufkt;
									etlData.operation[o].actType = operation[o].Larnt2eop;
									etlData.operation[o].stdTextKey = operation[o].Ktsch;
									etlData.operation[o].assembly = operation[o].Tistru;
									etlData.operation[o].noOfTime = operation[o].Loanz;
									etlData.operation[o].sutability = operation[o].Qualf2eop;
									etlData.operation[o].wageGroup = operation[o].Logrp2eop;
									etlData.operation[o].wageType = operation[o].Loart;
									etlData.operation[o].sysCondition = operation[o].Tanlzu;
									etlData.operation[o].orderQty = operation[o].Bmvrg;
									etlData.operation[o].ordQtyUnit = operation[o].Bmeih;
									etlData.operation[o].netPrice = operation[o].Opreis;
									etlData.operation[o].currency = operation[o].Owaers;
									etlData.operation[o].priceUnit = operation[o].Opeinh;
									etlData.operation[o].planDelTime = operation[o].Plifz;
									etlData.operation[o].costElement = operation[o].Sakto2eop;
									etlData.operation[o].materialGrp = operation[o].Omatkl;
									etlData.operation[o].puchGroup = operation[o].Oekgrp;
									etlData.operation[o].vendor = operation[o].Lifnr;
									etlData.operation[o].purchOrg = operation[o].Ekorg;
									etlData.operation[o].shortTerm = operation[o].Sortl;
									etlData.operation[o].purchInfo = operation[o].Infnr;
									etlData.operation[o].fieldKey = operation[o].Slwid;
									etlData.operation[o].purchDoc = operation[o].Ebeln;
									etlData.operation[o].purchDocItem = operation[o].Ebelp2eop;
									etlData.operation[o].userFld = operation[o].Slwid;
									etlData.operation[o].capCat = operation[o].Qlkapar;
									etlData.operation[o].capCatDesc = operation[o].Kapartxt;
									etlData.operation[o].quantity1_ = operation[o].Use04;
									etlData.operation[o].quantity1 = operation[o].Usr04;
									etlData.operation[o].quantity2 = operation[o].Usr05;
									etlData.operation[o].quantity2_ = operation[o].Use05;
									etlData.operation[o].value3 = operation[o].Usr06;
									etlData.operation[o].value4 = operation[o].Usr07;
									etlData.operation[o].value3_ = operation[o].Use06;
									etlData.operation[o].value4_ = operation[o].Use07;
									etlData.operation[o].text1 = operation[o].Usr00;
									etlData.operation[o].text2 = operation[o].Usr01;
									etlData.operation[o].text3 = operation[o].Usr03;
									etlData.operation[o].text4 = operation[o].Usr04;
									etlData.operation[o].date1 = operation[o].Usr08;
									etlData.operation[o].date2 = operation[o].Usr09;
									etlData.operation[o].indicator1 = operation[o].Usr10;
									etlData.operation[o].indicator2 = operation[o].Usr11;
									etlData.operation[o].Usrtxtname1 = operation[o].Usrtxtname1;
									etlData.operation[o].Usrtxtflg1 = operation[o].Usrtxtflg1;
									etlData.operation[o].Usrtxtname2 = operation[o].Usrtxtname2;
									etlData.operation[o].Usrtxtflg2 = operation[o].Usrtxtflg2;
									etlData.operation[o].Usrtxtname3 = operation[o].Usrtxtname3;
									etlData.operation[o].Usrtxtflg3 = operation[o].Usrtxtflg3;
									etlData.operation[o].Usrtxtname4 = operation[o].Usrtxtname4;
									etlData.operation[o].Usrtxtflg4 = operation[o].Usrtxtflg4;
									etlData.operation[o].Usrqtyname1 = operation[o].Usrqtyname1;
									etlData.operation[o].Usrqtyflg1 = operation[o].Usrqtyflg1;
									etlData.operation[o].Usrqtyname2 = operation[o].Usrqtyname2;
									etlData.operation[o].Usrqtyflg2 = operation[o].Usrqtyflg2;
									etlData.operation[o].Usrvalname1 = operation[o].Usrvalname1;
									etlData.operation[o].Usrvalflg1 = operation[o].Usrvalflg1;
									etlData.operation[o].Usrvalname2 = operation[o].Usrvalname2;
									etlData.operation[o].Usrvalflg2 = operation[o].Usrvalflg2;
									etlData.operation[o].Usrdatename1 = operation[o].Usrdatename1;
									etlData.operation[o].Usrdatflg1 = operation[o].Usrdatflg1;
									etlData.operation[o].Usrdatename2 = operation[o].Usrdatename2;
									etlData.operation[o].Usrdatflg2 = operation[o].Usrdatflg2;
									etlData.operation[o].Usrindname1 = operation[o].Usrindname1;
									etlData.operation[o].Usrindflag1 = operation[o].Usrindflag1;
									etlData.operation[o].Usrindname2 = operation[o].Usrindname2;
									etlData.operation[o].Usrindflag2 = operation[o].Usrindflag2;
									etlData.operation[o].qual = operation[o].Qlotype;
									etlData.operation[o].search = operation[o].Qsearchtm;
								}
								g.oData = etlData.operation;
								/*	var oprModel = new sap.ui.model.json.JSONModel();
									oprModel.setData(etlData.operation);*/
								/*g.getModel("tlDetailModel").setProperty("/operation", operation);
								g.getModel("tlDetailModel").setProperty("/bAddOperation", true);*/
							}
						}
						component = results.ETComp.results;
						if (component.length > 0) {
							etlData.component = component;
							for (var e = 0; e < component.length; e++) {
								etlData.component[e].matDesc = component[e].Maktx;
								etlData.component[e].slNo = e + 1;
								etlData.component[e].flag = component[e].Plnal + "-" + component[e].Vornr + "-" + component[e].slNo;
								etlData.component[e].hFlag = component[e].Plnal + "-" + component[e].Vornr;

								etlData.component[e].group = component[e].Tleqhdr;
								etlData.component[e].groupCounter = component[e].Plnal;
								etlData.component[e].activity = component[e].Vorn2ecmp;
								etlData.component[e].component = component[e].Idnrk;
								etlData.component[e].compDesc = component[e].Maktx;
								etlData.component[e].compQty = component[e].Menge;
								etlData.component[e].compUnit = component[e].MeinsEcp;
								etlData.component[e].backFlush = component[e].RgekzEcp;
								etlData.component[e].resv = component[e].Disp;
								etlData.component[e].resvDesc = component[e].Disptxt;
								etlData.component[e].storageLoc = component[e].Lgortecmp;
								etlData.component[e].costElement = component[e].Saktoecmp;
								etlData.component[e].bom = component[e].Stlnrecmp;
								etlData.component[e].bomCat = component[e].Stltyecmp;
								etlData.component[e].bomCatDesc = component[e].Stltyecmptxt;
								etlData.component[e].itCat = component[e].Postp;
								etlData.component[e].assembly = component[e].Istru;
								etlData.component[e].sortStr = component[e].Sortf;
								etlData.component[e].itemNo = component[e].Posnr;
								etlData.component[e].plantMaint = component[e].Sanin;
								etlData.component[e].relSales = component[e].Rvrel;
								etlData.component[e].relCost = component[e].Sanka;
								etlData.component[e].pmAssembly = component[e].Stkkz;
								etlData.component[e].spare = component[e].Erskz;
								etlData.component[e].matProv = component[e].Beikz;
								etlData.component[e].isPlant = component[e].Pswrk;
								etlData.component[e].bulkMat = component[e].Schgt;
								etlData.component[e].plant = component[e].Werksecmp;
								etlData.component[e].purchGrp = component[e].Ekgrp;
								etlData.component[e].price = component[e].Preis;
								etlData.component[e].currency = component[e].Waers;
								etlData.component[e].prUnit = component[e].Peinh;
								etlData.component[e].delTimeD = component[e].Lifzt;
								etlData.component[e].matGrp = component[e].Matkl;
								etlData.component[e].qtyFix = component[e].Fmeng;
								etlData.component[e].altBom = component[e].Stlal;
							}
							g.cmpData = component;
							/*compModel = new sap.ui.model.json.JSONModel();
							compModel.setData(component);*/
							// g.getModel("tlDetailModel").setProperty("/component", component);
						}
						var classList = results.ETClass.results;
						if (classList) {
							if (classList.length > 0) {
								for (var i = 0; i < classList.length; i++) {
									classList[i].ctEnable = false;
									classList[i].classEnable = false;
									classList[i].ClassTypeDesc = classList[i].Artxt;
									delete classList[i].Artxt;
									delete classList[i].Changerequestid;
									delete classList[i].Clint;
									delete classList[i].Service;
									classList[i].slNo = i + 1;
									classList[i].flag = classList[i].Plnal + "-" + classList[i].slNo;
								}
								g.cData = classList;
								/*cModel = new sap.ui.model.json.JSONModel();
								cModel.setData(classList);
								g.class.setModel(cModel);*/
								etlData.Class = classList;
							}
						}
						var charList = results.ETVal.results;
						if (charList) {
							if (charList.length > 0) {
								for (var j = 0; j < charList.length; j++) {
									charList[j].cNameEnable = false;
									delete charList[j].Ataut;
									delete charList[j].Ataw1;
									delete charList[j].Atawe;
									delete charList[j].Atcod;
									delete charList[j].Atflb;
									delete charList[j].Atflv;
									delete charList[j].Atimb;
									delete charList[j].Atsrt;
									delete charList[j].Atvglart;
									delete charList[j].Atzis;
									delete charList[j].Changerequestid;
									delete charList[j].CharName;
									delete charList[j].Charid;
									delete charList[j].Classtype;
									delete charList[j].Service;
									delete charList[j].Valcnt;
									charList[j].slNo = j + 1;
									charList[j].flag = charList[j].Plnal + "-" + charList[j].Class + "-" + charList[j].slNo;
								}
								g.chData = charList;
								/*_cModel = new sap.ui.model.json.JSONModel();
								_cModel.setData(charList);
								g.char.setModel(_cModel);*/
								etlData.Char = charList;
							}
						}
						AIWListETLData.push(etlData);
						sap.ui.getCore().getModel("AIWListETLModel").setData(AIWListETLData);
						// g.updateCount("equiTL", AIWListETLData);

					} else if (sSelectedTab === "FLOCTLTab") {
						if (results.FTList.results.length > 0) {
							var basic = results.FTList.results[0];
							var ftlData = {
								validFrm: formatter.getDateFormat(basic.Fdatuv),
								grp: basic.Tlflhdr,
								Plnal: basic.Tplnal,
								Ktext: basic.Ktext,
								wc: basic.Tarbpl,
								plant: basic.Wcplant,
								usg: basic.Tverwe,
								Statu: basic.Statu,
								// Ktext: basic.Werks,
								vEquiLbl: false,
								vEqui: false,
								vEquiDesc: false,
								floc: basic.Fl2tl,
								flocDesc: basic.Ftxt2tlR,
								vFlocLbl: true,
								vFloc: true,
								vFlocDesc: true,
								bAddComponent: true,
								enable: false,
								header: [],
								operation: [],
								component: [],
								Class: [],
								Char: []
							};
							// tlDetailModel.setData(g.currentObj);
							var header = results.FTList.results;
							if (header.length > 0) {
								ftlData.header = header;
								for (var h = 0; h < header.length; h++) {
									ftlData.header[h].pPlantDesc = header[h].Iwerktxt;
									ftlData.header[h].usageDesc = header[h].TlUsgTxt;
									ftlData.header[h].plGrpDesc = header[h].Plnnrgrptxt;
									ftlData.header[h].statusDesc = header[h].Statustxt;
									ftlData.header[h].sysCondDesc = header[h].Anlzux;
									ftlData.header[h].stratDesc = header[h].Strattxt;
									ftlData.header[h].Plnal = header[h].Tplnal;
									ftlData.header[h].Verwe = header[h].Tverwe;
									ftlData.header[h].plEnable = false;
									ftlData.header[h].Ktext = header.Pltxt;
									ftlData.header[h].valueStateT = "None";
									ftlData.header[h].valueStatePP = "None";
									ftlData.header[h].valueStateU = "None";
									ftlData.header[h].valueStateS = "None";

									ftlData.header[h].groupCounter = header[h].Plnal;
									ftlData.header[h].Ktext = header[h].Pltxt;
									ftlData.header[h].profile = header[h].Profident;
									ftlData.header[h].keydate = header[h].Keydate;
									ftlData.header[h].Ktext = header[h].Werks2ftl;
									ftlData.header[h].workCenter = header[h].Tarbpl;
									ftlData.header[h].plant = header[h].Fplnt2tR;
									ftlData.header[h].usage = header[h].Tverwe;
									ftlData.header[h].plannerGrp = header[h].Vagrp2ftl;
									ftlData.header[h].Statu = header[h].Statu;
									ftlData.header[h].systemCond = header[h].Anlzu;
									ftlData.header[h].groupVal = header[h].Tlflhdr;
									ftlData.header[h].groupCounterDesc = header[h].Pltxt;
									ftlData.header[h].workCenterDesc = header[h].Wcdescription;
									ftlData.header[h].assembly = header[h].Istru;
									ftlData.header[h].floc = header[h].Fl2tl;
									ftlData.header[h].flocDesc = header[h].Pltxt;
									ftlData.header[h].deletion = header[h].Delkz;
									ftlData.header[h].TlUsgTxt = header[h].TlUsgTxt;
									ftlData.header[h].Plnnrgrptxt = header[h].Plnnrgrptxt;
									ftlData.header[h].Statustxt = header[h].Statustxt;
									ftlData.header[h].Anlzux = header[h].Anlzux;
									ftlData.header[h].Istrux = header[h].Istrux;
								}
								var oModel = new sap.ui.model.json.JSONModel();
								oModel.setData(ftlData.header);
								/*g.getView().byId("taskListHeaderOverview").setModel(oModel, "tlDetailModel");
								g.getModel("tlDetailModel").setProperty("/header", header);*/
							}
							var operation = results.FTOprs.results;
							if (operation.length > 0) {
								ftlData.operation = operation;
								for (var o = 0; o < operation.length; o++) {
									ftlData.operation[o].calcKeyDesc = "";
									ftlData.operation[o].actTypDesc = "";
									ftlData.operation[o].flag = operation[o].Plnal + "-" + operation[o].Vornr;
									ftlData.operation[o].Arbpl = operation[o].TlArbpl;
									ftlData.operation[o].Plnal = operation[o].Tplnal;
									ftlData.operation[o].opState = "None";
									ftlData.operation[o].opDescState = "None";
									ftlData.operation[o].wcState = "None";
									ftlData.operation[o].plantState = "None";
									ftlData.operation[o].ctrlKeyState = "None";

									ftlData.operation[o].groupCounter = operation[o].Plnal;
									ftlData.operation[o].operation = operation[o].Fvornr2op;
									ftlData.operation[o].subOp = operation[o].Uvorn;
									ftlData.operation[o].workCenter = operation[o].TlArbpl;
									ftlData.operation[o].plant = operation[o].Werks2fop;
									ftlData.operation[o].controlKey = operation[o].Steus2fop;
									ftlData.operation[o].shortText = operation[o].Ltxa1;
									ftlData.operation[o].work = operation[o].Arbei;
									ftlData.operation[o].unitForWork = operation[o].Arbeh;
									ftlData.operation[o].number = operation[o].Anzzl;
									ftlData.operation[o].calcKey = operation[o].Indet;
									ftlData.operation[o].normDuration = operation[o].Dauno;
									ftlData.operation[o].uomDuration = operation[o].Daune;
									ftlData.operation[o].workPerc = operation[o].Prznt.toString();
									ftlData.operation[o].exeFactor = operation[o].Aufkt;
									ftlData.operation[o].actType = operation[o].Larnt2fop;
									ftlData.operation[o].stdTextKey = operation[o].Ktsch;
									ftlData.operation[o].assembly = operation[o].Tistru;
									ftlData.operation[o].noOfTime = operation[o].Loanz;
									ftlData.operation[o].sutability = operation[o].Qualf2fop;
									ftlData.operation[o].wageGroup = operation[o].Logrp2fop;
									ftlData.operation[o].wageType = operation[o].Loart;
									ftlData.operation[o].sysCondition = operation[o].Tanlzu;
									ftlData.operation[o].orderQty = operation[o].Bmvrg;
									ftlData.operation[o].ordQtyUnit = operation[o].Bmeih;
									ftlData.operation[o].netPrice = operation[o].Opreis;
									ftlData.operation[o].currency = operation[o].Owaers;
									ftlData.operation[o].priceUnit = operation[o].Opeinh;
									ftlData.operation[o].planDelTime = operation[o].Plifz;
									ftlData.operation[o].costElement = operation[o].Sakto2fop;
									ftlData.operation[o].materialGrp = operation[o].Omatkl;
									ftlData.operation[o].puchGroup = operation[o].Oekgrp;
									ftlData.operation[o].vendor = operation[o].Lifnr;
									ftlData.operation[o].purchOrg = operation[o].Ekorg;
									ftlData.operation[o].shortTerm = operation[o].Sortl;
									ftlData.operation[o].purchInfo = operation[o].Infnr;
									ftlData.operation[o].fieldKey = operation[o].Slwid;
									ftlData.operation[o].purchDoc = operation[o].Ebeln;
									ftlData.operation[o].purchDocItem = operation[o].Ebelp2fop;
									ftlData.operation[o].userFld = operation[o].Slwid;
									ftlData.operation[o].capCat = operation[o].Qlkapar;
									ftlData.operation[o].capCatDesc = operation[o].Kapartxt;
									ftlData.operation[o].quantity1_ = operation[o].Use04;
									ftlData.operation[o].quantity1 = operation[o].Usr04;
									ftlData.operation[o].quantity2 = operation[o].Usr05;
									ftlData.operation[o].quantity2_ = operation[o].Use05;
									ftlData.operation[o].value3 = operation[o].Usr06;
									ftlData.operation[o].value4 = operation[o].Usr07;
									ftlData.operation[o].value3_ = operation[o].Use06;
									ftlData.operation[o].value4_ = operation[o].Use07;
									ftlData.operation[o].text1 = operation[o].Usr00;
									ftlData.operation[o].text2 = operation[o].Usr01;
									ftlData.operation[o].text3 = operation[o].Usr03;
									ftlData.operation[o].text4 = operation[o].Usr04;
									ftlData.operation[o].date1 = operation[o].Usr08;
									ftlData.operation[o].date2 = operation[o].Usr09;
									ftlData.operation[o].indicator1 = operation[o].Usr10;
									ftlData.operation[o].indicator2 = operation[o].Usr11;
									ftlData.operation[o].Usrtxtname1 = operation[o].Usrtxtname1;
									ftlData.operation[o].Usrtxtflg1 = operation[o].Usrtxtflg1;
									ftlData.operation[o].Usrtxtname2 = operation[o].Usrtxtname2;
									ftlData.operation[o].Usrtxtflg2 = operation[o].Usrtxtflg2;
									ftlData.operation[o].Usrtxtname3 = operation[o].Usrtxtname3;
									ftlData.operation[o].Usrtxtflg3 = operation[o].Usrtxtflg3;
									ftlData.operation[o].Usrtxtname4 = operation[o].Usrtxtname4;
									ftlData.operation[o].Usrtxtflg4 = operation[o].Usrtxtflg4;
									ftlData.operation[o].Usrqtyname1 = operation[o].Usrqtyname1;
									ftlData.operation[o].Usrqtyflg1 = operation[o].Usrqtyflg1;
									ftlData.operation[o].Usrqtyname2 = operation[o].Usrqtyname2;
									ftlData.operation[o].Usrqtyflg2 = operation[o].Usrqtyflg2;
									ftlData.operation[o].Usrvalname1 = operation[o].Usrvalname1;
									ftlData.operation[o].Usrvalflg1 = operation[o].Usrvalflg1;
									ftlData.operation[o].Usrvalname2 = operation[o].Usrvalname2;
									ftlData.operation[o].Usrvalflg2 = operation[o].Usrvalflg2;
									ftlData.operation[o].Usrdatename1 = operation[o].Usrdatename1;
									ftlData.operation[o].Usrdatflg1 = operation[o].Usrdatflg1;
									ftlData.operation[o].Usrdatename2 = operation[o].Usrdatename2;
									ftlData.operation[o].Usrdatflg2 = operation[o].Usrdatflg2;
									ftlData.operation[o].Usrindname1 = operation[o].Usrindname1;
									ftlData.operation[o].Usrindflag1 = operation[o].Usrindflag1;
									ftlData.operation[o].Usrindname2 = operation[o].Usrindname2;
									ftlData.operation[o].Usrindflag2 = operation[o].Usrindflag2;
									ftlData.operation[o].qual = operation[o].Qlotype;
									ftlData.operation[o].search = operation[o].Qsearchtm;
								}
								g.oData = ftlData.operation;
								var oprModel = new sap.ui.model.json.JSONModel();
								oprModel.setData(ftlData.operation);
								// g.getView().byId("operationTab").setModel(oprModel, "tlDetailModel");
							}
							component = results.FTComp.results;
							if (component.length > 0) {
								ftlData.component = component;
								for (var f = 0; f < component.length; f++) {
									ftlData.component[f].matDesc = component[f].Maktx;
									ftlData.component[f].slNo = e + 1;
									ftlData.component[f].flag = component[f].Plnal + "-" + component[f].Vornr + "-" + component[f].slNo;
									ftlData.component[f].hFlag = component[f].Plnal + "-" + component[f].Vornr;

									ftlData.component[f].group = component[f].Tlflhdr;
									ftlData.component[f].groupCounter = component[f].Plnal;
									ftlData.component[f].activity = component[f].Vorn2fcmp;
									ftlData.component[f].component = component[f].Idnrk;
									ftlData.component[f].compDesc = component[f].Maktx;
									ftlData.component[f].compQty = component[f].Menge;
									ftlData.component[f].compUnit = component[f].MeinsFcp;
									ftlData.component[f].backFlush = component[f].RgekzFcp;
									ftlData.component[f].resv = component[f].Disp;
									ftlData.component[f].resvDesc = component[f].Disptxt;
									ftlData.component[f].storageLoc = component[f].Lgortfcmp;
									ftlData.component[f].costElement = component[f].Saktofcmp;
									ftlData.component[f].bom = component[f].Stlnrfcmp;
									ftlData.component[f].bomCat = component[f].Stltyfcmp;
									ftlData.component[f].bomCatDesc = component[f].Stltyfcmptxt;
									ftlData.component[f].itCat = component[f].Postp;
									ftlData.component[f].assembly = component[f].Istru;
									ftlData.component[f].sortStr = component[f].Sortf;
									ftlData.component[f].itemNo = component[f].Posnr;
									ftlData.component[f].plantMaint = component[f].Sanin;
									ftlData.component[f].relSales = component[f].Rvrel;
									ftlData.component[f].relCost = component[f].Sanka;
									ftlData.component[f].pmAssembly = component[f].Stkkz;
									ftlData.component[f].spare = component[f].Erskz;
									ftlData.component[f].matProv = component[f].Beikz;
									ftlData.component[f].isPlant = component[f].Pswrk;
									ftlData.component[f].bulkMat = component[f].Schgt;
									ftlData.component[f].plant = component[f].Werksfcmp;
									ftlData.component[f].purchGrp = component[f].Ekgrp;
									ftlData.component[f].price = component[f].Preis;
									ftlData.component[f].currency = component[f].Waers;
									ftlData.component[f].prUnit = component[f].Peinh;
									ftlData.component[f].delTimeD = component[f].Lifzt;
									ftlData.component[f].matGrp = component[f].Matkl;
									ftlData.component[f].qtyFix = component[f].Fmeng;
									ftlData.component[f].altBom = component[f].Stlal;
								}
								g.cmpData = component;
								/*compModel = new sap.ui.model.json.JSONModel();
								compModel.setData(ftlData.component);*/
							}
							var classList = results.FTClass.results;
							if (classList) {
								if (classList.length > 0) {
									for (var i = 0; i < classList.length; i++) {
										classList[i].ctEnable = false;
										classList[i].classEnable = false;
										classList[i].ClassTypeDesc = classList[i].Artxt;
										delete classList[i].Artxt;
										delete classList[i].Changerequestid;
										delete classList[i].Clint;
										delete classList[i].Service;
										classList[i].slNo = i + 1;
										classList[i].flag = classList[i].Plnal + "-" + classList[i].slNo;
									}
									g.cData = classList;
									/*cModel = new sap.ui.model.json.JSONModel();
									cModel.setData(classList);
									g.class.setModel(cModel);*/
									ftlData.Class = classList;
								}
							}
							var charList = results.FTVal.results;
							if (charList) {
								if (charList.length > 0) {
									for (var j = 0; j < charList.length; j++) {
										charList[j].cNameEnable = false;
										delete charList[j].Ataut;
										delete charList[j].Ataw1;
										delete charList[j].Atawe;
										delete charList[j].Atcod;
										delete charList[j].Atflb;
										delete charList[j].Atflv;
										delete charList[j].Atimb;
										delete charList[j].Atsrt;
										delete charList[j].Atvglart;
										delete charList[j].Atzis;
										delete charList[j].Changerequestid;
										delete charList[j].CharName;
										delete charList[j].Charid;
										delete charList[j].Classtype;
										delete charList[j].Service;
										delete charList[j].Valcnt;
										charList[j].slNo = j + 1;
										charList[j].flag = charList[j].Plnal + "-" + charList[j].Class + "-" + charList[j].slNo;
									}
									g.chData = charList;
									/*_cModel = new sap.ui.model.json.JSONModel();
									_cModel.setData(charList);
									g.char.setModel(_cModel);*/
									ftlData.Char = charList;
								}
							}
							AIWListFTLData.push(ftlData);
							sap.ui.getCore().getModel("AIWListFTLModel").setData(AIWListFTLData);
							// g.updateCount("flocTL", AIWListFTLData);
						}
					} else if (sSelectedTab === "OLTab") {
						if (results.Olink) {
							var d = results.Olink.results[0];
							g.olData = d;
							if (d !== null) {
								g.linkCat = d.Netyp;
								g.objCat = d.Kantyp;
								g.olData.link = d.Objlink;
								// Netyp: d.Netyp,
								g.olData.linkCat = d.Netyp;
								g.olData.linkCatDesc = d.Netyptxt;
								// Kantyp= d.Kantyp;
								g.olData.objCat = d.Kantyp;
								g.olData.objCatDesc = d.Kantyptxt;
								g.olData.linkDesc = d.Kanxt;
								g.olData.netId = d.Netid;
								g.olData.netIdDesc = d.Netidtxt;
								g.olData.linkNum = d.Lfdknr;
								g.olData.autGrp = d.Begru;
								g.olData.autGrpDesc = d.Begtx;
								g.olData.validFrm = formatter.getDateFormat(d.Datva);
								g.olData.timeFrm = formatter.getTime(d.Zeitva);
								g.olData.validTo = formatter.getDateFormat(d.Datvb);
								g.olData.timeTo = formatter.getTime(d.Zeitvb);
								g.olData.medium = d.Mediu;
								g.olData.mediumDesc = d.Medkxt;
								g.olData.linkFrmFlEn = false;
								g.olData.linkToFlEn = false;
								g.olData.linkObjFlEn = false;
								g.olData.linkFromEQEn = false;
								g.olData.linkToEQEn = false;
								g.olData.linkObjEqEn = false;
								g.olData.linkCatEn = false;
								g.olData.linkCatVS = "None";
								g.olData.objCatEn = false;
								g.olData.objCatVS = "None";
								g.olData.linkFEqLblRQ = true;
								g.olData.linkToEqLblRQ = true;
								g.olData.linkFrmEq = "";
								g.olData.linkFrmEqDesc = "";
								g.olData.linkToEq = "";
								g.olData.linkToEqDesc = "";
								g.olData.linkObjEq = "";
								g.olData.linkObjEqDesc = "";
								g.olData.linkFrmflLblV = false;
								g.olData.linkFrmFlV = false;
								g.olData.linkFrmFlDescV = false;
								g.olData.linkToFlLblV = false;
								g.olData.linkToFlV = false;
								g.olData.linkToFlDescV = false;
								g.olData.linkObjFlLblV = false;
								g.olData.linkObjFlV = false;
								g.olData.linkObjFlDescV = false;
								g.olData.linkFrmEqLblV = true;
								g.olData.linkFrmEqV = true;
								g.olData.linkFrmEqDescV = true;
								g.olData.linkToEqLblV = true;
								g.olData.linkToEQV = true;
								g.olData.linkToEqDescV = true;
								g.olData.linkObjEqLblV = true;
								g.olData.linkObjEqV = true;
								g.olData.linkObjEqDescV = true;
								g.olData.enable = false;
								g.olData.LAM = [];
								g.olData.Class = [];
								g.olData.Char = [];
								if (g.objCat === "E") {
									g.olData.linkCatEn = false;
									g.olData.linkFrmFlEn = false;
									g.olData.linkToFlEn = false;
									g.olData.linkObjFlEn = false;
									g.olData.linkFEqLblRQ = true;
									g.olData.linkToEqLblRQ = true;
									g.olData.linkFrmflLblV = false;
									g.olData.linkFrmFlV = false;
									g.olData.linkFrmFlDescV = false;
									g.olData.linkToFlLblV = false;
									g.olData.linkToFlV = false;
									g.olData.linkToFlDescV = false;
									g.olData.linkObjFlLblV = false;
									g.olData.linkObjFlV = false;
									g.olData.linkObjFlDescV = false;
									g.olData.linkCatVS = "None";
									g.olData.objCatEn = false;
									g.olData.objCatVS = "None";
									g.olData.linkFEqLblRQ = true;
									g.olData.linkToEqLblRQ = true;
									g.olData.linkFrmEq = d.Eqvon;
									g.olData.linkFrmEqDesc = d.Eqtxtf;
									g.olData.linkToEq = d.Eqnach;
									g.olData.linkToEqDesc = d.Eqtxtt;
									g.olData.linkObjEq = d.Eqkant;
									g.olData.linkObjEqDesc = d.Eqtxtl;
									g.olData.linkFrmflLblV = false;
									g.olData.linkFrmFlV = false;
									g.olData.linkFrmFlDescV = false;
									g.olData.linkToFlLblV = false;
									g.olData.linkToFlV = false;
									g.olData.linkToFlDescV = false;
									g.olData.linkObjFlLblV = false;
									g.olData.linkObjFlV = false;
									g.olData.linkObjFlDescV = false;
									g.olData.linkFrmEqLblV = true;
									g.olData.linkFrmEqV = true;
									g.olData.linkFrmEqDescV = true;
									g.olData.linkToEqLblV = true;
									g.olData.linkToEQV = true;
									g.olData.linkToEqDescV = true;
									g.olData.linkObjEqLblV = true;
									g.olData.linkObjEqV = true;
									g.olData.linkObjEqDescV = true;
									readStatusProf(g.linkCat);
								} else if (g.objCat === "T") {
									g.olData.linkCatEn = false;
									g.olData.linkFromEQEn = false;
									g.olData.linkToEQEn = false;
									g.olData.linkObjEqEn = false;
									g.olData.linkFrmflLblRQ = true;
									g.olData.linkToFlLblRQ = true;
									g.olData.linkFrmEqLblV = false;
									g.olData.linkFrmEqV = false;
									g.olData.linkFrmEqDescV = false;
									g.olData.linkToEqLblV = false;
									g.olData.linkToEQV = false;
									g.olData.linkToEqDescV = false;
									g.olData.linkObjEqLblV = false;
									g.olData.linkObjEqV = false;
									g.olData.linkObjEqDescV = false;
									g.olData.linkCatVS = "None";
									g.olData.objCatEn = false;
									g.olData.objCatVS = "None";
									g.olData.linkFrmflLblRQ = true;
									g.olData.linkToFlLblRQ = true;
									g.olData.linkFrmFl = d.Tpvon;
									g.olData.linkFrmFlDesc = d.Fltxtf;
									g.olData.linkToFl = d.Tpnach;
									g.olData.linkToFlDesc = d.Fltxtt;
									g.olData.linkObjFl = d.Tpkant;
									g.olData.linkObjFlDesc = d.Fltxtl;
									g.olData.linkFrmflLblV = true;
									g.olData.linkFrmFlV = true;
									g.olData.linkFrmFlDescV = true;
									g.olData.linkToFlLblV = true;
									g.olData.linkToFlV = true;
									g.olData.linkToFlDescV = true;
									g.olData.linkObjFlLblV = true;
									g.olData.linkObjFlV = true;
									g.olData.linkObjFlDescV = true;
									g.olData.linkFrmEqLblV = false;
									g.olData.linkFrmEqV = false;
									g.olData.linkFrmEqDescV = false;
									g.olData.linkToEqLblV = false;
									g.olData.linkToEQV = false;
									g.olData.linkToEqDescV = false;
									g.olData.linkObjEqLblV = false;
									g.olData.linkObjEqV = false;
									g.olData.linkObjEqDescV = false;
									readStatusProf(g.linkCat);
								}

								if (d.Bezarp === "2") {
									// g._oView.byId("twoWayRel").setSelected(true);
									g.olData.twoWayRel = true;
									g.olData.oneWayRel = false;
								} else if (d.Bezarp === "1") {
									// g._oView.byId("oneWayRel").setSelected(true);
									g.olData.oneWayRel = true;
									g.olData.twoWayRel = false;
								}

								if (d.Bezarl === "2") {
									// g._oView.byId("twoWayUsd").setSelected(true);
									g.olData.twoWayUsd = true;
									g.olData.oneWayUsd = false;
									g.olData.relNotUsd = false;
								} else if (d.Bezarl === "1") {
									// g._oView.byId("oneWayUsd").setSelected(true);
									g.olData.oneWayUsd = true;
									g.olData.relNotUsd = false;
									g.olData.twoWayUsd = false;
								} else if (d.Bezarl === "0") {
									// g._oView.byId("relNotUsd").setSelected(true);
									g.olData.relNotUsd = true;
									g.olData.oneWayUsd = false;
									g.olData.twoWayUsd = false;
								}

								var lamData = results.OLLAM.results;
								var lModel = new sap.ui.model.json.JSONModel();
								lModel.setData(lamData);
								g.olData.LAM = lamData;

								var classList = results.OLClass.results;
								if (classList) {
									if (classList.length > 0) {
										for (var h = 0; h < classList.length; h++) {
											classList[h].ctEnable = false;
											classList[h].classEnable = false;
											classList[h].ClassTypeDesc = classList[h].Artxt;
											delete classList[h].Artxt;
											delete classList[h].Changerequestid;
											delete classList[h].Clint;
											delete classList[h].Service;
										}
										/*var cModel = new sap.ui.model.json.JSONModel();
										cModel.setData(classList);
										g.class.setModel(cModel);*/
										g.olData.Class = classList;
									}
								}

								var charList = results.OLVal.results;
								if (charList) {
									if (charList.length > 0) {
										for (var j = 0; j < charList.length; j++) {
											charList[j].cNameEnable = false;
											delete charList[j].Ataut;
											delete charList[j].Ataw1;
											delete charList[j].Atawe;
											delete charList[j].Atcod;
											delete charList[j].Atflb;
											delete charList[j].Atflv;
											delete charList[j].Atimb;
											delete charList[j].Atsrt;
											delete charList[j].Atvglart;
											delete charList[j].Atzis;
											delete charList[j].Changerequestid;
											delete charList[j].CharName;
											delete charList[j].Charid;
											delete charList[j].Classtype;
											delete charList[j].Service;
											delete charList[j].Valcnt;
											charList[j].slNo = j + 1;
											charList[j].flag = charList[j].Class + "-" + charList[j].slNo;
										}
										/*var _cModel = new sap.ui.model.json.JSONModel();
										_cModel.setData(charList);
										g.char.setModel(_cModel);*/
										g.olData.Char = charList;
										// g.chData = charList;
									}
								}

								/*AIWListOLData.push(g.olData);
								sap.ui.getCore().getModel("AIWListOLModel").setData(AIWListOLData);
								g.updateCount("objLink", AIWListOLData);
								sap.ui.getCore().getModel("AIWListOLModel").refresh();*/
							}
						}
					}
				}
				g.BusyDialog.close();
			}

			function fnError(err) {
				var error = [];
				if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror.errordetails
					.length === 0) {
					error[0] = JSON.parse(err.responseText).error.message.value;
				} else {
					for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
						error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
					}
				}
				var value = error.join("\n");
				g.BusyDialog.close();
				g.invokeMessage(value);
			}
			this.BusyDialog.open();
			m.read("/ChangeRequestSet", {
				filters: oFilter,
				urlParameters: {
					"$expand": oExpand
				},
				success: fnSuccess,
				error: fnError
			});
		},

		onMainIconTabBarSelect: function (oEvent) {
			var selectedItem = oEvent.getParameter("item").getKey();
			var selectedSubItem = oEvent.getParameter("item").getAggregation("content");
			/*var itemProperties = selectedSubItem[0].mProperties;
			if (itemProperties.hasOwnProperty("selectedKey")) {
			                var selectedSubItemKey = selectedSubItem[0].getSelectedKey();
			}*/
			var selectedSubItemKey = "";
			if (this.mode === "display") {
				switch (selectedItem) {
				case "WCTab":
					this.readApprovalData("WCTab");
					break;
				case "TLTab":
					var TLFragmentId = this.getView().createId("tlMain");
					var TLKey = sap.ui.core.Fragment.byId(TLFragmentId, "_iconTabBarTL").getSelectedKey();
					if (TLKey && !selectedSubItemKey) {
						selectedSubItemKey = selectedSubItem[0].getSelectedKey();
					}
					if (selectedSubItemKey === "GTLTab") {
						this.readApprovalData("GTLTab");
						this.action = "ApproveGTL";
					} else if (selectedSubItemKey === "EqTLTab") {
						this.readApprovalData("EqTLTab");
						this.action = "ApproveETL";
					} else if (selectedSubItemKey === "FLOCTLTab") {
						this.readApprovalData("FLOCTLTab");
						this.action = "ApproveFTL";
					}
					break;
				case "OLTab":
					this.readApprovalData("OLTab");
					break;
				}
			} else {
				switch (selectedItem) {
				case "WCTab":
					this.action = "createWC";
					break;
				case "TLTab":
					selectedSubItemKey = selectedSubItem[0].getSelectedKey();
					if (selectedSubItemKey === "GTLTab") {
						this.action = "createGTL";
					} else if (selectedSubItemKey === "EqTLTab") {
						this.action = "createETL";
					} else if (selectedSubItemKey === "FLOCTLTab") {
						this.action = "createFTL";
					}
					break;
				case "OLTab":
					this.action = "createOL";
					this.readObjCat();
					this.readLinkCat();
					break;
				}
			}
		},
		/*
		 * Function to handle tab selection with Task list
		 * @param {sap.ui.base.Event} oEvent
		 * @public
		 */
		onTLIconTabBarSelect: function (oEvent) {
			var selectedItem = oEvent.getParameter("item").getKey();
			if (this.mode === "display") {
				switch (selectedItem) {
				case "GTLTab":
					// this.readApprovalData("GTLTab");
					this.action = "ApproveGTL";
					break;
				case "EqTLTab":
					// this.readApprovalData("EqTLTab");
					this.action = "ApproveETL";
					break;
				case "FLOCTLTab":
					// this.readApprovalData("FLOCTLTab");
					this.action = "ApproveFTL";
					break;
				}
			} else {
				switch (selectedItem) {
				case "GTLTab":
					this.action = "createGTL";
					break;
				case "EqTLTab":
					this.action = "createETL";
					break;
				case "FLOCTLTab":
					this.action = "createFTL";
					break;
				}
			}
		},
		/*
		 * Function to handle delete of WC, TL & OL
		 * @param {sap.ui.base.Event} e
		 * @public
		 */
		handleDelete: function (e) {
			var path, model;
			if (this.action === "createWC") {
				path = e.getSource().getBindingContext("AIWListWCModel").getPath();
				this.getView().getModel("AIWListWCModel").getData().splice(parseInt(path.substring(1)), 1);
				model = e.getSource().getModel("AIWListWCModel");
				this.updateCount("workCenter", model.getData());
			} else if (this.action === "createGTL") {
				path = e.getSource().getBindingContext("AIWListGTLModel").getPath();
				this.getView().getModel("AIWListGTLModel").getData().splice(parseInt(path.substring(1)), 1);
				model = e.getSource().getModel("AIWListGTLModel");
				this.updateCount("generalTL", model.getData());
			} else if (this.action === "createETL") {
				path = e.getSource().getBindingContext("AIWListETLModel").getPath();
				this.getView().getModel("AIWListETLModel").getData().splice(parseInt(path.substring(1)), 1);
				model = e.getSource().getModel("AIWListETLModel");
				this.updateCount("equiTL", model.getData());
			} else if (this.action === "createFTL") {
				path = e.getSource().getBindingContext("AIWListFTLModel").getPath();
				this.getView().getModel("AIWListFTLModel").getData().splice(parseInt(path.substring(1)), 1);
				model = e.getSource().getModel("AIWListFTLModel");
				this.updateCount("flocTL", model.getData());
			} else if (this.action === "createOL") {
				path = e.getSource().getBindingContext("AIWListOLModel").getPath();
				this.getView().getModel("AIWListOLModel").getData().splice(parseInt(path.substring(1)), 1);
				model = e.getSource().getModel("AIWListOLModel");
				this.updateCount("objLink", model.getData());
			}
			var data = model.getProperty('/');
			//data.splice(parseInt(path.substring(1)), 1);
			model.setProperty('/', data);

		},
		/*
		 * Function to handle copy button press of Copy WC
		 * @param {sap.ui.base.Event} oEvent
		 * @public
		 */
		onCopyWCPress: function (oEvent) {
			var g = this;
			var copyFlag = true;
			if (this.action === "copyWC") {
				var copyModel = this._copyWCFragment.getModel("copyWCModel");
				var copyData = copyModel.getData();
				if (copyData.copyWCSource === "") {
					copyFlag = false;
					copyData.sWCValueState = "Error";
				}
				if (copyData.copyWCTarget === "") {
					copyFlag = false;
					copyData.tWCValueState = "Error";
				}
				if (copyData.copyPlantSource === "") {
					copyFlag = false;
					copyData.sPlantValueState = "Error";
				}
				if (copyData.copyPlantTarget === "") {
					copyFlag = false;
					copyData.tPlantValueState = "Error";
				}

				if (!copyFlag) {
					//show message
					copyModel.setData(copyData);
					return;
				}

				var existFlag = false;
				// 
				var cDataObj;
				var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel");
				var AIWListWCData = AIWListWCModel.getData();
				if (AIWListWCData.length > 0) {
					for (var j = 0; j < AIWListWCData.length; j++) {
						if (AIWListWCData[j].wc === copyData.copyWCTarget && AIWListWCData[j].plant === copyData.copyPlantTarget) {
							var msg = "Work Center " + copyData.copyWCTarget + "/" + copyData.copyPlantTarget +
								" already locked in this CR";
							sap.m.MessageToast.show(msg, {
								duration: 5000,
								animationDuration: 5000
							});
							existFlag = true;
							break;
						}
						if (AIWListWCData[j].wc === copyData.copyWCSource && AIWListWCData[j].plant === copyData.copyPlantSource) {
							AIWListWCData[j].wcEnable = false;
							AIWListWCData[j].plEnable = false;
							AIWListWCData[j].wcatEnable = false;
							AIWListWCData[j].Type = "X";
							cDataObj = AIWListWCData[j];
							// cDataObj.wc = copyData.copyWCTarget;
							// cDataObj.plant = copyData.copyPlantTarget;
						}
					}
				}
				if (!existFlag) {
					if (!cDataObj) {
						this.readWCDetails(copyData.copyWCSource, copyData.copyPlantSource, copyData);
					} else {
						AIWListWCData.push(cDataObj);
						var sArray = $.map(AIWListWCData, function (obj) {
							return $.extend(true, {}, obj);
						});
						sArray[sArray.length - 1].wc = copyData.copyWCTarget;
						sArray[sArray.length - 1].plant = copyData.copyPlantTarget;
						AIWListWCModel.setData(sArray);
						// sap.ui.getCore().getModel("AIWListWCModel").setData(AIWListWCData);
						g.updateCount("workCenter", AIWListWCData);
						sap.ui.getCore().getModel("AIWListWCModel").refresh();
						g.onCopyWCClose();
					}
				}
				/*var wcObj = {
					wc: copyData.copyWCTarget,
					wcDesc: "",
					plant: copyData.copyPlantTarget,
					plantDesc: "",
					wcCat: "",
					wcCatDesc: "",
					person: "",
					personDesc: "",
					usg: "",
					usgDesc: "",
					stdVal: "",
					stdValDesc: "",
					ctrlKey: "",
					ctrlKeyDesc: ""
				};
				AIWListWCData.push(wcObj);
				AIWListWCModel.setData(AIWListWCData);
				g.getView().setModel(AIWListWCModel, "AIWListWCModel");
				// g.action = "createWC";
				g.onCopyWCClose();*/
			}
		},
		/*
		 * Function to handle cancel button press of Copy WC
		 * @public
		 */
		onCopyWCClose: function () {
			//if (this.action === "copyWC") {
			this.action = "createWC";
			this._copyWCFragment.close();
			// }
		},
		/*
		 * Function to read WC data
		 * @param {string} w - Work center
		 * @param {string} p - Plant
		 * @param {string} copyData
		 * @public
		 */
		readWCDetails: function (w, p, copyData) {
			var g = this;
			var m = this.getView().getModel();
			var AIWListWCData = sap.ui.getCore().getModel("AIWListWCModel").getData();
			var oFilter = new sap.ui.model.Filter("Arbpl", "EQ", w);
			var oFilter2 = new sap.ui.model.Filter("Werks", "EQ", p);
			this.BusyDialog.open();
			m.read("/ChangeRequestSet", {
				filters: [oFilter, oFilter2],
				urlParameters: {
					"$expand": "Workcenter,WCCapa,WCCost,ValueWC,ClassWC"
				},
				success: function (r) {
					g.BusyDialog.close();
					if (r.results.length > 0) {
						var message = r.results[0].Message;
						g.lockMsg = "";
						if (message !== "") {
							g.lockMsg = true;
							sap.m.MessageToast.show(message, {
								duration: 15000,
								animationDuration: 15000
							});
						}

						var h = r.results[0].Workcenter.results[0];
						if (h) {
							var wcData = {
								mode: "create",
								wc: copyData.copyWCTarget,
								wcDesc: h.Txtmi,
								plant: copyData.copyPlantTarget,
								plantDesc: h.Plantdesc,
								wcCat: h.Verwe,
								wcCatDesc: h.Ktext,
								person: h.Crveran,
								personDesc: h.Persresptxt,
								usg: h.Planv,
								usgDesc: h.UsageTxt,
								stdVal: h.Vgwts,
								stdValDesc: h.Vgwtx,
								ctrlKey: h.Crsteus,
								ctrlKeyDesc: h.Steutxt,
								wcEnable: false,
								plEnable: false,
								wcatEnable: false,
								Type: "X",

								wcValueState: "None",
								wcDescValueState: "None",
								plantValueState: "None",
								wcCatValueState: "None",
								personResValueState: "None",
								usgValueState: "None",
								stdValueState: "None",
								cntrlKeyValueState: "None",

								wcValueStateTxt: "",
								wcDescValueStateTxt: "",
								plantValueStateTxt: "",
								wcCatValueStateTxt: "",
								personResValueStateTxt: "",
								usgValueStateTxt: "",
								stdValueStateTxt: "",
								cntrlKeyValueStateTxt: "",
								cost: [],
								capacity: [],
								classItems: [],
								characteristics: [],
							};

							var cost = r.results[0].WCCost.results;
							if (cost) {
								if (cost.length > 0) {
									var cModel = new sap.ui.model.json.JSONModel();
									cModel.setData(cost);
									// g.cost.setModel(cModel);
									wcData.cost = cost;
								}
							}

							var classList = r.results[0].ClassWC.results;
							if (classList) {
								if (classList.length > 0) {
									for (var i = 0; i < classList.length; i++) {
										classList[i].ctEnable = false;
										classList[i].classEnable = false;
										classList[i].ClassTypeDesc = classList[i].Artxt;
										delete classList[i].Artxt;
										classList[i].ClassDesc = classList[i].Kltxt;
										delete classList[i].Kltxt;
										delete classList[i].Changerequestid;
										delete classList[i].Clint;
										delete classList[i].Service;
										classList[i].classDelEnable = true;
									}
									// var cModel = new sap.ui.model.json.JSONModel();
									// cModel.setData(classList);
									// g.class.setModel(cModel);
									wcData.classItems = classList;
								}
							}

							var charList = r.results[0].ValueWC.results;
							if (charList) {
								if (charList.length > 0) {
									for (var j = 0; j < charList.length; j++) {
										charList[j].cNameEnable = false;
										charList[j].Textbz = charList[j].Atwtb;
										delete charList[j].Ataut;
										delete charList[j].Ataw1;
										delete charList[j].Atawe;
										delete charList[j].Atcod;
										delete charList[j].Atflb;
										delete charList[j].Atflv;
										delete charList[j].Atimb;
										delete charList[j].Atsrt;
										delete charList[j].Atvglart;
										delete charList[j].Atzis;
										delete charList[j].Changerequestid;
										delete charList[j].CharName;
										delete charList[j].Charid;
										delete charList[j].Classtype;
										delete charList[j].Service;
										delete charList[j].Valcnt;
										charList[j].slNo = j + 1;
										charList[j].flag = charList[j].Class + "-" + charList[j].slNo;
									}
									// var _cModel = new sap.ui.model.json.JSONModel();
									// _cModel.setData(charList);
									// g.char.setModel(_cModel);
									// g.chData = charList;
									wcData.characteristics = charList;

									for (var z = 0; z < wcData.characteristics.length; z++) {
										var count = 1;
										for (var y = 0; y < wcData.characteristics.length; y++) {
											if (z === y) {
												continue;
											}
											if (wcData.characteristics[y].Atnam === wcData.characteristics[z].Atnam && wcData.characteristics[y].Class ===
												wcData.characteristics[z].Class) {
												count++;
											}
										}
										if (count > 1) {
											wcData.characteristics[z].charDltEnable = true;
										} else {
											wcData.characteristics[z].charDltEnable = false;
										}

										if (wcData.characteristics[z].Atein === true) {
											wcData.characteristics[z].charAddEnable = false;
										}
									}
								}
							}

							AIWListWCData.push(wcData);
							sap.ui.getCore().getModel("AIWListWCModel").setData(AIWListWCData);
							g.updateCount("workCenter", AIWListWCData);
							sap.ui.getCore().getModel("AIWListWCModel").refresh();
						}
					}
				},
				error: function (err) {
					g.BusyDialog.close();
					var error = [];
					if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror.errordetails
						.length === 0) {
						error[0] = JSON.parse(err.responseText).error.message.value;
					} else {
						for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
							error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
						}
					}
					var value = error.join("\n");
					g.invokeMessage(value);
				}
			});
			g.action = "createWC";
			g.onCopyWCClose();
		},
		/*
		 * Function to handle copy button press of Copy TL
		 * @param {sap.ui.base.Event} oEvent
		 * @public
		 */
		onCopyTLPress: function (oEvent) {
			var g = this;
			var copyTLFlag = true;
			var copyTLModel = this._copyTLFragment.getModel("copyTLModel");
			var copyData = copyTLModel.getData();
			if (copyData.noObj === "" || copyData.sNoObj === "Error") {
				copyTLFlag = false;
				copyData.sNoObj = "Error";
			}
			if (this.action === "copyGTL") {
				if (copyData.genTLGrp === "" || copyData.sGtlValueState === "Error") {
					copyTLFlag = false;
					copyData.sGtlValueState = "Error";
				}
			} else if (this.action === "copyETL") {
				if (copyData.eqTLGrp === "" || copyData.sEtlValueState === "Error") {
					copyTLFlag = false;
					copyData.sEtlValueState = "Error";
				}
			} else if (this.action === "copyFTL") {
				if (copyData.flocTLGrp === "" || copyData.sFtlValueState === "Error") {
					copyTLFlag = false;
					copyData.sFtlValueState = "Error";
				}
			}

			if (!copyTLFlag) {
				//show message
				copyTLModel.setData(copyData);
				return;
			}

			var existFlag = false;
			var AIWListGTLData, AIWListETLData, AIWListFTLData, cDataObj;

			if (this.action === "copyGTL") {
				if (copyData.genTLGrp !== "") {
					AIWListGTLData = sap.ui.getCore().getModel("AIWListGTLModel").getData();
					if (AIWListGTLData.length > 0) {
						for (var i = 0; i < AIWListGTLData.length; i++) {
							if (AIWListGTLData[i].grp === copyData.genTLGrp) {
								cDataObj = AIWListGTLData[i];
								break;
							}
						}
						// for (var j = 0; j < parseInt(copyData.noObj); j++) {
						if (!cDataObj) {
							// this.readTaskListDetails(copyData);
							this.readTaskListDetails(copyData, copyData.noObj);
						} else {
							this.readCreateTempKeyT("CreateTaskList", cDataObj, copyData.noObj);
						}
						// }
					} else {
						this.readTaskListDetails(copyData, copyData.noObj);
					}
					// }
					// }
				}
			} else if (this.action === "copyETL") {
				if (copyData.eqTLGrp !== "") {
					AIWListETLData = sap.ui.getCore().getModel("AIWListETLModel").getData();
					if (AIWListETLData.length > 0) {
						for (var i = 0; i < AIWListETLData.length; i++) {
							if (AIWListETLData[i].grp === copyData.eqTLGrp) {
								cDataObj = AIWListETLData[i];
								break;
							}
						}
						// for (var j = 0; j < parseInt(copyData.noObj); j++) {
						if (!cDataObj) {
							this.readTaskListDetails(copyData, copyData.noObj);
						} else {
							this.readCreateTempKeyT("CreateTaskList", cDataObj, copyData.noObj);
						}
						// }
					} else {
						this.readTaskListDetails(copyData, copyData.noObj);
					}
					// }
					// }
				}
			} else if (this.action === "copyFTL") {
				if (copyData.flocTLGrp !== "") {
					AIWListFTLData = sap.ui.getCore().getModel("AIWListFTLModel").getData();
					if (AIWListFTLData.length > 0) {
						for (var i = 0; i < AIWListFTLData.length; i++) {
							if (AIWListFTLData[i].grp === copyData.flocTLGrp) {
								cDataObj = AIWListFTLData[i];
								break;
							}
						}
						// for (var j = 0; j < parseInt(copyData.noObj); j++) {
						if (!cDataObj) {
							this.readTaskListDetails(copyData, copyData.noObj);
						} else {
							this.readCreateTempKeyT("CreateTaskList", cDataObj, copyData.noObj);
						}
						// }
					} else {
						this.readTaskListDetails(copyData, copyData.noObj);
					}
					//}
				}
			}
			// }
			// }
		},
		/*
		 * Function to read TL data
		 * @param {string} copyData
		 * @param {string} noOfObjects
		 * @public
		 */
		readTaskListDetails: function (copyData, noOfObjects) {
			var g = this;
			var m = this.getView().getModel();
			var url;
			var AIWListGTLData = sap.ui.getCore().getModel("AIWListGTLModel").getData();
			var AIWListETLData = sap.ui.getCore().getModel("AIWListETLModel").getData();
			var AIWListFTLData = sap.ui.getCore().getModel("AIWListFTLModel").getData();
			var TLFragmentId = this.getView().createId("tlMain");
			var TLKey = sap.ui.core.Fragment.byId(TLFragmentId, "_iconTabBarTL").getSelectedKey();
			var url = "/ChangeRequestSet";
			var oFilter = "";
			if (this.action === "copyGTL") {
				oFilter = [new sap.ui.model.Filter("Plnnr", "EQ", copyData.genTLGrp),
					new sap.ui.model.Filter("Plnty", "EQ", "A"),
					new sap.ui.model.Filter("CopyCreate", "EQ", true)
				];
				var oExpand = ["GTClass", "GTComp", "GTInsp", "GTList", "GTMPack", "GTMpackRead", "GTOprs", "GTPRT", "GTRel", "GTSpack", "GTVal"];
			} else if (this.action === "copyETL") {
				oFilter = [new sap.ui.model.Filter("Plnnr", "EQ", copyData.eqTLGrp),
					new sap.ui.model.Filter("Plnty", "EQ", "E"),
					new sap.ui.model.Filter("CopyCreate", "EQ", true)
				];
				var oExpand = ["ETClass", "ETComp", "ETInsp", "ETList", "ETMPack", "ETMpackRead", "ETOprs", "ETPRT", "ETRel", "ETSpack", "ETVal"];
			} else if (this.action === "copyFTL") {
				oFilter = [new sap.ui.model.Filter("Plnnr", "EQ", copyData.flocTLGrp),
					new sap.ui.model.Filter("Plnty", "EQ", "T"),
					new sap.ui.model.Filter("CopyCreate", "EQ", true)
				];
				var oExpand = ["FTClass", "FTComp", "FTInsp", "FTList", "FTMPack", "FTMpackRead", "FTOprs", "FTPRT", "FTRel", "FTSpack", "FTVal"];
			}

			this.BusyDialog.open();
			m.read(url, {
				filters: oFilter,
				urlParameters: {
					"$expand": oExpand
				},
				success: function (r) {
					if (r.results.length > 0) {
						var d = r.results[0];
						var message = r.results[0].Message;
						g.lockMsg = "";
						var components, compModel, classList, charList, cModel, _cModel;
						if (g.action.indexOf("GTL") > 0) {
							if (d.GTList.results.length > 0) {
								var gtlData = {
									mode: "create",
									validFrm: formatter.getDateFormat(d.Gdatuv),
									grp: r.results[0].Plnnr,
									header: [],
									operation: [],
									component: [],
									Class: [],
									Char: [],
									modeflag: "Crt",
									typeFlag: "G",
									MaintPckg: [],
									KDenable: true
								};
								var header = d.GTList.results;
								if (header.length > 0) {
									gtlData.header = header;
									for (var h = 0; h < header.length; h++) {
										gtlData.header[h].PPenable = true;
										gtlData.header[h].pPlantDesc = header[h].Iwerktxt;
										gtlData.header[h].usageDesc = header[h].TlUsgTxt;
										gtlData.header[h].plGrpDesc = header[h].Plnnrgrptxt;
										gtlData.header[h].statusDesc = header[h].Statustxt;
										gtlData.header[h].sysCondDesc = header[h].Anlzux;
										gtlData.header[h].stratDesc = header[h].Strattxt;
										gtlData.header[h].Plnal = header[h].Tplnal;
										gtlData.header[h].Verwe = header[h].Tverwe;
										gtlData.header[h].plEnable = false;
										gtlData.header[h].valueStateT = "None";
										gtlData.header[h].valueStatePP = "None";
										gtlData.header[h].valueStateU = "None";
										gtlData.header[h].valueStateS = "None";
										gtlData.header[h].tlusg = header[h].Tverwe;
										gtlData.header[h].Iwerk = header[h].Werks;
										gtlData.header[h].wc = header[h].Tarbpl;
										gtlData.header[h].plant = header[h].Wcplant;
										gtlData.header[h].grp = header[h].Tlgnhdr;
										gtlData.header[h].Ktext = header[h].Ktext;
										gtlData.header[h].assmbly = header[h].Istru;
										gtlData.header[h].assmblyDesc = header[h].Istrux;
										gtlData.header[h].insPt = header[h].Slwbez;
										gtlData.header[h].insPtDesc = header[h].Slwbeztxt;
										gtlData.header[h].vEquiLbl = false;
										gtlData.header[h].vEqui = false;
										gtlData.header[h].vEquiDesc = false;
										gtlData.header[h].vFlocLbl = false;
										gtlData.header[h].vFloc = false;
										gtlData.header[h].vFlocDesc = false;
										gtlData.header[h].bAddComponent = true;
									}
									var oModel = new sap.ui.model.json.JSONModel();
									oModel.setData(header);
									// g.getModel("tlDetailModel").setProperty("/header", headerDetails);
								}
								var operation = d.GTOprs.results;
								if (operation.length > 0) {
									gtlData.operation = operation;
									var oprRel = d.GTRel.results;
									var SrvPckgOvrw = d.GTSpack.results;
									var maintPckg = d.GTMPack.results;
									var maintPckgDefault = d.GTMpackRead.results;
									var aPrt = d.GTPRT.results;
									var aInsp = d.GTInsp.results;
									for (var o = 0; o < operation.length; o++) {
										gtlData.operation[o].calcKeyDesc = "";
										gtlData.operation[o].actTypDesc = "";
										gtlData.operation[o].flag = operation[o].Tplnal + "-" + operation[o].Vornr;
										gtlData.operation[o].Arbpl = operation[o].TlArbpl;
										gtlData.operation[o].Plnal = operation[o].Tplnal;
										gtlData.operation[o].opState = "None";
										gtlData.operation[o].opDescState = "None";
										gtlData.operation[o].wcState = "None";
										gtlData.operation[o].plantState = "None";
										gtlData.operation[o].ctrlKeyState = "None";
										gtlData.operation[o].Werks = operation[o].Werks2gop;
										gtlData.operation[o].Steus = operation[o].Steus2gop;
										gtlData.operation[o].workPerc = operation[o].Prznt.toString();
										gtlData.operation[o].orderQty = operation[o].Bmvrg;
										gtlData.operation[o].ordQtyUnit = operation[o].Bmeih;
										gtlData.operation[o].netPrice = operation[o].Opreis;
										gtlData.operation[o].currency = operation[o].Owaers;
										gtlData.operation[o].priceUnit = operation[o].Opeinh;
										gtlData.operation[o].costElement = operation[o].Sakto2gop;
										gtlData.operation[o].materialGrp = operation[o].Omatkl;
										gtlData.operation[o].puchGroup = operation[o].Oekgrp;
										gtlData.operation[o].purchOrg = operation[o].Ekorg;
										gtlData.operation[o].Uvorn = operation[o].Uvorn;
										gtlData.operation[o].UvornEnable = false;
										gtlData.operation[o].equi = operation[o].EqunrGop;
										gtlData.operation[o].floc = operation[o].TplnrGop;
										gtlData.operation[o].OprRel = [];
										gtlData.operation[o].SrvPckgOvrw = [];
										gtlData.operation[o].PRT = [];
										gtlData.operation[o].InspChar = [];

										if (oprRel.length > 0) {
											for (var x in oprRel) {
												if (gtlData.grp === oprRel[x].Tlgnhdr && gtlData.operation[o].Plnal === oprRel[x].Tplnal && gtlData.operation[o].Vornr ===
													oprRel[x].Vorn2) {
													var objOprRel = {
														Plnal: oprRel[x].Tplnal,
														Vornr: oprRel[x].Vorn2,

														OperationOR: oprRel[x].Vornrgrel,
														Offset: oprRel[x].Dauer,
														OUn: oprRel[x].Zeinh,
														RelType: oprRel[x].Aobar,
														PO: oprRel[x].Gprznt,
														OI: oprRel[x].Provg,
														ID: oprRel[x].Gkalid,
														WrkCtrOR: oprRel[x].Arbplgrel,
														PlantOR: oprRel[x].Werksgrel,

														OperationORVS: "None",
														OffsetVS: "None",
														OUnVS: "None",
														RelTypeVS: "None",
														POVS: "None",
														OIVS: "None",
														IDVS: "None",
														WrkCtrORVS: "None",
														PlantORVS: "None",
													}
													gtlData.operation[o].OprRel.push(objOprRel);
												}
											}
										}

										if (SrvPckgOvrw.length > 0) {
											for (var x in SrvPckgOvrw) {
												if (gtlData.grp === SrvPckgOvrw[x].Tlgnhdr && gtlData.operation[o].Plnal === SrvPckgOvrw[x].Tplnal && gtlData.operation[
														o].Vornr === SrvPckgOvrw[x].Vornrr) {
													var oSPO = {
														// group: gtlData.header[h].grp, //SrvPckgOvrw[x].Tlgnhdr,
														Plnal: SrvPckgOvrw[x].Tplnal,
														Vornr: SrvPckgOvrw[x].Vornrr,

														LineNum: SrvPckgOvrw[x].SrvLine,
														DelIndSP: formatter.statusSel(SrvPckgOvrw[x].Del),
														ActNum: SrvPckgOvrw[x].Srvpos,
														ShrtTxt: SrvPckgOvrw[x].Ktext1,
														Qty: SrvPckgOvrw[x].Mengegspk,
														BUomSP: SrvPckgOvrw[x].Meinsgspk,
														GrossPrc: SrvPckgOvrw[x].Tbtwr,
														CurKey: SrvPckgOvrw[x].Waersgspk,
														Work: SrvPckgOvrw[x].IntWork,
														UnitOfWork: SrvPckgOvrw[x].Iwein,

														ActNumVS: "None",
														ShrtTxtVS: "None",
														QtyVS: "None",
														BUomSPVS: "None",
														GrossPrcVS: "None",
														CurKeyVS: "None",
														WorkVS: "None",
														UnitOfWorkVS: "None",

														DelIndSPEnabled: false,
														SPEnabled: true
													};
													gtlData.operation[o].SrvPckgOvrw.push(oSPO);
												}
											}
										}

										if (aPrt.length > 0) {
											for (var x in aPrt) {
												if (gtlData.grp === aPrt[x].Tlgnhdr && gtlData.operation[o].Plnal === aPrt[x].Tplnal && gtlData.operation[o].Vornr ===
													aPrt[x].Vornrgprt) {
													var objPRT = {
														// grp: gtlData.header[h].grp, //aPrt[x].Tlgnhdr,
														Plnal: aPrt[x].Tplnal,
														Vornr: aPrt[x].Vornrgprt,

														ItmNum: aPrt[x].Psnfh,
														ItmCat: aPrt[x].Fhmar,
														// PRT: aPrt[x].Fhmnr,
														Plant: aPrt[x].Fhwrk, //PRTDesc
														Mat: aPrt[x].Matnrgprt,
														MatDesc: "",
														Equi: aPrt[x].EqunrGpt,
														EquiDesc: "",
														Mspt: aPrt[x].Eqpnt,
														MsptDesc: "",
														doc: aPrt[x].Dokargprt,
														docDesc: "",
														docType: aPrt[x].Doknrgprt,
														docTypeDesc: "",
														docPart: aPrt[x].Doktlgprt,
														docVersion: aPrt[x].Dokvrgprt,
														Othr: aPrt[x].Fhmnr,
														OthrDesc: "",
														Qty: aPrt[x].Mgvgw,
														UOM: aPrt[x].Mgeinh,
														QtyFrmla: aPrt[x].Mgform,
														PRTCtrl: aPrt[x].Steuf,
														PRTCtrlDesc: aPrt[x].Stftxt,
														StdUsgVal: aPrt[x].Ewvgw,
														StdUsgUOM: aPrt[x].Eweinh,
														UsgValFrmla: aPrt[x].Ewform,
														PRTVS: "None",
														PlantVS: "None",
														QtyVS: "None",
														UOMVS: "None",
														QtyFrmlaVS: "None",
														PRTCtrlVS: "None",
														StdUsgValVS: "None",
														StdUsgUOMVS: "None",
														UsgValFrmlaVS: "None",
													}

													if (objPRT.ItmCat === "M") {
														objPRT.PRT = objPRT.Mat;
														objPRT.title = "Material";
														objPRT.matEnable = true;
														objPRT.eqEnable = false;
														objPRT.msptEnable = false;
														objPRT.docEnable = false;
														objPRT.othEnable = false;
														objPRT.Plant = gtlData.operation[o].Werks;
													} else if (objPRT.ItmCat === "E") {
														objPRT.PRT = objPRT.Equi;
														objPRT.title = "Equipment";
														objPRT.matEnable = false;
														objPRT.eqEnable = true;
														objPRT.msptEnable = false;
														objPRT.docEnable = false;
														objPRT.othEnable = false;
													} else if (objPRT.ItmCat === "P") {
														objPRT.PRT = objPRT.Mspt;
														objPRT.title = "Measuring Point";
														objPRT.matEnable = false;
														objPRT.eqEnable = false;
														objPRT.msptEnable = true;
														objPRT.docEnable = false;
														objPRT.othEnable = false;
													} else if (objPRT.ItmCat === "D") {
														objPRT.PRT = objPRT.doc + "-" + objPRT.docType + "-" + objPRT.docPart + "-" + objPRT.docVersion;
														objPRT.title = "Document";
														objPRT.matEnable = false;
														objPRT.eqEnable = false;
														objPRT.msptEnable = false;
														objPRT.docEnable = true;
														objPRT.othEnable = false;
														objPRT.docType = "";
														objPRT.docTypeDesc = "";
														objPRT.docPart = "";
														objPRT.docVersion = "";
													} else if (objPRT.ItmCat === "O") {
														objPRT.PRT = objPRT.Othr;
														objPRT.title = "Others";
														objPRT.matEnable = false;
														objPRT.eqEnable = false;
														objPRT.msptEnable = false;
														objPRT.docEnable = false;
														objPRT.othEnable = true;
													}

													gtlData.operation[o].PRT.push(objPRT);
												}
											}
										}

										if (aInsp.length > 0) {
											for (var x in aInsp) {
												if (gtlData.grp === aInsp[x].Tlgnhdr && gtlData.operation[o].Plnal === aInsp[x].Tplnal && gtlData.operation[o].Vornr ===
													aInsp[x].Vornrgins) {
													var objInsp = {
														// group: gtlData.header[h].grp, //aInsp[x].Tlgnhdr,
														Plnal: aInsp[x].Tplnal,
														Vornr: aInsp[x].Vornrgins,

														InspChar: aInsp[x].Merknr,
														PrstInd: aInsp[x].Vste2gins,
														QuanChar: formatter.statusSel(aInsp[x].Quantitat),
														QualChar: formatter.statusSel(aInsp[x].QpmkRef),
														MastInspChar: aInsp[x].Verw2gins,
														Plant: aInsp[x].Uzae2tlgn,
														Version: aInsp[x].Ver2tlgni,
														ShrtTxt: aInsp[x].Kurztext,
														InspMthd: aInsp[x].Pmth2gins,
														InspMthdPlnt: aInsp[x].Qwe2tlgni,
														TolKey: aInsp[x].Toleranzs,
														VrsnInspMthd: aInsp[x].Pmtversio,
														SampProc: aInsp[x].Stichprve,
														SampUOM: aInsp[x].Probemgeh,
														BaseSampQty: aInsp[x].Pruefeinh.toString(),
														CodeGrp: aInsp[x].Auswmenge,

														MastInspCharVS: "None",
														PlantVS: "None",
														VersionVS: "None",
														InspMthdVS: "None",
														InspMthdPlntVS: "None",
														SampProcVS: "None"
													};

													gtlData.operation[o].InspChar.push(objInsp);
												}
											}
										}

										var currReadMpack = [];
										if (maintPckgDefault.length > 0) {
											for (var w in maintPckgDefault) {
												if (gtlData.grp === maintPckgDefault[w].Tlgnhdr && gtlData.operation[o].Plnal === maintPckgDefault[w].Tplnal) {
													currReadMpack.push(maintPckgDefault[w]);
												}
											}
										}

										var currSelMpack = [];
										if (maintPckg.length > 0) {
											for (var x in maintPckg) {
												if (gtlData.grp === maintPckg[x].Tlgnhdr && gtlData.operation[o].Plnal === maintPckg[x].Tplnal &&
													gtlData.operation[o].Vornr === maintPckg[x].Vorn2gmpk) {
													currSelMpack.push(maintPckg[x]);
												}
											}
										}

										var oMaintPckg = {};
										if (currReadMpack.length > 0) {
											oMaintPckg = {
												Plnal: currReadMpack[0].Tplnal,
												Vornr: gtlData.operation[o].Vornr,
												Strat: currReadMpack[0].Startgmpk,
												SOp: "",
												Ltxa1: gtlData.operation[o].Ltxa1,
												flag: currReadMpack[0].Tplnal + "-" + gtlData.operation[o].Vornr,
												MPArr: [],
											};
											for (var f in currReadMpack) {
												var currReadObj = currReadMpack[f];
												oMaintPckg[currReadObj.Paketgmpk] = false;
											}
										}

										if (currSelMpack.length > 0) {
											for (var z in currSelMpack) {
												currSelMpack[z].Vornr = currSelMpack[z].Vorn2gmpk;
												currSelMpack[z].Strat = currSelMpack[z].Startgmpk;
												currSelMpack[z].Paket = currSelMpack[z].Paketgmpk;

												var currSelObj = currSelMpack[z];
												if (currSelMpack[z].IsSelected === 'X') {
													oMaintPckg[currSelObj.Paketgmpk] = true;
												}
											}
											oMaintPckg.MPArr = currSelMpack;
										}
										gtlData.MaintPckg.push(oMaintPckg);
									}
									var oprModel = new sap.ui.model.json.JSONModel();
									oprModel.setData(operation);
								}
								var component = d.GTComp.results;
								if (component.length > 0) {
									gtlData.component = component;
									for (var c = 0; c < component.length; c++) {
										gtlData.component[c].matDesc = component[c].Maktx;
										gtlData.component[c].slNo = c + 1;
										gtlData.component[c].Plnal = component[c].Tplnal;
										gtlData.component[c].flag = component[c].Tplnal + "-" + component[c].Vornr + "-" + gtlData.component[c].slNo;
										gtlData.component[c].hFlag = component[c].Tplnal + "-" + component[c].Vornr;
										gtlData.component[c].bom = component[c].Stlnrgcmp;
										gtlData.component[c].bomCat = component[c].Stltygcmp;
										gtlData.component[c].bomCatDesc = component[c].Stltygcmptxt;
										gtlData.component[c].altBom = component[c].Stlal;
									}
									g.cmpData = component;
									compModel = new sap.ui.model.json.JSONModel();
									compModel.setData(component);
								}
								classList = d.GTClass.results;
								if (classList) {
									if (classList.length > 0) {
										for (var h = 0; h < classList.length; h++) {
											classList[h].ctEnable = false;
											classList[h].classEnable = false;
											classList[h].ClassTypeDesc = classList[h].Artxt;
											delete classList[h].Artxt;
											classList[h].ClassDesc = classList[h].Kltxt;
											delete classList[h].Kltxt;
											delete classList[h].Changerequestid;
											delete classList[h].Clint;
											delete classList[h].Service;
											classList[h].classDelEnable = true;
											classList[h].slNo = i + 1;
											classList[h].Plnal = classList[h].Tplnal;
											classList[h].flag = classList[h].Tplnal + "-" + classList[h].slNo;
										}
										g.cData = classList;
										cModel = new sap.ui.model.json.JSONModel();
										cModel.setData(classList);
										gtlData.Class = classList;
									}
								}
								charList = d.GTVal.results;
								if (charList) {
									if (charList.length > 0) {
										for (var j = 0; j < charList.length; j++) {
											charList[j].cNameEnable = false;
											delete charList[j].Ataut;
											delete charList[j].Ataw1;
											delete charList[j].Atawe;
											delete charList[j].Atcod;
											delete charList[j].Atflb;
											delete charList[j].Atflv;
											delete charList[j].Atimb;
											delete charList[j].Atsrt;
											delete charList[j].Atvglart;
											delete charList[j].Atzis;
											delete charList[j].Changerequestid;
											delete charList[j].CharName;
											delete charList[j].Charid;
											delete charList[j].Classtype;
											delete charList[j].Service;
											delete charList[j].Valcnt;
											charList[j].slNo = j + 1;
											charList[j].Plnal = charList[j].Tplnal;
											charList[j].flag = charList[j].Tplnal + "-" + charList[j].Class + "-" + charList[j].slNo;
										}
										for (var z = 0; z < charList.length; z++) {
											var count = 1;
											for (var y = 0; y < charList.length; y++) {
												if (z === y) {
													continue;
												}
												if (charList[y].Atnam === charList[z].Atnam && charList[y].Class ===
													charList[z].Class) {
													count++;
												}
											}
											if (count > 1) {
												charList[z].charDltEnable = true;
											} else {
												charList[z].charDltEnable = false;
											}

											if (charList[z].Atein === true) {
												charList[z].charAddEnable = false;
											}
										}
										g.chData = charList;
										_cModel = new sap.ui.model.json.JSONModel();
										_cModel.setData(charList);
										gtlData.Char = charList;
									}
								}
								g.readCreateTempKeyT("copyGTL", gtlData, noOfObjects);
							}
						} else if (g.action.indexOf("ETL") > 0) {
							if (d.ETList.results.length > 0) {
								var header = d.ETList.results[0];
								var etlData = {
									mode: "create",
									validFrm: formatter.getDateFormat(d.Datuv),
									grp: r.results[0].Plnnr,
									equipment: "", //r.results[0].ETList.results[0].Eq2tl,
									equipmentDesc: "", //r.results[0].ETList.results[0].Eqktx,
									header: [],
									operation: [],
									component: [],
									Class: [],
									Char: [],
									modeflag: "Crt",
									typeFlag: "E",
									MaintPckg: [],
									KDenable: true
								};
								var header = d.ETList.results;
								if (header.length > 0) {
									etlData.header = header;
									for (var h = 0; h < header.length; h++) {
										etlData.header[h].Iwerk = ""; //header[h].Werks;
										etlData.header[h].pPlantDesc = header[h].Iwerktxt;
										etlData.header[h].usageDesc = header[h].TlUsgTxt;
										etlData.header[h].plGrpDesc = header[h].Plnnrgrptxt;
										etlData.header[h].statusDesc = header[h].Statustxt;
										etlData.header[h].sysCondDesc = header[h].Anlzux;
										etlData.header[h].stratDesc = header[h].Strattxt;
										etlData.header[h].Plnal = header[h].Tplnal;
										etlData.header[h].Verwe = header[h].Tverwe;
										etlData.header[h].plEnable = false;
										// etlData.header[h].Ktext = header.Eqktx;
										etlData.header[h].valueStateT = "None";
										etlData.header[h].valueStatePP = "None";
										etlData.header[h].valueStateU = "None";
										etlData.header[h].valueStateS = "None";
										etlData.header[h].equipment = header[h].Eq2tl;
										etlData.header[h].equipmentDesc = header[h].Eqktx;
										etlData.header[h].tlusg = header[h].Tverwe;
										etlData.header[h].wc = header[h].Tarbpl;
										etlData.header[h].plant = header[h].Wcplant;
										etlData.header[h].grp = header[h].Tlgnhdr;
										etlData.header[h].Ktext = header[h].Ktext;
										etlData.header[h].assmbly = header[h].Istru;
										etlData.header[h].assmblyDesc = header[h].Istrux;
										etlData.header[h].insPt = header[h].Slwbez;
										etlData.header[h].insPtDesc = header[h].Slwbeztxt;
										etlData.header[h].vEquiLbl = true;
										etlData.header[h].vEqui = true;
										etlData.header[h].vEquiDesc = true;
										etlData.header[h].vFlocLbl = false;
										etlData.header[h].vFloc = false;
										etlData.header[h].vFlocDesc = false;
										etlData.header[h].bAddComponent = true;
									}
									var oModel = new sap.ui.model.json.JSONModel();
									oModel.setData(etlData.header);
								}
								var operation = d.ETOprs.results;
								if (operation.length > 0) {
									etlData.operation = operation;
									var oprRel = d.ETRel.results;
									var SrvPckgOvrw = d.ETSpack.results;
									var maintPckg = d.ETMPack.results;
									var maintPckgDefault = d.ETMpackRead.results;
									var aPrt = d.ETPRT.results;
									var aInsp = d.ETInsp.results;
									for (var o = 0; o < operation.length; o++) {
										etlData.operation[o].calcKeyDesc = "";
										etlData.operation[o].actTypDesc = "";
										etlData.operation[o].flag = operation[o].Tplnal + "-" + operation[o].Vornr;
										etlData.operation[o].Arbpl = operation[o].TlArbpl;
										etlData.operation[o].Plnal = operation[o].Tplnal;
										etlData.operation[o].opState = "None";
										etlData.operation[o].opDescState = "None";
										etlData.operation[o].wcState = "None";
										etlData.operation[o].plantState = "None";
										etlData.operation[o].ctrlKeyState = "None";
										etlData.operation[o].Werks = operation[o].Werks2eop;
										etlData.operation[o].Steus = operation[o].Steus2eop;
										etlData.operation[o].workPerc = operation[o].Prznt.toString();
										etlData.operation[o].orderQty = operation[o].Bmvrg;
										etlData.operation[o].ordQtyUnit = operation[o].Bmeih;
										etlData.operation[o].netPrice = operation[o].Opreis;
										etlData.operation[o].currency = operation[o].Owaers;
										etlData.operation[o].priceUnit = operation[o].Opeinh;
										etlData.operation[o].costElement = operation[o].Sakto2eop;
										etlData.operation[o].materialGrp = operation[o].Omatkl;
										etlData.operation[o].puchGroup = operation[o].Oekgrp;
										etlData.operation[o].purchOrg = operation[o].Ekorg;
										etlData.operation[o].Uvorn = operation[o].Uvorn;
										etlData.operation[o].UvornEnable = false;
										etlData.operation[o].equi = operation[o].EqunrEop;
										etlData.operation[o].floc = operation[o].TplnrEop;
										etlData.operation[o].OprRel = [];
										etlData.operation[o].SrvPckgOvrw = [];
										etlData.operation[o].PRT = [];
										etlData.operation[o].InspChar = [];

										if (oprRel.length > 0) {
											for (var x in oprRel) {
												if (etlData.grp === oprRel[x].Tleqhdr && etlData.operation[o].Plnal === oprRel[x].Tplnal && etlData.operation[o].Vornr ===
													oprRel[x].Vorn2) {
													var objOprRel = {
														Plnal: oprRel[x].Tplnal,
														Vornr: oprRel[x].Vorn2,

														OperationOR: oprRel[x].Vornrerel,
														Offset: oprRel[x].Dauer,
														OUn: oprRel[x].Zeinh,
														RelType: oprRel[x].Aobar,
														PO: oprRel[x].Eprznt,
														OI: oprRel[x].Provg,
														ID: oprRel[x].Ekalid,
														WrkCtrOR: oprRel[x].Arbplerel,
														PlantOR: oprRel[x].Werkserel,

														OperationORVS: "None",
														OffsetVS: "None",
														OUnVS: "None",
														RelTypeVS: "None",
														POVS: "None",
														OIVS: "None",
														IDVS: "None",
														WrkCtrORVS: "None",
														PlantORVS: "None",
													}
													etlData.operation[o].OprRel.push(objOprRel);
												}
											}
										}

										if (SrvPckgOvrw.length > 0) {
											for (var x in SrvPckgOvrw) {
												if (etlData.grp === SrvPckgOvrw[x].Tleqhdr && etlData.operation[o].Plnal === SrvPckgOvrw[x].Tplnal && etlData.operation[
														o].Vornr === SrvPckgOvrw[x].Vornrr) {
													var oSPO = {
														// group: SrvPckgOvrw[x].Tleqhdr,
														Plnal: SrvPckgOvrw[x].Tplnal,
														Vornr: SrvPckgOvrw[x].Vornrr,

														LineNum: SrvPckgOvrw[x].SrvLine,
														DelIndSP: formatter.statusSel(SrvPckgOvrw[x].Del),
														ActNum: SrvPckgOvrw[x].Srvpos,
														ShrtTxt: SrvPckgOvrw[x].Ktext1,
														Qty: SrvPckgOvrw[x].Mengeespk,
														BUomSP: SrvPckgOvrw[x].Meinsespk,
														GrossPrc: SrvPckgOvrw[x].Tbtwr,
														CurKey: SrvPckgOvrw[x].Waersespk,
														Work: SrvPckgOvrw[x].IntWork,
														UnitOfWork: SrvPckgOvrw[x].Iwein,

														ActNumVS: "None",
														ShrtTxtVS: "None",
														QtyVS: "None",
														BUomSPVS: "None",
														GrossPrcVS: "None",
														CurKeyVS: "None",
														WorkVS: "None",
														UnitOfWorkVS: "None",

														DelIndSPEnabled: false
													};
													etlData.operation[o].SrvPckgOvrw.push(oSPO);
												}
											}
										}

										if (aPrt.length > 0) {
											for (var x in aPrt) {
												if (etlData.grp === aPrt[x].Tleqhdr && etlData.operation[o].Plnal === aPrt[x].Tplnal && etlData.operation[o].Vornr ===
													aPrt[x].Vornreprt) {
													var objPRT = {
														// grp: aPrt[x].Tleqhdr,
														Plnal: aPrt[x].Tplnal,
														Vornr: aPrt[x].Vornreprt,

														ItmNum: aPrt[x].Psnfh,
														ItmCat: aPrt[x].Fhmar,
														// PRT: aPrt[x].Fhmnr,
														Plant: aPrt[x].Fhwrk, //PRTDesc
														Mat: aPrt[x].Matnreprt,
														MatDesc: "",
														Equi: aPrt[x].EqunrEpt,
														EquiDesc: "",
														Mspt: aPrt[x].Eqpnt,
														MsptDesc: "",
														doc: aPrt[x].Dokareprt,
														docDesc: "",
														docType: aPrt[x].Doknreprt,
														docTypeDesc: "",
														docPart: aPrt[x].Doktleprt,
														docVersion: aPrt[x].Dokvreprt,
														Othr: aPrt[x].Fhmnr,
														OthrDesc: "",
														Qty: aPrt[x].Mgvgw,
														UOM: aPrt[x].Mgeinh,
														QtyFrmla: aPrt[x].Mgform,
														PRTCtrl: aPrt[x].Steuf,
														PRTCtrlDesc: aPrt[x].Stftxt,
														StdUsgVal: aPrt[x].Ewvgw,
														StdUsgUOM: aPrt[x].Eweinh,
														UsgValFrmla: aPrt[x].Ewform,

														PRTVS: "None",
														PlantVS: "None",
														QtyVS: "None",
														UOMVS: "None",
														QtyFrmlaVS: "None",
														PRTCtrlVS: "None",
														StdUsgValVS: "None",
														StdUsgUOMVS: "None",
														UsgValFrmlaVS: "None",
													}

													if (objPRT.ItmCat === "M") {
														objPRT.PRT = objPRT.Mat;
														objPRT.title = "Material";
														objPRT.matEnable = true;
														objPRT.eqEnable = false;
														objPRT.msptEnable = false;
														objPRT.docEnable = false;
														objPRT.othEnable = false;
														objPRT.Plant = etlData.operation[o].Werks;
													} else if (objPRT.ItmCat === "E") {
														objPRT.PRT = objPRT.Equi;
														objPRT.title = "Equipment";
														objPRT.matEnable = false;
														objPRT.eqEnable = true;
														objPRT.msptEnable = false;
														objPRT.docEnable = false;
														objPRT.othEnable = false;
													} else if (objPRT.ItmCat === "P") {
														objPRT.PRT = objPRT.Mspt;
														objPRT.title = "Measuring Point";
														objPRT.matEnable = false;
														objPRT.eqEnable = false;
														objPRT.msptEnable = true;
														objPRT.docEnable = false;
														objPRT.othEnable = false;
													} else if (objPRT.ItmCat === "D") {
														objPRT.PRT = objPRT.doc + "-" + objPRT.docType + "-" + objPRT.docPart + "-" + objPRT.docVersion;
														objPRT.title = "Document";
														objPRT.matEnable = false;
														objPRT.eqEnable = false;
														objPRT.msptEnable = false;
														objPRT.docEnable = true;
														objPRT.othEnable = false;
														objPRT.docType = "";
														objPRT.docTypeDesc = "";
														objPRT.docPart = "";
														objPRT.docVersion = "";
													} else if (objPRT.ItmCat === "O") {
														objPRT.PRT = objPRT.Othr;
														objPRT.title = "Others";
														objPRT.matEnable = false;
														objPRT.eqEnable = false;
														objPRT.msptEnable = false;
														objPRT.docEnable = false;
														objPRT.othEnable = true;
													}
													etlData.operation[o].PRT.push(objPRT);
												}
											}
										}

										if (aInsp.length > 0) {
											for (var x in aInsp) {
												if (etlData.grp === aInsp[x].Tleqhdr && etlData.operation[o].Plnal === aInsp[x].Tplnal && etlData.operation[o].Vornr ===
													aInsp[x].Vornreins) {
													var objInsp = {
														// group: aInsp[x].Tlgnhdr,
														Plnal: aInsp[x].Tplnal,
														Vornr: aInsp[x].Vornreins,

														InspChar: aInsp[x].Merknr,
														PrstInd: aInsp[x].Vste2eins,
														QuanChar: formatter.statusSel(aInsp[x].Quantitat),
														QualChar: formatter.statusSel(aInsp[x].QpmkRef),
														MastInspChar: aInsp[x].Verw2eins,
														Plant: aInsp[x].Uzae2tlen,
														Version: aInsp[x].Ver2tleqi,
														ShrtTxt: aInsp[x].Kurztext,
														InspMthd: aInsp[x].Pmth2eins,
														InspMthdPlnt: aInsp[x].Qwe2tleqi,
														TolKey: aInsp[x].Toleranzs,
														VrsnInspMthd: aInsp[x].Pmtversio,
														SampProc: aInsp[x].Stichprve,
														SampUOM: aInsp[x].Probemgeh,
														BaseSampQty: aInsp[x].Pruefeinh.toString(),
														CodeGrp: aInsp[x].Auswmenge,

														MastInspCharVS: "None",
														PlantVS: "None",
														VersionVS: "None",
														InspMthdVS: "None",
														InspMthdPlntVS: "None",
														SampProcVS: "None"
													};

													etlData.operation[o].InspChar.push(objInsp);
												}
											}
										}

										var currReadMpack = [];
										if (maintPckgDefault.length > 0) {
											for (var w in maintPckgDefault) {
												if (etlData.grp === maintPckgDefault[w].Tleqhdr && etlData.operation[o].Plnal === maintPckgDefault[w].Tplnal) {
													currReadMpack.push(maintPckgDefault[w]);
												}
											}
										}

										var currSelMpack = [];
										if (maintPckg.length > 0) {
											for (var x in maintPckg) {
												if (etlData.grp === maintPckg[x].Tleqhdr && etlData.operation[o].Plnal === maintPckg[x].Tplnal &&
													etlData.operation[o].Vornr === maintPckg[x].Vorn2empk) {
													currSelMpack.push(maintPckg[x]);
												}
											}
										}

										var oMaintPckg = {};
										if (currReadMpack.length > 0) {
											oMaintPckg = {
												Plnal: currReadMpack[0].Tplnal,
												Vornr: etlData.operation[o].Vornr,
												Strat: currReadMpack[0].Startempk,
												SOp: "",
												Ltxa1: etlData.operation[o].Ltxa1,
												flag: currReadMpack[0].Tplnal + "-" + etlData.operation[o].Vornr,
												MPArr: [],
											};
											for (var f in currReadMpack) {
												var currReadObj = currReadMpack[f];
												oMaintPckg[currReadObj.Paketempk] = false;
											}
										}

										if (currSelMpack.length > 0) {
											for (var z in currSelMpack) {
												currSelMpack[z].Vornr = currSelMpack[z].Vorn2empk;
												currSelMpack[z].Strat = currSelMpack[z].Startempk;
												currSelMpack[z].Paket = currSelMpack[z].Paketempk;

												var currSelObj = currSelMpack[z];
												if (currSelMpack[z].IsSelected === 'X') {
													oMaintPckg[currSelObj.Paketempk] = true;
												}
											}
											oMaintPckg.MPArr = currSelMpack;
										}
										etlData.MaintPckg.push(oMaintPckg);
									}
									g.oData = etlData.operation;
									var oprModel = new sap.ui.model.json.JSONModel();
									oprModel.setData(etlData.operation);
								}
							}
							component = d.ETComp.results;
							if (component.length > 0) {
								etlData.component = component;
								for (var e = 0; e < component.length; e++) {
									etlData.component[e].matDesc = component[e].Maktx;
									etlData.component[e].slNo = e + 1;
									etlData.component[e].Plnal = component[e].Tplnal;
									etlData.component[e].flag = component[e].Tplnal + "-" + component[e].Vornr + "-" + etlData.component[e].slNo;
									etlData.component[e].hFlag = component[e].Tplnal + "-" + component[e].Vornr;
									etlData.component[e].bom = component[e].Stlnrecmp;
									etlData.component[e].bomCat = component[e].Stltyecmp;
									etlData.component[e].bomCatDesc = component[e].Stltyecmptxt;
									etlData.component[e].altBom = component[e].Stlal;
								}
								g.cmpData = component;
								compModel = new sap.ui.model.json.JSONModel();
								compModel.setData(component);
							}
							classList = d.ETClass.results;
							if (classList) {
								if (classList.length > 0) {
									for (var i = 0; i < classList.length; i++) {
										classList[h].ctEnable = false;
										classList[h].classEnable = false;
										classList[h].ClassTypeDesc = classList[h].Artxt;
										delete classList[h].Artxt;
										classList[h].ClassDesc = classList[h].Kltxt;
										delete classList[h].Kltxt;
										delete classList[h].Changerequestid;
										delete classList[h].Clint;
										delete classList[h].Service;
										classList[h].classDelEnable = true;
										classList[h].slNo = i + 1;
										classList[h].Plnal = classList[h].Tplnal;
										classList[h].flag = classList[h].Tplnal + "-" + classList[h].slNo;
									}
									g.cData = classList;
									cModel = new sap.ui.model.json.JSONModel();
									cModel.setData(classList);
									etlData.Class = classList;
								}
							}
							charList = d.ETVal.results;
							if (charList) {
								if (charList.length > 0) {
									for (var j = 0; j < charList.length; j++) {
										charList[j].cNameEnable = false;
										delete charList[j].Ataut;
										delete charList[j].Ataw1;
										delete charList[j].Atawe;
										delete charList[j].Atcod;
										delete charList[j].Atflb;
										delete charList[j].Atflv;
										delete charList[j].Atimb;
										delete charList[j].Atsrt;
										delete charList[j].Atvglart;
										delete charList[j].Atzis;
										delete charList[j].Changerequestid;
										delete charList[j].CharName;
										delete charList[j].Charid;
										delete charList[j].Classtype;
										delete charList[j].Service;
										delete charList[j].Valcnt;
										charList[j].slNo = j + 1;
										charList[j].Plnal = charList[j].Tplnal;
										charList[j].flag = charList[j].Tplnal + "-" + charList[j].Class + "-" + charList[j].slNo;
									}
									for (var z = 0; z < charList.length; z++) {
										var count = 1;
										for (var y = 0; y < charList.length; y++) {
											if (z === y) {
												continue;
											}
											if (charList[y].Atnam === charList[z].Atnam && charList[y].Class ===
												charList[z].Class) {
												count++;
											}
										}
										if (count > 1) {
											charList[z].charDltEnable = true;
										} else {
											charList[z].charDltEnable = false;
										}

										if (charList[z].Atein === true) {
											charList[z].charAddEnable = false;
										}
									}
									g.chData = charList;
									_cModel = new sap.ui.model.json.JSONModel();
									_cModel.setData(charList);
									// g.char.setModel(_cModel);
									etlData.Char = charList;
								}
							}
							g.readCreateTempKeyT("copyETL", etlData, noOfObjects);
						} else if (g.action.indexOf("FTL") > 0) {
							if (d.FTList.results.length > 0) {
								var header = d.FTList.results[0];
								var ftlData = {
									mode: "create",
									validFrm: formatter.getDateFormat(d.Datuv),
									grp: r.results[0].Plnnr,
									floc: "", //r.results[0].FTList.results[0].Fl2tl,
									flocDesc: "", //r.results[0].FTList.results[0].Pltxt,
									modeflag: "Crt",
									typeFlag: "F",
									header: [],
									operation: [],
									component: [],
									Class: [],
									Char: [],
									MaintPckg: [],
									KDenable: true
								};
								var header = d.FTList.results;
								if (header.length > 0) {
									ftlData.header = header;
									for (var h = 0; h < header.length; h++) {
										ftlData.header[h].Iwerk = ""; //header[h].Werks;
										ftlData.header[h].pPlantDesc = header[h].Iwerktxt;
										ftlData.header[h].usageDesc = header[h].TlUsgTxt;
										ftlData.header[h].plGrpDesc = header[h].Plnnrgrptxt;
										ftlData.header[h].statusDesc = header[h].Statustxt;
										ftlData.header[h].sysCondDesc = header[h].Anlzux;
										ftlData.header[h].stratDesc = header[h].Strattxt;

										ftlData.header[h].Plnal = header[h].Tplnal;
										ftlData.header[h].Verwe = header[h].Tverwe;
										ftlData.header[h].plEnable = false;
										// ftlData.header[h].Ktext = header.Pltxt;
										ftlData.header[h].valueStateT = "None";
										ftlData.header[h].valueStatePP = "None";
										ftlData.header[h].valueStateU = "None";
										ftlData.header[h].valueStateS = "None";
										ftlData.header[h].floc = header[h].Fl2tl;
										ftlData.header[h].flocDesc = header[h].Pltxt;
										ftlData.header[h].tlusg = header[h].Tverwe;
										ftlData.header[h].wc = header[h].Tarbpl;
										ftlData.header[h].plant = header[h].Wcplant;
										ftlData.header[h].grp = header[h].Tlgnhdr;
										ftlData.header[h].Ktext = header[h].Ktext;
										ftlData.header[h].assmbly = header[h].Istru;
										ftlData.header[h].assmblyDesc = header[h].Istrux;
										ftlData.header[h].insPt = header[h].Slwbez;
										ftlData.header[h].insPtDesc = header[h].Slwbeztxt;

										ftlData.header[h].vEquiLbl = false;
										ftlData.header[h].vEqui = false;
										ftlData.header[h].vEquiDesc = false;
										ftlData.header[h].vFlocLbl = true;
										ftlData.header[h].vFloc = true;
										ftlData.header[h].vFlocDesc = true;
										ftlData.header[h].bAddComponent = true;
									}
									var oModel = new sap.ui.model.json.JSONModel();
									oModel.setData(ftlData.header);
								}
								var operation = d.FTOprs.results;
								if (operation.length > 0) {
									ftlData.operation = operation;
									var oprRel = d.FTRel.results;
									var SrvPckgOvrw = d.FTSpack.results;
									var maintPckg = d.FTMPack.results;
									var maintPckgDefault = d.FTMpackRead.results;
									var aPrt = d.FTPRT.results;
									var aInsp = d.FTInsp.results;
									for (var o = 0; o < operation.length; o++) {
										ftlData.operation[o].calcKeyDesc = "";
										ftlData.operation[o].actTypDesc = "";
										ftlData.operation[o].flag = operation[o].Tplnal + "-" + operation[o].Vornr;
										ftlData.operation[o].Arbpl = operation[o].TlArbpl;
										ftlData.operation[o].Plnal = operation[o].Tplnal;
										ftlData.operation[o].opState = "None";
										ftlData.operation[o].opDescState = "None";
										ftlData.operation[o].wcState = "None";
										ftlData.operation[o].plantState = "None";
										ftlData.operation[o].ctrlKeyState = "None";
										ftlData.operation[o].Werks = operation[o].Werks2fop;
										ftlData.operation[o].Steus = operation[o].Steus2fop;
										ftlData.operation[o].workPerc = operation[o].Prznt.toString();
										ftlData.operation[o].orderQty = operation[o].Bmvrg;
										ftlData.operation[o].ordQtyUnit = operation[o].Bmeih;
										ftlData.operation[o].netPrice = operation[o].Opreis;
										ftlData.operation[o].currency = operation[o].Owaers;
										ftlData.operation[o].priceUnit = operation[o].Opeinh;
										ftlData.operation[o].costElement = operation[o].Sakto2fop;
										ftlData.operation[o].materialGrp = operation[o].Omatkl;
										ftlData.operation[o].puchGroup = operation[o].Oekgrp;
										ftlData.operation[o].purchOrg = operation[o].Ekorg;
										ftlData.operation[o].Uvorn = operation[o].Uvorn;
										ftlData.operation[o].UvornEnable = false;
										ftlData.operation[o].equi = operation[o].EqunrFop;
										ftlData.operation[o].floc = operation[o].TplnrFop;
										ftlData.operation[o].OprRel = [];
										ftlData.operation[o].SrvPckgOvrw = [];
										ftlData.operation[o].PRT = [];
										ftlData.operation[o].InspChar = [];

										if (oprRel.length > 0) {
											for (var x in oprRel) {
												if (ftlData.grp === oprRel[x].Tlflhdr && ftlData.operation[o].Plnal === oprRel[x].Tplnal && ftlData.operation[o].Vornr ===
													oprRel[x].Vorn2) {
													var objOprRel = {
														Plnal: oprRel[x].Tplnal,
														Vornr: oprRel[x].Vorn2,

														OperationOR: oprRel[x].Vornrfrel,
														Offset: oprRel[x].Dauer,
														OUn: oprRel[x].Zeinh,
														RelType: oprRel[x].Aobar,
														PO: oprRel[x].Fprznt,
														OI: oprRel[x].Provg,
														ID: oprRel[x].Fkalid,
														WrkCtrOR: oprRel[x].Arbplfrel,
														PlantOR: oprRel[x].Werksfrel,

														OperationORVS: "None",
														OffsetVS: "None",
														OUnVS: "None",
														RelTypeVS: "None",
														POVS: "None",
														OIVS: "None",
														IDVS: "None",
														WrkCtrORVS: "None",
														PlantORVS: "None",
													}
													ftlData.operation[o].OprRel.push(objOprRel);
												}
											}
										}

										if (SrvPckgOvrw.length > 0) {
											for (var x in SrvPckgOvrw) {
												if (ftlData.grp === SrvPckgOvrw[x].Tlflhdr && ftlData.operation[o].Plnal === SrvPckgOvrw[x].Tplnal && ftlData.operation[
														o].Vornr === SrvPckgOvrw[x].Vornrr) {
													var oSPO = {
														// group: SrvPckgOvrw[x].Tlflhdr,
														Plnal: SrvPckgOvrw[x].Tplnal,
														Vornr: SrvPckgOvrw[x].Vornrr,

														LineNum: SrvPckgOvrw[x].SrvLine,
														DelIndSP: formatter.statusSel(SrvPckgOvrw[x].Del),
														ActNum: SrvPckgOvrw[x].Srvpos,
														ShrtTxt: SrvPckgOvrw[x].Ktext1,
														Qty: SrvPckgOvrw[x].Mengefspk,
														BUomSP: SrvPckgOvrw[x].Meinsfspk,
														GrossPrc: SrvPckgOvrw[x].Tbtwr,
														CurKey: SrvPckgOvrw[x].Waersfspk,
														Work: SrvPckgOvrw[x].IntWork,
														UnitOfWork: SrvPckgOvrw[x].Iwein,

														ActNumVS: "None",
														ShrtTxtVS: "None",
														QtyVS: "None",
														BUomSPVS: "None",
														GrossPrcVS: "None",
														CurKeyVS: "None",
														WorkVS: "None",
														UnitOfWorkVS: "None",

														DelIndSPEnabled: false
													};
													ftlData.operation[o].SrvPckgOvrw.push(oSPO);
												}
											}
										}

										if (aPrt.length > 0) {
											for (var x in aPrt) {
												if (ftlData.grp === aPrt[x].Tlflhdr && ftlData.operation[o].Plnal === aPrt[x].Tplnal && ftlData.operation[o].Vornr ===
													aPrt[x].Vornrfprt) {
													var objPRT = {
														// grp: aPrt[x].Tlflhdr,
														Plnal: aPrt[x].Tplnal,
														Vornr: aPrt[x].Vornrfprt,

														ItmNum: aPrt[x].Psnfh,
														ItmCat: aPrt[x].Fhmar,
														// PRT: aPrt[x].Fhmnr,
														Plant: aPrt[x].Fhwrk, //PRTDesc
														Mat: aPrt[x].Matnrfprt,
														MatDesc: "",
														Equi: aPrt[x].EqunrFpt,
														EquiDesc: "",
														Mspt: aPrt[x].Eqpnt,
														MsptDesc: "",
														doc: aPrt[x].Dokarfprt,
														docDesc: "",
														docType: aPrt[x].Doknrfprt,
														docTypeDesc: "",
														docPart: aPrt[x].Doktlfprt,
														docVersion: aPrt[x].Dokvrfprt,
														Othr: aPrt[x].Fhmnr,
														OthrDesc: "",
														Qty: aPrt[x].Mgvgw,
														UOM: aPrt[x].Mgeinh,
														QtyFrmla: aPrt[x].Mgform,
														PRTCtrl: aPrt[x].Steuf,
														PRTCtrlDesc: aPrt[x].Stftxt,
														StdUsgVal: aPrt[x].Ewvgw,
														StdUsgUOM: aPrt[x].Eweinh,
														UsgValFrmla: aPrt[x].Ewform,

														PRTVS: "None",
														PlantVS: "None",
														QtyVS: "None",
														UOMVS: "None",
														QtyFrmlaVS: "None",
														PRTCtrlVS: "None",
														StdUsgValVS: "None",
														StdUsgUOMVS: "None",
														UsgValFrmlaVS: "None",
													}

													if (objPRT.ItmCat === "M") {
														objPRT.PRT = objPRT.Mat;
														objPRT.title = "Material";
														objPRT.matEnable = true;
														objPRT.eqEnable = false;
														objPRT.msptEnable = false;
														objPRT.docEnable = false;
														objPRT.othEnable = false;
														objPRT.Plant = ftlData.operation[o].Werks;
													} else if (objPRT.ItmCat === "E") {
														objPRT.PRT = objPRT.Equi;
														objPRT.title = "Equipment";
														objPRT.matEnable = false;
														objPRT.eqEnable = true;
														objPRT.msptEnable = false;
														objPRT.docEnable = false;
														objPRT.othEnable = false;
													} else if (objPRT.ItmCat === "P") {
														objPRT.PRT = objPRT.Mspt;
														objPRT.title = "Measuring Point";
														objPRT.matEnable = false;
														objPRT.eqEnable = false;
														objPRT.msptEnable = true;
														objPRT.docEnable = false;
														objPRT.othEnable = false;
													} else if (objPRT.ItmCat === "D") {
														objPRT.PRT = objPRT.doc + "-" + objPRT.docType + "-" + objPRT.docPart + "-" + objPRT.docVersion;
														objPRT.title = "Document";
														objPRT.matEnable = false;
														objPRT.eqEnable = false;
														objPRT.msptEnable = false;
														objPRT.docEnable = true;
														objPRT.othEnable = false;
														objPRT.docType = "";
														objPRT.docTypeDesc = "";
														objPRT.docPart = "";
														objPRT.docVersion = "";
													} else if (objPRT.ItmCat === "O") {
														objPRT.PRT = objPRT.Othr;
														objPRT.title = "Others";
														objPRT.matEnable = false;
														objPRT.eqEnable = false;
														objPRT.msptEnable = false;
														objPRT.docEnable = false;
														objPRT.othEnable = true;
													}
													ftlData.operation[o].PRT.push(objPRT);
												}
											}
										}

										if (aInsp.length > 0) {
											for (var x in aInsp) {
												if (ftlData.grp === aInsp[x].Tlflhdr && ftlData.operation[o].Plnal === aInsp[x].Tplnal && ftlData.operation[o].Vornr ===
													aInsp[x].Vornrfins) {
													var objInsp = {
														// group: aInsp[x].Tlflhdr,
														Plnal: aInsp[x].Tplnal,
														Vornr: aInsp[x].Vornrfins,

														InspChar: aInsp[x].Merknr,
														PrstInd: aInsp[x].Vste2fins,
														QuanChar: formatter.statusSel(aInsp[x].Quantitat),
														QualChar: formatter.statusSel(aInsp[x].QpmkRef),
														MastInspChar: aInsp[x].Verw2fins,
														Plant: aInsp[x].Uzae2tlfn,
														Version: aInsp[x].Ver2tlfli,
														ShrtTxt: aInsp[x].Kurztext,
														InspMthd: aInsp[x].Pmth2fins,
														InspMthdPlnt: aInsp[x].Qwe2tlfli,
														TolKey: aInsp[x].Toleranzs,
														VrsnInspMthd: aInsp[x].Pmtversio,
														SampProc: aInsp[x].Stichprve,
														SampUOM: aInsp[x].Probemgeh,
														BaseSampQty: aInsp[x].Pruefeinh.toString(),
														CodeGrp: aInsp[x].Auswmenge,

														MastInspCharVS: "None",
														PlantVS: "None",
														VersionVS: "None",
														InspMthdVS: "None",
														InspMthdPlntVS: "None",
														SampProcVS: "None"
													};

													ftlData.operation[o].InspChar.push(objInsp);
												}
											}
										}

										var currReadMpack = [];
										if (maintPckgDefault.length > 0) {
											for (var w in maintPckgDefault) {
												if (ftlData.grp === maintPckgDefault[w].Tlflhdr && ftlData.operation[o].Plnal === maintPckgDefault[w].Tplnal) {
													currReadMpack.push(maintPckgDefault[w]);
												}
											}
										}

										var currSelMpack = [];
										if (maintPckg.length > 0) {
											for (var x in maintPckg) {
												if (ftlData.grp === maintPckg[x].Tlflhdr && ftlData.operation[o].Plnal === maintPckg[x].Tplnal &&
													ftlData.operation[o].Vornr === maintPckg[x].Vorn2fmpk) {
													currSelMpack.push(maintPckg[x]);
												}
											}
										}

										var oMaintPckg = {};
										if (currReadMpack.length > 0) {
											oMaintPckg = {
												Plnal: currReadMpack[0].Tplnal,
												Vornr: ftlData.operation[o].Vornr,
												Strat: currReadMpack[0].Startfmpk,
												SOp: "",
												Ltxa1: ftlData.operation[o].Ltxa1,
												flag: currReadMpack[0].Tplnal + "-" + ftlData.operation[o].Vornr,
												MPArr: [],
											};
											for (var f in currReadMpack) {
												var currReadObj = currReadMpack[f];
												oMaintPckg[currReadObj.Paketfmpk] = false;
											}
										}

										if (currSelMpack.length > 0) {
											for (var z in currSelMpack) {
												currSelMpack[z].Vornr = currSelMpack[z].Vorn2fmpk;
												currSelMpack[z].Strat = currSelMpack[z].Startfmpk;
												currSelMpack[z].Paket = currSelMpack[z].Paketfmpk;

												var currSelObj = currSelMpack[z];
												if (currSelMpack[z].IsSelected === 'X') {
													oMaintPckg[currSelObj.Paketfmpk] = true;
												}
											}
											oMaintPckg.MPArr = currSelMpack;
										}
										ftlData.MaintPckg.push(oMaintPckg);
									}
									g.oData = ftlData.operation;
									var oprModel = new sap.ui.model.json.JSONModel();
									oprModel.setData(ftlData.operation);
								}
								component = d.FTComp.results;
								if (component.length > 0) {
									ftlData.component = component;
									for (var f = 0; f < component.length; f++) {
										ftlData.component[f].matDesc = component[f].Maktx;
										ftlData.component[f].slNo = e + 1;
										ftlData.component[f].Plnal = component[f].Tplnal;
										ftlData.component[f].flag = component[f].Tplnal + "-" + component[f].Vornr + "-" + ftlData.component[f].slNo;
										ftlData.component[f].hFlag = component[f].Tplnal + "-" + component[f].Vornr;
										ftlData.component[f].bom = component[f].Stlnrfcmp;
										ftlData.component[f].bomCat = component[f].Stltyfcmp;
										ftlData.component[f].bomCatDesc = component[f].Stltyfcmptxt;
										ftlData.component[f].altBom = component[f].Stlal;
									}
									g.cmpData = component;
									compModel = new sap.ui.model.json.JSONModel();
									compModel.setData(ftlData.component);
								}
								classList = d.FTClass.results;
								if (classList) {
									if (classList.length > 0) {
										for (var i = 0; i < classList.length; i++) {
											classList[h].ctEnable = false;
											classList[h].classEnable = false;
											classList[h].ClassTypeDesc = classList[h].Artxt;
											delete classList[h].Artxt;
											classList[h].ClassDesc = classList[h].Kltxt;
											delete classList[h].Kltxt;
											delete classList[h].Changerequestid;
											delete classList[h].Clint;
											delete classList[h].Service;
											classList[h].classDelEnable = true;
											classList[h].slNo = i + 1;
											classList[h].Plnal = classList[h].Tplnal;
											classList[h].flag = classList[h].Tplnal + "-" + classList[h].slNo;
										}
										g.cData = classList;
										cModel = new sap.ui.model.json.JSONModel();
										cModel.setData(classList);
										ftlData.Class = classList;
									}
								}
								charList = d.FTVal.results;
								if (charList) {
									if (charList.length > 0) {
										for (var j = 0; j < charList.length; j++) {
											charList[j].cNameEnable = false;
											delete charList[j].Ataut;
											delete charList[j].Ataw1;
											delete charList[j].Atawe;
											delete charList[j].Atcod;
											delete charList[j].Atflb;
											delete charList[j].Atflv;
											delete charList[j].Atimb;
											delete charList[j].Atsrt;
											delete charList[j].Atvglart;
											delete charList[j].Atzis;
											delete charList[j].Changerequestid;
											delete charList[j].CharName;
											delete charList[j].Charid;
											delete charList[j].Classtype;
											delete charList[j].Service;
											delete charList[j].Valcnt;
											charList[j].slNo = j + 1;
											charList[j].Plnal = charList[j].Tplnal;
											charList[j].flag = charList[j].Tplnal + "-" + charList[j].Class + "-" + charList[j].slNo;
										}
										for (var z = 0; z < charList.length; z++) {
											var count = 1;
											for (var y = 0; y < charList.length; y++) {
												if (z === y) {
													continue;
												}
												if (charList[y].Atnam === charList[z].Atnam && charList[y].Class ===
													charList[z].Class) {
													count++;
												}
											}
											if (count > 1) {
												charList[z].charDltEnable = true;
											} else {
												charList[z].charDltEnable = false;
											}

											if (charList[z].Atein === true) {
												charList[z].charAddEnable = false;
											}
										}
										g.chData = charList;
										_cModel = new sap.ui.model.json.JSONModel();
										_cModel.setData(charList);
										ftlData.Char = charList;
									}
								}
								g.readCreateTempKeyT("copyFTL", ftlData, noOfObjects);
							}
						}
					}
					g.BusyDialog.close();
				},
				error: function (err) {
					var error = [];
					if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
						.errordetails
						.length === 0) {
						error[0] = JSON.parse(err.responseText).error.message.value;
					} else {
						for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
							error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
						}
					}
					var value = error.join("\n");
					g.BusyDialog.close();
					g.invokeMessage(value);
				}
			});
			g.onCopyTLClose();
		},
		/*
		 * Function to handle cancel button press of Copy TL
		 * @public
		 */
		onCopyTLClose: function () {
			this._copyTLFragment.close();
			//}
		},
		/*
		 * Function to handle copy button press of Copy OL
		 * @param {sap.ui.base.Event} oEvent
		 * @public
		 */
		onCopyOLPress: function (oEvent) {
			var g = this;
			var copyOLFlag = true;
			var copyOLModel = this._copyOLFragment.getModel("copyOLModel");
			var copyData = copyOLModel.getData();
			if (copyData.noObj === "" || copyData.sNoObj === "Error") {
				copyOLFlag = false;
				copyData.sNoObj = "Error";
			}
			if (copyData.sLink === "" || copyData.sLinkValueState === "Error") {
				copyOLFlag = false;
				copyData.sLinkValueState = "Error";
			}

			if (!copyOLFlag) {
				// var msg = "Enter valid Object Link";
				// MessageBox.show(msg, {
				// 	title: "Error",
				// 	icon: sap.m.MessageBox.Icon.ERROR,
				// 	onClose: function() {}
				// });
				copyOLModel.setData(copyData);
				return;
			}

			var AIWListOLData = sap.ui.getCore().getModel("AIWListOLModel").getData();
			var cDataObj;
			if (AIWListOLData.length > 0) {
				for (var i = 0; i < AIWListOLData.length; i++) {
					if (AIWListOLData[i].link === copyData.sLink) {
						cDataObj = AIWListOLData[i];
					}
				}
			}
			// for (var i = 0; i < parseInt(copyData.noObj); i++) { 
			if (!cDataObj) {
				this.readLinkData(copyData.sLink, copyData, copyData.noObj);
			} else {
				this.readCreateTempKeyT("CopyObjectLink", cDataObj, copyData.noObj);
			}
			// }
		},
		/*
		 * Function to read TL data
		 * @param {string} l - Object link
		 * @param {string} copyData
		 * @param {string} noOfObjects
		 * @public
		 */
		readLinkData: function (l, copyData, noOfObjects) {
			var g = this;
			var m = this.getView().getModel();
			var AIWListOLData = sap.ui.getCore().getModel("AIWListOLModel").getData();
			var oFilter = [new sap.ui.model.Filter("Objlink", "EQ", l)];
			var oExpand = ["OLClass", "OLVal", "Olink", "OLLAM"];

			function readStatusProf(d) {
				//var q = "/DeriveOLstatusSet(NETYP='" + d + "',STSMA='')";
				var q = "/DeriveOLstatusSet(Netyp='" + d + "',Lvorm=false)";
				m.read(q, {
					success: function (r) {
						if (r.Statproftxt !== "" && (r.Ustw_oln !== "" || r.Uswo_oln !== "")) {
							g.olData.usrSts = r.Usta_oln;
							g.olData.stProfLblV = true;
							g.olData.stsProf = r.Stsm_oln;
							g.olData.stsProfV = true;
							g.olData.stsProfDesc = r.Statproftxt;
							g.olData.stsProfDescV = true;
							g.olData.stsObj = r.Ustw_oln;
							g.olData.stsObjLblV = true;
							g.olData.stsObjV = true;
							g.olData.stsWoLblV = true;
							g.olData.stsWoNoV = true;
							g.olData.stsWoNo = r.Uswo_oln;
							g.olData.sysSts = r.Stattext;
						} else {
							g.olData.stProfLblV = false;
							g.olData.stsProfV = false;
							g.olData.stsProfDescV = false;
							g.olData.stsObjLblV = false;
							g.olData.stsObjV = false;
							g.olData.stsWoLblV = false;
							g.olData.stsWoNoV = false;
							g.olData.usrSts = "";
							g.olData.stsProf = "";
							g.olData.stsProfDesc = "";
							g.olData.stsObj = "";
							g.olData.stsWoNo = "";
							g.olData.sysSts = "";
						}
						g.readCreateTempKeyT("CopyObjectLink", g.olData, noOfObjects);
						g.BusyDialog.close();
					},
					error: function (err) {
						var error = [];
						if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
							.errordetails
							.length === 0) {
							error[0] = JSON.parse(err.responseText).error.message.value;
						} else {
							for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
								error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
							}
						}
						var value = error.join("\n");
						g.invokeMessage(value);
						g.BusyDialog.close();
					}
				});
				g.action = "createOL";
				g.onCopyOLClose();
			}

			this.BusyDialog.open();
			m.read("/ChangeRequestSet", {
				filters: oFilter,
				urlParameters: {
					"$expand": oExpand
				},
				success: function (r) {
					if (r.results.length > 0) {
						var message = r.results[0].Message;
						g.lockMsg = "";
						// if (message !== "") {
						// 	g.lockMsg = true;
						// 	sap.m.MessageToast.show(message, {
						// 		duration: 15000,
						// 		animationDuration: 15000
						// 	});
						// }
						var h = r.results[0];
						var d = h.Olink.results[0];
						if (d !== null && d !== undefined) {
							g.linkCat = d.Netyp;
							g.objCat = d.Kantyp;
							g.olData = {
								mode: "create",
								link: d.Objlink,
								linkCat: d.Netyp,
								// Netyp: d.Netyp,
								linkCatDesc: d.Netyptxt,
								objCat: d.Kantyp,
								// Kantyp: d.Kantyp,
								objCatDesc: d.Kantyptxt,
								linkDesc: d.Kanxt,
								netId: d.Netid,
								netIdDesc: d.Netidtxt,
								linkNum: d.Lfdknr !== "" ? d.Lfdknr : "1",
								autGrp: d.Begru,
								autGrpDesc: d.Begtx,
								validFrm: formatter.getDateFormat(d.Datva),
								timeFrm: formatter.getTime(d.Zeitva),
								validTo: formatter.getDateFormat(d.Datvb),
								timeTo: formatter.getTime(d.Zeitvb),
								medium: d.Mediu,
								mediumDesc: d.Medkxt,
								linkFrmFlEn: true,
								linkToFlEn: true,
								linkObjFlEn: true,
								linkFromEQEn: true,
								linkToEQEn: true,
								linkObjEqEn: true,
								linkCatEn: true, //new
								linkCatVS: "None",
								objCatEn: true, //new
								objCatVS: "None",
								linkFEqLblRQ: true,
								linkToEqLblRQ: true,
								linkFrmEq: "",
								linkFrmEqDesc: "",
								linkToEq: "",
								linkToEqDesc: "",
								linkObjEq: "",
								linkObjEqDesc: "",
								linkFrmflLblV: false,
								linkFrmFlV: false,
								linkFrmFlDescV: false,
								linkToFlLblV: false,
								linkToFlV: false,
								linkToFlDescV: false,
								linkObjFlLblV: false,
								linkObjFlV: false,
								linkObjFlDescV: false,
								linkFrmEqLblV: true,
								linkFrmEqV: true,
								linkFrmEqDescV: true,
								linkToEqLblV: true,
								linkToEQV: true,
								linkToEqDescV: true,
								linkObjEqLblV: true,
								linkObjEqV: true,
								linkObjEqDescV: true,
								usrSts: "",
								stProfLblV: true,
								stsProf: "",
								stsProfV: true,
								stsProfDesc: "",
								stsProfDescV: true,
								stsObj: "",
								stsObjLblV: true,
								stsObjV: true,
								stsWoLblV: true,
								stsWoNoV: true,
								stsWoNo: "",

								LAM: [],
								Class: [],
								Char: []
							};
							if (g.objCat === "E") {
								g.olData.linkCatEn = true; //new
								g.olData.linkFrmFlEn = false;
								g.olData.linkToFlEn = false;
								g.olData.linkObjFlEn = false;
								g.olData.linkFEqLblRQ = true;
								g.olData.linkToEqLblRQ = true;
								g.olData.linkFrmflLblV = false;
								g.olData.linkFrmFlV = false;
								g.olData.linkFrmFlDescV = false;
								g.olData.linkToFlLblV = false;
								g.olData.linkToFlV = false;
								g.olData.linkToFlDescV = false;
								g.olData.linkObjFlLblV = false;
								g.olData.linkObjFlV = false;
								g.olData.linkObjFlDescV = false;
								g.olData.linkCatVS = "None";
								g.olData.objCatEn = true; //new
								g.olData.objCatVS = "None";
								g.olData.linkFEqLblRQ = true;
								g.olData.linkToEqLblRQ = true;
								g.olData.linkFrmEq = d.Eqvon;
								g.olData.linkFrmEqDesc = d.Eqtxtf;
								g.olData.linkToEq = d.Eqnach;
								g.olData.linkToEqDesc = d.Eqtxtt;
								g.olData.linkObjEq = d.Eqkant;
								g.olData.linkObjEqDesc = d.Eqtxtl;
								g.olData.linkFrmflLblV = false;
								g.olData.linkFrmFlV = false;
								g.olData.linkFrmFlDescV = false;
								g.olData.linkToFlLblV = false;
								g.olData.linkToFlV = false;
								g.olData.linkToFlDescV = false;
								g.olData.linkObjFlLblV = false;
								g.olData.linkObjFlV = false;
								g.olData.linkObjFlDescV = false;
								g.olData.linkFrmEqLblV = true;
								g.olData.linkFrmEqV = true;
								g.olData.linkFrmEqDescV = true;
								g.olData.linkToEqLblV = true;
								g.olData.linkToEQV = true;
								g.olData.linkToEqDescV = true;
								g.olData.linkObjEqLblV = true;
								g.olData.linkObjEqV = true;
								g.olData.linkObjEqDescV = true;
								/*AIWListOLData.push(g.olData);
								sap.ui.getCore().getModel("AIWListOLModel").setData(AIWListOLData);
								sap.ui.getCore().getModel("AIWListOLModel").refresh();*/
								readStatusProf(g.linkCat);
							} else if (g.objCat === "T") {
								g.olData.linkCatEn = true; //new
								g.olData.linkFromEQEn = false;
								g.olData.linkToEQEn = false;
								g.olData.linkObjEqEn = false;
								g.olData.linkFrmflLblRQ = true;
								g.olData.linkToFlLblRQ = true;
								g.olData.linkFrmEqLblV = false;
								g.olData.linkFrmEqV = false;
								g.olData.linkFrmEqDescV = false;
								g.olData.linkToEqLblV = false;
								g.olData.linkToEQV = false;
								g.olData.linkToEqDescV = false;
								g.olData.linkObjEqLblV = false;
								g.olData.linkObjEqV = false;
								g.olData.linkObjEqDescV = false;
								g.olData.linkCatVS = "None";
								g.olData.objCatEn = true; //new
								g.olData.objCatVS = "None";
								g.olData.linkFrmflLblRQ = true;
								g.olData.linkToFlLblRQ = true;
								g.olData.linkFrmFl = d.Tpvon;
								g.olData.linkFrmFlDesc = d.Fltxtf;
								g.olData.linkToFl = d.Tpnach;
								g.olData.linkToFlDesc = d.Fltxtt;
								g.olData.linkObjFl = d.Tpkant;
								g.olData.linkObjFlDesc = d.Fltxtl;
								g.olData.linkFrmflLblV = true;
								g.olData.linkFrmFlV = true;
								g.olData.linkFrmFlDescV = true;
								g.olData.linkToFlLblV = true;
								g.olData.linkToFlV = true;
								g.olData.linkToFlDescV = true;
								g.olData.linkObjFlLblV = true;
								g.olData.linkObjFlV = true;
								g.olData.linkObjFlDescV = true;
								g.olData.linkFrmEqLblV = false;
								g.olData.linkFrmEqV = false;
								g.olData.linkFrmEqDescV = false;
								g.olData.linkToEqLblV = false;
								g.olData.linkToEQV = false;
								g.olData.linkToEqDescV = false;
								g.olData.linkObjEqLblV = false;
								g.olData.linkObjEqV = false;
								g.olData.linkObjEqDescV = false;
								/*AIWListOLData.push(g.olData);
								sap.ui.getCore().getModel("AIWListOLModel").setData(AIWListOLData);
								sap.ui.getCore().getModel("AIWListOLModel").refresh();*/

								readStatusProf(g.linkCat);
							}

							if (d.Bezarp === "2") {
								// g._oView.byId("twoWayRel").setSelected(true);
								g.olData.twoWayRel = true;
								g.olData.oneWayRel = false;
							} else if (d.Bezarp === "1") {
								// g._oView.byId("oneWayRel").setSelected(true);
								g.olData.oneWayRel = true;
								g.olData.twoWayRel = false;
							}

							if (d.Bezarl === "2") {
								// g._oView.byId("twoWayUsd").setSelected(true);
								g.olData.twoWayUsd = true;
								g.olData.oneWayUsd = false;
								g.olData.relNotUsd = false;
							} else if (d.Bezarl === "1") {
								// g._oView.byId("oneWayUsd").setSelected(true);
								g.olData.oneWayUsd = true;
								g.olData.twoWayUsd = false;
								g.olData.relNotUsd = false;
							} else if (d.Bezarl === "0") {
								// g._oView.byId("relNotUsd").setSelected(true);
								g.olData.relNotUsd = true;
								g.olData.twoWayUsd = false;
								g.olData.oneWayUsd = false;
							}

							var lamData = h.OLLAM.results;
							if (lamData) {
								var lModel = new sap.ui.model.json.JSONModel();
								lModel.setData(lamData);
								g.olData.LAM = lamData;
							}

							var classList = h.OLClass.results;
							if (classList) {
								if (classList.length > 0) {
									for (var i = 0; i < classList.length; i++) {
										classList[i].ctEnable = false;
										classList[i].classEnable = false;
										classList[i].ClassTypeDesc = classList[i].ClassDesc;
										delete classList[i].ClassDesc;

										delete classList[i].Changerequestid;
										delete classList[i].Clint;
										delete classList[i].Service;
										classList[i].classDelEnable = true;
									}
									var cModel = new sap.ui.model.json.JSONModel();
									cModel.setData(classList);
									// g.class.setModel(cModel);
									g.olData.Class = classList;
								}
							}

							var charList = h.OLVal.results;
							if (charList) {
								if (charList.length > 0) {
									for (var j = 0; j < charList.length; j++) {
										charList[j].cNameEnable = false;
										delete charList[j].Ataut;
										delete charList[j].Ataw1;
										delete charList[j].Atawe;
										delete charList[j].Atcod;
										delete charList[j].Atflb;
										delete charList[j].Atflv;
										delete charList[j].Atimb;
										delete charList[j].Atsrt;
										delete charList[j].Atvglart;
										delete charList[j].Atzis;
										delete charList[j].Changerequestid;
										delete charList[j].CharName;
										delete charList[j].Charid;
										delete charList[j].Classtype;
										delete charList[j].Service;
										delete charList[j].Valcnt;
										charList[j].slNo = j + 1;
										charList[j].flag = charList[j].Class + "-" + charList[j].slNo;
									}
									var _cModel = new sap.ui.model.json.JSONModel();
									_cModel.setData(charList);
									// g.char.setModel(_cModel);
									g.chData = charList;
									g.olData.Char = charList;
								}

								for (var z = 0; z < g.olData.Char.length; z++) {
									var count = 1;
									for (var y = 0; y < g.olData.Char.length; y++) {
										if (z === y) {
											continue;
										}
										if (g.olData.Char[y].Atnam === g.olData.Char[z].Atnam && g.olData.Char[y].Class ===
											g.olData.Char[z].Class) {
											count++;
										}
									}
									if (count > 1) {
										g.olData.Char[z].charDltEnable = true;
									} else {
										g.olData.Char[z].charDltEnable = false;
									}

									if (g.olData.Char[z].Atein === true) {
										g.olData.Char[z].charAddEnable = false;
									}
								}
							}
						} else {
							var message = g.getResourceBundle().getText("OL_EXIST_ERR"); //"Object Link does not exist";
							sap.m.MessageToast.show(message, {
								duration: 5000,
								animationDuration: 5000
							});
						}
					}
					g.BusyDialog.close();
				},
				error: function (err) {
					var error = [];
					if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
						.errordetails
						.length === 0) {
						error[0] = JSON.parse(err.responseText).error.message.value;
					} else {
						for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
							error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
						}
					}
					var value = error.join("\n");
					g.BusyDialog.close();
					g.invokeMessage(value);
				}
			});
		},
		/*
		 * Function to handle cancel button press of Copy OL
		 * @public
		 */
		onCopyOLClose: function () {
			// if (this.action === "copyOL") {
			this.action = "createOL";
			this._copyOLFragment.close();
			// }

		},
		/*
		 * Function to create a row of WC/TL/OL
		 * @param {string} sType - Object indicator
		 * @param {string} key - Group key (if TL)
		 * @public
		 */
		CreatRow: function (sType, key) {
			var oDatePicker = new sap.m.DatePicker();
			var endDate = oDatePicker._oMaxDate;
			var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
				pattern: "MM/dd/yyyy"
			});
			var maxDate = oDateFormat.format(endDate);
			var eh = endDate.getHours();
			var em = endDate.getMinutes();
			var es = endDate.getSeconds();
			var maxTime = eh + ":" + em + ":" + es;
			var tlObj = {
				grp: key,
				validFrm: formatter.currentDate(),
				header: [],
				mode: "create",
				Class: [],
				Char: []
					//addGTLCounter: false
			};
			var olObj = {
				link: key,
				linkCat: "",
				objCat: "",
				linkDesc: "",
				netId: "",
				sysStaus: "",
				userStatus: "",
				linkFrmEq: "",
				linkToEq: "",
				linkObjEq: "",
				linkFrmFloc: "",
				linkToFloc: "",
				linkObjFloc: "",
				linkNum: "1",
				autGrp: "",
				autGrpDesc: "",
				validFrm: formatter.currentDate(),
				timeFrm: formatter.getCurrentTime(),
				validTo: maxDate,
				timeTo: maxTime,
				medium: "",
				mediumDesc: "",
				twoWayRel: true,
				twoWayUsd: true,
				linkCatEn: true,
				objCatEn: true,
				linkFromEQEn: true,
				linkToEQEn: true,
				linkObjEqEn: true,
				linkFrmFlEn: true,
				linkToFlEn: true,
				linkObjFlEn: true,
				aEnModel: true,
				mode: "create",
				Class: [],
				Char: []
			};

			if (sType === "CreateWorkCenter") {
				var AiwListWCModel = sap.ui.getCore().getModel("AIWListWCModel");
				var AiwListWCData = AiwListWCModel.getData();
				var wcObj = {
					wc: "",
					wcDesc: "",
					plant: "",
					plantDesc: "",
					wcCat: "",
					wcCatDesc: "",
					person: "",
					personDesc: "",
					usg: "",
					usgDesc: "",
					stdVal: "",
					stdValDesc: "",
					ctrlKey: "",
					ctrlKeyDesc: "",
					wcValueState: "None",
					wcDescValueState: "None",
					plantValueState: "None",
					wcCatValueState: "None",
					personResValueState: "None",
					usgValueState: "None",
					stdValueState: "None",
					cntrlKeyValueState: "None",
					wcValueStateTxt: "",
					wcDescValueStateTxt: "",
					plantValueStateTxt: "",
					wcCatValueStateTxt: "",
					personResValueStateTxt: "",
					usgValueStateTxt: "",
					stdValueStateTxt: "",
					cntrlKeyValueStateTxt: "",
					mode: "create",
					Type: "X",
					wcEnable: true,
					plEnable: true,
					wcatEnable: true,
					classItems: [],
					characteristics: [],
					cost: [],
					capacity: [],
				};
				AiwListWCData.push(wcObj);
				AiwListWCModel.setData(AiwListWCData);
				this.getView().setModel(AiwListWCModel, "AIWListWCModel");
				this.updateCount("workCenter", AiwListWCData);
			} else if (sType === "CreateTaskList") {
				if (this.action.indexOf("GTL") > 0) {
					/*var GTLFragmentId = this.getView().createId("generalTL");
					var genTL = sap.ui.core.Fragment.byId(GTLFragmentId, "gtlBasicTable");*/

					tlObj.modeflag = "Crt";
					tlObj.typeFlag = "G";
					tlObj.PPenable = true;
					tlObj.Grpenable = true;
					tlObj.KDenable = true;
					var AIWListGTLModel = sap.ui.getCore().getModel("AIWListGTLModel");
					var AIWListGTLData = AIWListGTLModel.getData();
					//tlObj.addGTLCounter = true;
					AIWListGTLData.push(tlObj);
					AIWListGTLModel.setData(AIWListGTLData);
					AIWListGTLModel.setSizeLimit(AIWListGTLData.length);
					this.getView().setModel(AIWListGTLModel, "AIWListGTLModel");
					this.updateCount("generalTL", AIWListGTLData);
				} else if (this.action.indexOf("ETL") > 0) {
					tlObj.equipment = "";
					tlObj.equipmentDesc = "";
					tlObj.equipmentVS = "None";
					tlObj.modeflag = "Crt";
					tlObj.typeFlag = "E";
					tlObj.Grpenable = true;
					tlObj.KDenable = true;
					var AIWListETLModel = sap.ui.getCore().getModel("AIWListETLModel");
					var AIWListETLData = AIWListETLModel.getData();
					AIWListETLData.push(tlObj);
					AIWListETLModel.setData(AIWListETLData);
					AIWListETLModel.setSizeLimit(AIWListETLData.length);
					this.getView().setModel(AIWListETLModel, "AIWListETLModel");
					this.updateCount("equiTL", AIWListETLData);
				} else if (this.action.indexOf("FTL") > 0) {
					tlObj.floc = "";
					tlObj.flocDesc = "";
					tlObj.flocVS = "None";
					tlObj.modeflag = "Crt";
					tlObj.typeFlag = "F";
					tlObj.Grpenable = true;
					tlObj.KDenable = true;
					var AIWListFTLModel = sap.ui.getCore().getModel("AIWListFTLModel");
					var AIWListFTLData = AIWListFTLModel.getData();
					AIWListFTLData.push(tlObj);
					AIWListFTLModel.setData(AIWListFTLData);
					AIWListFTLModel.setSizeLimit(AIWListFTLData.length);
					this.getView().setModel(AIWListFTLModel, "AIWListFTLModel");
					this.updateCount("flocTL", AIWListFTLData);
				}
			} else if (sType === "CreateObjectLink") {
				var AIWListOLModel = sap.ui.getCore().getModel("AIWListOLModel");
				var AIWListOLData = AIWListOLModel.getData();
				AIWListOLData.push(olObj);
				AIWListOLModel.setData(AIWListOLData);
				AIWListOLModel.setSizeLimit(AIWListOLData.length);
				//AIWListOLModel.setGrowingThreshold(AIWListOLData.length);
				this.getView().setModel(AIWListOLModel, "AIWListOLModel");
				this.updateCount("objLink", AIWListOLData);
			}
		},
		/*
		 * Function to handle 'selectionChange' event of Task List table
		 * @param {sap.ui.base.Event} oEvent
		 */
		onTLBasicSelect: function (oEvent) {
			var selPaths = oEvent.getSource().getSelectedContextPaths();
			//this.selPaths = selPaths;
			var aCounterModel = this.getView().getModel("aCounterModel");
			var TLFragmentId = this.getView().createId("tlMain");
			var TLKey = sap.ui.core.Fragment.byId(TLFragmentId, "_iconTabBarTL").getSelectedKey();
			if (TLKey === "GTLTab") {
				this.action = "createGTL";
			} else if (TLKey === "EqTLTab") {
				this.action = "createETL";
			} else if (TLKey === "FLOCTLTab") {
				this.action = "createFTL";
			}
			if (this.action.indexOf("GTL") > 0) {
				var AIWListGTLData = this.getView().getModel("AIWListGTLModel").getData();
				if (this.mode === "display") {
					aCounterModel.getData().addGTLCounter = false;
					if (selPaths.length !== 1) {
						this.getView().setModel(aCounterModel, "aCounterModel");
						this.getView().getModel("aCounterModel").refresh();
						var emptyData = [];
						var GTLHeaderModel = this.getView().getModel("GTLHeaderModel");
						GTLHeaderModel.setData(emptyData);
						this.getView().setModel(GTLHeaderModel, "GTLHeaderModel");
					} else {
						this.getView().setModel(aCounterModel, "aCounterModel");
						this.getView().getModel("aCounterModel").refresh();
						var selectedPath = oEvent.getSource().getSelectedContextPaths()[0];
						this.gtlPath = parseInt(selectedPath.substring(1));
						var GTLHeaderModel = this.getView().getModel("GTLHeaderModel");
						var gtlHeader = [];
						for (var i = 0; i < AIWListGTLData.length; i++) {
							if (this.gtlPath === i) {
								if (AIWListGTLData[i].header.length > 0) {
									for (var j = 0; j < AIWListGTLData[i].header.length; j++) {
										AIWListGTLData[i].header[j].enable = false;
									}
									gtlHeader.push(AIWListGTLData[i].header);
								}
							}
						}
						GTLHeaderModel.setData(gtlHeader);
						this.getView().setModel(GTLHeaderModel, "GTLHeaderModel");
						this.updateDeleteEnable("GTL", oEvent);
					}
				} else {
					if (selPaths.length !== 1) {
						aCounterModel.getData().addGTLCounter = false;
						this.getView().setModel(aCounterModel, "aCounterModel");
						this.getView().getModel("aCounterModel").refresh();
						var emptyData = [];
						var GTLHeaderModel = this.getView().getModel("GTLHeaderModel");
						GTLHeaderModel.setData(emptyData);
						this.getView().setModel(GTLHeaderModel, "GTLHeaderModel");
						this.updateDeleteEnable("GTL", oEvent);
					} else {
						aCounterModel.getData().addGTLCounter = true;
						this.getView().setModel(aCounterModel, "aCounterModel");
						this.getView().getModel("aCounterModel").refresh();
						var selectedPath = oEvent.getSource().getSelectedContextPaths()[0];
						this.gtlPath = parseInt(selectedPath.substring(1));
						var GTLHeaderModel = this.getView().getModel("GTLHeaderModel");
						var gtlHeader = [];
						for (var i = 0; i < AIWListGTLData.length; i++) {
							if (this.gtlPath === i) {
								if (AIWListGTLData[i].header.length > 0) {
									gtlHeader.push(AIWListGTLData[i].header);
								}
							}
						}
						GTLHeaderModel.setData(gtlHeader);
						this.getView().setModel(GTLHeaderModel, "GTLHeaderModel");
						this.updateDeleteEnable("GTL", oEvent);
					}
				}
			} else if (this.action.indexOf("ETL") > 0) {
				var AIWListETLData = this.getView().getModel("AIWListETLModel").getData();
				if (this.mode === "display") {
					aCounterModel.getData().addETLCounter = false;
					if (selPaths.length !== 1) {
						this.getView().setModel(aCounterModel, "aCounterModel");
						this.getView().getModel("aCounterModel").refresh();
						var emptyData = [];
						var ETLHeaderModel = this.getView().getModel("ETLHeaderModel");
						ETLHeaderModel.setData(emptyData);
						this.getView().setModel(ETLHeaderModel, "ETLHeaderModel");
					} else {
						this.getView().setModel(aCounterModel, "aCounterModel");
						this.getView().getModel("aCounterModel").refresh();
						var selectedPath = oEvent.getSource().getSelectedContextPaths()[0];
						this.etlPath = parseInt(selectedPath.substring(1));
						var ETLHeaderModel = this.getView().getModel("ETLHeaderModel");
						var etlHeader = [];
						for (var i = 0; i < AIWListETLData.length; i++) {
							if (this.etlPath === i) {
								if (AIWListETLData[i].header.length > 0) {
									for (var j = 0; j < AIWListETLData[i].header.length; j++) {
										AIWListETLData[i].header[j].enable = false;
									}
									etlHeader.push(AIWListETLData[i].header);
								}
							}
						}
						ETLHeaderModel.setData(etlHeader);
						this.getView().setModel(ETLHeaderModel, "ETLHeaderModel");
						this.updateDeleteEnable("ETL", oEvent);
					}
				} else {
					if (selPaths.length !== 1) {
						aCounterModel.getData().addETLCounter = false;
						this.getView().setModel(aCounterModel, "aCounterModel");
						this.getView().getModel("aCounterModel").refresh();
						var emptyData = [];
						var ETLHeaderModel = this.getView().getModel("ETLHeaderModel");
						ETLHeaderModel.setData(emptyData);
						this.getView().setModel(ETLHeaderModel, "ETLHeaderModel");
						this.updateDeleteEnable("ETL", oEvent);
					} else {
						var selectedPath = oEvent.getSource().getSelectedContextPaths()[0];
						this.etlPath = parseInt(selectedPath.substring(1));
						if (AIWListETLData[this.etlPath].equipment !== "" && AIWListETLData[this.etlPath].equipmentVS !== "Error") {
							aCounterModel.getData().addETLCounter = true;
							this.getView().setModel(aCounterModel, "aCounterModel");
							this.getView().getModel("aCounterModel").refresh();
							var ETLHeaderModel = this.getView().getModel("ETLHeaderModel");
							var etlHeader = [];
							for (var i = 0; i < AIWListETLData.length; i++) {
								if (this.etlPath === i) {
									if (AIWListETLData[i].header.length > 0) {
										etlHeader.push(AIWListETLData[i].header);
									}
								}
							}
							ETLHeaderModel.setData(etlHeader);
							this.getView().setModel(ETLHeaderModel, "ETLHeaderModel");
						} else {
							AIWListETLData[this.etlPath].equipmentVS = "Error";
							this.getView().getModel("AIWListETLModel").refresh();
						}
						this.updateDeleteEnable("ETL", oEvent);
					}
				}
			} else if (this.action.indexOf("FTL") > 0) {
				var AIWListFTLData = this.getView().getModel("AIWListFTLModel").getData();
				if (this.mode === "display") {
					aCounterModel.getData().addFTLCounter = false;
					if (selPaths.length !== 1) {
						this.getView().setModel(aCounterModel, "aCounterModel");
						this.getView().getModel("aCounterModel").refresh();
						var emptyData = [];
						var FTLHeaderModel = this.getView().getModel("FTLHeaderModel");
						FTLHeaderModel.setData(emptyData);
						this.getView().setModel(FTLHeaderModel, "FTLHeaderModel");
					} else {
						this.getView().setModel(aCounterModel, "aCounterModel");
						this.getView().getModel("aCounterModel").refresh();
						var selectedPath = oEvent.getSource().getSelectedContextPaths()[0];
						this.ftlPath = parseInt(selectedPath.substring(1));
						var FTLHeaderModel = this.getView().getModel("FTLHeaderModel");
						var ftlHeader = [];
						for (var i = 0; i < AIWListFTLData.length; i++) {
							if (this.ftlPath === i) {
								if (AIWListFTLData[i].header.length > 0) {
									for (var j = 0; j < AIWListFTLData[i].header.length; j++) {
										AIWListFTLData[i].header[j].enable = false;
									}
									ftlHeader.push(AIWListFTLData[i].header);
								}
							}
						}
						FTLHeaderModel.setData(ftlHeader);
						this.getView().setModel(FTLHeaderModel, "FTLHeaderModel");
						this.updateDeleteEnable("FTL", oEvent);
					}
				} else {
					if (selPaths.length !== 1) {
						aCounterModel.getData().addFTLCounter = false;
						this.getView().setModel(aCounterModel, "aCounterModel");
						this.getView().getModel("aCounterModel").refresh();
						var emptyData = [];
						var FTLHeaderModel = this.getView().getModel("FTLHeaderModel");
						FTLHeaderModel.setData(emptyData);
						this.getView().setModel(FTLHeaderModel, "FTLHeaderModel");
						this.updateDeleteEnable("FTL", oEvent);
					} else {
						var selectedPath = oEvent.getSource().getSelectedContextPaths()[0];
						this.ftlPath = parseInt(selectedPath.substring(1));
						if (AIWListFTLData[this.ftlPath].floc !== "" && AIWListFTLData[this.ftlPath].flocVS !== "Error") {
							aCounterModel.getData().addFTLCounter = true;
							this.getView().setModel(aCounterModel, "aCounterModel");
							this.getView().getModel("aCounterModel").refresh();
							var FTLHeaderModel = this.getView().getModel("FTLHeaderModel");
							var ftlHeader = [];
							for (var i = 0; i < AIWListFTLData.length; i++) {
								if (this.ftlPath === i) {
									if (AIWListFTLData[i].header.length > 0) {
										ftlHeader.push(AIWListFTLData[i].header);
									}
								}
							}
							FTLHeaderModel.setData(ftlHeader);
							this.getView().setModel(FTLHeaderModel, "FTLHeaderModel");
						} else {
							AIWListFTLData[this.ftlPath].flocVS = "Error";
							this.getView().getModel("AIWListFTLModel").refresh();
						}
						this.updateDeleteEnable("FTL", oEvent);
					}
				}
			}
		},
		/*
		 * Function to handle 'change' event of OL input in Copy fragment
		 * @param {sap.ui.base.Event} oEvent
		 */
		onCopyOLChange: function (oEvent) {
			var g = this;
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var sPath;
			var sourceId = oEvent.getSource().getId();

			if (newValue !== "") {
				if (newValue === undefined)
					return;
				var c = newValue.toUpperCase();
				var oFilter = [new sap.ui.model.Filter("Kante", "EQ", c)];
				//this.BusyDialog.open(); 
				M.read("/ObjLinkSet", {
					filters: oFilter,
					success: function (r) {
						if (r.results.length > 0) {
							sap.ui.getCore().byId(sourceId).setValue(r.results[0].Kante);
							sap.ui.getCore().byId(sourceId).setValueState("None");
							sap.ui.getCore().byId(sourceId).setValueStateText("");
						} else {
							sap.ui.getCore().byId(sourceId).setValueState("Error");
						}
					},
					error: function (err) {
						sap.ui.getCore().byId(sourceId).setValueState("Error");
					}
				});
			}
		},
		/*
		 * Function to handle 'change' event of TL input in Copy fragment
		 * @param {sap.ui.base.Event} oEvent
		 */
		onCopyTLChange: function (oEvent) {
			var g = this;
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var sPath;
			var oFilter;
			var sourceId = oEvent.getSource().getId();

			if (newValue !== "") {
				if (newValue === undefined)
					return;
				var c = newValue.toUpperCase();
				if (this.action === "copyGTL") {
					oFilter = [new sap.ui.model.Filter("Plnty", "EQ", "A"), new sap.ui.model.Filter("Plnnr", "EQ", c)];
				} else if (this.action === "copyETL") {
					oFilter = [new sap.ui.model.Filter("Plnty", "EQ", "E"), new sap.ui.model.Filter("Plnnr", "EQ", c)];
				} else if (this.action === "copyFTL") {
					oFilter = [new sap.ui.model.Filter("Plnty", "EQ", "T"), new sap.ui.model.Filter("Plnnr", "EQ", c)];
				}
				M.read("/TLGroupVhSet", {
					filters: oFilter,
					success: function (r) {
						if (r.results.length > 0) {
							sap.ui.getCore().byId(sourceId).setValue(r.results[0].Plnnr);
							sap.ui.getCore().byId(sourceId).setValueState("None");
							sap.ui.getCore().byId(sourceId).setValueStateText("");
						} else {
							sap.ui.getCore().byId(sourceId).setValueState("Error");
						}
					},
					error: function (err) {
						sap.ui.getCore().byId(sourceId).setValueState("Error");
					}
				});
			}
		},
		/*
		 * Function to read Link category
		 */
		readLinkCat: function () {
			var g = this;
			var M = this.getView().getModel("valueHelp");
			var linkCatModel = new JSONModel([]);
			M.read("/LinkCatValueHelpSet", {
				success: function (r) {
					/*var arr = [{
						NETYP: "",
						TYPTX: ""
					}];*/
					var arr = [];
					for (var i = 0; i < r.results.length; i++) {
						arr.push(r.results[i]);
					}
					linkCatModel.setData(arr);
					g.getView().setModel(linkCatModel, "linkCatModel");
					sap.ui.getCore().setModel(linkCatModel, "linkCatModel");
				},
				error: function (err) {
					var error = [];
					if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror.errordetails
						.length === 0) {
						error[0] = JSON.parse(err.responseText).error.message.value;
					} else {
						for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
							error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
						}
					}
					var value = error.join("\n");
					g.invokeMessage(value);
				}
			});
			/*this.getView().byId("linkCategory").setModel("valueHelp");
			this.getView().byId("linkCategory").bindItems("/LinkCatValueHelpSet", new sap.ui.core.ListItem({
				key: "{NETYP}",
				text: "{TYPTX}"
					//additionalText: "{Kantyp_txt}"
			}));*/
		},
		/*
		 * Function to read Object category
		 */
		readObjCat: function () {
			var g = this;
			var M = this.getView().getModel("valueHelp");
			var objCatModel = new JSONModel([]);
			M.read("/LinkobjcatSet", {
				success: function (r) {
					/*var arr = [{
						Kantyp: "",
						Kantyp_txt: ""
					}];*/
					var arr = [];
					for (var i = 0; i < r.results.length; i++) {
						arr.push(r.results[i]);
					}
					objCatModel.setData(arr);
					g.getView().setModel(objCatModel, "objCatModel");
					sap.ui.getCore().setModel(objCatModel, "objCatModel");
				},
				error: function (err) {
					var error = [];
					if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror.errordetails
						.length === 0) {
						error[0] = JSON.parse(err.responseText).error.message.value;
					} else {
						for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
							error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
						}
					}
					var value = error.join("\n");
					g.invokeMessage(value);
				}
			});
			/*this.getView().byId("objectCategory").setModel("valueHelp");
			this.getView().byId("objectCategory").bindItems("/", new sap.ui.core.ListItem({
				key: "{Kantyp}",
				text: "{Kantyp_txt}"
					//additionalText: "{Kantyp_txt}"
			}));*/
		},
		/*
		 * Function to handle routing of WC, TL & OL
		 * @param {sap.ui.base.Event} oItem
		 */
		onItemPress: function (oItem) {
			var sPath;
			if (this.mode === "display") {
				var selectedObj = this.getView().byId("_iconTabBar").getSelectedKey();
				if (selectedObj === "WCTab") {
					var wc = " ";
					var plant = " ";
					sPath = oItem.getSource().getBindingContext("AIWListWCModel").sPath;
					var AIWListWCData = this.getView().getModel("AIWListWCModel").getData();
					if (AIWListWCData.length > 0) {
						if (AIWListWCData[sPath.substr(1)].wc !== "") {
							wc = AIWListWCData[sPath.substr(1)].wc;
						}
						if (AIWListWCData[sPath.substr(1)].plant !== "") {
							plant = AIWListWCData[sPath.substr(1)].plant;
						}
					}
					this.getRouter().navTo("wcDetail", {
						itemPath: encodeURIComponent(sPath),
						action: "approveWC",
						wc: wc,
						status: " ",
						plant: plant,
						mode: this.mode
					});
				} else if (selectedObj === "TLTab") {
					var TLFragmentId = this.getView().createId("tlMain");
					var TLKey = sap.ui.core.Fragment.byId(TLFragmentId, "_iconTabBarTL").getSelectedKey();
					if (TLKey === "GTLTab") {
						var hPath = oItem.getSource().getBindingContext("GTLHeaderModel").sPath;
						sPath = "/" + this.gtlPath + hPath.substr(2, 4);
						// sPath = oItem.getSource().getBindingContext("GTLHeaderModel").sPath;
						this.getRouter().navTo("tlDetail", {
							itemPath: encodeURIComponent(sPath),
							action: "approveGTL",
							group: " ",
							tlType: "A",
							status: " ",
							mode: this.mode
						});
					} else if (TLKey === "EqTLTab") {
						var hPath = oItem.getSource().getBindingContext("ETLHeaderModel").sPath;
						sPath = "/" + this.etlPath + hPath.substr(2, 4);
						// sPath = oItem.getSource().getBindingContext("ETLHeaderModel").sPath;
						this.getRouter().navTo("tlDetail", {
							itemPath: encodeURIComponent(sPath),
							action: "approveETL",
							group: " ",
							tlType: "E",
							status: " ",
							mode: this.mode
						});
					} else if (TLKey === "FLOCTLTab") {
						// sPath = oItem.getSource().getBindingContext("FTLHeaderModel").sPath;
						var hPath = oItem.getSource().getBindingContext("FTLHeaderModel").sPath;
						sPath = "/" + this.ftlPath + hPath.substr(2, 4);
						this.getRouter().navTo("tlDetail", {
							itemPath: encodeURIComponent(sPath),
							action: "approveFTL",
							group: " ",
							tlType: "T",
							status: " ",
							mode: this.mode
						});
					}
				} else if (selectedObj === "OLTab") {
					sPath = oItem.getSource().getBindingContext("AIWListOLModel").sPath;
					this.getRouter().navTo("olDetail", {
						itemPath: encodeURIComponent(sPath),
						action: " ",
						link: " ",
						status: " ",
						mode: this.mode
					});
				}
			} else {
				if (this.action.indexOf("WC") !== -1) {
					var wc = " ";
					var plant = " ";
					sPath = oItem.getSource().getBindingContext("AIWListWCModel").sPath;
					var AIWListWCData = this.getView().getModel("AIWListWCModel").getData();
					if (AIWListWCData.length > 0) {
						if (AIWListWCData[sPath.substr(1)].wc !== "") {
							wc = AIWListWCData[sPath.substr(1)].wc;
						}
						if (AIWListWCData[sPath.substr(1)].plant !== "") {
							plant = AIWListWCData[sPath.substr(1)].plant;
						}
					}
					var action = "createWC";

					this.getRouter().navTo("wcDetail", {
						//FragmentName: "CreateWorkCenter",
						itemPath: encodeURIComponent(sPath),
						action: action,
						wc: wc,
						status: " ",
						plant: plant,
						mode: this.mode
					});
				} else if (this.action.indexOf("GTL") !== -1) {
					var AIWListGTLModel = sap.ui.getCore().getModel("AIWListGTLModel");
					var AIWListGTLData = AIWListGTLModel.getData();
					// AIWListGTLData[this.gtlPath].header = this.getView().getModel("GTLHeaderModel").getData()[0][this.gtlPath];
					sap.ui.getCore().setModel(AIWListGTLModel, "AIWListGTLModel");
					var hPath = oItem.getSource().getBindingContext("GTLHeaderModel").sPath;
					sPath = "/" + this.gtlPath + hPath.substr(2, 4);
					var action = "createGTL";
					var grp = AIWListGTLData[this.gtlPath].grp;

					this.getRouter().navTo("tlDetail", {
						//FragmentName: "CreateTaskList",
						itemPath: encodeURIComponent(sPath),
						action: action,
						group: " ",
						tlType: "A",
						status: " ",
						mode: this.mode
					});
				} else if (this.action.indexOf("ETL") !== -1) {
					var AIWListETLModel = sap.ui.getCore().getModel("AIWListETLModel");
					var AIWListETLData = AIWListETLModel.getData();
					// AIWListETLData[this.etlPath].header = this.getView().getModel("ETLHeaderModel").getData()[0][this.etlPath];
					sap.ui.getCore().setModel(AIWListETLModel, "AIWListETLModel");
					var hPath = oItem.getSource().getBindingContext("ETLHeaderModel").sPath;
					sPath = "/" + this.etlPath + hPath.substr(2, 4);
					var action = "createETL";
					var grp = AIWListETLData[this.etlPath].grp;

					this.getRouter().navTo("tlDetail", {
						// FragmentName: "CreateTaskList",
						itemPath: encodeURIComponent(sPath),
						action: action,
						group: grp,
						tlType: "E",
						status: " ",
						mode: this.mode
					});
				} else if (this.action.indexOf("FTL") !== -1) {
					var AIWListFTLModel = sap.ui.getCore().getModel("AIWListFTLModel");
					var AIWListFTLData = AIWListFTLModel.getData();
					// AIWListFTLData[this.ftlPath].header = this.getView().getModel("FTLHeaderModel").getData()[0][this.ftlPath];
					sap.ui.getCore().setModel(AIWListFTLModel, "AIWListFTLModel");
					var hPath = oItem.getSource().getBindingContext("FTLHeaderModel").sPath;
					sPath = "/" + this.ftlPath + hPath.substr(2, 4);
					var grp = AIWListFTLData[this.ftlPath].grp;
					var action = "createFTL";

					this.getRouter().navTo("tlDetail", {
						// FragmentName: "CreateTaskList",
						itemPath: encodeURIComponent(sPath),
						action: action,
						group: grp,
						tlType: "T",
						status: " ",
						mode: this.mode
					});
				} else if (this.action.indexOf("OL") !== -1) {
					sPath = oItem.getSource().getBindingContext("AIWListOLModel").sPath;
					var action = "createOL";

					this.getRouter().navTo("olDetail", {
						itemPath: encodeURIComponent(sPath),
						action: action,
						link: " ",
						status: " ",
						mode: this.mode
					});
				}
			}
		},
		/**
		 * Function to read Object Link status
		 * @param {string} d - Link category
		 * @param {array} olData
		 */
		readStatusProfOL: function (d, olData) {
			var g = this;
			// var sPath = oEvent.getSource().getBindingContext("AIWListOLModel").getPath();
			// g.sindex = parseInt(sPath.split("/")[1]);
			// var olData = oEvent.getSource().getBindingContext("AIWListOLModel").getModel().getData();
			var AIWListOLModel = sap.ui.getCore().getModel("AIWListOLModel");
			var m = this.getView().getModel();
			// var q = "/Derive_OLStatusSet(Netyp='" + d + "',STSMA='')";
			var q = "/DeriveOLstatusSet(Netyp='" + d + "',Lvorm=false)";
			m.read(q, {
				success: function (r) {
					// if (r.results.length > 0) {
					//if (r.Statproftxt !== "" && r.USER_STATWITHNUM !== "" && r.USER_STATWOUTNUM !== "'") {
					if (r.Statproftxt !== "" && (r.Ustw_oln !== "" || r.Uswo_oln !== "")) { //SAP Note 2598463 - Manual Correction
						olData[g.sindex].usrSts = r.Usta_oln;
						olData[g.sindex].stProfLblV = true;
						olData[g.sindex].stsProf = r.Stsm_oln;
						olData[g.sindex].stsProfV = true;
						olData[g.sindex].stsProfDesc = r.Statproftxt;
						olData[g.sindex].stsProfDescV = true;
						olData[g.sindex].stsObj = r.Ustw_oln;
						olData[g.sindex].stsObjLblV = true;
						olData[g.sindex].stsObjV = true;
						olData[g.sindex].stsWoLblV = true;
						olData[g.sindex].stsWoNoV = true;
						olData[g.sindex].stsWoNo = r.Uswo_oln;
						olData[g.sindex].sysSts = r.Stattext;
					} else {
						olData[g.sindex].stProfLblV = false;
						olData[g.sindex].stsProfV = false;
						olData[g.sindex].stsProfDescV = false;
						olData[g.sindex].stsObjLblV = false;
						olData[g.sindex].stsObjV = false;
						olData[g.sindex].stsWoLblV = false;
						olData[g.sindex].stsWoNoV = false;
						olData[g.sindex].usrSts = "";
						olData[g.sindex].stsProf = "";
						olData[g.sindex].stsProfDesc = "";
						olData[g.sindex].stsObj = "";
						olData[g.sindex].stsWoNo = "";
					}
					AIWListOLModel.setData(olData);
					// }
				},
				error: function (err) {
					var error = [];
					if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
						.errordetails
						.length === 0) {
						error[0] = JSON.parse(err.responseText).error.message.value;
					} else {
						for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
							error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
						}
					}
					var value = error.join("\n");
					g.invokeMessage(value);
				}
			});
		},
		/**
		 * Function to invoke Message box
		 * @param {string} msg - Message
		 * @public
		 */
		invokeMessage: function (msg) {
			this.createMessagePopover([{
				title: msg,
				type: "Error"
			}], false);
			// sap.m.MessageBox.show(msg, {
			// 	title: "Error",
			// 	icon: sap.m.MessageBox.Icon.ERROR,
			// 	onClose: function () {}
			// });
		},
		/*
		 * Function to handle validations of WC, TL & OL
		 * @param {array} AIWListWCData
		 * @param {array} AIWListGTLData
		 * @param {array} AIWListETLData
		 * @param {array} AIWListFTLData
		 * @param {array} AIWListOLData
		 * @public
		 */
		handleWCTLOLValidation: function (AIWListWCData, AIWListGTLData, AIWListETLData, AIWListFTLData, AIWListOLData) {
			var AIWListWCData = sap.ui.getCore().getModel("AIWListWCModel").getData();
			var AIWListGTLData = sap.ui.getCore().getModel("AIWListGTLModel").getData();
			var AIWListETLData = sap.ui.getCore().getModel("AIWListETLModel").getData();
			var AIWListFTLData = sap.ui.getCore().getModel("AIWListFTLModel").getData();
			var AIWListOLData = sap.ui.getCore().getModel("AIWListOLModel").getData();

			var msg = "";
			// this.MessageList = [];
			var g = this;
			// g.errorFlag = true;

			if (AIWListWCData.length > 0 || AIWListGTLData.length > 0 || AIWListETLData.length > 0 || AIWListFTLData.length > 0 ||
				AIWListOLData
				.length > 0) {
				for (var a = 0; a < AIWListWCData.length; a++) {
					if (AIWListWCData[a].wc === "" || AIWListWCData[a].wcValueState === "Error") {
						g.errorFlag = false;
						AIWListWCData[a].wcValueState = "Error";
						msg = this.getResourceBundle().getText("emptyWC");
					}
					if (AIWListWCData[a].plant === "" || AIWListWCData[a].plantValueState === "Error") {
						g.errorFlag = false;
						AIWListWCData[a].plantValueState = "Error";
						msg = this.getResourceBundle().getText("emptyWC");
					}
				}
				if (msg !== "") {
					this.MessageList.push({
						type: "Error",
						title: msg
					});
					msg = "";
				}
				for (var a = 0; a < AIWListGTLData.length; a++) {
					for (var b = 0; b < AIWListGTLData[a].header.length; b++) {
						if (AIWListGTLData[a].header[b].Iwerk === "" || AIWListGTLData[a].header[b].planningPlantValueState === "Error") {
							g.errorFlag = false;
							AIWListGTLData[a].header[b].planningPlantValueState = "Error";
							msg = this.getResourceBundle().getText("emptyGTL");
						}
						if (AIWListGTLData[a].header[b].Statu === "" || AIWListGTLData[a].header[b].statusVS === "Error") {
							g.errorFlag = false;
							AIWListGTLData[a].header[b].statusVS = "Error";
							msg = this.getResourceBundle().getText("emptyGTL");
						}
						if (AIWListGTLData[a].header[b].Ktext === "") {
							g.errorFlag = false;
							msg = this.getResourceBundle().getText("emptyGTL");
						}
					}
				}
				if (msg !== "") {
					this.MessageList.push({
						type: "Error",
						title: msg
					});
					msg = "";
				}
				for (var a = 0; a < AIWListETLData.length; a++) {
					if (AIWListETLData[a].equipment === "" || AIWListETLData[a].equipmentVS === "Error") {
						g.errorFlag = false;
						AIWListETLData[a].equipmentVS = "Error";
						msg = this.getResourceBundle().getText("emptyETL");
					}
					for (var b = 0; b < AIWListETLData[a].header.length; b++) {
						if (AIWListETLData[a].header[b].Iwerk === "" || AIWListETLData[a].header[b].planningPlantValueState === "Error") {
							g.errorFlag = false;
							AIWListETLData[a].header[b].planningPlantValueState = "Error";
							msg = this.getResourceBundle().getText("emptyETL");
						}
						if (AIWListETLData[a].header[b].Statu === "" || AIWListETLData[a].header[b].statusVS === "Error") {
							g.errorFlag = false;
							AIWListETLData[a].header[b].statusVS = "Error";
							msg = this.getResourceBundle().getText("emptyETL");
						}
						if (AIWListETLData[a].header[b].Ktext === "") {
							g.errorFlag = false;
							msg = this.getResourceBundle().getText("emptyETL");
						}
					}
				}
				if (msg !== "") {
					this.MessageList.push({
						type: "Error",
						title: msg
					});
					msg = "";
				}
				for (var a = 0; a < AIWListFTLData.length; a++) {
					if (AIWListFTLData[a].floc === "" || AIWListFTLData[a].flocVS === "Error") {
						g.errorFlag = false;
						AIWListFTLData[a].flocVS = "Error";
						msg = this.getResourceBundle().getText("emptyFTL");
					}
					for (var b = 0; b < AIWListFTLData[a].header.length; b++) {
						if (AIWListFTLData[a].header[b].Statu === "" || AIWListFTLData[a].header[b].statusVS === "Error") {
							g.errorFlag = false;
							AIWListFTLData[a].header[b].statusVS = "Error";
							msg = this.getResourceBundle().getText("emptyFTL");
						}
						if (AIWListFTLData[a].header[b].Iwerk === "" || AIWListFTLData[a].header[b].planningPlantValueState === "Error") {
							g.errorFlag = false;
							AIWListFTLData[a].header[b].planningPlantValueState = "Error";
							msg = this.getResourceBundle().getText("emptyFTL");
						}
						if (AIWListFTLData[a].header[b].Ktext === "") {
							g.errorFlag = false;
							msg = this.getResourceBundle().getText("emptyFTL");
						}
					}
				}
				if (msg !== "") {
					this.MessageList.push({
						type: "Error",
						title: msg
					});
					msg = "";
				}
				for (var a = 0; a < AIWListOLData.length; a++) {
					if (AIWListOLData[a].linkCat === "") {
						g.errorFlag = false;
						msg = this.getResourceBundle().getText("emptyOL");
					}
					if (AIWListOLData[a].objCat === "") {
						g.errorFlag = false;
						msg = this.getResourceBundle().getText("emptyOL");
						//AIWListONData[a].plantValueState = "Error";          
					}
					if (AIWListOLData[a].linkDesc === "") {
						g.errorFlag = false;
						msg = this.getResourceBundle().getText("emptyOL");
						AIWListOLData[a].linkDescVS = "Error";
						sap.ui.getCore().getModel("AIWListOLModel").refresh();

					}
				}
				if (msg !== "") {
					this.MessageList.push({
						type: "Error",
						title: msg
					});
					msg = "";
				}
			}
			// else {
			// 	g.errorFlag = false;
			// 	msg = this.getResourceBundle().getText("emptySave");
			// 	this.MessageList.push({
			// 		type: "Error",
			// 		title: msg
			// 	});
			// }

			if (!g.errorFlag) {
				// this.createMessagePopover(MessageList);
				sap.ui.getCore().getModel("AIWListWCModel").refresh();
				sap.ui.getCore().getModel("AIWListGTLModel").refresh();
				sap.ui.getCore().getModel("AIWListETLModel").refresh();
				sap.ui.getCore().getModel("AIWListFTLModel").refresh();
				sap.ui.getCore().getModel("AIWListOLModel").refresh();
				if (this.getView().getModel("GTLHeaderModel") !== undefined) {
					this.getView().getModel("GTLHeaderModel").refresh();
				}
				if (this.getView().getModel("ETLHeaderModel") !== undefined) {
					this.getView().getModel("ETLHeaderModel").refresh();
				}
				if (this.getView().getModel("FTLHeaderModel") !== undefined) {
					this.getView().getModel("FTLHeaderModel").refresh();
				}
				// return;
			}
		},
		/*
		 * Function to check the models are empty
		 * @public
		 */
		dataIsEmpty: function () {
			var msg = "";
			this.errorFlag = true;
			// this.MessageList = [];
			var AIWFLOCModel = sap.ui.getCore().getModel(this.oModelAIWFLOC).getData();
			var AIWEQUIModel = sap.ui.getCore().getModel(this.oModelAIWEQUI).getData();
			var AIWMSPTModel = sap.ui.getCore().getModel(this.oModelAIWMSPT).getData();
			var AIWMPMIModel = sap.ui.getCore().getModel(this.oModelAIWMPMI).getData();
			var AIWListMatData = sap.ui.getCore().getModel("AIWListMatModel").getData();
			var AIWListEqData = sap.ui.getCore().getModel("AIWListEqModel").getData();
			var AIWListFLData = sap.ui.getCore().getModel("AIWListFLModel").getData();
			var AIWListWBSData = sap.ui.getCore().getModel("AIWListWBSModel").getData();
			var AIWListONData = sap.ui.getCore().getModel("AIWListONModel").getData();
			// ON/TL
			var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel").getData();
			var AIWListGTLModel = sap.ui.getCore().getModel("AIWListGTLModel").getData();
			var AIWListETLModel = sap.ui.getCore().getModel("AIWListETLModel").getData();
			var AIWListFTLModel = sap.ui.getCore().getModel("AIWListFTLModel").getData();
			var AIWListOLModel = sap.ui.getCore().getModel("AIWListOLModel").getData();
			if (AIWFLOCModel.length === 0 && AIWEQUIModel.length === 0 && AIWMSPTModel.length === 0 && AIWMPMIModel.length === 0 &&
				AIWListMatData.length === 0 && AIWListEqData.length === 0 && AIWListFLData.length === 0 && AIWListWBSData.length === 0 &&
				AIWListONData.length === 0 && AIWListWCModel.length === 0 && AIWListGTLModel.length === 0 && AIWListETLModel.length === 0 &&
				AIWListFTLModel.length === 0 && AIWListOLModel.length === 0) {
				msg = this.getResourceBundle().getText("objErrorTxt");
				this.errorFlag = false;

				this.MessageList.push({
					type: "Error",
					title: msg
				});

				// this.createMessagePopover(messageList);
				sap.ui.getCore().getModel("AIWListMatModel").refresh();
				sap.ui.getCore().getModel("AIWListEqModel").refresh();
				sap.ui.getCore().getModel("AIWListFLModel").refresh();
				sap.ui.getCore().getModel("AIWListWBSModel").refresh();
				sap.ui.getCore().getModel("AIWListONModel").refresh();
				sap.ui.getCore().getModel("AIWListWCModel").refresh();
				sap.ui.getCore().getModel("AIWListGTLModel").refresh();
				sap.ui.getCore().getModel("AIWListETLModel").refresh();
				sap.ui.getCore().getModel("AIWListFTLModel").refresh();
				sap.ui.getCore().getModel("AIWListOLModel").refresh();
				sap.ui.getCore().getModel(this.oModelAIWFLOC).refresh();
				sap.ui.getCore().getModel(this.oModelAIWEQUI).refresh();
				sap.ui.getCore().getModel(this.oModelAIWMSPT).refresh();
				sap.ui.getCore().getModel(this.oModelAIWMPMI).refresh();

				// return;
			}
			var desc = this.getView().byId("Description");
			var descMsg = this.getResourceBundle().getText("descError");
			if (desc.getValue() === "") {
				this.errorFlag = false;
				this.MessageList.push({
					type: "Error",
					title: descMsg
				});
			}
		},
		/*
		 * This function is invoked when 'Save' button is clicked
		 * @param {sap.ui.base.Event} oEvent
		 */
		onSave: function (oEvent) {
			var g = this;
			var AIWFLOCModel = sap.ui.getCore().getModel(g.oModelAIWFLOC).getData();
			var AIWEQUIModel = sap.ui.getCore().getModel(g.oModelAIWEQUI).getData();
			var AIWMSPTModel = sap.ui.getCore().getModel(g.oModelAIWMSPT).getData();
			var AIWMPMIModel = sap.ui.getCore().getModel(g.oModelAIWMPMI).getData();
			// this.MessageList = [];
			// this.dataIsEmpty();

			// g.handleValidation(oEvent, AIWFLOCModel, AIWEQUIModel, AIWMSPTModel, AIWMPMIModel);

			var AIWListMatData = sap.ui.getCore().getModel("AIWListMatModel").getData();
			var AIWListEqData = sap.ui.getCore().getModel("AIWListEqModel").getData();
			var AIWListFLData = sap.ui.getCore().getModel("AIWListFLModel").getData();
			var AIWListWBSData = sap.ui.getCore().getModel("AIWListWBSModel").getData();
			var AIWListONData = sap.ui.getCore().getModel("AIWListONModel").getData();

			// this.handleBOMONValidation(AIWListMatData, AIWListEqData, AIWListFLData, AIWListWBSData, AIWListONData);

			// ON/TL
			var AIWListWCData = sap.ui.getCore().getModel("AIWListWCModel").getData();
			var AIWListGTLData = sap.ui.getCore().getModel("AIWListGTLModel").getData();
			var AIWListETLData = sap.ui.getCore().getModel("AIWListETLModel").getData();
			var AIWListFTLData = sap.ui.getCore().getModel("AIWListFTLModel").getData();
			var AIWListOLData = sap.ui.getCore().getModel("AIWListOLModel").getData();

			// this.handleWCTLOLValidation(AIWListWCData, AIWListGTLData, AIWListETLData, AIWListFTLData, AIWListOLData);
			// if (this.MessageList.length > 0) {
			// 	this.createMessagePopover(this.MessageList);
			// }
			// if (!g.errorFlag) {
			// 	return;
			// }
			var sPayload = {
				"ChangeRequestType": this.getCrType(),
				"CrDescription": this.getView().byId("Description").getValue(),
				"Duedate": g._formatDate(this.getView().byId("idDueDate").getDateValue()),
				"Priority": this.getView().byId("idPriority").getSelectedKey(),
				"Notes": this.getView().getModel("notes").getData().items,
				"Reason": this.getView().byId("reasonForRequest").getSelectedKey(),
				"Guids": this.oAttach,
				"IsDraft": "X",
				"Messages": [],
				"FuncLoc": [],
				"FLAddr": [],
				"FLAddrI": [],
				"FLALTLBEL": [],
				"FLLAM": [],
				"FLClass": [],
				"FLVal": [],
				"Equipment": [],
				"EqAddr": [],
				"EqAddrI": [],
				"EqPRT": [],
				"EqLAM": [],
				"EqDFPS": [],
				"EqClass": [],
				"EqVal": [],
				"MSPoint": [],
				"MSLAM": [],
				"MSClass": [],
				"MSVal": [],
				"MPLAN": [],
				"MPItem": [],
				"MPLAM": [],
				"MPOBList": [],
				"MPCycle": [],
				"ClassMpl": [],
				"ValuaMpl": [],
				"MRBHeader": [],
				"MRBItem": [],
				"MRBSBIT": [],
				"EBHeader": [],
				"EBItem": [],
				"EBSBIT": [],
				"FBHeader": [],
				"FBItem": [],
				"FBSBIT": [],
				"WBHeader": [],
				"WBItem": [],
				"WBSBIT": [],
				"ONetwork": [],
				"ONLAM": [],
				"Workcenter": [],
				"WCCost": [],
				"ClassWC": [],
				"ValueWC": [],
				"GTList": [],
				"GTOprs": [],
				"GTComp": [],
				"GTMPack": [],
				"GTRel": [],
				"GTSpack": [],
				"GTPRT": [],
				"GTInsp": [],
				"GTClass": [],
				"GTVal": [],
				"ETList": [],
				"ETOprs": [],
				"ETComp": [],
				"ETMPack": [],
				"ETRel": [],
				"ETSpack": [],
				"ETPRT": [],
				"ETInsp": [],
				"ETClass": [],
				"ETVal": [],
				"FTList": [],
				"FTOprs": [],
				"FTComp": [],
				"FTMPack": [],
				"FTRel": [],
				"FTSpack": [],
				"FTPRT": [],
				"FTInsp": [],
				"FTClass": [],
				"FTVal": [],
				"Olink": [],
				"OLClass": [],
				"OLVal": [],
				"FLLAMCH": [],
				"EqLAMCH": []

			};
			if (this.oAttach.length === 0 || this.oAttach === undefined) {
				delete sPayload.Guids;
			}
			if (AIWFLOCModel.length > 0) {
				var aFLDOI = sap.ui.getCore().getModel("dataOriginMOP").getData().FL;
				for (var a = 0; a < AIWFLOCModel.length; a++) {
					var sFuncLoc = {
						"Tplnr": AIWFLOCModel[a].Functionallocation,
						"Txtmi": AIWFLOCModel[a].Flocdescription, // Floc Description
						"TplkzFlc": AIWFLOCModel[a].Strucindicator,
						"Tplxt": AIWFLOCModel[a].StrucIndicatorDesc,
						"EditMask": AIWFLOCModel[a].EditMask,
						"Hierarchy": AIWFLOCModel[a].Hierarchy,
						"Fltyp": AIWFLOCModel[a].Floccategory,
						"Flttx": AIWFLOCModel[a].FlocCategoryDesc,
						"Swerk": AIWFLOCModel[a].Maintplant,
						"Plantname": AIWFLOCModel[a].MaintplantDesc,
						"StorFloc": AIWFLOCModel[a].Location, // Location
						"Locationdesc": AIWFLOCModel[a].Locationdesc, // Location Description
						"Abckzfloc": AIWFLOCModel[a].Abckz,
						"Abctx": AIWFLOCModel[a].Abctx,
						"Bukrsfloc": AIWFLOCModel[a].Bukrs,
						"Butxt": AIWFLOCModel[a].Butxt,
						"City": AIWFLOCModel[a].City,
						"KostFloc": AIWFLOCModel[a].Kostl, // Cost Center
						"KokrFloc": AIWFLOCModel[a].Kokrs, // ccPart1
						"Contareaname": AIWFLOCModel[a].Mctxt, // Name
						"PlntFloc": AIWFLOCModel[a].Werks, // Planning Plant
						"Planningplantdes": AIWFLOCModel[a].Planningplantdes, // Planning Plant Description
						"Ingrp": AIWFLOCModel[a].Ingrp, // Planner Group
						"Plannergrpdesc": AIWFLOCModel[a].Innam, // Planner Group Description
						"Arbplfloc": AIWFLOCModel[a].Arbpl, // Work Center
						// "Workcenterdesc" : AIWFLOCModel[a].Ktext, // Plant Work Center
						"Wergwfloc": AIWFLOCModel[a].WcWerks, // Name
						"Gewrkfloc": AIWFLOCModel[a].MainArbpl, // Main Work Center
						// "MainWcDesc" : AIWFLOCModel[a].MainKtext, // Work center Plant
						"MainWcPlant": AIWFLOCModel[a].MainWerks, // Work Center Description
						"Tplma": AIWFLOCModel[a].SupFunctionallocation, // Sup FuncLoc
						"Supflocdesc": AIWFLOCModel[a].SupFlocdescription, // Sup FlocDescription
						"BeberFl": AIWFLOCModel[a].BeberFl, // Plant Section
						"Fing": AIWFLOCModel[a].Fing, // Person responsible
						"Tele": AIWFLOCModel[a].Tele, // Phone
						"Submtiflo": AIWFLOCModel[a].ConstrType, // Construction Type
						"Constdesc": AIWFLOCModel[a].ConstructionDesc, // Construction Description
						"Eqart": AIWFLOCModel[a].TechnicalObjectTyp, // TechnicalObjectTyp
						"Eartx": AIWFLOCModel[a].Description, // TechnicalObjectTyp Description
						"Stattext": AIWFLOCModel[a].Stattext, // System Status
						"StsmFloc": AIWFLOCModel[a].StsmEqui, // Status Profile
						"Statproftxt": AIWFLOCModel[a].StsmEquiDesc, // Status Profile Description
						"UstwFloc": AIWFLOCModel[a].UstwEqui, // Status with Status Number
						"UswoFloc": AIWFLOCModel[a].UswoEqui, // Status without Status Number
						"UstaFloc": AIWFLOCModel[a].UstaEqui, // User Status
						"Adrnr": AIWFLOCModel[a].Adrnr,
						"Adrnri": AIWFLOCModel[a].Adrnri,
						"Deact": AIWFLOCModel[a].Deact,
						"Type": AIWFLOCModel[a].viewParameter === "create" ? true : false,
						Modeldesc: AIWFLOCModel[a].Modeldesc,
						Modelref: AIWFLOCModel[a].Modelref,
						Modelrver: AIWFLOCModel[a].Modelrver,
						Modelext: AIWFLOCModel[a].Modelext,
						Modelname: AIWFLOCModel[a].Modelname,
						Modelver: AIWFLOCModel[a].Modelver,
					};

					if (aFLDOI && aFLDOI.length > 0) {
						var aDOIFields = aFLDOI[a].DOI;
						// sFuncLoc.Begrui = aDOIFields[0].instLoc ? "H" : "D";
						sFuncLoc.Swerki = aDOIFields[0].instLoc ? "H" : (aDOIFields[0].maintenance ? "D" : "");
						sFuncLoc.Storti = aDOIFields[1].instLoc ? "H" : (aDOIFields[1].maintenance ? "D" : "");
						// sFuncLoc.Msgrpi = aDOIFields[3].instLoc ? "H" : "D";
						sFuncLoc.Beberi = aDOIFields[2].instLoc ? "H" : (aDOIFields[2].maintenance ? "D" : "");
						sFuncLoc.Ppsidi = aDOIFields[3].instLoc ? "H" : (aDOIFields[3].maintenance ? "D" : "");
						sFuncLoc.Abckzi = aDOIFields[4].instLoc ? "H" : (aDOIFields[4].maintenance ? "D" : "");
						sFuncLoc.Bukrsi = aDOIFields[5].instLoc ? "H" : (aDOIFields[5].maintenance ? "D" : "");
						// sFuncLoc.Gsberi = aDOIFields[8].instLoc ? "H" : "D";
						// sFuncLoc.Anlnri = aDOIFields[9].instLoc ? "H" : "D";
						// sFuncLoc.Anlnri = aDOIFields[10].instLoc ? "H" : "D";
						sFuncLoc.Kostli = aDOIFields[6].instLoc ? "H" : (aDOIFields[6].maintenance ? "D" : "");
						sFuncLoc.Kokrsi = aDOIFields[7].instLoc ? "H" : (aDOIFields[7].maintenance ? "D" : "");
						// sFuncLoc.Proidi = aDOIFields[13].instLoc ? "H" : "D";
						// sFuncLoc.Daufni = aDOIFields[14].instLoc ? "H" : "D";
						// sFuncLoc.Aufnri = aDOIFields[15].instLoc ? "H" : "D";
						sFuncLoc.Iwerki = aDOIFields[8].instLoc ? "H" : (aDOIFields[8].maintenance ? "D" : "");
						sFuncLoc.Ingrpi = aDOIFields[9].instLoc ? "H" : (aDOIFields[9].maintenance ? "D" : "");
						sFuncLoc.Lgwidi = aDOIFields[10].instLoc ? "H" : (aDOIFields[10].maintenance ? "D" : "");
						// sFuncLoc.Swerki = aDOIFields[19].instLoc ? "H" : "D";
						// sFuncLoc.RbnrI = aDOIFields[20].instLoc ? "H" : "D";
						// sFuncLoc.Submti = aDOIFields[21].instLoc ? "H" : "D";
						// sFuncLoc.Einzli = aDOIFields[22].instLoc ? "H" : "D";
						// sFuncLoc.Iequii = aDOIFields[23].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[24].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[25].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[26].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[27].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[28].instLoc ? "H" : "D";
						sFuncLoc.Adrnri = aDOIFields[12].instLoc ? "H" : (aDOIFields[12].maintenance ? "D" : "");
					}
					sPayload.FuncLoc.push(sFuncLoc);

					var sFLAddr = {
						"Funcloc": AIWFLOCModel[a].Functionallocation,
						"Title": AIWFLOCModel[a].TitleCode,
						"Name1": AIWFLOCModel[a].Name1,
						"Name2": AIWFLOCModel[a].Name2,
						"Name3": AIWFLOCModel[a].Name3,
						"Name4": AIWFLOCModel[a].Name4,
						"Sort1": AIWFLOCModel[a].Sort1,
						"Sort2": AIWFLOCModel[a].Sort2,
						"NameCo": AIWFLOCModel[a].NameCo,
						"PostCod1": AIWFLOCModel[a].PostCod1,
						"City1": AIWFLOCModel[a].City1,
						"Building": AIWFLOCModel[a].Building,
						"Floor": AIWFLOCModel[a].Floor,
						"Roomnum": AIWFLOCModel[a].Roomnum,
						"Strsuppl1": AIWFLOCModel[a].Strsuppl1,
						"Strsuppl2": AIWFLOCModel[a].Strsuppl2,
						"Strsuppl3": AIWFLOCModel[a].Strsuppl3,
						"Location": AIWFLOCModel[a].AddrLocation,
						"RPostafl": AIWFLOCModel[a].RefPosta,
						"Landx": AIWFLOCModel[a].Landx,
						"TimeZone": AIWFLOCModel[a].TimeZone,
						"RPostFl": AIWFLOCModel[a].Region,
						"Regiotxt": AIWFLOCModel[a].RegionDesc
					};
					sPayload.FLAddr.push(sFLAddr);

					var aIntlAddr = AIWFLOCModel[a].intlAddr;
					if (aIntlAddr) {
						for (var z = 0; z < aIntlAddr.length; z++) {
							sPayload.FLAddrI.push(aIntlAddr[z]);
						}
					}

					if (g.AltLblDerv === "2" && AIWFLOCModel[a].altlbl) {
						for (var y = 0; y < AIWFLOCModel[a].altlbl.length; y++) {
							var oAltLbl = {
								"Funcloc": AIWFLOCModel[a].Functionallocation,
								"AltAlkey": AIWFLOCModel[a].altlbl[y].AltAlkey,
								"AltStrno": AIWFLOCModel[a].altlbl[y].AltStrno,
								"AltTplkz": AIWFLOCModel[a].altlbl[y].AltTplkz
							};
							sPayload.FLALTLBEL.push(oAltLbl);
						}
					}

					if (AIWFLOCModel[a].Floccategory === "L" && AIWFLOCModel[a].lam) {
						var sFLLAM = {
							"Funcloc": AIWFLOCModel[a].Functionallocation,
							"Lrpid": AIWFLOCModel[a].lam.Lrpid,
							"Strtptatr": AIWFLOCModel[a].lam.Strtptatr,
							"Endptatr": AIWFLOCModel[a].lam.Endptatr,
							"Length": AIWFLOCModel[a].lam.Length,
							"LinUnit": AIWFLOCModel[a].lam.LinUnit,
							"Startmrkr": AIWFLOCModel[a].lam.Startmrkr,
							"Endmrkr": AIWFLOCModel[a].lam.Endmrkr,
							"Mrkdisst": AIWFLOCModel[a].lam.Mrkdisst,
							"Mrkdisend": AIWFLOCModel[a].lam.Mrkdisend,
							"MrkrUnit": AIWFLOCModel[a].lam.MrkrUnit
						};
						sPayload.FLLAM.push(sFLLAM);
					}

					var sFLClassList = AIWFLOCModel[a].classItems;
					if (sFLClassList) {
						if (sFLClassList.length > 0) {
							for (var b = 0; b < sFLClassList.length; b++) {
								var sFLClass = {
									"Funcloc": AIWFLOCModel[a].Functionallocation,
									"Classtype": sFLClassList[b].Classtype,
									"Class": sFLClassList[b].Class,
									"Clstatus1": sFLClassList[b].Clstatus1
								};
								sPayload.FLClass.push(sFLClass);
							}
						}
					}

					var sFLCharList = AIWFLOCModel[a].characteristics;
					if (sFLCharList) {
						if (sFLCharList.length > 0) {
							for (var c = 0; c < sFLCharList.length; c++) {
								var sFLVal = {
									"Funcloc": AIWFLOCModel[a].Functionallocation,
									"Atnam": sFLCharList[c].Atnam,
									"Textbez": sFLCharList[c].Textbez,
									"Atwrt": sFLCharList[c].Atwrt,
									"Class": sFLCharList[c].Class
								};
								sPayload.FLVal.push(sFLVal);
							}
						}
					}

					var aFLLinChar = AIWFLOCModel[a].linearChar;
					if (aFLLinChar) {
						if (aFLLinChar.length > 0) {
							var alinearChar = $.map(aFLLinChar, function (obj) {
								return $.extend(true, {}, obj);
							});
							for (var c = 0; c < alinearChar.length; c++) {
								delete alinearChar[c].linCharEnable;
								alinearChar[c].Funcloc = AIWFLOCModel[a].Functionallocation;
								sPayload.FLLAMCH.push(alinearChar[c]);
							}
						}
					}

				}
			}

			if (AIWEQUIModel.length > 0) {

				for (var d = 0; d < AIWEQUIModel.length; d++) {
					var aEQDOI = sap.ui.getCore().getModel("dataOriginMOP").getData().EQ;
					var sEquipment = {
						"Herst": AIWEQUIModel[d].Herst, // Manufacturer
						"Equnr": AIWEQUIModel[d].Equnr,
						"Txtmi": AIWEQUIModel[d].Eqktx,
						//"Eqktx" : AIWEQUIModel[d].Eqktx,
						"Swerk": AIWEQUIModel[d].Maintplant,
						"Name1": AIWEQUIModel[d].MaintplantDesc,
						"TplnEilo": AIWEQUIModel[d].Tplnr,
						"Flocdescription": AIWEQUIModel[d].Pltxt,
						"Eqtyp": AIWEQUIModel[d].EquipmentCatogory,
						"Etytx": AIWEQUIModel[d].EquipCatgDescription,
						"Eqart": AIWEQUIModel[d].TechnicalObjectTyp, // TechnicalObjectTyp
						"Eartx": AIWEQUIModel[d].Description, // TechnicalObjectTyp Description
						"Typbz": AIWEQUIModel[d].Typbz, // Model Number
						"SubmEeqz": AIWEQUIModel[d].ConstrType, // Construction Type
						"Constdesc": AIWEQUIModel[d].ConstructionDesc, // Construction Description
						"BukrEilo": AIWEQUIModel[d].Bukrs,
						"Butxt": AIWEQUIModel[d].Butxt,
						"HequEeqz": AIWEQUIModel[d].SuperordinateEquip, // Superord. Equipment
						"SuperordEqDes": AIWEQUIModel[d].SuperordinateEquipDesc, // Superord. Equipment Description
						"TidnEeqz": AIWEQUIModel[d].TechIdNum, // techIndNo
						"KostEilo": AIWEQUIModel[d].Kostl, // Cost Center
						"KokrEilo": AIWEQUIModel[d].Kokrs, // ccPart1
						"Contareaname": AIWEQUIModel[d].Mctxt, // Name
						"StorEilo": AIWEQUIModel[d].Location,
						"Locationdesc": AIWEQUIModel[d].Locationdesc,
						"AbckEilo": AIWEQUIModel[d].Abckz,
						"Abctx": AIWEQUIModel[d].Abctx,
						"PplaEeqz": AIWEQUIModel[d].Werks, // Planning Plant
						"Planningplantdes": AIWEQUIModel[d].Planningplantdes, // Planning Plant Description
						"IngrEeqz": AIWEQUIModel[d].Ingrp, // Planner Group
						"Plannergrpdesc": AIWEQUIModel[d].Innam, // Planner Group Description
						"Serge": AIWEQUIModel[d].Serge, // manfSerNo
						"MapaEeqz": AIWEQUIModel[d].MapaEeqz, // partNum
						"Stattext": AIWEQUIModel[d].Stattext, // System Status
						"StsmEqui": AIWEQUIModel[d].StsmEqui, // Status Profile
						"Statproftxt": AIWEQUIModel[d].StsmEquiDesc, // Status Profile Description
						"UstwEqui": AIWEQUIModel[d].UstwEqui, // Status with Status Number
						"UswoEqui": AIWEQUIModel[d].UswoEqui, // Status without Status Number
						"UstaEqui": AIWEQUIModel[d].UstaEqui, // User Status
						"Deact": AIWEQUIModel[d].Deact,
						"Answt": AIWEQUIModel[d].Answt,
						"Ansdt": g._formatDate(AIWEQUIModel[d].Ansdt),
						"Waers": AIWEQUIModel[d].Waers, // Currency

						"ArbpEilo": AIWEQUIModel[d].Arbpl, // Work Center
						// "Workcenterdesc" : AIWEQUIModel[d].Ktext, // Plant Work Center
						"WorkCenterPlant": AIWEQUIModel[d].WcWerks, // Name
						"ArbpEeqz": AIWEQUIModel[d].MainArbpl, // Main Work Center
						// "MainWcDesc" : AIWEQUIModel[d].MainKtext, // Work Center Description
						"MainWcPlant": AIWEQUIModel[d].MainWerks, // Work center Plant

						"BebeEilo": AIWEQUIModel[d].BeberFl, // Plant Section
						"Fing": AIWEQUIModel[d].Fing, // Plant Section
						"Tele": AIWEQUIModel[d].Tele, // Plant Section
						"HeqnEeqz": AIWEQUIModel[d].EquipPosition, // Position
						"Adrnr": AIWEQUIModel[d].Adrnr,
						"Adrnri": AIWEQUIModel[d].Adrnri,

						"Funcid": AIWEQUIModel[d].Funcid, // Config Control data
						"Frcfit": AIWEQUIModel[d].Frcfit,
						"Frcrmv": AIWEQUIModel[d].Frcrmv,
						"Modelid": "",
						"Type": AIWEQUIModel[d].viewParameter === "create" ? true : false,
					};

					if (aEQDOI && aEQDOI.length > 0) {
						var aDOIFields = aEQDOI[d].DOI;
						// sEquipment.Begrui = aDOIFields[0].instLoc ? "R" : "D";
						sEquipment.Swerki = aDOIFields[0].instLoc ? "R" : (aDOIFields[0].maintenance ? "D" : "");
						sEquipment.Storti = aDOIFields[1].instLoc ? "R" : (aDOIFields[1].maintenance ? "D" : "");
						// sEquipment.Msgrpi = aDOIFields[3].instLoc ? "R" : "D";
						sEquipment.Beberi = aDOIFields[2].instLoc ? "R" : (aDOIFields[2].maintenance ? "D" : "");
						sEquipment.Ppsidi = aDOIFields[3].instLoc ? "R" : (aDOIFields[3].maintenance ? "D" : "");
						sEquipment.Abckzi = aDOIFields[4].instLoc ? "R" : (aDOIFields[4].maintenance ? "D" : "");
						// sEquipment.Eqfnri = aDOIFields[7].instLoc ? "R" : "D";
						// sEquipment.Gsberi = aDOIFields[8].instLoc ? "R" : "D";
						sEquipment.Kostli = aDOIFields[5].instLoc ? "R" : (aDOIFields[5].maintenance ? "D" : "");
						// sEquipment.Proidi = aDOIFields[10].instLoc ? "R" : "D";
						// sEquipment.Daufni = aDOIFields[11].instLoc ? "R" : "D";
						// sEquipment.Aufnri = aDOIFields[12].instLoc ? "R" : "D";
						// sEquipment.Ppsidi = aDOIFields[13].instLoc ? "R" : "D";
						sEquipment.Iwerki = aDOIFields[6].instLoc ? "R" : (aDOIFields[6].maintenance ? "D" : "");
						sEquipment.Ingrpi = aDOIFields[7].instLoc ? "R" : (aDOIFields[7].maintenance ? "D" : "");
						sEquipment.Gewrki = aDOIFields[8].instLoc ? "R" : (aDOIFields[8].maintenance ? "D" : "");
						// sEquipment.Gewrki = aDOIFields[16].instLoc ? "R" : "D";
						// sEquipment.RbnrI = aDOIFields[17].instLoc ? "R" : "D";
						// sEquipment.Vkorgi = aDOIFields[18].instLoc ? "R" : "D";
						// sEquipment.Vkorgi = aDOIFields[19].instLoc ? "R" : "D";
						// sEquipment.Vkorgi = aDOIFields[20].instLoc ? "R" : "D";
						// sEquipment.Vkorgi = aDOIFields[21].instLoc ? "R" : "D";
						// sEquipment.Vkorgi = aDOIFields[22].instLoc ? "R" : "D";
						sEquipment.Adrnri = aDOIFields[10].instLoc ? "R" : (aDOIFields[10].maintenance ? "D" : "");
					}
					sPayload.Equipment.push(sEquipment);

					var sEqPRT = {
						"Equi": AIWEQUIModel[d].Equnr,
						"PlanvPrt": AIWEQUIModel[d].PlanvPrt,
						"SteufPrt": AIWEQUIModel[d].SteufPrt,
						"KtschPrt": AIWEQUIModel[d].KtschPrt,
						"Ewformprt": AIWEQUIModel[d].Ewformprt,
						"SteufRef": AIWEQUIModel[d].SteufRef,
						"KtschRef": AIWEQUIModel[d].KtschRef,
						"EwformRef": AIWEQUIModel[d].EwformRef
					};
					sPayload.EqPRT.push(sEqPRT);

					if (AIWEQUIModel[d].EquipmentCatogory === "L" && AIWEQUIModel[d].lam) {
						var sEqLAM = {
							"Equi": AIWEQUIModel[d].Equnr,
							"Lrpid": AIWEQUIModel[d].lam.Lrpid,
							"Strtptatr": AIWEQUIModel[d].lam.Strtptatr,
							"Endptatr": AIWEQUIModel[d].lam.Endptatr,
							"Length": AIWEQUIModel[d].lam.Length,
							"LinUnit": AIWEQUIModel[d].lam.LinUnit,
							"Startmrkr": AIWEQUIModel[d].lam.Startmrkr,
							"Endmrkr": AIWEQUIModel[d].lam.Endmrkr,
							"Mrkdisst": AIWEQUIModel[d].lam.Mrkdisst,
							"Mrkdisend": AIWEQUIModel[d].lam.Mrkdisend,
							"MrkrUnit": AIWEQUIModel[d].lam.MrkrUnit
						};
						sPayload.EqLAM.push(sEqLAM);
					}

					var sEqAddr = {
						"Equi": AIWEQUIModel[d].Equnr,
						"Title": AIWEQUIModel[d].TitleCode,
						"Name1": AIWEQUIModel[d].Name1,
						"Name2": AIWEQUIModel[d].Name2,
						"Name3": AIWEQUIModel[d].Name3,
						"Name4": AIWEQUIModel[d].Name4,
						"Sort1": AIWEQUIModel[d].Sort1,
						"Sort2": AIWEQUIModel[d].Sort2,
						"NameCo": AIWEQUIModel[d].NameCo,
						"PostCod1": AIWEQUIModel[d].PostCod1,
						"City1": AIWEQUIModel[d].City1,
						"Building": AIWEQUIModel[d].Building,
						"Floor": AIWEQUIModel[d].Floor,
						"Roomnum": AIWEQUIModel[d].Roomnum,
						"Strsuppl1": AIWEQUIModel[d].Strsuppl1,
						"Strsuppl2": AIWEQUIModel[d].Strsuppl2,
						"Strsuppl3": AIWEQUIModel[d].Strsuppl3,
						"Location": AIWEQUIModel[d].AddrLocation,
						"RefPosta": AIWEQUIModel[d].RefPosta,
						"Landx": AIWEQUIModel[d].Landx,
						"TimeZone": AIWEQUIModel[d].TimeZone,
						"RfePost": AIWEQUIModel[d].Region,
						"Regiotxt": AIWEQUIModel[d].RegionDesc
					};
					sPayload.EqAddr.push(sEqAddr);

					var aIntlAddr = AIWEQUIModel[d].intlAddr;
					if (aIntlAddr) {
						for (var z = 0; z < aIntlAddr.length; z++) {
							sPayload.EqAddrI.push(aIntlAddr[z]);
						}
					}

					if (AIWEQUIModel[d].dfps) {
						var oEqDFPS = {
							Equi: AIWEQUIModel[d].Equnr,
							DeviceId: AIWEQUIModel[d].dfps.Tailno,
							Topsiteid: AIWEQUIModel[d].dfps.Area,
							Topsitede: AIWEQUIModel[d].dfps.AreaDesc,
							AreaPro: AIWEQUIModel[d].dfps.AreaPrfl,
							SiteId: AIWEQUIModel[d].dfps.Site,
							SiteDesc: AIWEQUIModel[d].dfps.SiteDesc,
							SitePro: AIWEQUIModel[d].dfps.SitePrfl,
							MpoId: AIWEQUIModel[d].dfps.MPO,
							MpoDescr: AIWEQUIModel[d].dfps.MPODesc,
							RicId: AIWEQUIModel[d].dfps.RIC,
							RicDescr: AIWEQUIModel[d].dfps.RICDesc,
							ModelId: AIWEQUIModel[d].dfps.ModelId,
							ModelDes: AIWEQUIModel[d].dfps.ModelIdDesc,
							Foreignob: formatter.truetoX(AIWEQUIModel[d].dfps.ForeignEq),
							TecState: AIWEQUIModel[d].dfps.TechSts,
							DepState: AIWEQUIModel[d].dfps.OperSts,
							DfpsRmrk: AIWEQUIModel[d].dfps.Remark
						};
						sPayload.EqDFPS.push(oEqDFPS);
					}

					var sEqClassList = AIWEQUIModel[d].classItems;
					if (sEqClassList) {
						if (sEqClassList.length > 0) {
							for (var e = 0; e < sEqClassList.length; e++) {
								var sEqClass = {
									"Equi": AIWEQUIModel[d].Equnr,
									"Classtype": sEqClassList[e].Classtype,
									"Class": sEqClassList[e].Class,
									"Clstatus1": sEqClassList[e].Clstatus1
								};
								sPayload.EqClass.push(sEqClass);
							}
						}
					}

					var sEqCharList = AIWEQUIModel[d].characteristics;
					if (sEqCharList) {
						if (sEqCharList.length > 0) {
							for (var f = 0; f < sEqCharList.length; f++) {
								var sEqVal = {
									"Equi": AIWEQUIModel[d].Equnr,
									"Atnam": sEqCharList[f].Atnam,
									"Textbez": sEqCharList[f].Textbez,
									"Atwrt": sEqCharList[f].Atwrt,
									"Class": sEqCharList[f].Class
								};
								sPayload.EqVal.push(sEqVal);
							}
						}
					}

					var aFLLinChar = AIWEQUIModel[d].linearChar;
					if (aFLLinChar) {
						if (aFLLinChar.length > 0) {
							var alinearChar = $.map(aFLLinChar, function (obj) {
								return $.extend(true, {}, obj);
							});
							for (var c = 0; c < alinearChar.length; c++) {
								delete alinearChar[c].linCharEnable;
								alinearChar[c].Equi = AIWEQUIModel[d].Equnr;
								sPayload.EqLAMCH.push(alinearChar[c]);
							}
						}
					}

					var aAinMOP = sap.ui.getCore().getModel("ainMOP").getData();
					if (aAinMOP) {
						for (var z = 0; z < aAinMOP.length; z++) {
							if (sEquipment.Equnr === aAinMOP[z].key) {
								sEquipment.Modelid = aAinMOP[z].AIN.Modelid;
							}
						}
					}
				}
			}

			if (AIWMSPTModel.length > 0) {
				for (var j = 0; j < AIWMSPTModel.length; j++) {
					var sMsPoint = {
						"Point": AIWMSPTModel[j].Mspoint,
						"Equnr": AIWMSPTModel[j].Equnr,
						"Eqktx": AIWMSPTModel[j].Eqktx,
						"Tplnr": AIWMSPTModel[j].Tplnr,
						"Floctxt": AIWMSPTModel[j].Pltxt,
						"Mptyp": AIWMSPTModel[j].Mptyp,
						"Mpttx": AIWMSPTModel[j].Mpttx,
						"Codgr": AIWMSPTModel[j].Codgr,
						"Codgrtxt": AIWMSPTModel[j].Codgrtxt,
						"ObtypMs": AIWMSPTModel[j].ObtypMs,
						"Objtypetxt": AIWMSPTModel[j].Txt,
						"AtnamMs": AIWMSPTModel[j].AtnamMs,
						"Atbez": AIWMSPTModel[j].Atbez,
						"Indct": AIWMSPTModel[j].Indct,
						"Cdsuf": AIWMSPTModel[j].Cdsuf,
						"Cjumc": AIWMSPTModel[j].Cjumc,
						"Desir": AIWMSPTModel[j].Desir,
						"Pyeac": AIWMSPTModel[j].Pyeac,
						"Mrmin": AIWMSPTModel[j].Mrmin,
						"Mrmax": AIWMSPTModel[j].Mrmax,
						"Pttxt": AIWMSPTModel[j].Pttxt,
						"Psort": AIWMSPTModel[j].Psort,
						"Inact": AIWMSPTModel[j].Inact,
						"Mseh6": AIWMSPTModel[j].Mseh6,
						"Msehl": AIWMSPTModel[j].Msehl,
						"Decim": AIWMSPTModel[j].Decim.toString(),
						"Locas": AIWMSPTModel[j].Locas,
						"Maktx": AIWMSPTModel[j].Maktx,
						"Begru": AIWMSPTModel[j].Begru,
						"Begtx": AIWMSPTModel[j].Begtx,
						"Expon": AIWMSPTModel[j].Expon,
						"Mrngu": AIWMSPTModel[j].Mrngu,
						"Dstxt": AIWMSPTModel[j].Dstxt,
						"Indrv": AIWMSPTModel[j].Indrv,
						"Indtr": AIWMSPTModel[j].readTransfSel,
						"Trans": AIWMSPTModel[j].readTransf,
						"Type": AIWMSPTModel[j].viewParameter === "create" ? true : false,
						// "Inact": AIWMSPTModel[j].Inact
					};
					sPayload.MSPoint.push(sMsPoint);

					if (AIWMSPTModel[j].Mptyp === "L" && AIWMSPTModel[j].lam) {
						var sMSLAM = {
							"Mspoint": AIWMSPTModel[j].Mspoint,
							"Lrpid": AIWMSPTModel[j].lam.Lrpid,
							"Strtptatr": AIWMSPTModel[j].lam.Strtptatr,
							"Endptatr": AIWMSPTModel[j].lam.Endptatr,
							"Length": AIWMSPTModel[j].lam.Length,
							"LinUnit": AIWMSPTModel[j].lam.LinUnit,
							"Startmrkr": AIWMSPTModel[j].lam.Startmrkr,
							"Endmrkr": AIWMSPTModel[j].lam.Endmrkr,
							"Mrkdisst": AIWMSPTModel[j].lam.Mrkdisst,
							"Mrkdisend": AIWMSPTModel[j].lam.Mrkdisend,
							"MrkrUnit": AIWMSPTModel[j].lam.MrkrUnit
						};
						sPayload.MSLAM.push(sMSLAM);
					}

					var sMsClassList = AIWMSPTModel[j].classItems;
					if (sMsClassList) {
						if (sMsClassList.length > 0) {
							for (var h = 0; h < sMsClassList.length; h++) {
								var sMsClass = {
									"Mspoint": AIWMSPTModel[j].Mspoint,
									"Classtype": sMsClassList[h].Classtype,
									"Class": sMsClassList[h].Class,
									"Clstatus1": sMsClassList[h].Clstatus1
								};
								sPayload.MSClass.push(sMsClass);
							}
						}
					}

					var sMsCharList = AIWMSPTModel[j].characteristics;
					if (sMsCharList) {
						if (sMsCharList.length > 0) {
							for (var i = 0; i < sMsCharList.length; i++) {
								var sMsVal = {
									"Mspoint": AIWMSPTModel[j].Mspoint,
									"Atnam": sMsCharList[i].Atnam,
									"Textbez": sMsCharList[i].Textbez,
									"Atwrt": sMsCharList[i].Atwrt,
									"Class": sMsCharList[i].Class
								};
								sPayload.MSVal.push(sMsVal);
							}
						}
					}
				}
			}

			if (AIWMPMIModel.length > 0) {
				for (var k = 0; k < AIWMPMIModel.length; k++) {
					var sMPLAN = {
						"Warpl": AIWMPMIModel[k].Warpl,
						"Abrho": AIWMPMIModel[k].Abrho,
						"Hunit": AIWMPMIModel[k].Hunit,
						"Mptyp": AIWMPMIModel[k].Mptyp,
						"Wptxt": AIWMPMIModel[k].Wptxt,
						"Stich": AIWMPMIModel[k].Stich.toString(),
						"Fabkl": AIWMPMIModel[k].Fabkl,
						"FabklDesc": AIWMPMIModel[k].FabklDesc,
						"Sfakt": AIWMPMIModel[k].Sfakt,
						"Andor": g.parseValue(AIWMPMIModel[k].Andor),
						"Mehrfach": g.parseValue(AIWMPMIModel[k].Mehrfach),
						"Strat": AIWMPMIModel[k].Strat,
						"StratDesc": AIWMPMIModel[k].StratDesc,
						"Wset": AIWMPMIModel[k].Wset,
						"Startdate": g._formatDate(AIWMPMIModel[k].Stadt),
						"Unitc": AIWMPMIModel[k].Unitc,
						"Szaeh": AIWMPMIModel[k].Szaeh,
						"PointStp": AIWMPMIModel[k].Mpcycleno,

						"Vspos": AIWMPMIModel[k].Vspos,
						"Topos": AIWMPMIModel[k].Topos,
						"Vsneg": AIWMPMIModel[k].Vsneg,
						"Toneg": AIWMPMIModel[k].Toneg,
						"Horiz": AIWMPMIModel[k].Horiz,
						"CallConf": AIWMPMIModel[k].CallConf,
						"PlanSort": AIWMPMIModel[k].PlanSort,
						"Begru": AIWMPMIModel[k].Begru,
						"InactMp": AIWMPMIModel[k].Deact
					};
					sPayload.MPLAN.push(sMPLAN);

					var sItem = AIWMPMIModel[k].itemModel;
					if (sItem) {
						for (var l = 0; l < sItem.length; l++) {
							var sMPItem = {
								"Mplan": AIWMPMIModel[k].Warpl,
								"Qmart": sItem[l].Qmart, // notif type
								"Qmartx": sItem[l].nTypeTxt, // notif type desc
								"PlntMi": sItem[l].Werks, // planning plant
								"Planningplantdes": sItem[l].Planningplantdes, // planning plant desc
								"IngrpMi": sItem[l].Ingrp, // planner grp
								"Plannergrpdesc": sItem[l].Innam, // planner grp desc
								"Pstxt": sItem[l].Pstxt, // maint item desc
								"WergwMi": sItem[l].WergwMi, // main wc desc
								"ArbpMi": sItem[l].ArbpMi, // main wc
								"Auart": sItem[l].Auart, // order type 
								"Ordertypedesc": sItem[l].oTypeTxt, // order type desc
								"Bautl": sItem[l].AsmblyOb, // assembly
								"Cycleseq": sItem[l].Cycleseq,
								"Equnr": sItem[l].Equnr, // equip
								"Equipdesc": sItem[l].Eqktx, // equip desc
								"TplnrMi": sItem[l].Tplnr, // floc
								"Flocdesc": sItem[l].Pltxt, // floc desc
								"Mitemnumb": sItem[l].Mitemnumb, // maint item 
								"PlnnrMi": sItem[l].PlnnrMi, // TL Type
								"PlntyMi": sItem[l].PlntyMi, // TL Group
								"PlnalMi": sItem[l].PlnalMi, // TL Counter
								SwerkMil: sItem[l].SwerkMil,
								// Name1 = "",
								StortMil: sItem[l].StortMil,
								// Locationdesc = "",
								MsgrpIl: sItem[l].MsgrpIl,
								BeberMil: sItem[l].BeberMil,
								Fing: sItem[l].Fing,
								ArbplIl: sItem[l].ArbplIl,
								// Workcenterdesc = "",
								AbckzIl: sItem[l].AbckzIl,
								// Abctx = "",
								EqfnrIl: sItem[l].EqfnrIl,
								BukrsMil: sItem[l].BukrsMil,
								Butxt: sItem[l].Butxt,
								City: sItem[l].City,
								Anln1Mil: sItem[l].Anln1Mil,
								// Txt50 = "",
								Anln2Mil: sItem[l].Anln2Mil,
								GsberIl: sItem[l].GsberIl,
								// Gtext = "",
								KostlMil: sItem[l].KostlMil,
								// Contareaname = "",
								KokrsMil: sItem[l].KokrsMil,
								Posid: sItem[l].Posid,
								// Post1 = "",
								AufnrIl: sItem[l].AufnrIl,
								// SettleOrdDesc = "",

							};
							sPayload.MPItem.push(sMPItem);

							if (sItem[l].lam) {
								var sMSLAM = {
									"Mplan": AIWMPMIModel[k].Warpl,
									"Mitemnumb": sItem[l].lam.Mitemnumb,
									"Lrpid": sItem[l].lam.Lrpid,
									"Strtptatr": sItem[l].lam.Strtptatr,
									"Endptatr": sItem[l].lam.Endptatr,
									"Length": sItem[l].lam.Length,
									"LinUnit": sItem[l].lam.LinUnit,
									"Startmrkr": sItem[l].lam.Startmrkr,
									"Endmrkr": sItem[l].lam.Endmrkr,
									"Mrkdisst": sItem[l].lam.Mrkdisst,
									"Mrkdisend": sItem[l].lam.Mrkdisend,
									"MrkrUnit": sItem[l].lam.MrkrUnit
								};
								sPayload.MPLAM.push(sMSLAM);
							}
						}
					}

					var sCycle = AIWMPMIModel[k].cycleModel;
					if (sCycle) {
						for (var m = 0; m < sCycle.length; m++) {
							var sMPCycle = {
								"Mplan": AIWMPMIModel[k].Warpl,
								"Point": sCycle[m].Point,
								"PointTxt": sCycle[m].Psort,
								"Offset": sCycle[m].Offset,
								"Ofsetunit": sCycle[m].Ofsetunit,
								"PakText": sCycle[m].PakText,
								"Zeieh": sCycle[m].Zeieh,
								"Zykl1": sCycle[m].Zykl1,
								"Cycleseqi": sCycle[m].Cycleseqi,
								"Mpcycleno": sCycle[m].Mpcycleno
							};
							sPayload.MPCycle.push(sMPCycle);
						}
					}

					var sObjListItem = AIWMPMIModel[k].ObjListItems;
					if (sObjListItem) {
						for (var z = 0; z < sObjListItem.length; z++) {
							var oOLI = {
								"AsmblyOb": sObjListItem[z].AsmblyOb,
								"EquiObj": sObjListItem[z].EquiObj,
								"FlocObj": sObjListItem[z].FlocObj,
								"MatnrObj": sObjListItem[z].MatnrObj,
								"Mitemnumb": sObjListItem[z].Mitemnumb,
								"Mplan": sObjListItem[z].Warpl
							};
							sPayload.MPOBList.push(oOLI);
						}
					}

					var sMsClassList = AIWMPMIModel[k].classItems;
					if (sMsClassList) {
						if (sMsClassList.length > 0) {
							for (var h = 0; h < sMsClassList.length; h++) {
								var sMsClass = {
									"Mplan": AIWMPMIModel[k].Warpl,
									"Classtype": sMsClassList[h].Classtype,
									"Class": sMsClassList[h].Class,
									"Clstatus1": sMsClassList[h].Clstatus1
								};
								sPayload.ClassMpl.push(sMsClass);
							}
						}
					}

					var sMsCharList = AIWMPMIModel[k].characteristics;
					if (sMsCharList) {
						if (sMsCharList.length > 0) {
							for (var i = 0; i < sMsCharList.length; i++) {
								var sMsVal = {
									"Mplan": AIWMPMIModel[k].Warpl,
									"Atnam": sMsCharList[i].Atnam,
									"Textbez": sMsCharList[i].Textbez,
									"Atwrt": sMsCharList[i].Atwrt,
									"Class": sMsCharList[i].Class
								};
								sPayload.ValuaMpl.push(sMsVal);
							}
						}
					}
				}
			}

			// BOM/ON

			if (AIWListMatData.length > 0) {
				for (var i = 0; i < AIWListMatData.length; i++) {
					var mHeader = {
						"Matnr": AIWListMatData[i].Matnr,
						"Stalt": AIWListMatData[i].Stalt,
						"Stlan": AIWListMatData[i].Stlan,
						"Werks": AIWListMatData[i].Werks,
						"Pmbomtech": AIWListMatData[i].Pmbomtech ? AIWListMatData[i].Pmbomtech : "",
						"PmbomtechTxt": AIWListMatData[i].PmbomtechTxt ? AIWListMatData[i].PmbomtechTxt : "",
						"Bomstatus": AIWListMatData[i].Bomstatus,
						"Lngtxt": AIWListMatData[i].Lngtxt,
						"Txtmi": AIWListMatData[i].Lngtxt,
						"Stktx": AIWListMatData[i].Stktx,
						"Validfrom": this._formatDate(AIWListMatData[i].Validfrom),
						"Baseqty": AIWListMatData[i].BaseQty,
						"Baseuom": AIWListMatData[i].BaseUom,
						"Validtoda": this._formatDate(AIWListMatData[i].Validtoda)
					};
					sPayload.MRBHeader.push(mHeader);

					if (AIWListMatData[i].matItem) {
						for (var j = 0; j < AIWListMatData[i].matItem.length; j++) {
							var mItem = {
								"Matnr": AIWListMatData[i].Matnr,
								"Stlan": AIWListMatData[i].Stlan,
								"Werks": AIWListMatData[i].Werks,
								//"Bomitmnod": AIWListMatData[i].Bomitmnod, //13.08
								"Bomitmpos": AIWListMatData[i].matItem[j].Bomitmpos,
								"Itemcat": AIWListMatData[i].matItem[j].Itemcat,
								"Itemcomp": AIWListMatData[i].matItem[j].Itemcomp,
								"Compdesc": "",
								"Itmqty": AIWListMatData[i].matItem[j].Itmqty,
								"Itmuom": AIWListMatData[i].matItem[j].Itmuom,
								"Recurallo": AIWListMatData[i].matItem[j].Recurallo,
								"Erskz": AIWListMatData[i].matItem[j].Erskz,
								"Rvrel": AIWListMatData[i].matItem[j].Rvrel === "0" ? "" : AIWListMatData[i].matItem[j].Rvrel,
								"Sanfe": AIWListMatData[i].matItem[j].Sanfe,
								"Sanin": AIWListMatData[i].matItem[j].Sanin,
								"Sanko": AIWListMatData[i].matItem[j].Sanko,
								"Itmcmpdesc": AIWListMatData[i].matItem[j].Itmcmpdesc,
								"Costgrelv": AIWListMatData[i].matItem[j].Costgrelv === "0" ? "" : AIWListMatData[i].matItem[j].Costgrelv
							};
							if (AIWListMatData[i].bomType === "Change") { //13.08
								mItem.Bomitmnod = AIWListMatData[i].matItem[j].Bomitmnod;
							}
							if (AIWListMatData[i].matItem[j].Itemcat === "N") {
								mItem.Ekorg = AIWListMatData[i].matItem[j].Ekorg;
								mItem.Ekotx = AIWListMatData[i].matItem[j].Ekotx;
								mItem.Ekgrp = AIWListMatData[i].matItem[j].Ekgrp;
								mItem.Eknam = AIWListMatData[i].matItem[j].Eknam;
								mItem.Preis = AIWListMatData[i].matItem[j].Preis;
								mItem.Waers = AIWListMatData[i].matItem[j].Waers;
								mItem.Peinh = AIWListMatData[i].matItem[j].Peinh;
								mItem.Matkl = AIWListMatData[i].matItem[j].Matkl;
								mItem.Wgbez = AIWListMatData[i].matItem[j].Wgbez;
								mItem.Potx1 = AIWListMatData[i].matItem[j].Potx1;
							} else if (AIWListMatData[i].matItem[j].Itemcat === "D") {
								mItem.Bomdocitm = AIWListMatData[i].matItem[j].Bomdocitm;
								mItem.Bomitmdkr = AIWListMatData[i].matItem[j].Bomitmdkr;
								mItem.BomitmdkrTxt = AIWListMatData[i].matItem[j].BomitmdkrTxt;
								mItem.Bomitmdtl = AIWListMatData[i].matItem[j].Bomitmdtl;
								mItem.Bomitmdvr = AIWListMatData[i].matItem[j].Bomitmdvr;
							} else if (AIWListMatData[i].matItem[j].Itemcat === "R") {
								mItem.Roms1 = AIWListMatData[i].matItem[j].Roms1;
								mItem.Romei = AIWListMatData[i].matItem[j].Romei;
								mItem.Roms2 = AIWListMatData[i].matItem[j].Roms2;
								mItem.Roms3 = AIWListMatData[i].matItem[j].Roms3;
								mItem.Rform = AIWListMatData[i].matItem[j].Rform;
								// mItem.FrmlaKeyDesc = AIWListMatData[i].matItem[j].Itemcat;
								mItem.Roanz = AIWListMatData[i].matItem[j].Roanz;
								// mItem.numVarSizeDesc = AIWListMatData[i].matItem[j].Itemcat;
								mItem.Romen = AIWListMatData[i].matItem[j].Romen;
								mItem.Rokme = AIWListMatData[i].matItem[j].Rokme;
							} else if (AIWListMatData[i].matItem[j].Itemcat === "T") {
								mItem.Potx1 = AIWListMatData[i].matItem[j].Potx1;
							}
							sPayload.MRBItem.push(mItem);
						}
					}

					if (AIWListMatData[i].matSubItem.length) {
						for (var k = 0; k < AIWListMatData[i].matSubItem.length; k++) {
							var mSubItem = {
								"Matnr": AIWListMatData[i].Matnr,
								"Stlan": AIWListMatData[i].Stlan,
								"Werks": AIWListMatData[i].Werks,
								"Posnr": AIWListMatData[i].matSubItem[k].Posnr,
								"Bomitmnod": AIWListMatData[i].matSubItem[k].Bomitmnod,
								"Bomsubno": AIWListMatData[i].matSubItem[k].Bomsubno,
								"Ebort": AIWListMatData[i].matSubItem[k].Ebort,
								"Upmng": AIWListMatData[i].matSubItem[k].Upmng,
								"Uptxt": AIWListMatData[i].matSubItem[k].Uptxt
							};
							sPayload.MRBSBIT.push(mSubItem);
						}
					}
				}
			}

			if (AIWListEqData.length > 0) {
				for (var i = 0; i < AIWListEqData.length; i++) {
					var eHeader = {
						"Eqnrbom": AIWListEqData[i].Eqnrbom,
						//"Stalt": "",
						"Stlan": AIWListEqData[i].Stlan,
						"Werks": AIWListEqData[i].Werks,
						"Bomstatus": AIWListEqData[i].Bomstatus,
						"Lngtxt": AIWListEqData[i].Lngtxt,
						"Txtmi": AIWListEqData[i].Lngtxt,
						"Stktx": AIWListEqData[i].Stktx,
						"Validfrom": this._formatDate(AIWListEqData[i].Validfrom),
						"Baseqty": AIWListEqData[i].BaseQty,
						"Baseuom": AIWListEqData[i].BaseUom,
						"Validtoda": this._formatDate(AIWListEqData[i].Validtoda)
					};
					sPayload.EBHeader.push(eHeader);

					if (AIWListEqData[i].eqItem) {
						for (var j = 0; j < AIWListEqData[i].eqItem.length; j++) {
							var eItem = {
								"Eqnrbom": AIWListEqData[i].Eqnrbom,
								"Stlan": AIWListEqData[i].Stlan,
								"Werks": AIWListEqData[i].Werks,
								"Bomitmpos": AIWListEqData[i].eqItem[j].Bomitmpos,
								"Itemcat": AIWListEqData[i].eqItem[j].Itemcat,
								"Itemcomp": AIWListEqData[i].eqItem[j].Itemcomp,
								"Compdesc": "",
								"Itmqty": AIWListEqData[i].eqItem[j].Itmqty,
								"Itmuom": AIWListEqData[i].eqItem[j].Itmuom,
								"Recurallo": AIWListEqData[i].eqItem[j].Recurallo,
								"Erskz": AIWListEqData[i].eqItem[j].Erskz,
								"Rvrel": AIWListEqData[i].eqItem[j].Rvrel === "0" ? "" : AIWListEqData[i].eqItem[j].Rvrel,
								"Sanfe": AIWListEqData[i].eqItem[j].Sanfe,
								"Sanin": AIWListEqData[i].eqItem[j].Sanin,
								"Sanko": AIWListEqData[i].eqItem[j].Sanko,
								"Itmcmpdesc": AIWListEqData[i].eqItem[j].Itmcmpdesc,
								"Costgrelv": AIWListEqData[i].eqItem[j].Costgrelv === "0" ? "" : AIWListEqData[i].eqItem[j].Costgrelv
							};
							if (AIWListEqData[i].bomType === "Change") { //13.08
								eItem.Bomitmnod = AIWListEqData[i].eqItem[j].Bomitmnod;
							}
							if (AIWListEqData[i].eqItem[j].Itemcat === "N") {
								eItem.Ekorg = AIWListEqData[i].eqItem[j].Ekorg;
								eItem.Ekotx = AIWListEqData[i].eqItem[j].Ekotx;
								eItem.Ekgrp = AIWListEqData[i].eqItem[j].Ekgrp;
								eItem.Eknam = AIWListEqData[i].eqItem[j].Eknam;
								eItem.Preis = AIWListEqData[i].eqItem[j].Preis;
								eItem.Waers = AIWListEqData[i].eqItem[j].Waers;
								eItem.Peinh = AIWListEqData[i].eqItem[j].Peinh;
								eItem.Matkl = AIWListEqData[i].eqItem[j].Matkl;
								eItem.Wgbez = AIWListEqData[i].eqItem[j].Wgbez;
								eItem.Potx1 = AIWListEqData[i].eqItem[j].Potx1;
							} else if (AIWListEqData[i].eqItem[j].Itemcat === "D") {
								eItem.Bomdocitm = AIWListEqData[i].eqItem[j].Bomdocitm;
								eItem.Bomitmdkr = AIWListEqData[i].eqItem[j].Bomitmdkr;
								eItem.BomitmdkrTxt = AIWListEqData[i].eqItem[j].BomitmdkrTxt;
								eItem.Bomitmdtl = AIWListEqData[i].eqItem[j].Bomitmdtl;
								eItem.Bomitmdvr = AIWListEqData[i].eqItem[j].Bomitmdvr;
							} else if (AIWListEqData[i].eqItem[j].Itemcat === "R") {
								eItem.Roms1 = AIWListEqData[i].eqItem[j].Roms1;
								eItem.Romei = AIWListEqData[i].eqItem[j].Romei;
								eItem.Roms2 = AIWListEqData[i].eqItem[j].Roms2;
								eItem.Roms3 = AIWListEqData[i].eqItem[j].Roms3;
								eItem.Rform = AIWListEqData[i].eqItem[j].Rform;
								// eItem.FrmlaKeyDesc = AIWListEqData[i].eqItem[j].Itemcat;
								eItem.Roanz = AIWListEqData[i].eqItem[j].Roanz;
								// eItem.numVarSizeDesc = AIWListEqData[i].eqItem[j].Itemcat;
								eItem.Romen = AIWListEqData[i].eqItem[j].Romen;
								eItem.Rokme = AIWListEqData[i].eqItem[j].Rokme;
							} else if (AIWListEqData[i].eqItem[j].Itemcat === "T") {
								eItem.Potx1 = AIWListEqData[i].eqItem[j].Potx1;
							}
							sPayload.EBItem.push(eItem);
						}
					}

					if (AIWListEqData[i].eqSubItem) {
						for (var k = 0; k < AIWListEqData[i].eqSubItem.length; k++) {
							var eSubItem = {
								"Eqnrbom": AIWListEqData[i].Eqnrbom,
								"Stlan": AIWListEqData[i].Stlan,
								"Werks": AIWListEqData[i].Werks,
								"Posnr": AIWListEqData[i].eqSubItem[k].Posnr,
								"Bomitmnod": AIWListEqData[i].eqSubItem[k].Bomitmnod,
								"Bomsubno": AIWListEqData[i].eqSubItem[k].Bomsubno,
								"Ebort": AIWListEqData[i].eqSubItem[k].Ebort,
								"Upmng": AIWListEqData[i].eqSubItem[k].Upmng,
								"Uptxt": AIWListEqData[i].eqSubItem[k].Uptxt
							};
							sPayload.EBSBIT.push(eSubItem);
						}
					}
				}
			}

			if (AIWListFLData.length > 0) {
				for (var i = 0; i < AIWListFLData.length; i++) {
					var flHeader = {
						"Tplnrbom": AIWListFLData[i].Tplnrbom,
						"Stlan": AIWListFLData[i].Stlan,
						"Werks": AIWListFLData[i].Werks,
						"Bomstatus": AIWListFLData[i].Bomstatus,
						"Lngtxt": AIWListFLData[i].Lngtxt,
						"Txtmi": AIWListFLData[i].Lngtxt,
						"Stktx": AIWListFLData[i].Stktx,
						"Validfrom": this._formatDate(AIWListFLData[i].Validfrom),
						"Baseqty": AIWListFLData[i].BaseQty,
						"Baseuom": AIWListFLData[i].BaseUom,
						"Validtoda": this._formatDate(AIWListFLData[i].Validtoda)
							//"Stalt": ""
					};
					sPayload.FBHeader.push(flHeader);

					if (AIWListFLData[i].flItem) {
						for (var j = 0; j < AIWListFLData[i].flItem.length; j++) {
							var flItem = {
								"Tplnrbom": AIWListFLData[i].Tplnrbom,
								"Stlan": AIWListFLData[i].Stlan,
								"Werks": AIWListFLData[i].Werks,
								"Bomitmpos": AIWListFLData[i].flItem[j].Bomitmpos,
								"Itemcat": AIWListFLData[i].flItem[j].Itemcat,
								"Itemcomp": AIWListFLData[i].flItem[j].Itemcomp,
								"Compdesc": "",
								"Itmqty": AIWListFLData[i].flItem[j].Itmqty,
								"Itmuom": AIWListFLData[i].flItem[j].Itmuom,
								"Recurallo": AIWListFLData[i].flItem[j].Recurallo,
								"Erskz": AIWListFLData[i].flItem[j].Erskz,
								"Rvrel": AIWListFLData[i].flItem[j].Rvrel === "0" ? "" : AIWListFLData[i].flItem[j].Rvrel,
								"Sanfe": AIWListFLData[i].flItem[j].Sanfe,
								"Sanin": AIWListFLData[i].flItem[j].Sanin,
								"Sanko": AIWListFLData[i].flItem[j].Sanko,
								"Itmcmpdesc": AIWListFLData[i].flItem[j].Itmcmpdesc,
								"Costgrelv": AIWListFLData[i].flItem[j].Costgrelv === "0" ? "" : AIWListFLData[i].flItem[j].Costgrelv
							};
							if (AIWListFLData[i].bomType === "Change") {
								flItem.Bomitmnod = AIWListFLData[i].flItem[j].Bomitmnod;
							}
							if (AIWListFLData[i].flItem[j].Itemcat === "N") {
								flItem.Ekorg = AIWListFLData[i].flItem[j].Ekorg;
								flItem.Ekotx = AIWListFLData[i].flItem[j].Ekotx;
								flItem.Ekgrp = AIWListFLData[i].flItem[j].Ekgrp;
								flItem.Eknam = AIWListFLData[i].flItem[j].Eknam;
								flItem.Preis = AIWListFLData[i].flItem[j].Preis;
								flItem.Waers = AIWListFLData[i].flItem[j].Waers;
								flItem.Peinh = AIWListFLData[i].flItem[j].Peinh;
								flItem.Matkl = AIWListFLData[i].flItem[j].Matkl;
								flItem.Wgbez = AIWListFLData[i].flItem[j].Wgbez;
								flItem.Potx1 = AIWListFLData[i].flItem[j].Potx1;
							} else if (AIWListFLData[i].flItem[j].Itemcat === "D") {
								flItem.Bomdocitm = AIWListFLData[i].flItem[j].Bomdocitm;
								flItem.Bomitmdkr = AIWListFLData[i].flItem[j].Bomitmdkr;
								flItem.BomitmdkrTxt = AIWListFLData[i].flItem[j].BomitmdkrTxt;
								flItem.Bomitmdtl = AIWListFLData[i].flItem[j].Bomitmdtl;
								flItem.Bomitmdvr = AIWListFLData[i].flItem[j].Bomitmdvr;
							} else if (AIWListFLData[i].flItem[j].Itemcat === "R") {
								flItem.Roms1 = AIWListFLData[i].flItem[j].Roms1;
								flItem.Romei = AIWListFLData[i].flItem[j].Romei;
								flItem.Roms2 = AIWListFLData[i].flItem[j].Roms2;
								flItem.Roms3 = AIWListFLData[i].flItem[j].Roms3;
								flItem.Rform = AIWListFLData[i].flItem[j].Rform;
								// flItem.FrmlaKeyDesc = AIWListFLData[i].flItem[j].Itemcat;
								flItem.Roanz = AIWListFLData[i].flItem[j].Roanz;
								// flItem.numVarSizeDesc = AIWListFLData[i].flItem[j].Itemcat;
								flItem.Romen = AIWListFLData[i].flItem[j].Romen;
								flItem.Rokme = AIWListFLData[i].flItem[j].Rokme;
							} else if (AIWListFLData[i].flItem[j].Itemcat === "T") {
								flItem.Potx1 = AIWListFLData[i].flItem[j].Potx1;
							}
							sPayload.FBItem.push(flItem);
						}
					}

					if (AIWListFLData[i].flSubItem) {
						for (var k = 0; k < AIWListFLData[i].flSubItem.length; k++) {
							var flSubItem = {
								"Tplnrbom": AIWListFLData[i].Tplnrbom,
								"Stlan": AIWListFLData[i].Stlan,
								"Werks": AIWListFLData[i].Werks,
								"Posnr": AIWListFLData[i].flSubItem[k].Posnr,
								"Bomitmnod": AIWListFLData[i].flSubItem[k].Bomitmnod,
								"Bomsubno": AIWListFLData[i].flSubItem[k].Bomsubno,
								"Ebort": AIWListFLData[i].flSubItem[k].Ebort,
								"Upmng": AIWListFLData[i].flSubItem[k].Upmng,
								"Uptxt": AIWListFLData[i].flSubItem[k].Uptxt
							};
							sPayload.FBSBIT.push(flSubItem);
						}
					}
				}
			}

			if (AIWListWBSData.length > 0) {
				for (var i = 0; i < AIWListWBSData.length; i++) {
					var wbsHeader = {
						"WbsExt": AIWListWBSData[i].WbsExt,
						"MatnrWbs": AIWListWBSData[i].Matnr,
						"Stlan": AIWListWBSData[i].Stlan,
						"Werks": AIWListWBSData[i].Werks,
						"Bomstatus": AIWListWBSData[i].Bomstatus,
						"Lngtxt": AIWListWBSData[i].Lngtxt,
						"Txtmi": AIWListWBSData[i].Lngtxt,
						"Stktx": AIWListWBSData[i].Stktx,
						"Validfrom": this._formatDate(AIWListWBSData[i].Validfrom),
						"Baseqty": AIWListWBSData[i].BaseQty,
						"Baseuom": AIWListWBSData[i].BaseUom,
						"Validtoda": this._formatDate(AIWListWBSData[i].Validtoda)
							//"Stalt": ""
					};
					sPayload.WBHeader.push(wbsHeader);

					if (AIWListWBSData[i].wbsItem) {
						for (var j = 0; j < AIWListWBSData[i].wbsItem.length; j++) {
							var wbsItem = {
								"WbsExt": AIWListWBSData[i].WbsExt,
								"MatnrWbs": AIWListWBSData[i].Matnr,
								"Stlan": AIWListWBSData[i].Stlan,
								"Werks": AIWListWBSData[i].Werks,
								"Bomitmpos": AIWListWBSData[i].wbsItem[j].Bomitmpos,
								"Itemcat": AIWListWBSData[i].wbsItem[j].Itemcat,
								"Itemcomp": AIWListWBSData[i].wbsItem[j].Itemcomp,
								"Compdesc": "",
								"Itmqty": AIWListWBSData[i].wbsItem[j].Itmqty,
								"Itmuom": AIWListWBSData[i].wbsItem[j].Itmuom,
								"Recurallo": AIWListWBSData[i].wbsItem[j].Recurallo,
								"Erskz": AIWListWBSData[i].wbsItem[j].Erskz,
								"Rvrel": AIWListWBSData[i].wbsItem[j].Rvrel === "0" ? "" : AIWListWBSData[i].wbsItem[j].Rvrel,
								"Sanfe": AIWListWBSData[i].wbsItem[j].Sanfe,
								"Sanin": AIWListWBSData[i].wbsItem[j].Sanin,
								"Sanko": AIWListWBSData[i].wbsItem[j].Sanko,
								"Itmcmpdesc": AIWListWBSData[i].wbsItem[j].Itmcmpdesc,
								"Costgrelv": AIWListWBSData[i].wbsItem[j].Costgrelv === "0" ? "" : AIWListWBSData[i].wbsItem[j].Costgrelv
							};
							if (AIWListWBSData[i].bomType === "Change") { //13.08
								wbsItem.Bomitmnod = AIWListWBSData[i].wbsItem[j].Bomitmnod;
							}
							if (AIWListWBSData[i].wbsItem[j].Itemcat === "N") {
								wbsItem.Ekorg = AIWListWBSData[i].wbsItem[j].Ekorg;
								wbsItem.Ekotx = AIWListWBSData[i].wbsItem[j].Ekotx;
								wbsItem.Ekgrp = AIWListWBSData[i].wbsItem[j].Ekgrp;
								wbsItem.Eknam = AIWListWBSData[i].wbsItem[j].Eknam;
								wbsItem.Preis = AIWListWBSData[i].wbsItem[j].Preis;
								wbsItem.Waers = AIWListWBSData[i].wbsItem[j].Waers;
								wbsItem.Peinh = AIWListWBSData[i].wbsItem[j].Peinh;
								wbsItem.Matkl = AIWListWBSData[i].wbsItem[j].Matkl;
								wbsItem.Wgbez = AIWListWBSData[i].wbsItem[j].Wgbez;
								wbsItem.Potx1 = AIWListWBSData[i].wbsItem[j].Potx1;
							} else if (AIWListWBSData[i].wbsItem[j].Itemcat === "D") {
								wbsItem.Bomdocitm = AIWListWBSData[i].wbsItem[j].Bomdocitm;
								wbsItem.Bomitmdkr = AIWListWBSData[i].wbsItem[j].Bomitmdkr;
								wbsItem.BomitmdkrTxt = AIWListWBSData[i].wbsItem[j].BomitmdkrTxt;
								wbsItem.Bomitmdtl = AIWListWBSData[i].wbsItem[j].Bomitmdtl;
								wbsItem.Bomitmdvr = AIWListWBSData[i].wbsItem[j].Bomitmdvr;
							} else if (AIWListWBSData[i].wbsItem[j].Itemcat === "R") {
								wbsItem.Roms1 = AIWListWBSData[i].wbsItem[j].Roms1;
								wbsItem.Romei = AIWListWBSData[i].wbsItem[j].Romei;
								wbsItem.Roms2 = AIWListWBSData[i].wbsItem[j].Roms2;
								wbsItem.Roms3 = AIWListWBSData[i].wbsItem[j].Roms3;
								wbsItem.Rform = AIWListWBSData[i].wbsItem[j].Rform;
								// wbsItem.FrmlaKeyDesc = AIWListWBSData[i].wbsItem[j].Itemcat;
								wbsItem.Roanz = AIWListWBSData[i].wbsItem[j].Roanz;
								// wbsItem.numVarSizeDesc = AIWListWBSData[i].wbsItem[j].Itemcat;
								wbsItem.Romen = AIWListWBSData[i].wbsItem[j].Romen;
								wbsItem.Rokme = AIWListWBSData[i].wbsItem[j].Rokme;
							} else if (AIWListWBSData[i].wbsItem[j].Itemcat === "T") {
								wbsItem.Potx1 = AIWListWBSData[i].wbsItem[j].Potx1;
							}
							sPayload.WBItem.push(wbsItem);
						}
					}

					if (AIWListWBSData[i].wbsSubItem) {
						for (var k = 0; k < AIWListWBSData[i].wbsSubItem.length; k++) {
							var wbsSubItem = {
								"WbsExt": AIWListWBSData[i].WbsExt,
								"MatnrWbs": AIWListWBSData[i].Matnr,
								"Stlan": AIWListWBSData[i].Stlan,
								"Werks": AIWListWBSData[i].Werks,
								"Posnr": AIWListWBSData[i].wbsSubItem[k].Posnr,
								"Bomitmnod": AIWListWBSData[i].wbsSubItem[k].Bomitmnod,
								"Bomsubno": AIWListWBSData[i].wbsSubItem[k].Bomsubno,
								"Ebort": AIWListWBSData[i].wbsSubItem[k].Ebort,
								"Upmng": AIWListWBSData[i].wbsSubItem[k].Upmng,
								"Uptxt": AIWListWBSData[i].wbsSubItem[k].Uptxt
							};
							sPayload.WBSBIT.push(wbsSubItem);
						}
					}
				}
			}

			if (AIWListONData.length > 0) {
				for (var i = 0; i < AIWListONData.length; i++) {
					var onNetwork = {
						"Objnetwrk": AIWListONData[i].Objnetwrk,
						"Netgrp": AIWListONData[i].Netgrp,
						"Netwtyp": AIWListONData[i].Netwtyp,
						"Netxt": AIWListONData[i].Netxt,
						"Ntobjtyp": AIWListONData[i].Ntobjtyp
					};
					sPayload.ONetwork.push(onNetwork);

					if (AIWListONData[i].lam) {
						var onLAM = {
							"Objnetwrk": AIWListONData[i].Objnetwrk,
							"Lrpid": AIWListONData[i].lam.Lrpid,
							"Strtptatr": AIWListONData[i].lam.Strtptatr,
							"Endptatr": AIWListONData[i].lam.Endptatr,
							"Length": AIWListONData[i].lam.Length,
							"LinUnit": AIWListONData[i].lam.LinUnit,
							"Startmrkr": AIWListONData[i].lam.Startmrkr,
							"Endmrkr": AIWListONData[i].lam.Endmrkr,
							"Mrkdisst": AIWListONData[i].lam.Mrkdisst,
							"Mrkdisend": AIWListONData[i].lam.Mrkdisend,
							"MrkrUnit": AIWListONData[i].lam.MrkrUnit
						};
						sPayload.ONLAM.push(onLAM);
					}
				}
			}

			//WC/TL/OL
			if (AIWListWCData.length > 0) {
				for (var i = 0; i < AIWListWCData.length; i++) {
					var mHeader = {
						"Werks": AIWListWCData[i].plant,
						"Arbpl": AIWListWCData[i].wc,
						"Txtmi": AIWListWCData[i].wcDesc,
						"Verwe": AIWListWCData[i].wcCat,
						"Crveran": AIWListWCData[i].person,
						"Planv": AIWListWCData[i].usg,
						"Vgwts": AIWListWCData[i].stdVal,
						"Crsteus": AIWListWCData[i].ctrlKey
					};
					if (AIWListWCData[i].hasOwnProperty("Type")) {
						if (AIWListWCData[i].Type === "X") {
							mHeader.Type = "X";
						}

					}
					sPayload.Workcenter.push(mHeader);

					if (AIWListWCData[i].cost) {
						for (var j = 0; j < AIWListWCData[i].cost.length; j++) {
							var mCost = {
								"Werks": AIWListWCData[i].cost[j].CrKokrs,
								"Arbpl": AIWListWCData[i].wc,
								"CrKostl": AIWListWCData[i].cost[j].CrKostl,
								"Costcentxt": AIWListWCData[i].cost[j].Costcentxt,
								"CrLstar": AIWListWCData[i].cost[j].CrLstar,
								"Forn1": AIWListWCData[i].cost[j].Forn1,
								"ActvttypeTxt": AIWListWCData[i].cost[j].ActvttypeTxt,
								"Frmltxt": AIWListWCData[i].cost[j].Frmltxt,
								"Begda": formatter._formatDate(AIWListWCData[i].cost[j].Begda),
								"Endda": formatter._formatDate(AIWListWCData[i].cost[j].Endda)
							};
							sPayload.WCCost.push(mCost);
						}
					}

					var sWCClassList = AIWListWCData[i].classItems;
					if (sWCClassList) {
						if (sWCClassList.length > 0) {
							for (var e = 0; e < sWCClassList.length; e++) {
								var sWCClass = {
									"Arbpl": AIWListWCData[i].wc,
									"Werks": AIWListWCData[i].plant,
									"Classtype": sWCClassList[e].Classtype,
									"Class": sWCClassList[e].Class,
									// "Clstatus1": sWCClassList[e].Clstatus1
								};
								sPayload.ClassWC.push(sWCClass);
							}
						}
					}

					var sWCCharList = AIWListWCData[i].characteristics;
					if (sWCCharList) {
						if (sWCCharList.length > 0) {
							for (var f = 0; f < sWCCharList.length; f++) {
								var sWCVal = {
									"Arbpl": AIWListWCData[i].wc,
									"Werks": AIWListWCData[i].plant,
									"Atnam": sWCCharList[f].Atnam,
									"Textbez": sWCCharList[f].Textbez,
									"Atwrt": sWCCharList[f].Atwrt,
									"Class": sWCCharList[f].Class
								};
								sPayload.ValueWC.push(sWCVal);
							}
						}
					}

				}
			}

			if (AIWListGTLData.length > 0) {
				for (var i = 0; i < AIWListGTLData.length; i++) {
					if (AIWListGTLData[i].header) {
						for (var j = 0; j < AIWListGTLData[i].header.length; j++) {
							if (AIWListGTLData[i].header[j].Iwerk !== "") {
								AIWListGTLData[i].header[j].Werks = AIWListGTLData[i].header[j].Iwerk;
							}
							var gtList = {
								"Werks": AIWListGTLData[i].header[j].Werks,
								"Wcplant": AIWListGTLData[i].header[j].plant,
								"Statu": AIWListGTLData[i].header[j].Statu,
								"Tverwe": AIWListGTLData[i].header[j].tlusg,
								"Ktext": AIWListGTLData[i].header[j].Ktext,
								"Tarbpl": AIWListGTLData[i].header[j].wc,
								"Vagrp": AIWListGTLData[i].header[j].Vagrp,
								"Anlzu": AIWListGTLData[i].header[j].Anlzu,
								"Tplnal": (AIWListGTLData[i].header[j].Plnal).toString(),
								"Tlgnhdr": AIWListGTLData[i].grp,
								"Strat": AIWListGTLData[i].header[j].Strat,
								"Datuv": this._formatDate(AIWListGTLData[i].validFrm),
								// "Type": AIWListGTLData[i].modeflag === "Crt"?true:false
							};
							sPayload.GTList.push(gtList);
						}
					}

					if (AIWListGTLData[i].operation) {
						for (var k = 0; k < AIWListGTLData[i].operation.length; k++) {
							var gtlOpr = {
								"Tlgnhdr": AIWListGTLData[i].grp,
								"Vornr": AIWListGTLData[i].operation[k].Vornr,
								"TlArbpl": AIWListGTLData[i].operation[k].Arbpl,
								"Werks2gop": AIWListGTLData[i].operation[k].Werks,
								"Steus2gop": AIWListGTLData[i].operation[k].Steus,
								"Ltxa1": AIWListGTLData[i].operation[k].Ltxa1,
								"Arbei": AIWListGTLData[i].operation[k].Arbei,
								"Dauno": AIWListGTLData[i].operation[k].Dauno,
								"Arbeh": AIWListGTLData[i].operation[k].Arbeh,
								"Anzzl": AIWListGTLData[i].operation[k].Anzzl,
								"Daune": AIWListGTLData[i].operation[k].Daune,
								"Indet": AIWListGTLData[i].operation[k].Indet,
								"Tplnal": (AIWListGTLData[i].operation[k].Plnal).toString(),
								"Uvorn": AIWListGTLData[i].operation[k].Uvorn,
								"Larnt2gop": AIWListGTLData[i].operation[k].Larnt,
								"Prznt": AIWListGTLData[i].operation[k].workPerc === "" ? 0 : parseFloat(AIWListGTLData[i].operation[k].workPerc),
								"Bmvrg": AIWListGTLData[i].operation[k].orderQty,
								"Bmeih": AIWListGTLData[i].operation[k].ordQtyUnit,
								"Opreis": AIWListGTLData[i].operation[k].netPrice === "" ? "0.000" : parseFloat(AIWListGTLData[i].operation[k].netPrice).toFixed(
									3).toString(),
								"Owaers": AIWListGTLData[i].operation[k].currency,
								"Opeinh": AIWListGTLData[i].operation[k].priceUnit === "" ? "0.000" : parseFloat(AIWListGTLData[i].operation[k].priceUnit).toFixed(
									3).toString(),
								"Sakto2gop": AIWListGTLData[i].operation[k].costElement,
								"Omatkl": AIWListGTLData[i].operation[k].materialGrp,
								"Oekgrp": AIWListGTLData[i].operation[k].puchGroup,
								"Ekorg": AIWListGTLData[i].operation[k].purchOrg,
								"EqunrGop": AIWListGTLData[i].operation[k].equi,
								"TplnrGop": AIWListGTLData[i].operation[k].floc,
							};
							sPayload.GTOprs.push(gtlOpr);

							for (var z = 0; z < AIWListGTLData[i].operation[k].OprRel.length; z++) {
								var selObj = AIWListGTLData[i].operation[k].OprRel[z];
								var oOprRel = {
									Tlgnhdr: AIWListGTLData[i].grp, //this.currentObj.grp,
									Tplnal: selObj.Plnal,
									Vorn2: selObj.Vornr,
									Vornrgrel: selObj.OperationOR,
									Dauer: selObj.Offset,
									Zeinh: selObj.OUn,
									Aobar: selObj.RelType,
									Gprznt: selObj.PO,
									Provg: selObj.OI,
									Gkalid: selObj.ID,
									Arbplgrel: selObj.WrkCtrOR,
									Werksgrel: selObj.PlantOR,
								};
								sPayload.GTRel.push(oOprRel);
							}

							for (var z = 0; z < AIWListGTLData[i].operation[k].SrvPckgOvrw.length; z++) {
								var selObj = AIWListGTLData[i].operation[k].SrvPckgOvrw[z];
								var svObj = {
									Tlgnhdr: AIWListGTLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal,
									Vornrr: selObj.Vornr,
									SrvLine: selObj.LineNum,
									Del: formatter.truetoX(selObj.DelIndSP),
									Srvpos: selObj.ActNum,
									Ktext1: selObj.ShrtTxt,
									Mengegspk: selObj.Qty,
									Meinsgspk: selObj.BUomSP,
									Tbtwr: selObj.GrossPrc,
									Waersgspk: selObj.CurKey,
									IntWork: selObj.Work,
									Iwein: selObj.UnitOfWork,
								};
								sPayload.GTSpack.push(svObj);
							}

							for (var z = 0; z < AIWListGTLData[i].operation[k].PRT.length; z++) {
								var selObj = AIWListGTLData[i].operation[k].PRT[z];
								var prtObj = {
									Tlgnhdr: AIWListGTLData[i].grp, //selObj.grp,
									Tplnal: selObj.Plnal,
									Vornrgprt: selObj.Vornr,
									Psnfh: selObj.ItmNum,
									Fhmar: selObj.ItmCat,
									// Fhmnr: selObj.PRT,
									Matnrgprt: selObj.Mat,
									EqunrGpt: selObj.Equi,
									Eqpnt: selObj.Mspt,
									Doknrgprt: selObj.doc,
									Dokargprt: selObj.docType,
									Doktlgprt: selObj.docPart,
									Dokvrgprt: selObj.docVersion,
									Fhmnr: selObj.Othr,
									Fhwrk: selObj.Plant, //PRTDesc,
									Mgvgw: selObj.Qty,
									Mgeinh: selObj.UOM,
									Mgform: selObj.QtyFrmla,
									Steuf: selObj.PRTCtrl,
									Stftxt: selObj.PRTCtrlDesc,
									Ewvgw: selObj.StdUsgVal,
									Eweinh: selObj.StdUsgUOM,
									Ewform: selObj.UsgValFrmla,
								};
								sPayload.GTPRT.push(prtObj);
							}

							for (var z = 0; z < AIWListGTLData[i].operation[k].InspChar.length; z++) {
								var selObj = AIWListGTLData[i].operation[k].InspChar[z];
								var inspObj = {
									Tlgnhdr: AIWListGTLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal,
									Vornrgins: selObj.Vornr,
									Merknr: selObj.InspChar,
									Vste2gins: selObj.PrstInd,
									Quantitat: formatter.truetoX(selObj.QuanChar),
									QpmkRef: formatter.truetoX(selObj.QualChar),
									Verw2gins: selObj.MastInspChar,
									Uzae2tlgn: selObj.Plant,
									Mkv2tlgni: selObj.Version, //Ver2tlgni
									Kurztext: selObj.ShrtTxt,
									Pmth2gins: selObj.InspMthd,
									Qwe2tlgni: selObj.InspMthdPlnt,
									Toleranzs: selObj.TolKey,
									Ver2tlgni: selObj.VrsnInspMthd, //Pmtversio
									Stichprve: selObj.SampProc,
									Probemgeh: selObj.SampUOM,
									Pruefeinh: selObj.BaseSampQty === "" ? "0.00" : parseFloat(selObj.BaseSampQty).toFixed(2),
									Auswmenge: selObj.CodeGrp,
								};
								sPayload.GTInsp.push(inspObj);
							}
						}
					}

					if (AIWListGTLData[i].MaintPckg && AIWListGTLData[i].MaintPckg.length > 0) {
						for (var z = 0; z < AIWListGTLData[i].MaintPckg.length; z++) {
							if (AIWListGTLData[i].MaintPckg[z].MPArr && AIWListGTLData[i].MaintPckg[z].MPArr.length > 0) {
								for (var y = 0; y < AIWListGTLData[i].MaintPckg[z].MPArr.length; y++) {
									var curObj = AIWListGTLData[i].MaintPckg[z].MPArr[y];
									var moObj = {
										// Gplnkn: curObj.Gplnkn,
										// IsSelected: curObj.IsSelected,
										Ktex1: curObj.Ktex1,
										Ktxhi: curObj.Ktxhi,
										Kzyk1: curObj.Kzyk1,
										// Paket: curObj.IsSelected,
										Paketgmpk: curObj.Paket,
										Startgmpk: curObj.Strat,
										// Strat: curObj.Strat,
										Tlgnhdr: AIWListGTLData[i].grp, //this.currentObj.grp,
										Tplnal: curObj.Plnal.toString(),
										// Uzaehl: curObj.Uzaehl,
										Vorn2gmpk: curObj.Vornr,
										// Vornr: curObj.IsSelected,
									};
								}
								sPayload.GTMPack.push(moObj);
							}
						}
					}

					if (AIWListGTLData[i].component) {
						for (var l = 0; l < AIWListGTLData[i].component.length; l++) {
							var gtlComp = {
								"Tlgnhdr": AIWListGTLData[i].grp,
								"Idnrk": AIWListGTLData[i].component[l].Idnrk,
								"Menge": AIWListGTLData[i].component[l].Menge,
								"MeinsGcp": AIWListGTLData[i].component[l].MeinsGcp,
								"Vornr": AIWListGTLData[i].component[l].Vornr,
								"Postp": AIWListGTLData[i].component[l].Postp,
								"Tplnal": (AIWListGTLData[i].component[l].Plnal).toString()
							};
							sPayload.GTComp.push(gtlComp);
						}
					}

					if (AIWListGTLData[i].Class) {
						for (var m = 0; m < AIWListGTLData[i].Class.length; m++) {
							var gtlClass = {
								"Tlgnhdr": AIWListGTLData[i].grp,
								"Classtype": AIWListGTLData[i].Class[m].Classtype,
								"Class": AIWListGTLData[i].Class[m].Class,
								"Clstatus1": AIWListGTLData[i].Class[m].Clstatus1,
								"Tplnal": (AIWListGTLData[i].Class[m].Plnal).toString()
							};
							sPayload.GTClass.push(gtlClass);
						}
					}

					if (AIWListGTLData[i].Char) {
						for (var n = 0; n < AIWListGTLData[i].Char.length; n++) {
							for (var k = 0; k < AIWListGTLData[i].Class.length; k++) {
								if (AIWListGTLData[i].Class[k].Class === AIWListGTLData[i].Char[n].Class) {
									AIWListGTLData[i].Char[n].Plnal = AIWListGTLData[i].Class[k].Plnal;
								}
							}
							var gtlChar = {
								"Tlgnhdr": AIWListGTLData[i].grp,
								"Atnam": AIWListGTLData[i].Char[n].Atnam,
								"Textbez": AIWListGTLData[i].Char[n].Textbez,
								"Atwrt": AIWListGTLData[i].Char[n].Atwrt,
								"Class": AIWListGTLData[i].Char[n].Class,
								"Tplnal": (AIWListGTLData[i].Char[n].Plnal).toString()
							};
							sPayload.GTVal.push(gtlChar);
						}
					}
				}
			}

			if (AIWListETLData.length > 0) {
				for (var i = 0; i < AIWListETLData.length; i++) {
					if (AIWListETLData[i].header) {
						for (var j = 0; j < AIWListETLData[i].header.length; j++) {
							if (AIWListETLData[i].header[j].Iwerk !== "") {
								AIWListETLData[i].header[j].Werks = AIWListETLData[i].header[j].Iwerk;
							}
							var etList = {
								"Werks": AIWListETLData[i].header[j].Werks,
								"Wcplant": AIWListETLData[i].header[j].plant,
								"Statu": AIWListETLData[i].header[j].Statu,
								"Tverwe": AIWListETLData[i].header[j].tlusg,
								"Ktext": AIWListETLData[i].header[j].Ktext,
								"Tarbpl": AIWListETLData[i].header[j].wc,
								"Vagrp": AIWListETLData[i].header[j].Vagrp,
								"Anlzu": AIWListETLData[i].header[j].Anlzu,
								"Tplnal": (AIWListETLData[i].header[j].Plnal).toString(),
								"Tleqhdr": AIWListETLData[i].grp,
								"Strat": AIWListETLData[i].header[j].Strat,
								"Eq2tl": AIWListETLData[i].header[j].equipment,
								"Datuv": this._formatDate(AIWListETLData[i].validFrm),
								// "Type": AIWListETLData[i].modeflag === "Crt"?true:false
							};
							sPayload.ETList.push(etList);
						}
					}

					if (AIWListETLData[i].operation) {
						for (var k = 0; k < AIWListETLData[i].operation.length; k++) {
							var etlOpr = {
								"Tleqhdr": AIWListETLData[i].grp,
								"Vornr": AIWListETLData[i].operation[k].Vornr,
								"TlArbpl": AIWListETLData[i].operation[k].Arbpl,
								"Werks2eop": AIWListETLData[i].operation[k].Werks,
								"Steus2eop": AIWListETLData[i].operation[k].Steus,
								"Ltxa1": AIWListETLData[i].operation[k].Ltxa1,
								"Arbei": AIWListETLData[i].operation[k].Arbei,
								"Dauno": AIWListETLData[i].operation[k].Dauno,
								"Arbeh": AIWListETLData[i].operation[k].Arbeh,
								"Anzzl": AIWListETLData[i].operation[k].Anzzl,
								"Daune": AIWListETLData[i].operation[k].Daune,
								"Indet": AIWListETLData[i].operation[k].Indet,
								"Tplnal": (AIWListETLData[i].operation[k].Plnal).toString(),
								"Uvorn": AIWListETLData[i].operation[k].Uvorn,
								"Larnt2eop": AIWListETLData[i].operation[k].Larnt,
								"Prznt": AIWListETLData[i].operation[k].workPerc === "" ? 0 : parseFloat(AIWListETLData[i].operation[k].workPerc),
								"Bmvrg": AIWListETLData[i].operation[k].orderQty,
								"Bmeih": AIWListETLData[i].operation[k].ordQtyUnit,
								"Opreis": AIWListETLData[i].operation[k].netPrice === "" ? "0.000" : parseFloat(AIWListETLData[i].operation[k].netPrice).toFixed(
									3).toString(),
								"Owaers": AIWListETLData[i].operation[k].currency,
								"Opeinh": AIWListETLData[i].operation[k].priceUnit === "" ? "0.000" : parseFloat(AIWListETLData[i].operation[k].priceUnit).toFixed(
									3).toString(),
								"Sakto2eop": AIWListETLData[i].operation[k].costElement,
								"Omatkl": AIWListETLData[i].operation[k].materialGrp,
								"Oekgrp": AIWListETLData[i].operation[k].puchGroup,
								"Ekorg": AIWListETLData[i].operation[k].purchOrg,
								"EqunrEop": AIWListETLData[i].operation[k].equi,
								"TplnrEop": AIWListETLData[i].operation[k].floc,
							};
							sPayload.ETOprs.push(etlOpr);

							for (var z = 0; z < AIWListETLData[i].operation[k].OprRel.length; z++) {
								var selObj = AIWListETLData[i].operation[k].OprRel[z];
								var oOprRel = {
									Tleqhdr: AIWListETLData[i].grp, //this.currentObj.grp,
									Tplnal: selObj.Plnal,
									Vorn2: selObj.Vornr,
									Vornrerel: selObj.OperationOR,
									Dauer: selObj.Offset,
									Zeinh: selObj.OUn,
									Aobar: selObj.RelType,
									Eprznt: selObj.PO,
									Provg: selObj.OI,
									Ekalid: selObj.ID,
									Arbplerel: selObj.WrkCtrOR,
									Werkserel: selObj.PlantOR,
								};
								sPayload.ETRel.push(oOprRel);
							}

							for (var z = 0; z < AIWListETLData[i].operation[k].SrvPckgOvrw.length; z++) {
								var selObj = AIWListETLData[i].operation[k].SrvPckgOvrw[z];
								var svObj = {
									Tleqhdr: AIWListETLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal,
									Vornrr: selObj.Vornr,
									SrvLine: selObj.LineNum,
									Del: formatter.truetoX(selObj.DelIndSP),
									Srvpos: selObj.ActNum,
									Ktext1: selObj.ShrtTxt,
									Mengeespk: selObj.Qty,
									Meinsespk: selObj.BUomSP,
									Tbtwr: selObj.GrossPrc,
									Waersespk: selObj.CurKey,
									IntWork: selObj.Work,
									Iwein: selObj.UnitOfWork,
								};
								sPayload.ETSpack.push(svObj);
							}

							for (var z = 0; z < AIWListETLData[i].operation[k].PRT.length; z++) {
								var selObj = AIWListETLData[i].operation[k].PRT[z];
								var prtObj = {
									Tleqhdr: AIWListETLData[i].grp, //selObj.grp,
									Tplnal: selObj.Plnal,
									Vornreprt: selObj.Vornr,
									Psnfh: selObj.ItmNum,
									Fhmar: selObj.ItmCat,
									// Fhmnr: selObj.PRT,
									Matnreprt: selObj.Mat,
									EqunrEpt: selObj.Equi,
									Eqpnt: selObj.Mspt,
									Doknreprt: selObj.doc,
									Dokareprt: selObj.docType,
									Doktleprt: selObj.docPart,
									Dokvreprt: selObj.docVersion,
									Fhmnr: selObj.Othr,
									Fhwrk: selObj.Plant, //PRTDesc,
									Mgvgw: selObj.Qty,
									Mgeinh: selObj.UOM,
									Mgform: selObj.QtyFrmla,
									Steuf: selObj.PRTCtrl,
									Stftxt: selObj.PRTCtrlDesc,
									Ewvgw: selObj.StdUsgVal,
									Eweinh: selObj.StdUsgUOM,
									Ewform: selObj.UsgValFrmla,
								};
								sPayload.ETPRT.push(prtObj);
							}

							for (var z = 0; z < AIWListETLData[i].operation[k].InspChar.length; z++) {
								var selObj = AIWListETLData[i].operation[k].InspChar[z];
								var inspObj = {
									Tleqhdr: AIWListETLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal,
									Vornreins: selObj.Vornr,
									Merknr: selObj.InspChar,
									Vste2eins: selObj.PrstInd,
									Quantitat: formatter.truetoX(selObj.QuanChar),
									QpmkRef: formatter.truetoX(selObj.QualChar),
									Verw2eins: selObj.MastInspChar,
									Uzae2tlen: selObj.Plant,
									Mkv2tleni: selObj.Version, //Ver2tleqi
									Kurztext: selObj.ShrtTxt,
									Pmth2eins: selObj.InspMthd,
									Qwe2tleqi: selObj.InspMthdPlnt,
									Toleranzs: selObj.TolKey,
									Ver2tleqi: selObj.VrsnInspMthd, //Pmtversio
									Stichprve: selObj.SampProc,
									Probemgeh: selObj.SampUOM,
									Pruefeinh: selObj.BaseSampQty === "" ? "0.00" : parseFloat(selObj.BaseSampQty).toFixed(2),
									Auswmenge: selObj.CodeGrp,
								};
								sPayload.ETInsp.push(inspObj);
							}
						}
					}

					if (AIWListETLData[i].MaintPckg && AIWListETLData[i].MaintPckg.length > 0) {
						for (var z = 0; z < AIWListETLData[i].MaintPckg.length; z++) {
							if (AIWListETLData[i].MaintPckg[z].MPArr && AIWListETLData[i].MaintPckg[z].MPArr.length > 0) {
								for (var y = 0; y < AIWListETLData[i].MaintPckg[z].MPArr.length; y++) {
									var curObj = AIWListETLData[i].MaintPckg[z].MPArr[y];
									var moObj = {
										// Gplnkn: curObj.Gplnkn,
										// IsSelected: curObj.IsSelected,
										Ktex1: curObj.Ktex1,
										Ktxhi: curObj.Ktxhi,
										Kzyk1: curObj.Kzyk1,
										// Paket: curObj.IsSelected,
										Paketempk: curObj.Paket,
										Startempk: curObj.Strat,
										// Strat: curObj.Strat,
										Tleqhdr: AIWLisETLData[i].grp, //this.currentObj.grp,
										Tplnal: curObj.Plnal.toString(),
										// Uzaehl: curObj.Uzaehl,
										Vorn2empk: curObj.Vornr,
										// Vornr: curObj.IsSelected,
									};
								}
								sPayload.ETMPack.push(moObj);
							}
						}
					}

					if (AIWListETLData[i].component) {
						for (var l = 0; l < AIWListETLData[i].component.length; l++) {
							var etlComp = {
								"Tleqhdr": AIWListETLData[i].grp,
								"Idnrk": AIWListETLData[i].component[l].Idnrk,
								"Menge": AIWListETLData[i].component[l].Menge,
								"MeinsEcp": AIWListETLData[i].component[l].MeinsGcp,
								"Vornr": AIWListETLData[i].component[l].Vornr,
								"Postp": AIWListETLData[i].component[l].Postp,
								"Tplnal": (AIWListETLData[i].component[l].Plnal).toString()
							};
							sPayload.ETComp.push(etlComp);
						}
					}

					if (AIWListETLData[i].Class) {
						for (var m = 0; m < AIWListETLData[i].Class.length; m++) {
							var etlClass = {
								"Tleqhdr": AIWListETLData[i].grp,
								"Classtype": AIWListETLData[i].Class[m].Classtype,
								"Class": AIWListETLData[i].Class[m].Class,
								"Clstatus1": AIWListETLData[i].Class[m].Clstatus1,
								"Tplnal": (AIWListETLData[i].Class[m].Plnal).toString()
							};
							sPayload.ETClass.push(etlClass);
						}
					}

					if (AIWListETLData[i].Char) {
						for (var n = 0; n < AIWListETLData[i].Char.length; n++) {
							for (var k = 0; k < AIWListETLData[i].Class.length; k++) {
								if (AIWListETLData[i].Class[k].Class === AIWListETLData[i].Char[n].Class) {
									AIWListETLData[i].Char[n].Plnal = AIWListETLData[i].Class[k].Plnal;
								}
							}
							var etlChar = {
								"Tleqhdr": AIWListETLData[i].grp,
								"Atnam": AIWListETLData[i].Char[n].Atnam,
								"Textbez": AIWListETLData[i].Char[n].Textbez,
								"Atwrt": AIWListETLData[i].Char[n].Atwrt,
								"Class": AIWListETLData[i].Char[n].Class,
								"Tplnal": (AIWListETLData[i].Char[n].Plnal).toString()
							};
							sPayload.ETVal.push(etlChar);
						}
					}
				}
			}

			if (AIWListFTLData.length > 0) {
				for (var i = 0; i < AIWListFTLData.length; i++) {
					if (AIWListFTLData[i].header) {
						for (var j = 0; j < AIWListFTLData[i].header.length; j++) {
							if (AIWListFTLData[i].header[j].Iwerk !== "") {
								AIWListFTLData[i].header[j].Werks = AIWListFTLData[i].header[j].Iwerk;
							}
							var ftList = {
								"Werks": AIWListFTLData[i].header[j].Werks,
								"Wcplant": AIWListFTLData[i].header[j].plant,
								"Statu": AIWListFTLData[i].header[j].Statu,
								"Tverwe": AIWListFTLData[i].header[j].tlusg,
								"Ktext": AIWListFTLData[i].header[j].Ktext,
								"Tarbpl": AIWListFTLData[i].header[j].wc,
								"Vagrp": AIWListFTLData[i].header[j].Vagrp,
								"Anlzu": AIWListFTLData[i].header[j].Anlzu,
								"Tplnal": (AIWListFTLData[i].header[j].Plnal).toString(),
								"Tlflhdr": AIWListFTLData[i].grp,
								"Strat": AIWListFTLData[i].header[j].Strat,
								"Fl2tl": AIWListFTLData[i].header[j].floc,
								"Datuv": this._formatDate(AIWListFTLData[i].validFrm),
								// "Type": AIWListFTLData[i].modeflag === "Crt"?true:false
							};
							sPayload.FTList.push(ftList);
						}
					}

					if (AIWListFTLData[i].operation) {
						for (var k = 0; k < AIWListFTLData[i].operation.length; k++) {
							var ftlOpr = {
								"Tlflhdr": AIWListFTLData[i].grp,
								"Vornr": AIWListFTLData[i].operation[k].Vornr,
								"TlArbpl": AIWListFTLData[i].operation[k].Arbpl,
								"Werks2fop": AIWListFTLData[i].operation[k].Werks,
								"Steus2fop": AIWListFTLData[i].operation[k].Steus,
								"Ltxa1": AIWListFTLData[i].operation[k].Ltxa1,
								"Arbei": AIWListFTLData[i].operation[k].Arbei,
								"Dauno": AIWListFTLData[i].operation[k].Dauno,
								"Arbeh": AIWListFTLData[i].operation[k].Arbeh,
								"Anzzl": AIWListFTLData[i].operation[k].Anzzl,
								"Daune": AIWListFTLData[i].operation[k].Daune,
								"Indet": AIWListFTLData[i].operation[k].Indet,
								"Tplnal": (AIWListFTLData[i].operation[k].Plnal).toString(),
								"Uvorn": AIWListFTLData[i].operation[k].Uvorn,
								"Larnt2fop": AIWListFTLData[i].operation[k].Larnt,
								"Prznt": AIWListFTLData[i].operation[k].workPerc === "" ? 0 : parseFloat(AIWListFTLData[i].operation[k].workPerc),
								"Bmvrg": AIWListFTLData[i].operation[k].orderQty,
								"Bmeih": AIWListFTLData[i].operation[k].ordQtyUnit,
								"Opreis": AIWListFTLData[i].operation[k].netPrice === "" ? "0.000" : parseFloat(AIWListFTLData[i].operation[k].netPrice).toFixed(
									3).toString(),
								"Owaers": AIWListFTLData[i].operation[k].currency,
								"Opeinh": AIWListFTLData[i].operation[k].priceUnit === "" ? "0.000" : parseFloat(AIWListFTLData[i].operation[k].priceUnit).toFixed(
									3).toString(),
								"Sakto2fop": AIWListFTLData[i].operation[k].costElement,
								"Omatkl": AIWListFTLData[i].operation[k].materialGrp,
								"Oekgrp": AIWListFTLData[i].operation[k].puchGroup,
								"Ekorg": AIWListFTLData[i].operation[k].purchOrg,
								"EqunrFop": AIWListFTLData[i].operation[k].equi,
								"TplnrFop": AIWListFTLData[i].operation[k].floc,
							};
							sPayload.FTOprs.push(ftlOpr);

							for (var z = 0; z < AIWListFTLData[i].operation[k].OprRel.length; z++) {
								var selObj = AIWListFTLData[i].operation[k].OprRel[z];
								var oOprRel = {
									Tlflhdr: AIWListFTLData[i].grp, //this.currentObj.grp,
									Tplnal: selObj.Plnal,
									Vorn2: selObj.Vornr,
									Vornrfrel: selObj.OperationOR,
									Dauer: selObj.Offset,
									Zeinh: selObj.OUn,
									Aobar: selObj.RelType,
									Fprznt: selObj.PO,
									Provg: selObj.OI,
									Fkalid: selObj.ID,
									Arbplfrel: selObj.WrkCtrOR,
									Werksfrel: selObj.PlantOR,
								};
								sPayload.FTRel.push(oOprRel);
							}

							for (var z = 0; z < AIWListFTLData[i].operation[k].SrvPckgOvrw.length; z++) {
								var selObj = AIWListFTLData[i].operation[k].SrvPckgOvrw[z];
								var svObj = {
									Tlflhdr: AIWListFTLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal,
									Vornrr: selObj.Vornr,
									SrvLine: selObj.LineNum,
									Del: formatter.truetoX(selObj.DelIndSP),
									Srvpos: selObj.ActNum,
									Ktext1: selObj.ShrtTxt,
									Mengefspk: selObj.Qty,
									Meinsfspk: selObj.BUomSP,
									Tbtwr: selObj.GrossPrc,
									Waersfspk: selObj.CurKey,
									IntWork: selObj.Work,
									Iwein: selObj.UnitOfWork,
								};
								sPayload.FTSpack.push(svObj);
							}

							for (var z = 0; z < AIWListFTLData[i].operation[k].PRT.length; z++) {
								var selObj = AIWListFTLData[i].operation[k].PRT[z];
								var prtObj = {
									Tlflhdr: AIWListFTLData[i].grp, //selObj.grp,
									Tplnal: selObj.Plnal,
									Vornrfprt: selObj.Vornr,
									Psnfh: selObj.ItmNum,
									Fhmar: selObj.ItmCat,
									// Fhmnr: selObj.PRT,
									Matnrfprt: selObj.Mat,
									EqunrFpt: selObj.Equi,
									Eqpnt: selObj.Mspt,
									Doknrfprt: selObj.doc,
									Dokarfprt: selObj.docType,
									Doktlfprt: selObj.docPart,
									Dokvrfprt: selObj.docVersion,
									Fhmnr: selObj.Othr,
									Fhwrk: selObj.Plant, //PRTDesc,
									Mgvgw: selObj.Qty,
									Mgeinh: selObj.UOM,
									Mgform: selObj.QtyFrmla,
									Steuf: selObj.PRTCtrl,
									Stftxt: selObj.PRTCtrlDesc,
									Ewvgw: selObj.StdUsgVal,
									Eweinh: selObj.StdUsgUOM,
									Ewform: selObj.UsgValFrmla,
								};
								sPayload.FTPRT.push(prtObj);
							}

							for (var z = 0; z < AIWListFTLData[i].operation[k].InspChar.length; z++) {
								var selObj = AIWListFTLData[i].operation[k].InspChar[z];
								var inspObj = {
									Tlflhdr: AIWListFTLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal,
									Vornrfins: selObj.Vornr,
									Merknr: selObj.InspChar,
									Vste2eins: selObj.PrstInd,
									Quantitat: formatter.truetoX(selObj.QuanChar),
									QpmkRef: formatter.truetoX(selObj.QualChar),
									Verw2fins: selObj.MastInspChar,
									Uzae2tlfn: selObj.Plant,
									Mkv2tlfni: selObj.Version, //Ver2tlfli
									Kurztext: selObj.ShrtTxt,
									Pmth2fins: selObj.InspMthd,
									Qwe2tlfli: selObj.InspMthdPlnt,
									Toleranzs: selObj.TolKey,
									Ver2tlfli: selObj.VrsnInspMthd, //Pmtversio
									Stichprve: selObj.SampProc,
									Probemgeh: selObj.SampUOM,
									Pruefeinh: selObj.BaseSampQty === "" ? "0.00" : parseFloat(selObj.BaseSampQty).toFixed(2),
									Auswmenge: selObj.CodeGrp,
								};
								sPayload.FTInsp.push(inspObj);
							}
						}
					}

					if (AIWListFTLData[i].MaintPckg && AIWListFTLData[i].MaintPckg.length > 0) {
						for (var z = 0; z < AIWListFTLData[i].MaintPckg.length; z++) {
							if (AIWListFTLData[i].MaintPckg[z].MPArr && AIWListFTLData[i].MaintPckg[z].MPArr.length > 0) {
								for (var y = 0; y < AIWListFTLData[i].MaintPckg[z].MPArr.length; y++) {
									var curObj = AIWListFTLData[i].MaintPckg[z].MPArr[y];
									var moObj = {
										// Gplnkn: curObj.Gplnkn,
										// IsSelected: curObj.IsSelected,
										Ktex1: curObj.Ktex1,
										Ktxhi: curObj.Ktxhi,
										Kzyk1: curObj.Kzyk1,
										// Paket: curObj.IsSelected,
										Paketfmpk: curObj.Paket,
										Startfmpk: curObj.Strat,
										// Strat: curObj.Strat,
										Tlflhdr: AIWListFTLData[i].grp, //this.currentObj.grp,
										Tplnal: curObj.Plnal.toString(),
										// Uzaehl: curObj.Uzaehl,
										Vorn2fmpk: curObj.Vornr,
										// Vornr: curObj.IsSelected,
									};
								}
								sPayload.FTMPack.push(moObj);
							}
						}
					}

					if (AIWListFTLData[i].component) {
						for (var l = 0; l < AIWListFTLData[i].component.length; l++) {
							var ftlComp = {
								"Tlflhdr": AIWListFTLData[i].grp,
								"Idnrk": AIWListFTLData[i].component[l].Idnrk,
								"Menge": AIWListFTLData[i].component[l].Menge,
								"MeinsFcp": AIWListFTLData[i].component[l].MeinsGcp,
								"Vornr": AIWListFTLData[i].component[l].Vornr,
								"Postp": AIWListFTLData[i].component[l].Postp,
								"Tplnal": (AIWListFTLData[i].component[l].Plnal).toString()
							};
							sPayload.FTComp.push(ftlComp);
						}
					}

					if (AIWListFTLData[i].Class) {
						for (var m = 0; m < AIWListFTLData[i].Class.length; m++) {
							var ftlClass = {
								"Tlflhdr": AIWListFTLData[i].grp,
								"Classtype": AIWListFTLData[i].Class[m].Classtype,
								"Class": AIWListFTLData[i].Class[m].Class,
								"Clstatus1": AIWListFTLData[i].Class[m].Clstatus1,
								"Tplnal": (AIWListFTLData[i].Class[m].Plnal).toString()
							};
							sPayload.FTClass.push(ftlClass);
						}
					}

					if (AIWListFTLData[i].Char) {
						for (var n = 0; n < AIWListFTLData[i].Char.length; n++) {
							for (var k = 0; k < AIWListFTLData[i].Class.length; k++) {
								if (AIWListFTLData[i].Class[k].Class === AIWListFTLData[i].Char[n].Class) {
									AIWListFTLData[i].Char[n].Plnal = AIWListFTLData[i].Class[k].Plnal;
								}
							}
							var ftlChar = {
								"Tlflhdr": AIWListFTLData[i].grp,
								"Atnam": AIWListFTLData[i].Char[n].Atnam,
								"Textbez": AIWListFTLData[i].Char[n].Textbez,
								"Atwrt": AIWListFTLData[i].Char[n].Atwrt,
								"Class": AIWListFTLData[i].Char[n].Class,
								"Tplnal": (AIWListFTLData[i].Char[n].Plnal).toString()
							};
							sPayload.FTVal.push(ftlChar);
						}
					}
				}
			}

			if (AIWListOLData.length > 0) {
				for (var i = 0; i < AIWListOLData.length; i++) {
					var olHeader = {
						"Begru": AIWListOLData[i].autGrp,
						"Objlink": AIWListOLData[i].link,
						"Kanxt": AIWListOLData[i].linkDesc,
						"Eqkant": AIWListOLData[i].linkObjEq,
						"Tpkant": AIWListOLData[i].linkObjFl,
						"Netyp": AIWListOLData[i].linkCat,
						"Eqvon": AIWListOLData[i].linkFrmEq,
						"Tpvon": AIWListOLData[i].linkFrmFl,
						"Eqnach": AIWListOLData[i].linkToEq,
						"Tpnach": AIWListOLData[i].linkToFl,
						"Mediu": AIWListOLData[i].medium,
						"Lfdknr": AIWListOLData[i].linkNum,
						"Kantyp": AIWListOLData[i].objCat,
						"Netid": AIWListOLData[i].netId,
						"Bezarp": AIWListOLData[i].Bezarp,
						"Bezarl": AIWListOLData[i].Bezarl,
						"Datva": formatter._formatDate(AIWListOLData[i].validFrm),
						"Zeitva": formatter._timeConvert(AIWListOLData[i].timeFrm),
						"Datvb": formatter._formatDate(AIWListOLData[i].validTo),
						"Zeitvb": formatter._timeConvert(AIWListOLData[i].timeTo),
						"Stattext": AIWListOLData[i].Stattext,
						"StsmOl": AIWListOLData[i].StsmOl,
						"UstwOl": AIWListOLData[i].UstwOl,
						"UswoOl": AIWListOLData[i].UswoOl,
						"UstaOl": AIWListOLData[i].UstaOl
					};
					sPayload.Olink.push(olHeader);

					if (AIWListOLData[i].Class) {
						for (var j = 0; j < AIWListOLData[i].Class.length; j++) {
							var mClass = {
								"Objlink": AIWListOLData[i].Class[j].Objlink,
								"Classtype": AIWListOLData[i].Class[j].Classtype,
								"Class": AIWListOLData[i].Class[j].Class,
								"Clstatus1": AIWListOLData[i].Class[j].Clstatus1
							};
							sPayload.OLClass.push(mClass);
						}
					}

					if (AIWListOLData[i].Char) {
						for (var k = 0; k < AIWListOLData[i].Char.length; k++) {
							var mChar = {
								"Objlink": AIWListOLData[i].Char[k].Objlink,
								"Atnam": AIWListOLData[i].Char[k].Atnam,
								"Textbez": AIWListOLData[i].Char[k].Textbez,
								"Atwrt": AIWListOLData[i].Char[k].Atwrt,
								"Class": AIWListOLData[i].Char[k].Class
							};
							sPayload.OLVal.push(mChar);
						}
					}

				}
			}

			this.BusyDialog.open();

			var oModel = this.getView().getModel();
			var h = {
				"X-Requested-With": "xmlHTTPrequest"
			};
			oModel.setHeaders(h);
			// if (oEvent.getSource().getId().indexOf("idBtnSave") !== -1) {
			// 	sPayload.IsDraft = true;
			// } else {
			// 	sPayload.IsDraft = false;
			// }
			if (sPayload.FLAddrI.length > 0) {
				sPayload.FLAddrI = $.map(sPayload.FLAddrI, function (obj) {
					return $.extend(true, {}, obj);
				});
				for (var i = 0; i < sPayload.FLAddrI.length > 0; i++) {
					delete sPayload.FLAddrI[i].AdNationEnable;
					delete sPayload.FLAddrI[i].City1iVS;
					delete sPayload.FLAddrI[i].StreetiVS;
				}
			}
			if (sPayload.EqAddrI.length > 0) {
				sPayload.EqAddrI = $.map(sPayload.EqAddrI, function (obj) {
					return $.extend(true, {}, obj);
				});
				for (var i = 0; i < sPayload.EqAddrI.length > 0; i++) {
					delete sPayload.EqAddrI[i].AdNationEnable;
					delete sPayload.EqAddrI[i].City1iVS;
					delete sPayload.EqAddrI[i].StreetiVS;
				}
			}
			oModel.create("/ChangeRequestSet", sPayload, {
				success: function (r) {
					var cr = r;
					// success = true;
					// add this in existing model
					g.BusyDialog.close();
					g.getView().byId("idMessagePopover").setEnabled(false);
					// if (cr.ChangeRequestId !== "0") {
					g.clearData();
					var oMessageList = [];
					for (var e = 0; e < cr.Messages.results.length; e++) {
						oMessageList.push({
							type: formatter.getMessageType(cr.Messages.results[e].Type),
							title: cr.Messages.results[e].Message
						});
					}
					g.createMessagePopover(oMessageList, false);
					// sap.m.MessageToast.show(cr.Message, {
					// 	duration: 6000 // default

					// });
					// g.oMessagePopover.close();
					// }
				},
				error: function (err) {
					g.BusyDialog.close();
					var error = [];
					// oMessageList = [];
					if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
						.errordetails
						.length === 0) {
						error[0] = JSON.parse(err.responseText).error.message.value;
					} else {
						for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
							error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
						}
					}
					var oMessageList = [];
					for (var e = 0; e < error.length; e++) {
						oMessageList.push({
							type: "Error",
							title: error[e]
						});
					}

					g.createMessagePopover(oMessageList, false);
					// var value = error.join("\n");
					// sap.m.MessageBox.show(value, {
					// 	title: "Error",
					// 	icon: sap.m.MessageBox.Icon.ERROR,
					// 	onClose: function () {}
					// });

				}
			});
		},
		/*
		 * This function is invoked when 'Submit' button is clicked
		 * @param {sap.ui.base.Event} oEvent
		 */
		onSubmit: function (oEvent) {
			// EQ/FL
			var g = this;
			var sSourceId = oEvent.getSource().getId();
			var AIWFLOCModel = sap.ui.getCore().getModel(g.oModelAIWFLOC).getData();
			var AIWEQUIModel = sap.ui.getCore().getModel(g.oModelAIWEQUI).getData();
			var AIWMSPTModel = sap.ui.getCore().getModel(g.oModelAIWMSPT).getData();
			var AIWMPMIModel = sap.ui.getCore().getModel(g.oModelAIWMPMI).getData();
			this.MessageList = [];
			this.dataIsEmpty();

			g.handleValidation(oEvent, AIWFLOCModel, AIWEQUIModel, AIWMSPTModel, AIWMPMIModel);

			var AIWListMatData = sap.ui.getCore().getModel("AIWListMatModel").getData();
			var AIWListEqData = sap.ui.getCore().getModel("AIWListEqModel").getData();
			var AIWListFLData = sap.ui.getCore().getModel("AIWListFLModel").getData();
			var AIWListWBSData = sap.ui.getCore().getModel("AIWListWBSModel").getData();
			var AIWListONData = sap.ui.getCore().getModel("AIWListONModel").getData();

			this.handleBOMONValidation(AIWListMatData, AIWListEqData, AIWListFLData, AIWListWBSData, AIWListONData);

			// ON/TL
			var AIWListWCData = sap.ui.getCore().getModel("AIWListWCModel").getData();
			var AIWListGTLData = sap.ui.getCore().getModel("AIWListGTLModel").getData();
			var AIWListETLData = sap.ui.getCore().getModel("AIWListETLModel").getData();
			var AIWListFTLData = sap.ui.getCore().getModel("AIWListFTLModel").getData();
			var AIWListOLData = sap.ui.getCore().getModel("AIWListOLModel").getData();

			this.handleWCTLOLValidation(AIWListWCData, AIWListGTLData, AIWListETLData, AIWListFTLData, AIWListOLData);
			if (this.MessageList.length > 0) {
				this.createMessagePopover(this.MessageList);
			}
			if (!g.errorFlag) {
				return;
			}
			var sPayload = {
				"ChangeRequestType": this.getCrType(),
				"CrDescription": this.getView().byId("Description").getValue(),
				"Duedate": g._formatDate(this.getView().byId("idDueDate").getDateValue()),
				"Priority": this.getView().byId("idPriority").getSelectedKey(),
				"Notes": this.getView().getModel("notes").getData().items,
				"Reason": this.getView().byId("reasonForRequest").getSelectedKey(),
				"Guids": this.oAttach,
				"IsDraft": "",
				"Messages": [],
				"FuncLoc": [],
				"FLAddr": [],
				"FLAddrI": [],
				"FLALTLBEL": [],
				"FLLAM": [],
				"FLClass": [],
				"FLVal": [],
				"Equipment": [],
				"EqAddr": [],
				"EqAddrI": [],
				"EqPRT": [],
				"EqLAM": [],
				"EqDFPS": [],
				"EqClass": [],
				"EqVal": [],
				"MSPoint": [],
				"MSLAM": [],
				"MSClass": [],
				"MSVal": [],
				"MPLAN": [],
				"MPItem": [],
				"MPLAM": [],
				"MPOBList": [],
				"MPCycle": [],
				"ClassMpl": [],
				"ValuaMpl": [],
				"MRBHeader": [],
				"MRBItem": [],
				"MRBSBIT": [],
				"EBHeader": [],
				"EBItem": [],
				"EBSBIT": [],
				"FBHeader": [],
				"FBItem": [],
				"FBSBIT": [],
				"WBHeader": [],
				"WBItem": [],
				"WBSBIT": [],
				"ONetwork": [],
				"ONLAM": [],
				"Workcenter": [],
				"WCCost": [],
				"ClassWC": [],
				"ValueWC": [],
				"GTList": [],
				"GTOprs": [],
				"GTComp": [],
				"GTMPack": [],
				"GTRel": [],
				"GTSpack": [],
				"GTPRT": [],
				"GTInsp": [],
				"GTClass": [],
				"GTVal": [],
				"ETList": [],
				"ETOprs": [],
				"ETComp": [],
				"ETMPack": [],
				"ETRel": [],
				"ETSpack": [],
				"ETPRT": [],
				"ETInsp": [],
				"ETClass": [],
				"ETVal": [],
				"FTList": [],
				"FTOprs": [],
				"FTComp": [],
				"FTMPack": [],
				"FTRel": [],
				"FTSpack": [],
				"FTPRT": [],
				"FTInsp": [],
				"FTClass": [],
				"FTVal": [],
				"Olink": [],
				"OLClass": [],
				"OLVal": [],
				"FLLAMCH": [],
				"EqLAMCH": []

			};

			if (sSourceId.indexOf("idBtnCheck") > -1) {
				sPayload.IsDraft = "C";
			}
			if (this.oAttach.length === 0 || this.oAttach === undefined) {
				delete sPayload.Guids;
			}
			if (AIWFLOCModel.length > 0) {
				var aFLDOI = sap.ui.getCore().getModel("dataOriginMOP").getData().FL;
				for (var a = 0; a < AIWFLOCModel.length; a++) {
					var sFuncLoc = {
						"Tplnr": AIWFLOCModel[a].Functionallocation,
						"Txtmi": AIWFLOCModel[a].Flocdescription, // Floc Description
						"TplkzFlc": AIWFLOCModel[a].Strucindicator,
						"Tplxt": AIWFLOCModel[a].StrucIndicatorDesc,
						"EditMask": AIWFLOCModel[a].EditMask,
						"Hierarchy": AIWFLOCModel[a].Hierarchy,
						"Fltyp": AIWFLOCModel[a].Floccategory,
						"Flttx": AIWFLOCModel[a].FlocCategoryDesc,
						"Swerk": AIWFLOCModel[a].Maintplant,
						"Plantname": AIWFLOCModel[a].MaintplantDesc,
						"StorFloc": AIWFLOCModel[a].Location, // Location
						"Locationdesc": AIWFLOCModel[a].Locationdesc, // Location Description
						"Abckzfloc": AIWFLOCModel[a].Abckz,
						"Abctx": AIWFLOCModel[a].Abctx,
						"Bukrsfloc": AIWFLOCModel[a].Bukrs,
						"Butxt": AIWFLOCModel[a].Butxt,
						"City": AIWFLOCModel[a].City,
						"KostFloc": AIWFLOCModel[a].Kostl, // Cost Center
						"KokrFloc": AIWFLOCModel[a].Kokrs, // ccPart1
						"Contareaname": AIWFLOCModel[a].Mctxt, // Name
						"PlntFloc": AIWFLOCModel[a].Werks, // Planning Plant
						"Planningplantdes": AIWFLOCModel[a].Planningplantdes, // Planning Plant Description
						"Ingrp": AIWFLOCModel[a].Ingrp, // Planner Group
						"Plannergrpdesc": AIWFLOCModel[a].Innam, // Planner Group Description
						"Arbplfloc": AIWFLOCModel[a].Arbpl, // Work Center
						// "Workcenterdesc" : AIWFLOCModel[a].Ktext, // Plant Work Center
						"Wergwfloc": AIWFLOCModel[a].WcWerks, // Name
						"Gewrkfloc": AIWFLOCModel[a].MainArbpl, // Main Work Center
						// "MainWcDesc" : AIWFLOCModel[a].MainKtext, // Work center Plant
						"MainWcPlant": AIWFLOCModel[a].MainWerks, // Work Center Description
						"Tplma": AIWFLOCModel[a].SupFunctionallocation, // Sup FuncLoc
						"Supflocdesc": AIWFLOCModel[a].SupFlocdescription, // Sup FlocDescription
						"BeberFl": AIWFLOCModel[a].BeberFl, // Plant Section
						"Fing": AIWFLOCModel[a].Fing, // Person responsible
						"Tele": AIWFLOCModel[a].Tele, // Phone
						"Submtiflo": AIWFLOCModel[a].ConstrType, // Construction Type
						"Constdesc": AIWFLOCModel[a].ConstructionDesc, // Construction Description
						"Eqart": AIWFLOCModel[a].TechnicalObjectTyp, // TechnicalObjectTyp
						"Eartx": AIWFLOCModel[a].Description, // TechnicalObjectTyp Description
						"Stattext": AIWFLOCModel[a].Stattext, // System Status
						"StsmFloc": AIWFLOCModel[a].StsmEqui, // Status Profile
						"Statproftxt": AIWFLOCModel[a].StsmEquiDesc, // Status Profile Description
						"UstwFloc": AIWFLOCModel[a].UstwEqui, // Status with Status Number
						"UswoFloc": AIWFLOCModel[a].UswoEqui, // Status without Status Number
						"UstaFloc": AIWFLOCModel[a].UstaEqui, // User Status
						"Adrnr": AIWFLOCModel[a].Adrnr,
						"Adrnri": AIWFLOCModel[a].Adrnri,
						"Deact": AIWFLOCModel[a].Deact,
						"Type": AIWFLOCModel[a].viewParameter === "create" ? true : false,
						Modeldesc: AIWFLOCModel[a].Modeldesc,
						Modelref: AIWFLOCModel[a].Modelref,
						Modelrver: AIWFLOCModel[a].Modelrver,
						Modelext: AIWFLOCModel[a].Modelext,
						Modelname: AIWFLOCModel[a].Modelname,
						Modelver: AIWFLOCModel[a].Modelver,
					};

					if (aFLDOI && aFLDOI.length > 0) {
						var aDOIFields = aFLDOI[a].DOI;
						// sFuncLoc.Begrui = aDOIFields[0].instLoc ? "H" : "D";
						sFuncLoc.Swerki = aDOIFields[0].instLoc ? "H" : (aDOIFields[0].maintenance ? "D" : "");
						sFuncLoc.Storti = aDOIFields[1].instLoc ? "H" : (aDOIFields[1].maintenance ? "D" : "");
						// sFuncLoc.Msgrpi = aDOIFields[3].instLoc ? "H" : "D";
						sFuncLoc.Beberi = aDOIFields[2].instLoc ? "H" : (aDOIFields[2].maintenance ? "D" : "");
						sFuncLoc.Ppsidi = aDOIFields[3].instLoc ? "H" : (aDOIFields[3].maintenance ? "D" : "");
						sFuncLoc.Abckzi = aDOIFields[4].instLoc ? "H" : (aDOIFields[4].maintenance ? "D" : "");
						sFuncLoc.Bukrsi = aDOIFields[5].instLoc ? "H" : (aDOIFields[5].maintenance ? "D" : "");
						// sFuncLoc.Gsberi = aDOIFields[8].instLoc ? "H" : "D";
						// sFuncLoc.Anlnri = aDOIFields[9].instLoc ? "H" : "D";
						// sFuncLoc.Anlnri = aDOIFields[10].instLoc ? "H" : "D";
						sFuncLoc.Kostli = aDOIFields[6].instLoc ? "H" : (aDOIFields[6].maintenance ? "D" : "");
						sFuncLoc.Kokrsi = aDOIFields[7].instLoc ? "H" : (aDOIFields[7].maintenance ? "D" : "");
						// sFuncLoc.Proidi = aDOIFields[13].instLoc ? "H" : "D";
						// sFuncLoc.Daufni = aDOIFields[14].instLoc ? "H" : "D";
						// sFuncLoc.Aufnri = aDOIFields[15].instLoc ? "H" : "D";
						sFuncLoc.Iwerki = aDOIFields[8].instLoc ? "H" : (aDOIFields[8].maintenance ? "D" : "");
						sFuncLoc.Ingrpi = aDOIFields[9].instLoc ? "H" : (aDOIFields[9].maintenance ? "D" : "");
						sFuncLoc.Lgwidi = aDOIFields[10].instLoc ? "H" : (aDOIFields[10].maintenance ? "D" : "");
						// sFuncLoc.Swerki = aDOIFields[19].instLoc ? "H" : "D";
						// sFuncLoc.RbnrI = aDOIFields[20].instLoc ? "H" : "D";
						// sFuncLoc.Submti = aDOIFields[21].instLoc ? "H" : "D";
						// sFuncLoc.Einzli = aDOIFields[22].instLoc ? "H" : "D";
						// sFuncLoc.Iequii = aDOIFields[23].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[24].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[25].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[26].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[27].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[28].instLoc ? "H" : "D";
						sFuncLoc.Adrnri = aDOIFields[12].instLoc ? "H" : (aDOIFields[12].maintenance ? "D" : "");
					}

					sPayload.FuncLoc.push(sFuncLoc);

					var sFLAddr = {
						"Funcloc": AIWFLOCModel[a].Functionallocation,
						"Title": AIWFLOCModel[a].TitleCode,
						"Name1": AIWFLOCModel[a].Name1,
						"Name2": AIWFLOCModel[a].Name2,
						"Name3": AIWFLOCModel[a].Name3,
						"Name4": AIWFLOCModel[a].Name4,
						"Sort1": AIWFLOCModel[a].Sort1,
						"Sort2": AIWFLOCModel[a].Sort2,
						"NameCo": AIWFLOCModel[a].NameCo,
						"PostCod1": AIWFLOCModel[a].PostCod1,
						"City1": AIWFLOCModel[a].City1,
						"Building": AIWFLOCModel[a].Building,
						"Floor": AIWFLOCModel[a].Floor,
						"Roomnum": AIWFLOCModel[a].Roomnum,
						"Strsuppl1": AIWFLOCModel[a].Strsuppl1,
						"Strsuppl2": AIWFLOCModel[a].Strsuppl2,
						"Strsuppl3": AIWFLOCModel[a].Strsuppl3,
						"Location": AIWFLOCModel[a].AddrLocation,
						"RPostafl": AIWFLOCModel[a].RefPosta,
						"Landx": AIWFLOCModel[a].Landx,
						"TimeZone": AIWFLOCModel[a].TimeZone,
						"RPostFl": AIWFLOCModel[a].Region,
						"Regiotxt": AIWFLOCModel[a].RegionDesc
					};
					sPayload.FLAddr.push(sFLAddr);

					var aIntlAddr = AIWFLOCModel[a].intlAddr;
					if (aIntlAddr) {
						for (var z = 0; z < aIntlAddr.length; z++) {
							sPayload.FLAddrI.push(aIntlAddr[z]);
						}
					}

					if (g.AltLblDerv === "2" && AIWFLOCModel[a].altlbl) {
						for (var y = 0; y < AIWFLOCModel[a].altlbl.length; y++) {
							var oAltLbl = {
								"Funcloc": AIWFLOCModel[a].Functionallocation,
								"AltAlkey": AIWFLOCModel[a].altlbl[y].AltAlkey,
								"AltStrno": AIWFLOCModel[a].altlbl[y].AltStrno,
								"AltTplkz": AIWFLOCModel[a].altlbl[y].AltTplkz
							};
							sPayload.FLALTLBEL.push(oAltLbl);
						}
					}

					if (AIWFLOCModel[a].Floccategory === "L" && AIWFLOCModel[a].lam) {
						var sFLLAM = {
							"Funcloc": AIWFLOCModel[a].Functionallocation,
							"Lrpid": AIWFLOCModel[a].lam.Lrpid,
							"Strtptatr": AIWFLOCModel[a].lam.Strtptatr,
							"Endptatr": AIWFLOCModel[a].lam.Endptatr,
							"Length": AIWFLOCModel[a].lam.Length,
							"LinUnit": AIWFLOCModel[a].lam.LinUnit,
							"Startmrkr": AIWFLOCModel[a].lam.Startmrkr,
							"Endmrkr": AIWFLOCModel[a].lam.Endmrkr,
							"Mrkdisst": AIWFLOCModel[a].lam.Mrkdisst,
							"Mrkdisend": AIWFLOCModel[a].lam.Mrkdisend,
							"MrkrUnit": AIWFLOCModel[a].lam.MrkrUnit
						};
						sPayload.FLLAM.push(sFLLAM);
					}

					var sFLClassList = AIWFLOCModel[a].classItems;
					if (sFLClassList) {
						if (sFLClassList.length > 0) {
							for (var b = 0; b < sFLClassList.length; b++) {
								var sFLClass = {
									"Funcloc": AIWFLOCModel[a].Functionallocation,
									"Classtype": sFLClassList[b].Classtype,
									"Class": sFLClassList[b].Class,
									"Clstatus1": sFLClassList[b].Clstatus1
								};
								sPayload.FLClass.push(sFLClass);
							}
						}
					}

					var sFLCharList = AIWFLOCModel[a].characteristics;
					if (sFLCharList) {
						if (sFLCharList.length > 0) {
							for (var c = 0; c < sFLCharList.length; c++) {
								var sFLVal = {
									"Funcloc": AIWFLOCModel[a].Functionallocation,
									"Atnam": sFLCharList[c].Atnam,
									"Textbez": sFLCharList[c].Textbez,
									"Atwrt": sFLCharList[c].Atwrt,
									"Class": sFLCharList[c].Class
								};
								sPayload.FLVal.push(sFLVal);
							}
						}
					}

					var aFLLinChar = AIWFLOCModel[a].linearChar;
					if (aFLLinChar) {
						if (aFLLinChar.length > 0) {
							var alinearChar = $.map(aFLLinChar, function (obj) {
								return $.extend(true, {}, obj);
							});
							for (var c = 0; c < alinearChar.length; c++) {
								delete alinearChar[c].linCharEnable;
								alinearChar[c].Funcloc = AIWFLOCModel[a].Functionallocation;
								sPayload.FLLAMCH.push(alinearChar[c]);
							}
						}
					}
				}
			}

			if (AIWEQUIModel.length > 0) {
				var aEQDOI = sap.ui.getCore().getModel("dataOriginMOP").getData().EQ;
				for (var d = 0; d < AIWEQUIModel.length; d++) {
					var sEquipment = {
						"Herst": AIWEQUIModel[d].Herst, // Manufacturer
						"Equnr": AIWEQUIModel[d].Equnr,
						"Txtmi": AIWEQUIModel[d].Eqktx,
						//"Eqktx" : AIWEQUIModel[d].Eqktx,
						"Swerk": AIWEQUIModel[d].Maintplant,
						"Name1": AIWEQUIModel[d].MaintplantDesc,
						"TplnEilo": AIWEQUIModel[d].Tplnr,
						"Flocdescription": AIWEQUIModel[d].Pltxt,
						"Eqtyp": AIWEQUIModel[d].EquipmentCatogory,
						"Etytx": AIWEQUIModel[d].EquipCatgDescription,
						"Eqart": AIWEQUIModel[d].TechnicalObjectTyp, // TechnicalObjectTyp
						"Eartx": AIWEQUIModel[d].Description, // TechnicalObjectTyp Description
						"Typbz": AIWEQUIModel[d].Typbz, // Model Number
						"SubmEeqz": AIWEQUIModel[d].ConstrType, // Construction Type
						"Constdesc": AIWEQUIModel[d].ConstructionDesc, // Construction Description
						"BukrEilo": AIWEQUIModel[d].Bukrs,
						"Butxt": AIWEQUIModel[d].Butxt,
						"HequEeqz": AIWEQUIModel[d].SuperordinateEquip, // Superord. Equipment
						"SuperordEqDes": AIWEQUIModel[d].SuperordinateEquipDesc, // Superord. Equipment Description
						"TidnEeqz": AIWEQUIModel[d].TechIdNum, // techIndNo
						"KostEilo": AIWEQUIModel[d].Kostl, // Cost Center
						"KokrEilo": AIWEQUIModel[d].Kokrs, // ccPart1
						"Contareaname": AIWEQUIModel[d].Mctxt, // Name
						"StorEilo": AIWEQUIModel[d].Location,
						"Locationdesc": AIWEQUIModel[d].Locationdesc,
						"AbckEilo": AIWEQUIModel[d].Abckz,
						"Abctx": AIWEQUIModel[d].Abctx,
						"PplaEeqz": AIWEQUIModel[d].Werks, // Planning Plant
						"Planningplantdes": AIWEQUIModel[d].Planningplantdes, // Planning Plant Description
						"IngrEeqz": AIWEQUIModel[d].Ingrp, // Planner Group
						"Plannergrpdesc": AIWEQUIModel[d].Innam, // Planner Group Description
						"Serge": AIWEQUIModel[d].Serge, // manfSerNo
						"MapaEeqz": AIWEQUIModel[d].MapaEeqz, // partNum
						"Stattext": AIWEQUIModel[d].Stattext, // System Status
						"StsmEqui": AIWEQUIModel[d].StsmEqui, // Status Profile
						"Statproftxt": AIWEQUIModel[d].StsmEquiDesc, // Status Profile Description
						"UstwEqui": AIWEQUIModel[d].UstwEqui, // Status with Status Number
						"UswoEqui": AIWEQUIModel[d].UswoEqui, // Status without Status Number
						"UstaEqui": AIWEQUIModel[d].UstaEqui, // User Status
						"Deact": AIWEQUIModel[d].Deact,
						"Answt": AIWEQUIModel[d].Answt,
						"Ansdt": g._formatDate(AIWEQUIModel[d].Ansdt),
						"Waers": AIWEQUIModel[d].Waers, // Currency

						"ArbpEilo": AIWEQUIModel[d].Arbpl, // Work Center
						// "Workcenterdesc" : AIWEQUIModel[d].Ktext, // Plant Work Center
						"WorkCenterPlant": AIWEQUIModel[d].WcWerks, // Name
						"ArbpEeqz": AIWEQUIModel[d].MainArbpl, // Main Work Center
						// "MainWcDesc" : AIWEQUIModel[d].MainKtext, // Work Center Description
						"MainWcPlant": AIWEQUIModel[d].MainWerks, // Work center Plant

						"BebeEilo": AIWEQUIModel[d].BeberFl, // Plant Section
						"Fing": AIWEQUIModel[d].Fing, // Plant Section
						"Tele": AIWEQUIModel[d].Tele, // Plant Section
						"HeqnEeqz": AIWEQUIModel[d].EquipPosition, // Position
						"Adrnr": AIWEQUIModel[d].Adrnr,
						"Adrnri": AIWEQUIModel[d].Adrnri,

						"Funcid": AIWEQUIModel[d].Funcid, // Config Control data
						"Frcfit": AIWEQUIModel[d].Frcfit,
						"Frcrmv": AIWEQUIModel[d].Frcrmv,
						"Modelid": "",
						"Type": AIWEQUIModel[d].viewParameter === "create" ? true : false,

						Ppeguid: AIWEQUIModel[d].Ppeguid,
					};

					if (aEQDOI && aEQDOI.length > 0) {
						var aDOIFields = aEQDOI[d].DOI;
						// sEquipment.Begrui = aDOIFields[0].instLoc ? "R" : "D";
						sEquipment.Swerki = aDOIFields[0].instLoc ? "R" : (aDOIFields[0].maintenance ? "D" : "");
						sEquipment.Storti = aDOIFields[1].instLoc ? "R" : (aDOIFields[1].maintenance ? "D" : "");
						// sEquipment.Msgrpi = aDOIFields[3].instLoc ? "R" : "D";
						sEquipment.Beberi = aDOIFields[2].instLoc ? "R" : (aDOIFields[2].maintenance ? "D" : "");
						sEquipment.Ppsidi = aDOIFields[3].instLoc ? "R" : (aDOIFields[3].maintenance ? "D" : "");
						sEquipment.Abckzi = aDOIFields[4].instLoc ? "R" : (aDOIFields[4].maintenance ? "D" : "");
						// sEquipment.Eqfnri = aDOIFields[7].instLoc ? "R" : "D";
						// sEquipment.Gsberi = aDOIFields[8].instLoc ? "R" : "D";
						sEquipment.Kostli = aDOIFields[5].instLoc ? "R" : (aDOIFields[5].maintenance ? "D" : "");
						// sEquipment.Proidi = aDOIFields[10].instLoc ? "R" : "D";
						// sEquipment.Daufni = aDOIFields[11].instLoc ? "R" : "D";
						// sEquipment.Aufnri = aDOIFields[12].instLoc ? "R" : "D";
						// sEquipment.Ppsidi = aDOIFields[13].instLoc ? "R" : "D";
						sEquipment.Iwerki = aDOIFields[6].instLoc ? "R" : (aDOIFields[6].maintenance ? "D" : "");
						sEquipment.Ingrpi = aDOIFields[7].instLoc ? "R" : (aDOIFields[7].maintenance ? "D" : "");
						sEquipment.Gewrki = aDOIFields[8].instLoc ? "R" : (aDOIFields[8].maintenance ? "D" : "");
						// sEquipment.Gewrki = aDOIFields[16].instLoc ? "R" : "D";
						// sEquipment.RbnrI = aDOIFields[17].instLoc ? "R" : "D";
						// sEquipment.Vkorgi = aDOIFields[18].instLoc ? "R" : "D";
						// sEquipment.Vkorgi = aDOIFields[19].instLoc ? "R" : "D";
						// sEquipment.Vkorgi = aDOIFields[20].instLoc ? "R" : "D";
						// sEquipment.Vkorgi = aDOIFields[21].instLoc ? "R" : "D";
						// sEquipment.Vkorgi = aDOIFields[22].instLoc ? "R" : "D";
						sEquipment.Adrnri = aDOIFields[10].instLoc ? "R" : (aDOIFields[10].maintenance ? "D" : "");
					}

					sPayload.Equipment.push(sEquipment);

					var sEqPRT = {
						"Equi": AIWEQUIModel[d].Equnr,
						"PlanvPrt": AIWEQUIModel[d].PlanvPrt,
						"SteufPrt": AIWEQUIModel[d].SteufPrt,
						"KtschPrt": AIWEQUIModel[d].KtschPrt,
						"Ewformprt": AIWEQUIModel[d].Ewformprt,
						"SteufRef": AIWEQUIModel[d].SteufRef,
						"KtschRef": AIWEQUIModel[d].KtschRef,
						"EwformRef": AIWEQUIModel[d].EwformRef
					};
					sPayload.EqPRT.push(sEqPRT);

					if (AIWEQUIModel[d].EquipmentCatogory === "L" && AIWEQUIModel[d].lam) {
						var sEqLAM = {
							"Equi": AIWEQUIModel[d].Equnr,
							"Lrpid": AIWEQUIModel[d].lam.Lrpid,
							"Strtptatr": AIWEQUIModel[d].lam.Strtptatr,
							"Endptatr": AIWEQUIModel[d].lam.Endptatr,
							"Length": AIWEQUIModel[d].lam.Length,
							"LinUnit": AIWEQUIModel[d].lam.LinUnit,
							"Startmrkr": AIWEQUIModel[d].lam.Startmrkr,
							"Endmrkr": AIWEQUIModel[d].lam.Endmrkr,
							"Mrkdisst": AIWEQUIModel[d].lam.Mrkdisst,
							"Mrkdisend": AIWEQUIModel[d].lam.Mrkdisend,
							"MrkrUnit": AIWEQUIModel[d].lam.MrkrUnit
						};
						sPayload.EqLAM.push(sEqLAM);
					}

					var sEqAddr = {
						"Equi": AIWEQUIModel[d].Equnr,
						"Title": AIWEQUIModel[d].TitleCode,
						"Name1": AIWEQUIModel[d].Name1,
						"Name2": AIWEQUIModel[d].Name2,
						"Name3": AIWEQUIModel[d].Name3,
						"Name4": AIWEQUIModel[d].Name4,
						"Sort1": AIWEQUIModel[d].Sort1,
						"Sort2": AIWEQUIModel[d].Sort2,
						"NameCo": AIWEQUIModel[d].NameCo,
						"PostCod1": AIWEQUIModel[d].PostCod1,
						"City1": AIWEQUIModel[d].City1,
						"Building": AIWEQUIModel[d].Building,
						"Floor": AIWEQUIModel[d].Floor,
						"Roomnum": AIWEQUIModel[d].Roomnum,
						"Strsuppl1": AIWEQUIModel[d].Strsuppl1,
						"Strsuppl2": AIWEQUIModel[d].Strsuppl2,
						"Strsuppl3": AIWEQUIModel[d].Strsuppl3,
						"Location": AIWEQUIModel[d].AddrLocation,
						"RefPosta": AIWEQUIModel[d].RefPosta,
						"Landx": AIWEQUIModel[d].Landx,
						"TimeZone": AIWEQUIModel[d].TimeZone,
						"RfePost": AIWEQUIModel[d].Region,
						"Regiotxt": AIWEQUIModel[d].RegionDesc
					};
					sPayload.EqAddr.push(sEqAddr);

					var aIntlAddrItems = AIWEQUIModel[d].intlAddr;
					if (aIntlAddrItems) {
						for (var z = 0; z < aIntlAddrItems.length; z++) {
							sPayload.EqAddrI.push(aIntlAddrItems[z]);
						}
					}

					if (AIWEQUIModel[d].dfps) {
						var oEqDFPS = {
							Equi: AIWEQUIModel[d].Equnr,
							DeviceId: AIWEQUIModel[d].dfps.Tailno,
							Topsiteid: AIWEQUIModel[d].dfps.Area,
							Topsitede: AIWEQUIModel[d].dfps.AreaDesc,
							AreaPro: AIWEQUIModel[d].dfps.AreaPrfl,
							SiteId: AIWEQUIModel[d].dfps.Site,
							SiteDesc: AIWEQUIModel[d].dfps.SiteDesc,
							SitePro: AIWEQUIModel[d].dfps.SitePrfl,
							MpoId: AIWEQUIModel[d].dfps.MPO,
							MpoDescr: AIWEQUIModel[d].dfps.MPODesc,
							RicId: AIWEQUIModel[d].dfps.RIC,
							RicDescr: AIWEQUIModel[d].dfps.RICDesc,
							ModelId: AIWEQUIModel[d].dfps.ModelId,
							ModelDes: AIWEQUIModel[d].dfps.ModelIdDesc,
							Foreignob: formatter.truetoX(AIWEQUIModel[d].dfps.ForeignEq),
							TecState: AIWEQUIModel[d].dfps.TechSts,
							DepState: AIWEQUIModel[d].dfps.OperSts,
							DfpsRmrk: AIWEQUIModel[d].dfps.Remark
						};
						sPayload.EqDFPS.push(oEqDFPS);
					}

					var sEqClassList = AIWEQUIModel[d].classItems;
					if (sEqClassList) {
						if (sEqClassList.length > 0) {
							for (var e = 0; e < sEqClassList.length; e++) {
								var sEqClass = {
									"Equi": AIWEQUIModel[d].Equnr,
									"Classtype": sEqClassList[e].Classtype,
									"Class": sEqClassList[e].Class,
									"Clstatus1": sEqClassList[e].Clstatus1
								};
								sPayload.EqClass.push(sEqClass);
							}
						}
					}

					var sEqCharList = AIWEQUIModel[d].characteristics;
					if (sEqCharList) {
						if (sEqCharList.length > 0) {
							for (var f = 0; f < sEqCharList.length; f++) {
								var sEqVal = {
									"Equi": AIWEQUIModel[d].Equnr,
									"Atnam": sEqCharList[f].Atnam,
									"Textbez": sEqCharList[f].Textbez,
									"Atwrt": sEqCharList[f].Atwrt,
									"Class": sEqCharList[f].Class
								};
								sPayload.EqVal.push(sEqVal);
							}
						}
					}

					var aFLLinChar = AIWEQUIModel[d].linearChar;
					if (aFLLinChar) {
						if (aFLLinChar.length > 0) {
							var alinearChar = $.map(aFLLinChar, function (obj) {
								return $.extend(true, {}, obj);
							});
							for (var c = 0; c < alinearChar.length; c++) {
								delete alinearChar[c].linCharEnable;
								alinearChar[c].Equi = AIWEQUIModel[d].Equnr;
								sPayload.EqLAMCH.push(alinearChar[c]);
							}
						}
					}

					var aAinMOP = sap.ui.getCore().getModel("ainMOP").getData();
					for (var z = 0; z < aAinMOP.length; z++) {
						if (sEquipment.Equnr === aAinMOP[z].key) {
							sEquipment.Modelid = aAinMOP[z].AIN.Modelid;
						}
					}
				}
			}

			if (AIWMSPTModel.length > 0) {
				for (var j = 0; j < AIWMSPTModel.length; j++) {
					var sMsPoint = {
						"Point": AIWMSPTModel[j].Mspoint,
						"Equnr": AIWMSPTModel[j].Equnr,
						"Eqktx": AIWMSPTModel[j].Eqktx,
						"Tplnr": AIWMSPTModel[j].Tplnr,
						"Floctxt": AIWMSPTModel[j].Pltxt,
						"Mptyp": AIWMSPTModel[j].Mptyp,
						"Mpttx": AIWMSPTModel[j].Mpttx,
						"Codgr": AIWMSPTModel[j].Codgr,
						"Codgrtxt": AIWMSPTModel[j].Codgrtxt,
						"ObtypMs": AIWMSPTModel[j].ObtypMs,
						"Objtypetxt": AIWMSPTModel[j].Txt,
						"AtnamMs": AIWMSPTModel[j].AtnamMs,
						"Atbez": AIWMSPTModel[j].Atbez,
						"Indct": AIWMSPTModel[j].Indct,
						"Cdsuf": AIWMSPTModel[j].Cdsuf,
						"Cjumc": AIWMSPTModel[j].Cjumc,
						"Desir": AIWMSPTModel[j].Desir,
						"Pyeac": AIWMSPTModel[j].Pyeac,
						"Mrmin": AIWMSPTModel[j].Mrmin,
						"Mrmax": AIWMSPTModel[j].Mrmax,
						"Pttxt": AIWMSPTModel[j].Pttxt,
						"Psort": AIWMSPTModel[j].Psort,
						"Inact": AIWMSPTModel[j].Inact,
						"Mseh6": AIWMSPTModel[j].Mseh6,
						"Msehl": AIWMSPTModel[j].Msehl,
						"Decim": AIWMSPTModel[j].Decim.toString(), //parseFloat(AIWMSPTModel[j].Decim),
						"Locas": AIWMSPTModel[j].Locas,
						"Maktx": AIWMSPTModel[j].Maktx,
						"Begru": AIWMSPTModel[j].Begru,
						"Begtx": AIWMSPTModel[j].Begtx,
						"Expon": AIWMSPTModel[j].Expon,
						"Mrngu": AIWMSPTModel[j].Mrngu,
						"Dstxt": AIWMSPTModel[j].Dstxt,
						"Indrv": AIWMSPTModel[j].Indrv,
						"Indtr": AIWMSPTModel[j].readTransfSel,
						"Trans": AIWMSPTModel[j].readTransf,
						"Type": AIWMSPTModel[j].viewParameter === "create" ? true : false,
						// "Inact": AIWMSPTModel[j].Inact
					};
					sPayload.MSPoint.push(sMsPoint);

					if (AIWMSPTModel[j].Mptyp === "L" && AIWMSPTModel[j].lam) {
						var sMSLAM = {
							"Mspoint": AIWMSPTModel[j].Mspoint,
							"Lrpid": AIWMSPTModel[j].lam.Lrpid,
							"Strtptatr": AIWMSPTModel[j].lam.Strtptatr,
							"Endptatr": AIWMSPTModel[j].lam.Endptatr,
							"Length": AIWMSPTModel[j].lam.Length,
							"LinUnit": AIWMSPTModel[j].lam.LinUnit,
							"Startmrkr": AIWMSPTModel[j].lam.Startmrkr,
							"Endmrkr": AIWMSPTModel[j].lam.Endmrkr,
							"Mrkdisst": AIWMSPTModel[j].lam.Mrkdisst,
							"Mrkdisend": AIWMSPTModel[j].lam.Mrkdisend,
							"MrkrUnit": AIWMSPTModel[j].lam.MrkrUnit
						};
						sPayload.MSLAM.push(sMSLAM);
					}

					var sMsClassList = AIWMSPTModel[j].classItems;
					if (sMsClassList) {
						if (sMsClassList.length > 0) {
							for (var h = 0; h < sMsClassList.length; h++) {
								var sMsClass = {
									"Mspoint": AIWMSPTModel[j].Mspoint,
									"Classtype": sMsClassList[h].Classtype,
									"Class": sMsClassList[h].Class,
									"Clstatus1": sMsClassList[h].Clstatus1
								};
								sPayload.MSClass.push(sMsClass);
							}
						}
					}

					var sMsCharList = AIWMSPTModel[j].characteristics;
					if (sMsCharList) {
						if (sMsCharList.length > 0) {
							for (var i = 0; i < sMsCharList.length; i++) {
								var sMsVal = {
									"Mspoint": AIWMSPTModel[j].Mspoint,
									"Atnam": sMsCharList[i].Atnam,
									"Textbez": sMsCharList[i].Textbez,
									"Atwrt": sMsCharList[i].Atwrt,
									"Class": sMsCharList[i].Class
								};
								sPayload.MSVal.push(sMsVal);
							}
						}
					}
				}
			}

			if (AIWMPMIModel.length > 0) {
				for (var k = 0; k < AIWMPMIModel.length; k++) {
					var sMPLAN = {
						"Warpl": AIWMPMIModel[k].Warpl,
						"Abrho": AIWMPMIModel[k].Abrho,
						"Hunit": AIWMPMIModel[k].Hunit,
						"Mptyp": AIWMPMIModel[k].Mptyp,
						"Wptxt": AIWMPMIModel[k].Wptxt,
						"Stich": AIWMPMIModel[k].Stich.toString(),
						"Fabkl": AIWMPMIModel[k].Fabkl,
						"FabklDesc": AIWMPMIModel[k].FabklDesc,
						"Sfakt": AIWMPMIModel[k].Sfakt,
						"Andor": g.parseValue(AIWMPMIModel[k].Andor),
						"Mehrfach": g.parseValue(AIWMPMIModel[k].Mehrfach),
						"Strat": AIWMPMIModel[k].Strat,
						"StratDesc": AIWMPMIModel[k].StratDesc,
						"Wset": AIWMPMIModel[k].Wset,
						"Startdate": g._formatDate(AIWMPMIModel[k].Stadt),
						"Unitc": AIWMPMIModel[k].Unitc,
						"Szaeh": AIWMPMIModel[k].Szaeh,
						"PointStp": AIWMPMIModel[k].Mpcycleno,

						"Vspos": AIWMPMIModel[k].Vspos,
						"Topos": AIWMPMIModel[k].Topos,
						"Vsneg": AIWMPMIModel[k].Vsneg,
						"Toneg": AIWMPMIModel[k].Toneg,
						"Horiz": AIWMPMIModel[k].Horiz,
						"CallConf": AIWMPMIModel[k].CallConf,
						"PlanSort": AIWMPMIModel[k].PlanSort,
						"Begru": AIWMPMIModel[k].Begru,
						"InactMp": AIWMPMIModel[k].Deact
					};
					sPayload.MPLAN.push(sMPLAN);

					var sItem = AIWMPMIModel[k].itemModel;
					if (sItem) {
						for (var l = 0; l < sItem.length; l++) {
							var sMPItem = {
								"Mplan": AIWMPMIModel[k].Warpl,
								"Qmart": sItem[l].Qmart, // notif type
								"Qmartx": sItem[l].nTypeTxt, // notif type desc
								"PlntMi": sItem[l].Werks, // planning plant
								"Planningplantdes": sItem[l].Planningplantdes, // planning plant desc
								"IngrpMi": sItem[l].Ingrp, // planner grp
								"Plannergrpdesc": sItem[l].Innam, // planner grp desc
								"Pstxt": sItem[l].Pstxt, // maint item desc
								"WergwMi": sItem[l].WergwMi, // main wc desc
								"ArbpMi": sItem[l].ArbpMi, // main wc
								"Auart": sItem[l].Auart, // order type 
								"Ordertypedesc": sItem[l].oTypeTxt, // order type desc
								"Bautl": sItem[l].AsmblyOb, // assembly
								"Cycleseq": sItem[l].Cycleseq,
								"Equnr": sItem[l].Equnr, // equip
								"Equipdesc": sItem[l].Eqktx, // equip desc
								"TplnrMi": sItem[l].Tplnr, // floc
								"Flocdesc": sItem[l].Pltxt, // floc desc
								"Mitemnumb": sItem[l].Mitemnumb, // maint item 
								"PlnnrMi": sItem[l].PlnnrMi, // TL Type
								"PlntyMi": sItem[l].PlntyMi, // TL Group
								"PlnalMi": sItem[l].PlnalMi, // TL Counter
								SwerkMil: sItem[l].SwerkMil,
								// Name1 = "",
								StortMil: sItem[l].StortMil,
								// Locationdesc = "",
								MsgrpIl: sItem[l].MsgrpIl,
								BeberMil: sItem[l].BeberMil,
								Fing: sItem[l].Fing,
								ArbplIl: sItem[l].ArbplIl,
								// Workcenterdesc = "",
								AbckzIl: sItem[l].AbckzIl,
								// Abctx = "",
								EqfnrIl: sItem[l].EqfnrIl,
								BukrsMil: sItem[l].BukrsMil,
								Butxt: sItem[l].Butxt,
								City: sItem[l].City,
								Anln1Mil: sItem[l].Anln1Mil,
								// Txt50 = "",
								Anln2Mil: sItem[l].Anln2Mil,
								GsberIl: sItem[l].GsberIl,
								// Gtext = "",
								KostlMil: sItem[l].KostlMil,
								// Contareaname = "",
								KokrsMil: sItem[l].KokrsMil,
								Posid: sItem[l].Posid,
								// Post1 = "",
								AufnrIl: sItem[l].AufnrIl,
								// SettleOrdDesc = "",

							};
							sPayload.MPItem.push(sMPItem);

							if (sItem[l].lam) {
								var sMSLAM = {
									"Mplan": AIWMPMIModel[k].Warpl,
									"Mitemnumb": sItem[l].lam.Mitemnumb,
									"Lrpid": sItem[l].lam.Lrpid,
									"Strtptatr": sItem[l].lam.Strtptatr,
									"Endptatr": sItem[l].lam.Endptatr,
									"Length": sItem[l].lam.Length,
									"LinUnit": sItem[l].lam.LinUnit,
									"Startmrkr": sItem[l].lam.Startmrkr,
									"Endmrkr": sItem[l].lam.Endmrkr,
									"Mrkdisst": sItem[l].lam.Mrkdisst,
									"Mrkdisend": sItem[l].lam.Mrkdisend,
									"MrkrUnit": sItem[l].lam.MrkrUnit
								};
								sPayload.MPLAM.push(sMSLAM);
							}
						}
					}

					var sCycle = AIWMPMIModel[k].cycleModel;
					if (sCycle) {
						for (var m = 0; m < sCycle.length; m++) {
							var sMPCycle = {
								"Mplan": AIWMPMIModel[k].Warpl,
								"Point": sCycle[m].Point,
								"PointTxt": sCycle[m].Psort,
								"Offset": sCycle[m].Offset,
								"Ofsetunit": sCycle[m].Ofsetunit,
								"PakText": sCycle[m].PakText,
								"Zeieh": sCycle[m].Zeieh,
								"Zykl1": sCycle[m].Zykl1,
								"Cycleseqi": sCycle[m].Cycleseqi,
								"Mpcycleno": sCycle[m].Mpcycleno
							};
							sPayload.MPCycle.push(sMPCycle);
						}
					}

					var sObjListItem = AIWMPMIModel[k].ObjListItems;
					if (sObjListItem) {
						for (var z = 0; z < sObjListItem.length; z++) {
							var oOLI = {
								"AsmblyOb": sObjListItem[z].AsmblyOb,
								"EquiObj": sObjListItem[z].EquiObj,
								"FlocObj": sObjListItem[z].FlocObj,
								"MatnrObj": sObjListItem[z].MatnrObj,
								"Mitemnumb": sObjListItem[z].Mitemnumb,
								"Mplan": sObjListItem[z].Warpl
							};
							sPayload.MPOBList.push(oOLI);
						}
					}

					var sMsClassList = AIWMPMIModel[k].classItems;
					if (sMsClassList) {
						if (sMsClassList.length > 0) {
							for (var h = 0; h < sMsClassList.length; h++) {
								var sMsClass = {
									"Mplan": AIWMPMIModel[k].Warpl,
									"Classtype": sMsClassList[h].Classtype,
									"Class": sMsClassList[h].Class,
									"Clstatus1": sMsClassList[h].Clstatus1
								};
								sPayload.ClassMpl.push(sMsClass);
							}
						}
					}

					var sMsCharList = AIWMPMIModel[k].characteristics;
					if (sMsCharList) {
						if (sMsCharList.length > 0) {
							for (var i = 0; i < sMsCharList.length; i++) {
								var sMsVal = {
									"Mplan": AIWMPMIModel[k].Warpl,
									"Atnam": sMsCharList[i].Atnam,
									"Textbez": sMsCharList[i].Textbez,
									"Atwrt": sMsCharList[i].Atwrt,
									"Class": sMsCharList[i].Class
								};
								sPayload.ValuaMpl.push(sMsVal);
							}
						}
					}
				}
			}

			// BOM/ON

			if (AIWListMatData.length > 0) {
				for (var i = 0; i < AIWListMatData.length; i++) {
					var mHeader = {
						"Matnr": AIWListMatData[i].Matnr,
						"Stlan": AIWListMatData[i].Stlan,
						"Werks": AIWListMatData[i].Werks,
						"Stalt": AIWListMatData[i].Stalt,
						"Pmbomtech": AIWListMatData[i].Pmbomtech ? AIWListMatData[i].Pmbomtech : "",
						"PmbomtechTxt": AIWListMatData[i].PmbomtechTxt ? AIWListMatData[i].PmbomtechTxt : "",
						"Bomstatus": AIWListMatData[i].Bomstatus,
						"Lngtxt": AIWListMatData[i].Lngtxt,
						"Txtmi": AIWListMatData[i].Lngtxt,
						"Stktx": AIWListMatData[i].Stktx,
						"Validfrom": this._formatDate(AIWListMatData[i].Validfrom),
						"Baseqty": AIWListMatData[i].BaseQty,
						"Baseuom": AIWListMatData[i].BaseUom,
						"Validtoda": this._formatDate(AIWListMatData[i].Validtoda)
					};
					sPayload.MRBHeader.push(mHeader);

					if (AIWListMatData[i].matItem) {
						for (var j = 0; j < AIWListMatData[i].matItem.length; j++) {
							var mItem = {
								"Matnr": AIWListMatData[i].Matnr,
								"Stlan": AIWListMatData[i].Stlan,
								"Werks": AIWListMatData[i].Werks,
								//"Bomitmnod": AIWListMatData[i].Bomitmnod, //13.08
								"Bomitmpos": AIWListMatData[i].matItem[j].Bomitmpos,
								"Itemcat": AIWListMatData[i].matItem[j].Itemcat,
								"Itemcomp": AIWListMatData[i].matItem[j].Itemcomp,
								"Compdesc": "",
								"Itmqty": AIWListMatData[i].matItem[j].Itmqty,
								"Itmuom": AIWListMatData[i].matItem[j].Itmuom,
								"Recurallo": AIWListMatData[i].matItem[j].Recurallo,
								"Erskz": AIWListMatData[i].matItem[j].Erskz,
								"Rvrel": AIWListMatData[i].matItem[j].Rvrel === "0" ? "" : AIWListMatData[i].matItem[j].Rvrel,
								"Sanfe": AIWListMatData[i].matItem[j].Sanfe,
								"Sanin": AIWListMatData[i].matItem[j].Sanin,
								"Sanko": AIWListMatData[i].matItem[j].Sanko,
								"Itmcmpdesc": AIWListMatData[i].matItem[j].Itmcmpdesc,
								"Costgrelv": AIWListMatData[i].matItem[j].Costgrelv === "0" ? "" : AIWListMatData[i].matItem[j].Costgrelv,
							};
							if (AIWListMatData[i].bomType === "Change") {
								mItem.Bomitmnod = AIWListMatData[i].matItem[j].Bomitmnod;
							}
							if (AIWListMatData[i].matItem[j].Itemcat === "N") {
								mItem.Ekorg = AIWListMatData[i].matItem[j].Ekorg;
								mItem.Ekotx = AIWListMatData[i].matItem[j].Ekotx;
								mItem.Ekgrp = AIWListMatData[i].matItem[j].Ekgrp;
								mItem.Eknam = AIWListMatData[i].matItem[j].Eknam;
								mItem.Preis = AIWListMatData[i].matItem[j].Preis;
								mItem.Waers = AIWListMatData[i].matItem[j].Waers;
								mItem.Peinh = AIWListMatData[i].matItem[j].Peinh;
								mItem.Matkl = AIWListMatData[i].matItem[j].Matkl;
								mItem.Wgbez = AIWListMatData[i].matItem[j].Wgbez;
								mItem.Potx1 = AIWListMatData[i].matItem[j].Potx1;
							} else if (AIWListMatData[i].matItem[j].Itemcat === "D") {
								mItem.Bomdocitm = AIWListMatData[i].matItem[j].Bomdocitm;
								mItem.Bomitmdkr = AIWListMatData[i].matItem[j].Bomitmdkr;
								mItem.BomitmdkrTxt = AIWListMatData[i].matItem[j].BomitmdkrTxt;
								mItem.Bomitmdtl = AIWListMatData[i].matItem[j].Bomitmdtl;
								mItem.Bomitmdvr = AIWListMatData[i].matItem[j].Bomitmdvr;
							} else if (AIWListMatData[i].matItem[j].Itemcat === "R") {
								mItem.Roms1 = AIWListMatData[i].matItem[j].Roms1;
								mItem.Romei = AIWListMatData[i].matItem[j].Romei;
								mItem.Roms2 = AIWListMatData[i].matItem[j].Roms2;
								mItem.Roms3 = AIWListMatData[i].matItem[j].Roms3;
								mItem.Rform = AIWListMatData[i].matItem[j].Rform;
								// mItem.FrmlaKeyDesc = AIWListMatData[i].matItem[j].Itemcat;
								mItem.Roanz = AIWListMatData[i].matItem[j].Roanz;
								// mItem.numVarSizeDesc = AIWListMatData[i].matItem[j].Itemcat;
								mItem.Romen = AIWListMatData[i].matItem[j].Romen;
								mItem.Rokme = AIWListMatData[i].matItem[j].Rokme;
							} else if (AIWListMatData[i].matItem[j].Itemcat === "T") {
								mItem.Potx1 = AIWListMatData[i].matItem[j].Potx1;
							}
							sPayload.MRBItem.push(mItem);
						}
					}

					if (AIWListMatData[i].matSubItem) {
						for (var k = 0; k < AIWListMatData[i].matSubItem.length; k++) {
							var mSubItem = {
								"Matnr": AIWListMatData[i].Matnr,
								"Stlan": AIWListMatData[i].Stlan,
								"Werks": AIWListMatData[i].Werks,
								"Posnr": AIWListMatData[i].matSubItem[k].Posnr,
								"Bomitmnod": AIWListMatData[i].matSubItem[k].Bomitmnod,
								"Bomsubno": AIWListMatData[i].matSubItem[k].Bomsubno,
								"Ebort": AIWListMatData[i].matSubItem[k].Ebort,
								"Upmng": AIWListMatData[i].matSubItem[k].Upmng,
								"Uptxt": AIWListMatData[i].matSubItem[k].Uptxt
							};
							sPayload.MRBSBIT.push(mSubItem);
						}
					}
				}
			}

			if (AIWListEqData.length > 0) {
				for (var i = 0; i < AIWListEqData.length; i++) {
					var eHeader = {
						"Eqnrbom": AIWListEqData[i].Eqnrbom,
						//"Stalt": "",
						"Stlan": AIWListEqData[i].Stlan,
						"Werks": AIWListEqData[i].Werks,
						"Bomstatus": AIWListEqData[i].Bomstatus,
						"Lngtxt": AIWListEqData[i].Lngtxt,
						"Txtmi": AIWListEqData[i].Lngtxt,
						"Stktx": AIWListEqData[i].Stktx,
						"Validfrom": this._formatDate(AIWListEqData[i].Validfrom),
						"Baseqty": AIWListEqData[i].BaseQty,
						"Baseuom": AIWListEqData[i].BaseUom,
						"Validtoda": this._formatDate(AIWListEqData[i].Validtoda)
					};
					sPayload.EBHeader.push(eHeader);

					if (AIWListEqData[i].eqItem) {
						for (var j = 0; j < AIWListEqData[i].eqItem.length; j++) {
							var eItem = {
								"Eqnrbom": AIWListEqData[i].Eqnrbom,
								"Stlan": AIWListEqData[i].Stlan,
								"Werks": AIWListEqData[i].Werks,
								"Bomitmpos": AIWListEqData[i].eqItem[j].Bomitmpos,
								"Itemcat": AIWListEqData[i].eqItem[j].Itemcat,
								"Itemcomp": AIWListEqData[i].eqItem[j].Itemcomp,
								"Compdesc": "",
								"Itmqty": AIWListEqData[i].eqItem[j].Itmqty,
								"Itmuom": AIWListEqData[i].eqItem[j].Itmuom,
								"Recurallo": AIWListEqData[i].eqItem[j].Recurallo,
								"Erskz": AIWListEqData[i].eqItem[j].Erskz,
								"Rvrel": AIWListEqData[i].eqItem[j].Rvrel === "0" ? "" : AIWListEqData[i].eqItem[j].Rvrel,
								"Sanfe": AIWListEqData[i].eqItem[j].Sanfe,
								"Sanin": AIWListEqData[i].eqItem[j].Sanin,
								"Sanko": AIWListEqData[i].eqItem[j].Sanko,
								"Itmcmpdesc": AIWListEqData[i].eqItem[j].Itmcmpdesc,
								"Costgrelv": AIWListEqData[i].eqItem[j].Costgrelv === "0" ? "" : AIWListEqData[i].eqItem[j].Costgrelv
							};
							if (AIWListEqData[i].bomType === "Change") {
								eItem.Bomitmnod = AIWListEqData[i].eqItem[j].Bomitmnod;
							}
							if (AIWListEqData[i].eqItem[j].Itemcat === "N") {
								eItem.Ekorg = AIWListEqData[i].eqItem[j].Ekorg;
								eItem.Ekotx = AIWListEqData[i].eqItem[j].Ekotx;
								eItem.Ekgrp = AIWListEqData[i].eqItem[j].Ekgrp;
								eItem.Eknam = AIWListEqData[i].eqItem[j].Eknam;
								eItem.Preis = AIWListEqData[i].eqItem[j].Preis;
								eItem.Waers = AIWListEqData[i].eqItem[j].Waers;
								eItem.Peinh = AIWListEqData[i].eqItem[j].Peinh;
								eItem.Matkl = AIWListEqData[i].eqItem[j].Matkl;
								eItem.Wgbez = AIWListEqData[i].eqItem[j].Wgbez;
								eItem.Potx1 = AIWListEqData[i].eqItem[j].Potx1;
							} else if (AIWListEqData[i].eqItem[j].Itemcat === "D") {
								eItem.Bomdocitm = AIWListEqData[i].eqItem[j].Bomdocitm;
								eItem.Bomitmdkr = AIWListEqData[i].eqItem[j].Bomitmdkr;
								eItem.BomitmdkrTxt = AIWListEqData[i].eqItem[j].BomitmdkrTxt;
								eItem.Bomitmdtl = AIWListEqData[i].eqItem[j].Bomitmdtl;
								eItem.Bomitmdvr = AIWListEqData[i].eqItem[j].Bomitmdvr;
							} else if (AIWListEqData[i].eqItem[j].Itemcat === "R") {
								eItem.Roms1 = AIWListEqData[i].eqItem[j].Roms1;
								eItem.Romei = AIWListEqData[i].eqItem[j].Romei;
								eItem.Roms2 = AIWListEqData[i].eqItem[j].Roms2;
								eItem.Roms3 = AIWListEqData[i].eqItem[j].Roms3;
								eItem.Rform = AIWListEqData[i].eqItem[j].Rform;
								// eItem.FrmlaKeyDesc = AIWListEqData[i].eqItem[j].Itemcat;
								eItem.Roanz = AIWListEqData[i].eqItem[j].Roanz;
								// eItem.numVarSizeDesc = AIWListEqData[i].eqItem[j].Itemcat;
								eItem.Romen = AIWListEqData[i].eqItem[j].Romen;
								eItem.Rokme = AIWListEqData[i].eqItem[j].Rokme;
							} else if (AIWListEqData[i].eqItem[j].Itemcat === "T") {
								eItem.Potx1 = AIWListEqData[i].eqItem[j].Potx1;
							}
							sPayload.EBItem.push(eItem);
						}
					}

					if (AIWListEqData[i].eqSubItem) {
						for (var k = 0; k < AIWListEqData[i].eqSubItem.length; k++) {
							var eSubItem = {
								"Eqnrbom": AIWListEqData[i].Eqnrbom,
								"Stlan": AIWListEqData[i].Stlan,
								"Werks": AIWListEqData[i].Werks,
								"Posnr": AIWListEqData[i].eqSubItem[k].Posnr,
								"Bomitmnod": AIWListEqData[i].eqSubItem[k].Bomitmnod,
								"Bomsubno": AIWListEqData[i].eqSubItem[k].Bomsubno,
								"Ebort": AIWListEqData[i].eqSubItem[k].Ebort,
								"Upmng": AIWListEqData[i].eqSubItem[k].Upmng,
								"Uptxt": AIWListEqData[i].eqSubItem[k].Uptxt
							};
							sPayload.EBSBIT.push(eSubItem);
						}
					}
				}
			}

			if (AIWListFLData.length > 0) {
				for (var i = 0; i < AIWListFLData.length; i++) {
					var flHeader = {
						"Tplnrbom": AIWListFLData[i].Tplnrbom,
						"Stlan": AIWListFLData[i].Stlan,
						"Werks": AIWListFLData[i].Werks,
						"Bomstatus": AIWListFLData[i].Bomstatus,
						"Lngtxt": AIWListFLData[i].Lngtxt,
						"Txtmi": AIWListFLData[i].Lngtxt,
						"Stktx": AIWListFLData[i].Stktx,
						"Validfrom": this._formatDate(AIWListFLData[i].Validfrom),
						"Baseqty": AIWListFLData[i].BaseQty,
						"Baseuom": AIWListFLData[i].BaseUom,
						"Validtoda": this._formatDate(AIWListFLData[i].Validtoda)
							//"Stalt": ""
					};
					sPayload.FBHeader.push(flHeader);

					if (AIWListFLData[i].flItem) {
						for (var j = 0; j < AIWListFLData[i].flItem.length; j++) {
							var flItem = {
								"Tplnrbom": AIWListFLData[i].Tplnrbom,
								"Stlan": AIWListFLData[i].Stlan,
								"Werks": AIWListFLData[i].Werks,
								"Bomitmpos": AIWListFLData[i].flItem[j].Bomitmpos,
								"Itemcat": AIWListFLData[i].flItem[j].Itemcat,
								"Itemcomp": AIWListFLData[i].flItem[j].Itemcomp,
								"Compdesc": "",
								"Itmqty": AIWListFLData[i].flItem[j].Itmqty,
								"Itmuom": AIWListFLData[i].flItem[j].Itmuom,
								"Recurallo": AIWListFLData[i].flItem[j].Recurallo,
								"Erskz": AIWListFLData[i].flItem[j].Erskz,
								"Rvrel": AIWListFLData[i].flItem[j].Rvrel === "0" ? "" : AIWListFLData[i].flItem[j].Rvrel,
								"Sanfe": AIWListFLData[i].flItem[j].Sanfe,
								"Sanin": AIWListFLData[i].flItem[j].Sanin,
								"Sanko": AIWListFLData[i].flItem[j].Sanko,
								"Itmcmpdesc": AIWListFLData[i].flItem[j].Itmcmpdesc,
								"Costgrelv": AIWListFLData[i].flItem[j].Costgrelv === "0" ? "" : AIWListFLData[i].flItem[j].Costgrelv
							};
							if (AIWListFLData[i].bomType === "Change") { //13.08
								flItem.Bomitmnod = AIWListFLData[i].flItem[j].Bomitmnod;
							}
							if (AIWListFLData[i].flItem[j].Itemcat === "N") {
								flItem.Ekorg = AIWListFLData[i].flItem[j].Ekorg;
								flItem.Ekotx = AIWListFLData[i].flItem[j].Ekotx;
								flItem.Ekgrp = AIWListFLData[i].flItem[j].Ekgrp;
								flItem.Eknam = AIWListFLData[i].flItem[j].Eknam;
								flItem.Preis = AIWListFLData[i].flItem[j].Preis;
								flItem.Waers = AIWListFLData[i].flItem[j].Waers;
								flItem.Peinh = AIWListFLData[i].flItem[j].Peinh;
								flItem.Matkl = AIWListFLData[i].flItem[j].Matkl;
								flItem.Wgbez = AIWListFLData[i].flItem[j].Wgbez;
								flItem.Potx1 = AIWListFLData[i].flItem[j].Potx1;
							} else if (AIWListFLData[i].flItem[j].Itemcat === "D") {
								flItem.Bomdocitm = AIWListFLData[i].flItem[j].Bomdocitm;
								flItem.Bomitmdkr = AIWListFLData[i].flItem[j].Bomitmdkr;
								flItem.BomitmdkrTxt = AIWListFLData[i].flItem[j].BomitmdkrTxt;
								flItem.Bomitmdtl = AIWListFLData[i].flItem[j].Bomitmdtl;
								flItem.Bomitmdvr = AIWListFLData[i].flItem[j].Bomitmdvr;
							} else if (AIWListFLData[i].flItem[j].Itemcat === "R") {
								flItem.Roms1 = AIWListFLData[i].flItem[j].Roms1;
								flItem.Romei = AIWListFLData[i].flItem[j].Romei;
								flItem.Roms2 = AIWListFLData[i].flItem[j].Roms2;
								flItem.Roms3 = AIWListFLData[i].flItem[j].Roms3;
								flItem.Rform = AIWListFLData[i].flItem[j].Rform;
								// flItem.FrmlaKeyDesc = AIWListFLData[i].flItem[j].Itemcat;
								flItem.Roanz = AIWListFLData[i].flItem[j].Roanz;
								// flItem.numVarSizeDesc = AIWListFLData[i].flItem[j].Itemcat;
								flItem.Romen = AIWListFLData[i].flItem[j].Romen;
								flItem.Rokme = AIWListFLData[i].flItem[j].Rokme;
							} else if (AIWListFLData[i].flItem[j].Itemcat === "T") {
								flItem.Potx1 = AIWListFLData[i].flItem[j].Potx1;
							}
							sPayload.FBItem.push(flItem);
						}
					}

					if (AIWListFLData[i].flSubItem) {
						for (var k = 0; k < AIWListFLData[i].flSubItem.length; k++) {
							var flSubItem = {
								"Tplnrbom": AIWListFLData[i].Tplnrbom,
								"Stlan": AIWListFLData[i].Stlan,
								"Werks": AIWListFLData[i].Werks,
								"Posnr": AIWListFLData[i].flSubItem[k].Posnr,
								"Bomitmnod": AIWListFLData[i].flSubItem[k].Bomitmnod,
								"Bomsubno": AIWListFLData[i].flSubItem[k].Bomsubno,
								"Ebort": AIWListFLData[i].flSubItem[k].Ebort,
								"Upmng": AIWListFLData[i].flSubItem[k].Upmng,
								"Uptxt": AIWListFLData[i].flSubItem[k].Uptxt
							};
							sPayload.FBSBIT.push(flSubItem);
						}
					}
				}
			}

			if (AIWListWBSData.length > 0) {
				for (var i = 0; i < AIWListWBSData.length; i++) {
					var wbsHeader = {
						"WbsExt": AIWListWBSData[i].WbsExt,
						"MatnrWbs": AIWListWBSData[i].Matnr,
						"Stlan": AIWListWBSData[i].Stlan,
						"Werks": AIWListWBSData[i].Werks,
						"Bomstatus": AIWListWBSData[i].Bomstatus,
						"Lngtxt": AIWListWBSData[i].Lngtxt,
						"Txtmi": AIWListWBSData[i].Lngtxt,
						"Stktx": AIWListWBSData[i].Stktx,
						"Validfrom": this._formatDate(AIWListWBSData[i].Validfrom),
						"Baseqty": AIWListWBSData[i].BaseQty,
						"Baseuom": AIWListWBSData[i].BaseUom,
						"Validtoda": this._formatDate(AIWListWBSData[i].Validtoda)
							//"Stalt": ""
					};
					sPayload.WBHeader.push(wbsHeader);

					if (AIWListWBSData[i].wbsItem) {
						for (var j = 0; j < AIWListWBSData[i].wbsItem.length; j++) {
							var wbsItem = {
								"WbsExt": AIWListWBSData[i].WbsExt,
								"MatnrWbs": AIWListWBSData[i].Matnr,
								"Stlan": AIWListWBSData[i].Stlan,
								"Werks": AIWListWBSData[i].Werks,
								"Bomitmpos": AIWListWBSData[i].wbsItem[j].Bomitmpos,
								"Itemcat": AIWListWBSData[i].wbsItem[j].Itemcat,
								"Itemcomp": AIWListWBSData[i].wbsItem[j].Itemcomp,
								"Compdesc": "",
								"Itmqty": AIWListWBSData[i].wbsItem[j].Itmqty,
								"Itmuom": AIWListWBSData[i].wbsItem[j].Itmuom,
								"Recurallo": AIWListWBSData[i].wbsItem[j].Recurallo,
								"Erskz": AIWListWBSData[i].wbsItem[j].Erskz,
								"Rvrel": AIWListWBSData[i].wbsItem[j].Rvrel === "0" ? "" : AIWListWBSData[i].wbsItem[j].Rvrel,
								"Sanfe": AIWListWBSData[i].wbsItem[j].Sanfe,
								"Sanin": AIWListWBSData[i].wbsItem[j].Sanin,
								"Sanko": AIWListWBSData[i].wbsItem[j].Sanko,
								"Itmcmpdesc": AIWListWBSData[i].wbsItem[j].Itmcmpdesc,
								"Costgrelv": AIWListWBSData[i].wbsItem[j].Costgrelv === "0" ? "" : AIWListWBSData[i].wbsItem[j].Costgrelv
							};
							if (AIWListWBSData[i].bomType === "Change") { //13.08
								wbsItem.Bomitmnod = AIWListWBSData[i].wbsItem[j].Bomitmnod;
							}
							if (AIWListWBSData[i].wbsItem[j].Itemcat === "N") {
								wbsItem.Ekorg = AIWListWBSData[i].wbsItem[j].Ekorg;
								wbsItem.Ekotx = AIWListWBSData[i].wbsItem[j].Ekotx;
								wbsItem.Ekgrp = AIWListWBSData[i].wbsItem[j].Ekgrp;
								wbsItem.Eknam = AIWListWBSData[i].wbsItem[j].Eknam;
								wbsItem.Preis = AIWListWBSData[i].wbsItem[j].Preis;
								wbsItem.Waers = AIWListWBSData[i].wbsItem[j].Waers;
								wbsItem.Peinh = AIWListWBSData[i].wbsItem[j].Peinh;
								wbsItem.Matkl = AIWListWBSData[i].wbsItem[j].Matkl;
								wbsItem.Wgbez = AIWListWBSData[i].wbsItem[j].Wgbez;
								wbsItem.Potx1 = AIWListWBSData[i].wbsItem[j].Potx1;
							} else if (AIWListWBSData[i].wbsItem[j].Itemcat === "D") {
								wbsItem.Bomdocitm = AIWListWBSData[i].wbsItem[j].Bomdocitm;
								wbsItem.Bomitmdkr = AIWListWBSData[i].wbsItem[j].Bomitmdkr;
								wbsItem.BomitmdkrTxt = AIWListWBSData[i].wbsItem[j].BomitmdkrTxt;
								wbsItem.Bomitmdtl = AIWListWBSData[i].wbsItem[j].Bomitmdtl;
								wbsItem.Bomitmdvr = AIWListWBSData[i].wbsItem[j].Bomitmdvr;
							} else if (AIWListWBSData[i].wbsItem[j].Itemcat === "R") {
								wbsItem.Roms1 = AIWListWBSData[i].wbsItem[j].Roms1;
								wbsItem.Romei = AIWListWBSData[i].wbsItem[j].Romei;
								wbsItem.Roms2 = AIWListWBSData[i].wbsItem[j].Roms2;
								wbsItem.Roms3 = AIWListWBSData[i].wbsItem[j].Roms3;
								wbsItem.Rform = AIWListWBSData[i].wbsItem[j].Rform;
								// wbsItem.FrmlaKeyDesc = AIWListWBSData[i].wbsItem[j].Itemcat;
								wbsItem.Roanz = AIWListWBSData[i].wbsItem[j].Roanz;
								// wbsItem.numVarSizeDesc = AIWListWBSData[i].wbsItem[j].Itemcat;
								wbsItem.Romen = AIWListWBSData[i].wbsItem[j].Romen;
								wbsItem.Rokme = AIWListWBSData[i].wbsItem[j].Rokme;
							} else if (AIWListWBSData[i].wbsItem[j].Itemcat === "T") {
								wbsItem.Potx1 = AIWListWBSData[i].wbsItem[j].Potx1;
							}
							sPayload.WBItem.push(wbsItem);
						}
					}

					if (AIWListWBSData[i].wbsSubItem) {
						for (var k = 0; k < AIWListWBSData[i].wbsSubItem.length; k++) {
							var wbsSubItem = {
								"WbsExt": AIWListWBSData[i].WbsExt,
								"MatnrWbs": AIWListWBSData[i].Matnr,
								"Stlan": AIWListWBSData[i].Stlan,
								"Werks": AIWListWBSData[i].Werks,
								"Posnr": AIWListWBSData[i].wbsSubItem[k].Posnr,
								"Bomitmnod": AIWListWBSData[i].wbsSubItem[k].Bomitmnod,
								"Bomsubno": AIWListWBSData[i].wbsSubItem[k].Bomsubno,
								"Ebort": AIWListWBSData[i].wbsSubItem[k].Ebort,
								"Upmng": AIWListWBSData[i].wbsSubItem[k].Upmng,
								"Uptxt": AIWListWBSData[i].wbsSubItem[k].Uptxt
							};
							sPayload.WBSBIT.push(wbsSubItem);
						}
					}
				}
			}

			if (AIWListONData.length > 0) {
				for (var i = 0; i < AIWListONData.length; i++) {
					var onNetwork = {
						"Objnetwrk": AIWListONData[i].Objnetwrk,
						"Netgrp": AIWListONData[i].Netgrp,
						"Netwtyp": AIWListONData[i].Netwtyp,
						"Netxt": AIWListONData[i].Netxt,
						"Ntobjtyp": AIWListONData[i].Ntobjtyp
					};
					sPayload.ONetwork.push(onNetwork);

					if (AIWListONData[i].lam) {
						var onLAM = {
							"Objnetwrk": AIWListONData[i].Objnetwrk,
							"Lrpid": AIWListONData[i].lam.Lrpid,
							"Strtptatr": AIWListONData[i].lam.Strtptatr,
							"Endptatr": AIWListONData[i].lam.Endptatr,
							"Length": AIWListONData[i].lam.Length,
							"LinUnit": AIWListONData[i].lam.LinUnit,
							"Startmrkr": AIWListONData[i].lam.Startmrkr,
							"Endmrkr": AIWListONData[i].lam.Endmrkr,
							"Mrkdisst": AIWListONData[i].lam.Mrkdisst,
							"Mrkdisend": AIWListONData[i].lam.Mrkdisend,
							"MrkrUnit": AIWListONData[i].lam.MrkrUnit
						};
						sPayload.ONLAM.push(onLAM);
					}
				}
			}

			//WC/TL/OL
			if (AIWListWCData.length > 0) {
				for (var i = 0; i < AIWListWCData.length; i++) {
					var mHeader = {
						"Werks": AIWListWCData[i].plant,
						"Arbpl": AIWListWCData[i].wc,
						"Txtmi": AIWListWCData[i].wcDesc,
						"Verwe": AIWListWCData[i].wcCat,
						"Crveran": AIWListWCData[i].person,
						"Planv": AIWListWCData[i].usg,
						"Vgwts": AIWListWCData[i].stdVal,
						"Crsteus": AIWListWCData[i].ctrlKey
					};
					if (AIWListWCData[i].hasOwnProperty("Type")) {
						if (AIWListWCData[i].Type === "X") {
							mHeader.Type = "X";
						}
					}
					sPayload.Workcenter.push(mHeader);

					if (AIWListWCData[i].cost) {
						for (var j = 0; j < AIWListWCData[i].cost.length; j++) {
							var mCost = {
								"Werks": AIWListWCData[i].cost[j].CrKokrs,
								"Arbpl": AIWListWCData[i].wc,
								"CrKostl": AIWListWCData[i].cost[j].CrKostl,
								"Costcentxt": AIWListWCData[i].cost[j].Costcentxt,
								"CrLstar": AIWListWCData[i].cost[j].CrLstar,
								"Forn1": AIWListWCData[i].cost[j].Forn1,
								"ActvttypeTxt": AIWListWCData[i].cost[j].ActvttypeTxt,
								"Frmltxt": AIWListWCData[i].cost[j].Frmltxt,
								"Begda": formatter._formatDate(AIWListWCData[i].cost[j].Begda),
								"Endda": formatter._formatDate(AIWListWCData[i].cost[j].Endda)
							};
							sPayload.WCCost.push(mCost);
						}
					}

					var sWCClassList = AIWListWCData[i].classItems;
					if (sWCClassList) {
						if (sWCClassList.length > 0) {
							for (var e = 0; e < sWCClassList.length; e++) {
								var sWCClass = {
									"Arbpl": AIWListWCData[i].wc,
									"Werks": AIWListWCData[i].plant,
									"Classtype": sWCClassList[e].Classtype,
									"Class": sWCClassList[e].Class,
									// "Clstatus1": sWCClassList[e].Clstatus1
								};
								sPayload.ClassWC.push(sWCClass);
							}
						}
					}

					var sWCCharList = AIWListWCData[i].characteristics;
					if (sWCCharList) {
						if (sWCCharList.length > 0) {
							for (var f = 0; f < sWCCharList.length; f++) {
								var sWCVal = {
									"Arbpl": AIWListWCData[i].wc,
									"Werks": AIWListWCData[i].plant,
									"Atnam": sWCCharList[f].Atnam,
									"Textbez": sWCCharList[f].Textbez,
									"Atwrt": sWCCharList[f].Atwrt,
									"Class": sWCCharList[f].Class
								};
								sPayload.ValueWC.push(sWCVal);
							}
						}
					}

				}
			}

			if (AIWListGTLData.length > 0) {
				for (var i = 0; i < AIWListGTLData.length; i++) {
					if (AIWListGTLData[i].header) {
						for (var j = 0; j < AIWListGTLData[i].header.length; j++) {
							if (AIWListGTLData[i].header[j].Iwerk !== "") {
								AIWListGTLData[i].header[j].Werks = AIWListGTLData[i].header[j].Iwerk;
							}
							var gtList = {
								"Werks": AIWListGTLData[i].header[j].Werks,
								"Wcplant": AIWListGTLData[i].header[j].plant,
								"Statu": AIWListGTLData[i].header[j].Statu,
								"Tverwe": AIWListGTLData[i].header[j].tlusg,
								"Ktext": AIWListGTLData[i].header[j].Ktext,
								"Tarbpl": AIWListGTLData[i].header[j].wc,
								"Vagrp": AIWListGTLData[i].header[j].Vagrp,
								"Anlzu": AIWListGTLData[i].header[j].Anlzu,
								"Tplnal": (AIWListGTLData[i].header[j].Plnal).toString(),
								"Tlgnhdr": AIWListGTLData[i].grp,
								"Strat": AIWListGTLData[i].header[j].Strat,
								"Datuv": this._formatDate(AIWListGTLData[i].validFrm),
								// "Type": AIWListGTLData[i].modeflag === "Crt"?true:false
							};
							sPayload.GTList.push(gtList);
						}
					}

					if (AIWListGTLData[i].operation) {
						for (var k = 0; k < AIWListGTLData[i].operation.length; k++) {
							var gtlOpr = {
								"Tlgnhdr": AIWListGTLData[i].grp,
								"Vornr": AIWListGTLData[i].operation[k].Vornr,
								"TlArbpl": AIWListGTLData[i].operation[k].Arbpl,
								"Werks2gop": AIWListGTLData[i].operation[k].Werks,
								"Steus2gop": AIWListGTLData[i].operation[k].Steus,
								"Ltxa1": AIWListGTLData[i].operation[k].Ltxa1,
								"Arbei": AIWListGTLData[i].operation[k].Arbei,
								"Dauno": AIWListGTLData[i].operation[k].Dauno,
								"Arbeh": AIWListGTLData[i].operation[k].Arbeh,
								"Anzzl": AIWListGTLData[i].operation[k].Anzzl,
								"Daune": AIWListGTLData[i].operation[k].Daune,
								"Indet": AIWListGTLData[i].operation[k].Indet,
								"Tplnal": (AIWListGTLData[i].operation[k].Plnal).toString(),
								"Uvorn": AIWListGTLData[i].operation[k].Uvorn,
								"Larnt2gop": AIWListGTLData[i].operation[k].Larnt,
								"Prznt": AIWListGTLData[i].operation[k].workPerc === "" ? 0 : parseFloat(AIWListGTLData[i].operation[k].workPerc),
								"Bmvrg": AIWListGTLData[i].operation[k].orderQty,
								"Bmeih": AIWListGTLData[i].operation[k].ordQtyUnit,
								"Opreis": AIWListGTLData[i].operation[k].netPrice === "" ? "0.000" : parseFloat(AIWListGTLData[i].operation[k].netPrice).toFixed(
									3).toString(),
								"Owaers": AIWListGTLData[i].operation[k].currency,
								"Opeinh": AIWListGTLData[i].operation[k].priceUnit === "" ? "0.000" : parseFloat(AIWListGTLData[i].operation[k].priceUnit).toFixed(
									3).toString(),
								"Sakto2gop": AIWListGTLData[i].operation[k].costElement,
								"Omatkl": AIWListGTLData[i].operation[k].materialGrp,
								"Oekgrp": AIWListGTLData[i].operation[k].puchGroup,
								"Ekorg": AIWListGTLData[i].operation[k].purchOrg,
								"EqunrGop": AIWListGTLData[i].operation[k].equi,
								"TplnrGop": AIWListGTLData[i].operation[k].floc,
							};
							sPayload.GTOprs.push(gtlOpr);

							for (var z = 0; z < AIWListGTLData[i].operation[k].OprRel.length; z++) {
								var selObj = AIWListGTLData[i].operation[k].OprRel[z];
								var oOprRel = {
									Tlgnhdr: AIWListGTLData[i].grp, //this.currentObj.grp,
									Tplnal: selObj.Plnal.toString(),
									Vorn2: selObj.Vornr,
									Vornrgrel: selObj.OperationOR,
									Dauer: selObj.Offset,
									Zeinh: selObj.OUn,
									Aobar: selObj.RelType,
									Gprznt: selObj.PO,
									Provg: selObj.OI,
									Gkalid: selObj.ID,
									Arbplgrel: selObj.WrkCtrOR,
									Werksgrel: selObj.PlantOR,
								};
								sPayload.GTRel.push(oOprRel);
							}

							for (var z = 0; z < AIWListGTLData[i].operation[k].SrvPckgOvrw.length; z++) {
								var selObj = AIWListGTLData[i].operation[k].SrvPckgOvrw[z];
								var svObj = {
									Tlgnhdr: AIWListGTLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal.toString(),
									Vornrr: selObj.Vornr,
									SrvLine: selObj.LineNum,
									Del: formatter.truetoX(selObj.DelIndSP),
									Srvpos: selObj.ActNum,
									Ktext1: selObj.ShrtTxt,
									Mengegspk: selObj.Qty,
									Meinsgspk: selObj.BUomSP,
									Tbtwr: selObj.GrossPrc,
									Waersgspk: selObj.CurKey,
									IntWork: selObj.Work,
									Iwein: selObj.UnitOfWork,
								};
								sPayload.GTSpack.push(svObj);
							}

							for (var z = 0; z < AIWListGTLData[i].operation[k].PRT.length; z++) {
								var selObj = AIWListGTLData[i].operation[k].PRT[z];
								var prtObj = {
									Tlgnhdr: AIWListGTLData[i].grp, //selObj.grp,
									Tplnal: selObj.Plnal.toString(),
									Vornrgprt: selObj.Vornr,
									Psnfh: selObj.ItmNum,
									Fhmar: selObj.ItmCat,
									// Fhmnr: selObj.PRT,
									Matnrgprt: selObj.Mat,
									EqunrGpt: selObj.Equi,
									Eqpnt: selObj.Mspt,
									Doknrgprt: selObj.doc,
									Dokargprt: selObj.docType,
									Doktlgprt: selObj.docPart,
									Dokvrgprt: selObj.docVersion,
									Fhmnr: selObj.Othr,
									Fhwrk: selObj.Plant, //PRTDesc,
									Mgvgw: selObj.Qty,
									Mgeinh: selObj.UOM,
									Mgform: selObj.QtyFrmla,
									Steuf: selObj.PRTCtrl,
									Stftxt: selObj.PRTCtrlDesc,
									Ewvgw: selObj.StdUsgVal,
									Eweinh: selObj.StdUsgUOM,
									Ewform: selObj.UsgValFrmla,
								};
								sPayload.GTPRT.push(prtObj);
							}

							for (var z = 0; z < AIWListGTLData[i].operation[k].InspChar.length; z++) {
								var selObj = AIWListGTLData[i].operation[k].InspChar[z];
								var inspObj = {
									Tlgnhdr: AIWListGTLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal.toString(),
									Vornrgins: selObj.Vornr,
									Merknr: selObj.InspChar,
									Vste2gins: selObj.PrstInd,
									Quantitat: formatter.truetoX(selObj.QuanChar),
									QpmkRef: formatter.truetoX(selObj.QualChar),
									Verw2gins: selObj.MastInspChar,
									Uzae2tlgn: selObj.Plant,
									Mkv2tlgni: selObj.Version, //Ver2tlgni
									Kurztext: selObj.ShrtTxt,
									Pmth2gins: selObj.InspMthd,
									Qwe2tlgni: selObj.InspMthdPlnt,
									Toleranzs: selObj.TolKey,
									Ver2tlgni: selObj.VrsnInspMthd, //Pmtversio
									Stichprve: selObj.SampProc,
									Probemgeh: selObj.SampUOM,
									Pruefeinh: selObj.BaseSampQty === "" ? "0.00" : parseFloat(selObj.BaseSampQty).toFixed(2),
									Auswmenge: selObj.CodeGrp,
								};
								sPayload.GTInsp.push(inspObj);
							}
						}
					}

					if (AIWListGTLData[i].MaintPckg && AIWListGTLData[i].MaintPckg.length > 0) {
						for (var z = 0; z < AIWListGTLData[i].MaintPckg.length; z++) {
							if (AIWListGTLData[i].MaintPckg[z].MPArr && AIWListGTLData[i].MaintPckg[z].MPArr.length > 0) {
								for (var y = 0; y < AIWListGTLData[i].MaintPckg[z].MPArr.length; y++) {
									var curObj = AIWListGTLData[i].MaintPckg[z].MPArr[y];
									var moObj = {
										// Gplnkn: curObj.Gplnkn,
										// IsSelected: curObj.IsSelected,
										Ktex1: curObj.Ktex1,
										Ktxhi: curObj.Ktxhi,
										Kzyk1: curObj.Kzyk1,
										// Paket: curObj.IsSelected,
										Paketgmpk: curObj.Paket,
										Startgmpk: curObj.Strat,
										// Strat: curObj.Strat,
										Tlgnhdr: AIWListGTLData[i].grp, //this.currentObj.grp,
										Tplnal: curObj.Plnal.toString(),
										// Uzaehl: curObj.Uzaehl,
										Vorn2gmpk: curObj.Vornr,
										// Vornr: curObj.IsSelected,
									};
								}
								sPayload.GTMPack.push(moObj);
							}
						}
					}

					if (AIWListGTLData[i].component) {
						for (var l = 0; l < AIWListGTLData[i].component.length; l++) {
							var gtlComp = {
								"Tlgnhdr": AIWListGTLData[i].grp,
								"Idnrk": AIWListGTLData[i].component[l].Idnrk,
								"Menge": AIWListGTLData[i].component[l].Menge,
								"MeinsGcp": AIWListGTLData[i].component[l].MeinsGcp,
								"Vornr": AIWListGTLData[i].component[l].Vornr,
								"Postp": AIWListGTLData[i].component[l].Postp,
								"Tplnal": (AIWListGTLData[i].component[l].Plnal).toString()
							};
							sPayload.GTComp.push(gtlComp);
						}
					}

					if (AIWListGTLData[i].Class) {
						for (var m = 0; m < AIWListGTLData[i].Class.length; m++) {
							var gtlClass = {
								"Tlgnhdr": AIWListGTLData[i].grp,
								"Classtype": AIWListGTLData[i].Class[m].Classtype,
								"Class": AIWListGTLData[i].Class[m].Class,
								"Clstatus1": AIWListGTLData[i].Class[m].Clstatus1,
								"Tplnal": (AIWListGTLData[i].Class[m].Plnal).toString()
							};
							sPayload.GTClass.push(gtlClass);
						}
					}

					if (AIWListGTLData[i].Char) {
						for (var n = 0; n < AIWListGTLData[i].Char.length; n++) {
							// for (var k = 0; k < AIWListGTLData[i].Class.length; k++) {
							// 	if (AIWListGTLData[i].Class[k].Class === AIWListGTLData[i].Char[n].Class) {
							// 		AIWListGTLData[i].Char[n].Plnal = AIWListGTLData[i].Class[k].Plnal;
							// 	}
							// }
							var gtlChar = {
								"Tlgnhdr": AIWListGTLData[i].grp,
								"Atnam": AIWListGTLData[i].Char[n].Atnam,
								"Textbez": AIWListGTLData[i].Char[n].Textbez,
								"Atwrt": AIWListGTLData[i].Char[n].Atwrt,
								"Class": AIWListGTLData[i].Char[n].Class,
								"Tplnal": (AIWListGTLData[i].Char[n].Plnal).toString()
							};
							sPayload.GTVal.push(gtlChar);
						}
					}
				}
			}

			if (AIWListETLData.length > 0) {
				for (var i = 0; i < AIWListETLData.length; i++) {
					if (AIWListETLData[i].header) {
						for (var j = 0; j < AIWListETLData[i].header.length; j++) {
							if (AIWListETLData[i].header[j].Iwerk !== "") {
								AIWListETLData[i].header[j].Werks = AIWListETLData[i].header[j].Iwerk;
							}
							var etList = {
								"Werks": AIWListETLData[i].header[j].Werks,
								"Wcplant": AIWListETLData[i].header[j].plant,
								"Statu": AIWListETLData[i].header[j].Statu,
								"Tverwe": AIWListETLData[i].header[j].tlusg,
								"Ktext": AIWListETLData[i].header[j].Ktext,
								"Tarbpl": AIWListETLData[i].header[j].wc,
								"Vagrp": AIWListETLData[i].header[j].Vagrp,
								"Anlzu": AIWListETLData[i].header[j].Anlzu,
								"Tplnal": (AIWListETLData[i].header[j].Plnal).toString(),
								"Tleqhdr": AIWListETLData[i].grp,
								"Strat": AIWListETLData[i].header[j].Strat,
								"Eq2tl": AIWListETLData[i].header[j].equipment,
								"Datuv": this._formatDate(AIWListETLData[i].validFrm),
								// "Type": AIWListETLData[i].modeflag === "Crt"?true:false
							};
							sPayload.ETList.push(etList);
						}
					}

					if (AIWListETLData[i].operation) {
						for (var k = 0; k < AIWListETLData[i].operation.length; k++) {
							var etlOpr = {
								"Tleqhdr": AIWListETLData[i].grp,
								"Vornr": AIWListETLData[i].operation[k].Vornr,
								"TlArbpl": AIWListETLData[i].operation[k].Arbpl,
								"Werks2eop": AIWListETLData[i].operation[k].Werks,
								"Steus2eop": AIWListETLData[i].operation[k].Steus,
								"Ltxa1": AIWListETLData[i].operation[k].Ltxa1,
								"Arbei": AIWListETLData[i].operation[k].Arbei,
								"Dauno": AIWListETLData[i].operation[k].Dauno,
								"Arbeh": AIWListETLData[i].operation[k].Arbeh,
								"Anzzl": AIWListETLData[i].operation[k].Anzzl,
								"Daune": AIWListETLData[i].operation[k].Daune,
								"Indet": AIWListETLData[i].operation[k].Indet,
								"Tplnal": (AIWListETLData[i].operation[k].Plnal).toString(),
								"Uvorn": AIWListETLData[i].operation[k].Uvorn,
								"Larnt2eop": AIWListETLData[i].operation[k].Larnt,
								"Prznt": AIWListETLData[i].operation[k].workPerc === "" ? 0 : parseFloat(AIWListETLData[i].operation[k].workPerc),
								"Bmvrg": AIWListETLData[i].operation[k].orderQty,
								"Bmeih": AIWListETLData[i].operation[k].ordQtyUnit,
								"Opreis": AIWListETLData[i].operation[k].netPrice === "" ? "0.000" : parseFloat(AIWListETLData[i].operation[k].netPrice).toFixed(
									3).toString(),
								"Owaers": AIWListETLData[i].operation[k].currency,
								"Opeinh": AIWListETLData[i].operation[k].priceUnit === "" ? "0.000" : parseFloat(AIWListETLData[i].operation[k].priceUnit).toFixed(
									3).toString(),
								"Sakto2eop": AIWListETLData[i].operation[k].costElement,
								"Omatkl": AIWListETLData[i].operation[k].materialGrp,
								"Oekgrp": AIWListETLData[i].operation[k].puchGroup,
								"Ekorg": AIWListETLData[i].operation[k].purchOrg,
								"EqunrEop": AIWListETLData[i].operation[k].equi,
								"TplnrEop": AIWListETLData[i].operation[k].floc,
							};
							sPayload.ETOprs.push(etlOpr);

							for (var z = 0; z < AIWListETLData[i].operation[k].OprRel.length; z++) {
								var selObj = AIWListETLData[i].operation[k].OprRel[z];
								var oOprRel = {
									Tleqhdr: AIWListETLData[i].grp, //this.currentObj.grp,
									Tplnal: selObj.Plnal.toString(),
									Vorn2: selObj.Vornr,
									Vornrerel: selObj.OperationOR,
									Dauer: selObj.Offset,
									Zeinh: selObj.OUn,
									Aobar: selObj.RelType,
									Eprznt: selObj.PO,
									Provg: selObj.OI,
									Ekalid: selObj.ID,
									Arbplerel: selObj.WrkCtrOR,
									Werkserel: selObj.PlantOR,
								};
								sPayload.ETRel.push(oOprRel);
							}

							for (var z = 0; z < AIWListETLData[i].operation[k].SrvPckgOvrw.length; z++) {
								var selObj = AIWListETLData[i].operation[k].SrvPckgOvrw[z];
								var svObj = {
									Tleqhdr: AIWListETLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal.toString(),
									Vornrr: selObj.Vornr,
									SrvLine: selObj.LineNum,
									Del: formatter.truetoX(selObj.DelIndSP),
									Srvpos: selObj.ActNum,
									Ktext1: selObj.ShrtTxt,
									Mengeespk: selObj.Qty,
									Meinsespk: selObj.BUomSP,
									Tbtwr: selObj.GrossPrc,
									Waersespk: selObj.CurKey,
									IntWork: selObj.Work,
									Iwein: selObj.UnitOfWork,
								};
								sPayload.ETSpack.push(svObj);
							}

							for (var z = 0; z < AIWListETLData[i].operation[k].PRT.length; z++) {
								var selObj = AIWListETLData[i].operation[k].PRT[z];
								var prtObj = {
									Tleqhdr: AIWListETLData[i].grp, //selObj.grp,
									Tplnal: selObj.Plnal.toString(),
									Vornreprt: selObj.Vornr,
									Psnfh: selObj.ItmNum,
									Fhmar: selObj.ItmCat,
									// Fhmnr: selObj.PRT,
									Matnreprt: selObj.Mat,
									EqunrEpt: selObj.Equi,
									Eqpnt: selObj.Mspt,
									Doknreprt: selObj.doc,
									Dokareprt: selObj.docType,
									Doktleprt: selObj.docPart,
									Dokvreprt: selObj.docVersion,
									Fhmnr: selObj.Othr,
									Fhwrk: selObj.Plant, //PRTDesc,
									Mgvgw: selObj.Qty,
									Mgeinh: selObj.UOM,
									Mgform: selObj.QtyFrmla,
									Steuf: selObj.PRTCtrl,
									Stftxt: selObj.PRTCtrlDesc,
									Ewvgw: selObj.StdUsgVal,
									Eweinh: selObj.StdUsgUOM,
									Ewform: selObj.UsgValFrmla,
								};
								sPayload.ETPRT.push(prtObj);
							}

							for (var z = 0; z < AIWListETLData[i].operation[k].InspChar.length; z++) {
								var selObj = AIWListETLData[i].operation[k].InspChar[z];
								var inspObj = {
									Tleqhdr: AIWListETLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal.toString(),
									Vornreins: selObj.Vornr,
									Merknr: selObj.InspChar,
									Vste2eins: selObj.PrstInd,
									Quantitat: formatter.truetoX(selObj.QuanChar),
									QpmkRef: formatter.truetoX(selObj.QualChar),
									Verw2eins: selObj.MastInspChar,
									Uzae2tlen: selObj.Plant,
									Mkv2tleni: selObj.Version, //Ver2tleqi
									Kurztext: selObj.ShrtTxt,
									Pmth2eins: selObj.InspMthd,
									Qwe2tleqi: selObj.InspMthdPlnt,
									Toleranzs: selObj.TolKey,
									Ver2tleqi: selObj.VrsnInspMthd, //Pmtversio
									Stichprve: selObj.SampProc,
									Probemgeh: selObj.SampUOM,
									Pruefeinh: selObj.BaseSampQty === "" ? "0.00" : parseFloat(selObj.BaseSampQty).toFixed(2),
									Auswmenge: selObj.CodeGrp,
								};
								sPayload.ETInsp.push(inspObj);
							}
						}
					}

					if (AIWListETLData[i].MaintPckg && AIWListETLData[i].MaintPckg.length > 0) {
						for (var z = 0; z < AIWListETLData[i].MaintPckg.length; z++) {
							if (AIWListETLData[i].MaintPckg[z].MPArr && AIWListETLData[i].MaintPckg[z].MPArr.length > 0) {
								for (var y = 0; y < AIWListETLData[i].MaintPckg[z].MPArr.length; y++) {
									var curObj = AIWListETLData[i].MaintPckg[z].MPArr[y];
									var moObj = {
										// Gplnkn: curObj.Gplnkn,
										// IsSelected: curObj.IsSelected,
										Ktex1: curObj.Ktex1,
										Ktxhi: curObj.Ktxhi,
										Kzyk1: curObj.Kzyk1,
										// Paket: curObj.IsSelected,
										Paketempk: curObj.Paket,
										Startempk: curObj.Strat,
										// Strat: curObj.Strat,
										Tleqhdr: AIWListETLData[i].grp, //this.currentObj.grp,
										Tplnal: curObj.Plnal.toString(),
										// Uzaehl: curObj.Uzaehl,
										Vorn2empk: curObj.Vornr,
										// Vornr: curObj.IsSelected,
									};
								}
								sPayload.ETMPack.push(moObj);
							}
						}
					}

					if (AIWListETLData[i].component) {
						for (var l = 0; l < AIWListETLData[i].component.length; l++) {
							var etlComp = {
								"Tleqhdr": AIWListETLData[i].grp,
								"Idnrk": AIWListETLData[i].component[l].Idnrk,
								"Menge": AIWListETLData[i].component[l].Menge,
								"MeinsEcp": AIWListETLData[i].component[l].MeinsGcp,
								"Vornr": AIWListETLData[i].component[l].Vornr,
								"Postp": AIWListETLData[i].component[l].Postp,
								"Tplnal": (AIWListETLData[i].component[l].Plnal).toString()
							};
							sPayload.ETComp.push(etlComp);
						}
					}

					if (AIWListETLData[i].Class) {
						for (var m = 0; m < AIWListETLData[i].Class.length; m++) {
							var etlClass = {
								"Tleqhdr": AIWListETLData[i].grp,
								"Classtype": AIWListETLData[i].Class[m].Classtype,
								"Class": AIWListETLData[i].Class[m].Class,
								"Clstatus1": AIWListETLData[i].Class[m].Clstatus1,
								"Tplnal": (AIWListETLData[i].Class[m].Plnal).toString()
							};
							sPayload.ETClass.push(etlClass);
						}
					}

					if (AIWListETLData[i].Char) {
						for (var n = 0; n < AIWListETLData[i].Char.length; n++) {
							// for (var k = 0; k < AIWListETLData[i].Class.length; k++) {
							// 	if (AIWListETLData[i].Class[k].Class === AIWListETLData[i].Char[n].Class) {
							// 		AIWListETLData[i].Char[n].Plnal = AIWListETLData[i].Class[k].Plnal;
							// 	}
							// }
							var etlChar = {
								"Tleqhdr": AIWListETLData[i].grp,
								"Atnam": AIWListETLData[i].Char[n].Atnam,
								"Textbez": AIWListETLData[i].Char[n].Textbez,
								"Atwrt": AIWListETLData[i].Char[n].Atwrt,
								"Class": AIWListETLData[i].Char[n].Class,
								"Tplnal": (AIWListETLData[i].Char[n].Plnal).toString()
							};
							sPayload.ETVal.push(etlChar);
						}
					}
				}
			}

			if (AIWListFTLData.length > 0) {
				for (var i = 0; i < AIWListFTLData.length; i++) {
					if (AIWListFTLData[i].header) {
						for (var j = 0; j < AIWListFTLData[i].header.length; j++) {
							if (AIWListFTLData[i].header[j].Iwerk !== "") {
								AIWListFTLData[i].header[j].Werks = AIWListFTLData[i].header[j].Iwerk;
							}
							var ftList = {
								"Werks": AIWListFTLData[i].header[j].Werks,
								"Wcplant": AIWListFTLData[i].header[j].plant,
								"Statu": AIWListFTLData[i].header[j].Statu,
								"Tverwe": AIWListFTLData[i].header[j].tlusg,
								"Ktext": AIWListFTLData[i].header[j].Ktext,
								"Tarbpl": AIWListFTLData[i].header[j].wc,
								"Vagrp": AIWListFTLData[i].header[j].Vagrp,
								"Anlzu": AIWListFTLData[i].header[j].Anlzu,
								"Tplnal": (AIWListFTLData[i].header[j].Plnal).toString(),
								"Tlflhdr": AIWListFTLData[i].grp,
								"Strat": AIWListFTLData[i].header[j].Strat,
								"Fl2tl": AIWListFTLData[i].header[j].floc,
								"Datuv": this._formatDate(AIWListETLData[i].validFrm),
								// "Type": AIWListFTLData[i].modeflag === "Crt"?true:false
							};
							sPayload.FTList.push(ftList);
						}
					}

					if (AIWListFTLData[i].operation) {
						for (var k = 0; k < AIWListFTLData[i].operation.length; k++) {
							var ftlOpr = {
								"Tlflhdr": AIWListFTLData[i].grp,
								"Vornr": AIWListFTLData[i].operation[k].Vornr,
								"TlArbpl": AIWListFTLData[i].operation[k].Arbpl,
								"Werks2fop": AIWListFTLData[i].operation[k].Werks,
								"Steus2fop": AIWListFTLData[i].operation[k].Steus,
								"Ltxa1": AIWListFTLData[i].operation[k].Ltxa1,
								"Arbei": AIWListFTLData[i].operation[k].Arbei,
								"Dauno": AIWListFTLData[i].operation[k].Dauno,
								"Arbeh": AIWListFTLData[i].operation[k].Arbeh,
								"Anzzl": AIWListFTLData[i].operation[k].Anzzl,
								"Daune": AIWListFTLData[i].operation[k].Daune,
								"Indet": AIWListFTLData[i].operation[k].Indet,
								"Tplnal": (AIWListFTLData[i].operation[k].Plnal).toString(),
								"Uvorn": AIWListFTLData[i].operation[k].Uvorn,
								"Larnt2fop": AIWListFTLData[i].operation[k].Larnt,
								"Prznt": AIWListFTLData[i].operation[k].workPerc === "" ? 0 : parseFloat(AIWListFTLData[i].operation[k].workPerc),
								"Bmvrg": AIWListFTLData[i].operation[k].orderQty,
								"Bmeih": AIWListFTLData[i].operation[k].ordQtyUnit,
								"Opreis": AIWListFTLData[i].operation[k].netPrice === "" ? "0.000" : parseFloat(AIWListFTLData[i].operation[k].netPrice).toFixed(
									3).toString(),
								"Owaers": AIWListFTLData[i].operation[k].currency,
								"Opeinh": AIWListFTLData[i].operation[k].priceUnit === "" ? "0.000" : parseFloat(AIWListFTLData[i].operation[k].priceUnit).toFixed(
									3).toString(),
								"Sakto2fop": AIWListFTLData[i].operation[k].costElement,
								"Omatkl": AIWListFTLData[i].operation[k].materialGrp,
								"Oekgrp": AIWListFTLData[i].operation[k].puchGroup,
								"Ekorg": AIWListFTLData[i].operation[k].purchOrg,
								"EqunrFop": AIWListFTLData[i].operation[k].equi,
								"TplnrFop": AIWListFTLData[i].operation[k].floc,
							};
							sPayload.FTOprs.push(ftlOpr);

							for (var z = 0; z < AIWListFTLData[i].operation[k].OprRel.length; z++) {
								var selObj = AIWListFTLData[i].operation[k].OprRel[z];
								var oOprRel = {
									Tlflhdr: AIWListFTLData[i].grp, //this.currentObj.grp,
									Tplnal: selObj.Plnal.toString(),
									Vorn2: selObj.Vornr,
									Vornrfrel: selObj.OperationOR,
									Dauer: selObj.Offset,
									Zeinh: selObj.OUn,
									Aobar: selObj.RelType,
									Fprznt: selObj.PO,
									Provg: selObj.OI,
									Fkalid: selObj.ID,
									Arbplfrel: selObj.WrkCtrOR,
									Werksfrel: selObj.PlantOR,
								};
								sPayload.FTRel.push(oOprRel);
							}

							for (var z = 0; z < AIWListFTLData[i].operation[k].SrvPckgOvrw.length; z++) {
								var selObj = AIWListFTLData[i].operation[k].SrvPckgOvrw[z];
								var svObj = {
									Tlflhdr: AIWListFTLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal.toString(),
									Vornrr: selObj.Vornr,
									SrvLine: selObj.LineNum,
									Del: formatter.truetoX(selObj.DelIndSP),
									Srvpos: selObj.ActNum,
									Ktext1: selObj.ShrtTxt,
									Mengefspk: selObj.Qty,
									Meinsfspk: selObj.BUomSP,
									Tbtwr: selObj.GrossPrc,
									Waersfspk: selObj.CurKey,
									IntWork: selObj.Work,
									Iwein: selObj.UnitOfWork,
								};
								sPayload.FTSpack.push(svObj);
							}

							for (var z = 0; z < AIWListFTLData[i].operation[k].PRT.length; z++) {
								var selObj = AIWListFTLData[i].operation[k].PRT[z];
								var prtObj = {
									Tlflhdr: AIWListFTLData[i].grp, //selObj.grp,
									Tplnal: selObj.Plnal.toString(),
									Vornrfprt: selObj.Vornr,
									Psnfh: selObj.ItmNum,
									Fhmar: selObj.ItmCat,
									// Fhmnr: selObj.PRT,
									Matnrfprt: selObj.Mat,
									EqunrFpt: selObj.Equi,
									Eqpnt: selObj.Mspt,
									Doknrfprt: selObj.doc,
									Dokarfprt: selObj.docType,
									Doktlfprt: selObj.docPart,
									Dokvrfprt: selObj.docVersion,
									Fhmnr: selObj.Othr,
									Fhwrk: selObj.Plant, //PRTDesc,
									Mgvgw: selObj.Qty,
									Mgeinh: selObj.UOM,
									Mgform: selObj.QtyFrmla,
									Steuf: selObj.PRTCtrl,
									Stftxt: selObj.PRTCtrlDesc,
									Ewvgw: selObj.StdUsgVal,
									Eweinh: selObj.StdUsgUOM,
									Ewform: selObj.UsgValFrmla,
								};
								sPayload.FTPRT.push(prtObj);
							}

							for (var z = 0; z < AIWListFTLData[i].operation[k].InspChar.length; z++) {
								var selObj = AIWListFTLData[i].operation[k].InspChar[z];
								var inspObj = {
									Tlflhdr: AIWListFTLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal.toString(),
									Vornrfins: selObj.Vornr,
									Merknr: selObj.InspChar,
									Vste2eins: selObj.PrstInd,
									Quantitat: formatter.truetoX(selObj.QuanChar),
									QpmkRef: formatter.truetoX(selObj.QualChar),
									Verw2fins: selObj.MastInspChar,
									Uzae2tlfn: selObj.Plant,
									Mkv2tleni: selObj.Version, //Ver2tlfli
									Kurztext: selObj.ShrtTxt,
									Pmth2fins: selObj.InspMthd,
									Qwe2tlfli: selObj.InspMthdPlnt,
									Toleranzs: selObj.TolKey,
									Ver2tlfli: selObj.VrsnInspMthd, //Pmtversio
									Stichprve: selObj.SampProc,
									Probemgeh: selObj.SampUOM,
									Pruefeinh: selObj.BaseSampQty === "" ? "0.00" : parseFloat(selObj.BaseSampQty).toFixed(2),
									Auswmenge: selObj.CodeGrp,
								};
								sPayload.FTInsp.push(inspObj);
							}
						}
					}

					if (AIWListFTLData[i].MaintPckg && AIWListFTLData[i].MaintPckg.length > 0) {
						for (var z = 0; z < AIWListFTLData[i].MaintPckg.length; z++) {
							if (AIWListFTLData[i].MaintPckg[z].MPArr && AIWListFTLData[i].MaintPckg[z].MPArr.length > 0) {
								for (var y = 0; y < AIWListFTLData[i].MaintPckg[z].MPArr.length; y++) {
									var curObj = AIWListFTLData[i].MaintPckg[z].MPArr[y];
									var moObj = {
										// Gplnkn: curObj.Gplnkn,
										// IsSelected: curObj.IsSelected,
										Ktex1: curObj.Ktex1,
										Ktxhi: curObj.Ktxhi,
										Kzyk1: curObj.Kzyk1,
										// Paket: curObj.IsSelected,
										Paketfmpk: curObj.Paket,
										Startfmpk: curObj.Strat,
										// Strat: curObj.Strat,
										Tlflhdr: AIWListFTLData[i].grp, //this.currentObj.grp,
										Tplnal: curObj.Plnal.toString(),
										// Uzaehl: curObj.Uzaehl,
										Vorn2fmpk: curObj.Vornr,
										// Vornr: curObj.IsSelected,
									};
								}
								sPayload.FTMPack.push(moObj);
							}
						}
					}

					if (AIWListFTLData[i].component) {
						for (var l = 0; l < AIWListFTLData[i].component.length; l++) {
							var ftlComp = {
								"Tlflhdr": AIWListFTLData[i].grp,
								"Idnrk": AIWListFTLData[i].component[l].Idnrk,
								"Menge": AIWListFTLData[i].component[l].Menge,
								"MeinsFcp": AIWListFTLData[i].component[l].MeinsGcp,
								"Vornr": AIWListFTLData[i].component[l].Vornr,
								"Postp": AIWListFTLData[i].component[l].Postp,
								"Tplnal": (AIWListFTLData[i].component[l].Plnal).toString()
							};
							sPayload.FTComp.push(ftlComp);
						}
					}

					if (AIWListFTLData[i].Class) {
						for (var m = 0; m < AIWListFTLData[i].Class.length; m++) {
							var ftlClass = {
								"Tlflhdr": AIWListFTLData[i].grp,
								"Classtype": AIWListFTLData[i].Class[m].Classtype,
								"Class": AIWListFTLData[i].Class[m].Class,
								"Clstatus1": AIWListFTLData[i].Class[m].Clstatus1,
								"Tplnal": (AIWListFTLData[i].Class[m].Plnal).toString()
							};
							sPayload.FTClass.push(ftlClass);
						}
					}

					if (AIWListFTLData[i].Char) {
						for (var n = 0; n < AIWListFTLData[i].Char.length; n++) {
							// for (var k = 0; k < AIWListFTLData[i].Class.length; k++) {
							// 	if (AIWListFTLData[i].Class[k].Class === AIWListFTLData[i].Char[n].Class) {
							// 		AIWListFTLData[i].Char[n].Plnal = AIWListFTLData[i].Class[k].Plnal;
							// 	}
							// }
							var ftlChar = {
								"Tlflhdr": AIWListFTLData[i].grp,
								"Atnam": AIWListFTLData[i].Char[n].Atnam,
								"Textbez": AIWListFTLData[i].Char[n].Textbez,
								"Atwrt": AIWListFTLData[i].Char[n].Atwrt,
								"Class": AIWListFTLData[i].Char[n].Class,
								"Tplnal": (AIWListFTLData[i].Char[n].Plnal).toString()
							};
							sPayload.FTVal.push(ftlChar);
						}
					}
				}
			}

			if (AIWListOLData.length > 0) {
				for (var i = 0; i < AIWListOLData.length; i++) {
					var olHeader = {
						"Begru": AIWListOLData[i].autGrp,
						"Objlink": AIWListOLData[i].link,
						"Kanxt": AIWListOLData[i].linkDesc,
						"Eqkant": AIWListOLData[i].linkObjEq,
						"Tpkant": AIWListOLData[i].linkObjFl,
						"Netyp": AIWListOLData[i].linkCat,
						"Eqvon": AIWListOLData[i].linkFrmEq,
						"Tpvon": AIWListOLData[i].linkFrmFl,
						"Eqnach": AIWListOLData[i].linkToEq,
						"Tpnach": AIWListOLData[i].linkToFl,
						"Mediu": AIWListOLData[i].medium,
						"Lfdknr": AIWListOLData[i].linkNum,
						"Kantyp": AIWListOLData[i].objCat,
						"Netid": AIWListOLData[i].netId,
						"Bezarp": AIWListOLData[i].Bezarp,
						"Bezarl": AIWListOLData[i].Bezarl,
						"Datva": formatter._formatDate(AIWListOLData[i].validFrm),
						"Zeitva": formatter._timeConvert(AIWListOLData[i].timeFrm),
						"Datvb": formatter._formatDate(AIWListOLData[i].validTo),
						"Zeitvb": formatter._timeConvert(AIWListOLData[i].timeTo),
						"Stattext": AIWListOLData[i].Stattext,
						"StsmOl": AIWListOLData[i].StsmOl,
						"UstwOl": AIWListOLData[i].UstwOl,
						"UswoOl": AIWListOLData[i].UswoOl,
						"UstaOl": AIWListOLData[i].UstaOl
					};
					sPayload.Olink.push(olHeader);

					if (AIWListOLData[i].Class) {
						for (var j = 0; j < AIWListOLData[i].Class.length; j++) {
							var mClass = {
								"Objlink": AIWListOLData[i].Class[j].Objlink,
								"Classtype": AIWListOLData[i].Class[j].Classtype,
								"Class": AIWListOLData[i].Class[j].Class,
								"Clstatus1": AIWListOLData[i].Class[j].Clstatus1
							};
							sPayload.OLClass.push(mClass);
						}
					}

					if (AIWListOLData[i].Char) {
						for (var k = 0; k < AIWListOLData[i].Char.length; k++) {
							var mChar = {
								"Objlink": AIWListOLData[i].Char[k].Objlink,
								"Atnam": AIWListOLData[i].Char[k].Atnam,
								"Textbez": AIWListOLData[i].Char[k].Textbez,
								"Atwrt": AIWListOLData[i].Char[k].Atwrt,
								"Class": AIWListOLData[i].Char[k].Class
							};
							sPayload.OLVal.push(mChar);
						}
					}

				}
			}

			this.BusyDialog.open();

			var oModel = this.getView().getModel();
			var h = {
				"X-Requested-With": "xmlHTTPrequest"
			};
			oModel.setHeaders(h);

			if (sPayload.FLAddrI.length > 0) {
				sPayload.FLAddrI = $.map(sPayload.FLAddrI, function (obj) {
					return $.extend(true, {}, obj);
				});
				for (var i = 0; i < sPayload.FLAddrI.length > 0; i++) {
					delete sPayload.FLAddrI[i].AdNationEnable;
					delete sPayload.FLAddrI[i].City1iVS;
					delete sPayload.FLAddrI[i].StreetiVS;
				}
			}
			if (sPayload.EqAddrI.length > 0) {
				sPayload.EqAddrI = $.map(sPayload.EqAddrI, function (obj) {
					return $.extend(true, {}, obj);
				});
				for (var i = 0; i < sPayload.EqAddrI.length > 0; i++) {
					delete sPayload.EqAddrI[i].AdNationEnable;
					delete sPayload.EqAddrI[i].City1iVS;
					delete sPayload.EqAddrI[i].StreetiVS;
				}
			}

			oModel.create("/ChangeRequestSet", sPayload, {
				success: function (r) {
					var cr = r;
					// success = true;
					// add this in existing model
					// g.getView().byId("idMessagePopover").setEnabled(false);
					g.BusyDialog.close();
					if (cr.IsDraft === "C") {
						var oMessageList = [];
						for (var e = 0; e < cr.Messages.results.length; e++) {
							oMessageList.push({
								type: formatter.getMessageType(cr.Messages.results[e].Type),
								title: cr.Messages.results[e].Message
							});
						}
						g.createMessagePopover(oMessageList, false);
					} else if (cr.Messages.results.length > 0) {
						var oMessageList = [];
						for (var e = 0; e < cr.Messages.results.length; e++) {
							oMessageList.push({
								type: formatter.getMessageType(cr.Messages.results[e].Type),
								title: cr.Messages.results[e].Message
							});
						}
						g.createMessagePopover(oMessageList, false);
					} else if (cr.ChangeRequestId !== "0") {
						g.clearData();
						g.getView().byId("idMessagePopover").setEnabled(false);
						sap.m.MessageToast.show(cr.Message, {
							duration: 6000 // default
						});
						g.oMessagePopover.close();
					}
				},
				error: function (err) {
					g.BusyDialog.close();
					var error = [];
					if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
						.errordetails
						.length === 0) {
						error[0] = JSON.parse(err.responseText).error.message.value;
					} else {
						for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
							error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
						}
					}

					var oMessageList = [];
					for (var e = 0; e < error.length; e++) {
						oMessageList.push({
							type: "Error",
							title: error[e]
						});
					}

					g.createMessagePopover(oMessageList, false);

					// var value = error.join("\n");
					// sap.m.MessageBox.show(value, {
					// 	title: "Error",
					// 	icon: sap.m.MessageBox.Icon.ERROR,
					// 	onClose: function () {}
					// });

				}
			});
		},
		/*
		 * Function to get time from date object
		 * @param {date} c
		 */
		getTime: function (c) {
			var timeStr = timeFormat.format(new Date(c));
			return timeStr;
		},
		/*
		 * Function to get Decision
		 * @param id
		 */
		getDecision: function (id) {
			// var date = this._formatDate();
			var g = this;
			this.dModel = null;
			var decRead = this.getView().getModel("ApprovalModel");
			var filter = [new sap.ui.model.Filter("Crequest", "EQ", this.cReqNo)];
			decRead.read("/ActionSet", {
				filters: filter,
				success: function (r, a) {
					g.dModel = r.results;
					if (r.results.length > 0) {
						for (var result = 0; result < r.results.length; result++) {
							g.getView().getModel("EnableModel").setProperty("/isEnable", true);
							g.getView().getModel("EnableModel").setProperty("/approverejectEnable", true);
							// if ((r.results[result].ActionCode === "09")) {
							// 	this.actionCode = r.results[result].ActionCode;
							// 	g.getView().byId("approve").setText(g.getView().getModel("i18n").getProperty("activate"));
							// }
							// if ((r.results[result].ActionCode === "03")) {
							// 	this.actionCode = r.results[result].ActionCode;
							// 	g.getView().byId("approve").setText(g.getView().getModel("i18n").getProperty("approve"));
							// }
							if ((r.results[result].ActionCode === "04")) {
								this.ractionCode = r.results[result].ActionCode;
								g.getView().byId("reject").setText(g.getView().getModel("i18n").getProperty("reject"));
							} else if ((r.results[result].ActionCode === "10")) {
								this.ractionCode = r.results[result].ActionCode;
								g.getView().byId("reject").setText(g.getView().getModel("i18n").getProperty("sendForRevision"));
							} else {
								this.actionCode = r.results[result].ActionCode;
								g.getView().byId("approve").setText(r.results[result].BtnText);
							}
						}
					} else {
						g.getView().getModel("EnableModel").setProperty("/isEnable", false);
					}

					g.decisionDialog.close();
				}.bind(this),
				error: function (err) {
					g.decisionDialog.close();
					g.getView().getModel("EnableModel").setProperty("/isEnable", false);
					g.getView().getModel("EnableModel").setProperty("/isActivateEnable", false);
					var error = [];
					if (JSON.parse(err.response.body).error.innererror.errordetails === undefined || JSON.parse(err.response.body).error.innererror
						.errordetails
						.length === 0) {

						error[0] = JSON.parse(err.response.body).error.message.value;
					} else {
						for (var m = 0; m < JSON.parse(err.response.body).error.innererror.errordetails.length; m++) {
							error[m] = JSON.parse(err.response.body).error.innererror.errordetails[m].message;
						}
					}

					var value = error.join("\n");
					sap.m.MessageBox.error(value, {
						// title: "Error",
						onClose: function (oAction) {
							if (oAction === "OK") {
								window.history.back();
							}
						}
					});
				}.bind(this)
			});
		},
		/*
		 * This function is invoked when 'Approve' button is clicked
		 */
		onApprovePress: function () {
			var g = this;
			var crCollection = this.getView().getModel("crCollection");
			var changdAt = crCollection.getProperty(this.itemPath).ChangedAt.ms;
			g.ChangedAt = this.getTime(changdAt);

			var payload = {
				"ActionCode": this.actionCode,
				"ChangeRequestID": g.cReqNo,
				"Model": crCollection.getProperty(this.itemPath).Model,
				"Note": "",
				"CreatedBy": crCollection.getProperty(this.itemPath).CreatedBy,
				"ObjectDescription": encodeURIComponent(g.crDesc),
				// "MainEntity": crCollection[this.itemPath].MainEntity,
				"ChangedAt": crCollection.getProperty(this.itemPath).CRChangedAt,
				"RejectionReasonCode": ""
			};
			g.decisionDialog.open();
			var sPath = "/ExecuteCRSet";
			var oModel = g.getView().getModel("ApprovalModel");
			var fnSuccess = function (o) {
				var m = o.Message;
				sap.m.MessageToast.show(m, {
					duration: 6000
				});
				// if (this.actionCode === "09") {
				g.decisionDialog.close();
				window.history.back();
				// } else {
				// g.getDecision();
				// }

			}.bind(this);
			var fnError = function (err) {
				g.decisionDialog.close();
				var error = [];
				if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror.errordetails
					.length === 0) {
					error[0] = JSON.parse(err.responseText).error.message.value;
				} else {
					for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
						error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
					}
				}

				var oMessageList = [];
				for (var e = 0; e < error.length; e++) {
					oMessageList.push({
						type: "Error",
						title: error[e]
					});
				}

				g.createMessagePopover(oMessageList, false);

				// var value = error.join("\n");
				// sap.m.MessageBox.show(value, {
				// 	title: "Error",
				// 	icon: sap.m.MessageBox.Icon.ERROR,
				// 	onClose: function () {}
				// });
			};

			oModel.create(sPath, payload, {
				success: fnSuccess,
				error: fnError
			});
		},
		/*
		 * This function is invoked when 'Reject' button is clicked
		 */
		onRejectPress: function () {
			this.getRejectDialog().open();
		},
		/*
		 * This function is invoked when 'Activate' button is clicked
		 */
		onActivatePress: function () {
			var g = this;
			var crCollection = this.getView().getModel("crCollection");
			var changdAt = crCollection.getProperty(this.itemPath).ChangedAt.ms;
			g.ChangedAt = this.getTime(changdAt);

			var payload = {
				"ActionCode": this.actionCode,
				"ChangeRequestID": g.cReqNo,
				"Model": crCollection.getProperty(this.itemPath).Model,
				"Note": "",
				"CreatedBy": crCollection.getProperty(this.itemPath).CreatedBy,
				"ObjectDescription": encodeURIComponent(g.crDesc),
				// "MainEntity": crCollection[this.itemPath].MainEntity,
				"ChangedAt": crCollection.getProperty(this.itemPath).CRChangedAt,
				"RejectionReasonCode": ""
			};

			var sPath = "/ExecuteCRSet";
			var oModel = g.getView().getModel("ApprovalModel");
			var fnSuccess = function (o) {
				var m = o.Message;
				sap.m.MessageBox.show(m, {
					title: "Success",
					icon: sap.m.MessageBox.Icon.SUCCESS,
					onClose: function () {
						window.history.back();
					}
				});
			};
			var fnError = function (err) {
				var error = [];
				if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror.errordetails
					.length === 0) {
					error[0] = JSON.parse(err.responseText).error.message.value;
				} else {
					for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
						error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
					}
				}

				var oMessageList = [];
				for (var e = 0; e < error.length; e++) {
					oMessageList.push({
						type: "Error",
						title: error[e]
					});
				}

				g.createMessagePopover(oMessageList, false);

				// var value = error.join("\n");
				// sap.m.MessageBox.show(value, {
				// 	title: "Error",
				// 	icon: sap.m.MessageBox.Icon.ERROR,
				// 	onClose: function () {}
				// });
			};

			oModel.create(sPath, payload, {
				success: fnSuccess,
				error: fnError
			});
		},
		/*
		 * This function is invoked when 'Revision' button is clicked
		 */
		onRevisionPress: function () {
			var g = this;
			var n = sap.ui.getCore().byId("rejectNote").getValue();
			var q = sap.ui.getCore().byId("rejectReason").getValue();
			var crCollection = this.getView().getModel("crCollection");
			// g.ChangedAt = g.ChangedAt.toISOString();
			var changdAt = crCollection.getProperty(this.itemPath).ChangedAt.ms;
			g.ChangedAt = this.getTime(changdAt);
			var payload = {
				"ActionCode": this.ractionCode,
				"ChangeRequestID": g.cReqNo,
				"Model": crCollection.getProperty(this.itemPath).Model,
				"Note": n,
				"CreatedBy": crCollection.getProperty(this.itemPath).CreatedBy,
				"ObjectDescription": encodeURIComponent(g.crDesc),
				// "MainEntity": crCollection[this.itemPath].MainEntity,
				"ChangedAt": crCollection.getProperty(this.itemPath).CRChangedAt,
				"RejectionReasonCode": q
			};

			var sPath = "/ExecuteCRSet";
			var oModel = g.getView().getModel("ApprovalModel");
			var fnSuccess = function (o) {
				var m = o.Message;
				sap.m.MessageToast.show(m);
				// g.decisionDialog.open();
				// g.getDecision();
				window.history.back();

			};
			var fnError = function (err) {
				var error = [];
				if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror.errordetails
					.length === 0) {
					error[0] = JSON.parse(err.responseText).error.message.value;
				} else {
					for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
						error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
					}
				}

				var oMessageList = [];
				for (var e = 0; e < error.length; e++) {
					oMessageList.push({
						type: "Error",
						title: error[e]
					});
				}

				g.createMessagePopover(oMessageList, false);

				// var value = error.join("\n");
				// sap.m.MessageBox.show(value, {
				// 	title: "Error",
				// 	icon: sap.m.MessageBox.Icon.ERROR,
				// 	onClose: function () {}
				// });
			};

			oModel.create(sPath, payload, {
				success: fnSuccess,
				error: fnError
			});

		},

		/* =========================================================== */
		/* Event Handlers                                                                                                   */
		/* =========================================================== */
		/**
		 * Triggered by the 'valueHelpRequest' event of Input controls.
		 */
		/**
		 * To display Value Help of Work Center
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		onWcVH: function (oEvent) {
			var g = this;
			if (this.action === "createWC") {
				var sPath = oEvent.getSource().getBindingContext("AIWListWCModel").getPath();
				g.sindex = parseInt(sPath.split("/")[1]);
				var wcData = oEvent.getSource().getBindingContext("AIWListWCModel").getModel().getData();
				var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel");
			}
			if (this.action === "copyWC" || this.action === "changeWC") {
				this.sourceId = oEvent.getSource().getId();
			}
			var wcSearchResults;
			if (wcSearchResults === undefined) {
				var wcSelectDialog = new sap.m.TableSelectDialog({
					title: this.getView().getModel("i18n").getProperty("WORK_CENTER"),
					noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
					columns: [new sap.m.Column({
						header: [
							new sap.m.Text({
								text: "Work Center Category"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "Plant"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "Work Center"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "Description"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "Language"
							})
						]
					})],
					items: {
						path: "/WorkCenterVHSet",
						template: new sap.m.ColumnListItem({
							type: "Active",
							unread: false,
							cells: [
								new sap.m.Text({
									text: "{Verwe}"
								}),
								new sap.m.Text({
									text: "{Werks}"
								}),
								new sap.m.Text({
									text: "{Arbpl}"
								}),
								new sap.m.Text({
									text: "{Ktext}"
								}),
								new sap.m.Text({
									text: "{Spras}"
								})
							]
						})

					},
					confirm: function (E) {
						if (g.action === "createWC" || g.action === "changeWC") {
							wcData[g.sindex].wcValueState = "None";
							wcData[g.sindex].wcValueStateTxt = "";
							wcData[g.sindex].wcEnable = false;
							// m.setValue(E.getParameter("selectedItem").getCells()[2].getText());
							wcData[g.sindex].wc = E.getParameter("selectedItem").getCells()[2].getText();
							wcData[g.sindex].wcDesc = E.getParameter("selectedItem").getCells()[3].getText();
							AIWListWCModel.setData(wcData);
							g.getView().setModel(AIWListWCModel, "AIWListWCModel");
						}
						if (g.action === "copyWC" || g.action === "changeWC") {
							var sourceId = g.sourceId;
							sap.ui.getCore().byId(sourceId).setValue(E.getParameter("selectedItem").getCells()[2].getText());
							sap.ui.getCore().byId(sourceId).setValueState("None");
						}
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("Arbpl", sap.ui.model.FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("Ktext", sap.ui.model.FilterOperator.Contains, sValue)
								],
								false)
						]);
					}
				});

				var q = "/WorkCenterVHSet";
				var M = this.getView().getModel("valueHelp");
				M.read(q, {
					success: function (h) {
						if (h.results.length > 0) {
							//if (g._copyWCFragment) {
							var oModelData = g.getView().getModel("AIWListWCModel").getData();
							if (oModelData.length > 0) {
								for (var i = 0; i < oModelData.length; i++) {
									var sObj = {
										Verwe: oModelData[i].wcCat,
										Werks: oModelData[i].plant,
										Arbpl: oModelData[i].wc,
										Ktext: oModelData[i].wcDesc,
										Spras: h.results[0].Spras
									};
									h.results.unshift(sObj);
								}
							}
							//}

							wcSearchResults = h;
							var I = new sap.m.ColumnListItem({
								type: "Active",
								unread: false,
								cells: [
									new sap.m.Text({
										text: "{Verwe}"
									}),
									new sap.m.Text({
										text: "{Werks}"
									}),
									new sap.m.Text({
										text: "{Arbpl}"
									}),
									new sap.m.Text({
										text: "{Ktext}"
									}),
									new sap.m.Text({
										text: "{Spras}"
									})
								]
							});
							var e = new sap.ui.model.json.JSONModel();
							e.setData(h);
							wcSelectDialog.setModel(e);
							// wcSelectDialog.setGrowingThreshold(h.results.length);
							wcSelectDialog.bindAggregation("items", "/results", I);
						} else {
							wcSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
						}
					}
				});
			} else {
				var template = new sap.m.ColumnListItem({
					type: "Active",
					unread: false,
					cells: [
						new sap.m.Text({
							text: "{Verwe}"
						}),
						new sap.m.Text({
							text: "{Werks}"
						}),
						new sap.m.Text({
							text: "{Arbpl}"
						}),
						new sap.m.Text({
							text: "{Ktext}"
						}),
						new sap.m.Text({
							text: "{Spras}"
						})
					]
				});

				var e = new sap.ui.model.json.JSONModel();
				e.setData(wcSearchResults);
				wcSelectDialog.setModel(e);
				wcSelectDialog.setGrowingThreshold(wcSearchResults.results.length);
				wcSelectDialog.bindAggregation("items", "/results", template);
				var I = wcSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			wcSelectDialog.open();
		},
		/**
		 * To display Value Help of Plant
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		onPlantVH: function (oEvent) {
			//this.plantVH("plant", c);
			/*var sPath = oEvent.getSource().getBindingContext("AIWListWCModel").getPath();
			var a = this._Common.plantVH("plant", c, sPath);*/
			var g = this;
			var sPath, wcData, AIWListWCModel;
			if (g.action === "createWC" || g.action === "changeWC") {
				sPath = oEvent.getSource().getBindingContext("AIWListWCModel").getPath();
				g.sindex = parseInt(sPath.split("/")[1]);
				/*var wcData = oEvent.getSource().getBindingContext("AIWListWCModel").getModel().getData();
				var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel");*/
			}
			if (g.action === "copyWC" || g.action === "changeWC") {
				this.sourceId = oEvent.getSource().getId();
				// var copyWCData = oEvent.getSource().getBindingContext("copyWCModel").getModel().getData();
				// var copyWCModel = sap.ui.getCore().getModel("copyWCModel");
			}
			var pSearchResults;
			if (pSearchResults === undefined || pSearchResults === {}) {
				var pSelectDialog = new sap.m.TableSelectDialog({

					title: this.getView().getModel("i18n").getProperty("PLANT"),
					noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
					columns: [
						new sap.m.Column({
							demandPopin: true,
							minScreenWidth: "Tablet",
							header: [
								new sap.m.Text({
									text: "Plant"
								})
							]
						}),
						new sap.m.Column({
							header: [
								new sap.m.Text({
									text: "Search Term 1"
								})
							]
						}), new sap.m.Column({
							demandPopin: true,
							minScreenWidth: "Tablet",
							header: [
								new sap.m.Text({
									text: "Search Term 2"
								})
							]
						}), new sap.m.Column({
							demandPopin: true,
							minScreenWidth: "Tablet",
							header: [
								new sap.m.Text({
									text: "Postal Code"
								})
							]
						}), new sap.m.Column({
							demandPopin: true,
							minScreenWidth: "Tablet",
							header: [
								new sap.m.Text({
									text: "City"
								})
							]
						}), new sap.m.Column({
							demandPopin: true,
							minScreenWidth: "Tablet",
							header: [
								new sap.m.Text({
									text: "Name2"
								})
							]
						}), new sap.m.Column({
							demandPopin: true,
							minScreenWidth: "Tablet",
							header: [
								new sap.m.Text({
									text: "Name"
								})
							]
						}), new sap.m.Column({
							demandPopin: true,
							minScreenWidth: "Tablet",
							header: [
								new sap.m.Text({
									text: "Company Name"
								})
							]
						}),
						new sap.m.Column({
							demandPopin: true,
							minScreenWidth: "Tablet",
							header: [
								new sap.m.Text({
									text: "Addess Version"
								})
							]
						}),
						new sap.m.Column({
							demandPopin: true,
							minScreenWidth: "Tablet",
							header: [
								new sap.m.Text({
									text: "Description"
								})
							]
						})
					],
					items: {
						path: "/PlantVHSet",
						template: new sap.m.ColumnListItem({
							type: "Active",
							unread: false,
							cells: [
								new sap.m.Text({
									text: "{Plant}"
								}),
								new sap.m.Text({
									text: "{SearchTerm1}"
								}),
								new sap.m.Text({
									text: "{SearchTerm2}"
								}),
								new sap.m.Text({
									text: "{PostalCode}"
								}),
								new sap.m.Text({
									text: "{City}"
								}),
								new sap.m.Text({
									text: "{Name2}"
								}),
								new sap.m.Text({
									text: "{Name}"
								}),
								new sap.m.Text({
									text: "{CompanyName}"
								}),
								new sap.m.Text({
									text: "{AddrVersion}"
								}),
								new sap.m.Text({
									text: "{PlantName}"
								})
							]
						})
					},
					confirm: function (E) {
						if (g.action === "createWC" || g.action === "changeWC") {
							AIWListWCModel = g.getView().getModel("AIWListWCModel");
							wcData = AIWListWCModel.getData();
							wcData[g.sindex].plantValueState = "None";
							wcData[g.sindex].plantValueStateTxt = "";
							wcData[g.sindex].plant = E.getParameter("selectedItem").getCells()[0].getText();
							wcData[g.sindex].plantDesc = E.getParameter("selectedItem").getCells()[9].getText();
							wcData[g.sindex].plEnable = false;
							AIWListWCModel.setData(wcData);
							g.getView().setModel(AIWListWCModel, "AIWListWCModel");
						}
						if (g.action === "copyWC" || g.action === "copyGTL" || g.action === "copyETL" || g.action === "copyFTL") {
							var sourceId = g.sourceId;
							// copyWCData.copyWCSource = E.getParameter("selectedItem").getCells()[8].getText();
							sap.ui.getCore().byId(sourceId).setValue(E.getParameter("selectedItem").getCells()[0].getText());
							sap.ui.getCore().byId(sourceId).setValueState("None");
							sap.ui.getCore().byId(sourceId).setValueStateText("");
							// copyWCData.sWCValueState = "None";
							// copyWCData.sWCValueStateTxt = "";
							// copyWCModel.setData(copyWCData);
						}
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("Plant", sap.ui.model.FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("PlantName", sap.ui.model.FilterOperator.Contains, sValue)
								],
								false)
						]);
					}
				});

				//if (this.wcList === {} || this.wcList === undefined) {
				var q = "/PlantVHSet";
				var M = this.getView().getModel("valueHelp");
				M.read(q, {
					success: function (h) {
						if (h.results.length > 0) {
							pSearchResults = h;
							var I = new sap.m.ColumnListItem({
								type: "Active",
								unread: false,
								cells: [
									new sap.m.Text({
										text: "{Plant}"
									}),
									new sap.m.Text({
										text: "{SearchTerm1}"
									}),
									new sap.m.Text({
										text: "{SearchTerm2}"
									}),
									new sap.m.Text({
										text: "{PostalCode}"
									}),
									new sap.m.Text({
										text: "{City}"
									}),
									new sap.m.Text({
										text: "{Name2}"
									}),
									new sap.m.Text({
										text: "{Name}"
									}),
									new sap.m.Text({
										text: "{CompanyName}"
									}),
									new sap.m.Text({
										text: "{AddrVersion}"
									}),
									new sap.m.Text({
										text: "{PlantName}"
									})
								]
							});
							var e = new sap.ui.model.json.JSONModel();
							e.setData(h);
							pSelectDialog.setModel(e);
							// pSelectDialog.setGrowingThreshold(h.results.length);
							pSelectDialog.bindAggregation("items", "/results", I);
						} else {
							pSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
						}
					}
				});
			} else {
				var template = new sap.m.ColumnListItem({
					type: "Active",
					unread: false,
					cells: [
						new sap.m.Text({
							text: "{Plant}"
						}),
						new sap.m.Text({
							text: "{SearchTerm1}"
						}),
						new sap.m.Text({
							text: "{SearchTerm2}"
						}),
						new sap.m.Text({
							text: "{PostalCode}"
						}),
						new sap.m.Text({
							text: "{City}"
						}),
						new sap.m.Text({
							text: "{Name2}"
						}),
						new sap.m.Text({
							text: "{Name}"
						}),
						new sap.m.Text({
							text: "{CompanyName}"
						}),
						new sap.m.Text({
							text: "{AddrVersion}"
						}),
						new sap.m.Text({
							text: "{PlantName}"
						})
					]
				});
				var e = new sap.ui.model.json.JSONModel();
				e.setData(pSearchResults);
				pSelectDialog.setModel(e);
				pSelectDialog.setGrowingThreshold(pSearchResults.results.length);
				pSelectDialog.bindAggregation("items", "/results", template);
				var I = pSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			pSelectDialog.open();
		},
		/**
		 * To display Value Help of Plant in Task list
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		onTLPlantVH: function (oEvent) {
			//this.plantVH("plant", c);
			/*var sPath = oEvent.getSource().getBindingContext("AIWListWCModel").getPath();
			var a = this._Common.plantVH("plant", c, sPath);*/
			var g = this;
			var sPath, gtlData, etlData, ftlData, GTLHeaderModel, ETLHeaderModel, FTLHeaderModel;
			if (g.action === "createGTL" || g.action === "changeGTL") {
				sPath = oEvent.getSource().getBindingContext("GTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				/*g.gtlData = oEvent.getSource().getBindingContext("GTLHeaderModel").getModel().getData();
				var GTLHeaderModel = this.getView().getModel("GTLHeaderModel");*/
			} else if (g.action === "createETL" || g.action === "changeETL") {
				sPath = oEvent.getSource().getBindingContext("ETLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				/*g.etlData = oEvent.getSource().getBindingContext("ETLHeaderModel").getModel().getData();
				var ETLHeaderModel = this.getView().getModel("ETLHeaderModel");*/
			} else if (g.action === "createFTL" || g.action === "changeFTL") {
				sPath = oEvent.getSource().getBindingContext("FTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				/*g.ftlData = oEvent.getSource().getBindingContext("FTLHeaderModel").getModel().getData();
				var FTLHeaderModel = this.getView().getModel("FTLHeaderModel");*/
			}

			var settings = {
				title: this.getView().getModel("i18n").getProperty("PLANT"),
				noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
				columns: [new sap.m.Column({
						header: [
							new sap.m.Text({
								text: "{i18n>SEARCHTERM1}"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>SEARCHTERM2}"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>POST_CODE}"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>CITY}"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>Name2}"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>Name1}"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>COMP_NAME}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>ADDR_VERSION}"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>PLANT}"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>DESC_TXT}"
							})
						]
					})
				],
				items: {
					path: "/PlantVHSet",
					template: new sap.m.ColumnListItem({
						type: "Active",
						unread: false,
						cells: [
							new sap.m.Text({
								text: "{SearchTerm1}"
							}),
							new sap.m.Text({
								text: "{SearchTerm2}"
							}),
							new sap.m.Text({
								text: "{PostalCode}"
							}),
							new sap.m.Text({
								text: "{City}"
							}),
							new sap.m.Text({
								text: "{Name2}"
							}),
							new sap.m.Text({
								text: "{Name}"
							}),
							new sap.m.Text({
								text: "{CompanyName}"
							}),
							new sap.m.Text({
								text: "{AddrVersion}"
							}),
							new sap.m.Text({
								text: "{Plant}"
							}),
							new sap.m.Text({
								text: "{PlantName}"
							})
						]
					})

				},
				confirm: function (E) {
					if (g.action === "createGTL" || g.action === "changeGTL") {
						GTLHeaderModel = g.getView().getModel("GTLHeaderModel");
						gtlData = GTLHeaderModel.getData();
						gtlData[0][g.sindex].plantValueState = "None";
						gtlData[0][g.sindex].plantValueStateTxt = "";
						// m.setValue(E.getParameter("selectedItem").getCells()[2].getText());
						gtlData[0][g.sindex].plant = E.getParameter("selectedItem").getCells()[8].getText();
						gtlData[0][g.sindex].plantDesc = E.getParameter("selectedItem").getCells()[9].getText();
						GTLHeaderModel.setData(gtlData);
						g.getView().setModel(GTLHeaderModel, "GTLHeaderModel");
					} else if (g.action === "createETL" || g.action === "changeETL") {
						ETLHeaderModel = g.getView().getModel("ETLHeaderModel");
						etlData = ETLHeaderModel.getData();
						etlData[0][g.sindex].plantValueState = "None";
						etlData[0][g.sindex].plantValueStateTxt = "";
						// m.setValue(E.getParameter("selectedItem").getCells()[2].getText());
						etlData[0][g.sindex].plant = E.getParameter("selectedItem").getCells()[8].getText();
						etlData[0][g.sindex].plantDesc = E.getParameter("selectedItem").getCells()[9].getText();
						ETLHeaderModel.setData(etlData);
						g.getView().setModel(ETLHeaderModel, "ETLHeaderModel");
					} else if (g.action === "createFTL" || g.action === "changeFTL") {
						FTLHeaderModel = g.getView().getModel("FTLHeaderModel");
						ftlData = FTLHeaderModel.getData();
						ftlData[0][g.sindex].plantValueState = "None";
						ftlData[0][g.sindex].plantValueStateTxt = "";
						// m.setValue(E.getParameter("selectedItem").getCells()[2].getText());
						ftlData[0][g.sindex].plant = E.getParameter("selectedItem").getCells()[8].getText();
						ftlData[0][g.sindex].plantDesc = E.getParameter("selectedItem").getCells()[9].getText();
						FTLHeaderModel.setData(ftlData);
						g.getView().setModel(FTLHeaderModel, "FTLHeaderModel");
					}
				}
			};

			var q = "/PlantVHSet";
			var M = this.getView().getModel("valueHelp");
			var oFilters = [];
			var cells = [
				new sap.m.Text({
					text: "{SearchTerm1}"
				}),
				new sap.m.Text({
					text: "{SearchTerm2}"
				}),
				new sap.m.Text({
					text: "{PostalCode}"
				}),
				new sap.m.Text({
					text: "{City}"
				}),
				new sap.m.Text({
					text: "{Name2}"
				}),
				new sap.m.Text({
					text: "{Name}"
				}),
				new sap.m.Text({
					text: "{CompanyName}"
				}),
				new sap.m.Text({
					text: "{AddrVersion}"
				}),
				new sap.m.Text({
					text: "{Plant}"
				}),
				new sap.m.Text({
					text: "{PlantName}"
				})
			];

			var pSelectDialog = ValueHelpProvider.getValueHelp(M, q, cells, oFilters, settings, "Werks", "Arbpl");
			pSelectDialog.open();
			pSelectDialog.setModel(g.getView().getModel("i18n"), "i18n");
		},
		/**
		 * To display Value Help of Workcenter Category
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		onWcCatVH: function (oEvent) {
			var g = this;
			// if (this.action === "createWC") {
			var sPath = oEvent.getSource().getBindingContext("AIWListWCModel").getPath();
			g.sindex = parseInt(sPath.split("/")[1]);
			var wcData = oEvent.getSource().getBindingContext("AIWListWCModel").getModel().getData();
			var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel");
			// }

			//var m = this.getView().byId("workCategory");
			//var d = this.getView().byId("workCenterCatDesc");

			var wcCatSearchResults;
			if (wcCatSearchResults === undefined) {

				var wcCatSelectDialog = new sap.m.SelectDialog({

					title: this.getView().getModel("i18n").getProperty("WORK_CENTER_CAT"),
					noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
					items: {
						path: "/WorkCentCatVHSet",
						template: new sap.m.StandardListItem({
							title: "{Verwe}",
							description: "{Ktext}"
						})
					},
					confirm: function (E) {
						wcData[g.sindex].wcCatValueState = "None";
						wcData[g.sindex].wcCatValueStateTxt = "";
						//m.setValue(E.getParameters().selectedItem.getProperty("title"));
						wcData[g.sindex].wcCat = E.getParameters().selectedItem.getProperty("title");
						wcData[g.sindex].wcCatDesc = E.getParameters().selectedItem.getProperty("description");
						wcData[g.sindex].wcatEnable = false;
						AIWListWCModel.setData(wcData);
						g.getView().setModel(AIWListWCModel, "AIWListWCModel");
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("Verwe", sap.ui.model.FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("Ktext", sap.ui.model.FilterOperator.Contains, sValue)
								],
								false)
						]);
					}
				});
				var q = "/WorkCentCatVHSet";

				var M = this.getView().getModel("valueHelp");
				M.read(q, {
					success: function (h) {
						if (h.results.length > 0) {
							wcCatSearchResults = h;
							var I = new sap.m.StandardListItem({
								title: "{Verwe}",
								description: "{Ktext}",
								active: true
							});
							var e = new sap.ui.model.json.JSONModel();
							e.setData(h);
							wcCatSelectDialog.setModel(e);
							wcCatSelectDialog.setGrowingThreshold(h.results.length);
							wcCatSelectDialog.bindAggregation("items", "/results", I);
						} else {
							wcCatSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
						}
					}
				});

			} else {
				var template = new sap.m.StandardListItem({
					title: "{Verwe}",
					description: "{Ktext}",
					active: true
				});

				var e = new sap.ui.model.json.JSONModel();
				e.setData(wcCatSearchResults);
				wcCatSelectDialog.setModel(e);
				wcCatSelectDialog.setGrowingThreshold(wcCatSearchResults.results.length);
				wcCatSelectDialog.bindAggregation("items", "/results", template);
				var I = wcCatSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			wcCatSelectDialog.open();
		},
		/**
		 * To display Value Help of Workcenter Usage
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		onWCUsageVH: function (oEvent) {
			var g = this;
			// if (this.action === "createWC") {
			var sPath = oEvent.getSource().getBindingContext("AIWListWCModel").getPath();
			g.sindex = parseInt(sPath.split("/")[1]);
			var wcData = oEvent.getSource().getBindingContext("AIWListWCModel").getModel().getData();
			var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel");
			// } 

			/*var m = this.getView().byId("usage");
			var d = this.getView().byId("usageDesc");*/
			var uSearchResults;
			if (uSearchResults === undefined) {

				var uSelectDialog = new sap.m.SelectDialog({

					title: this.getView().getModel("i18n").getProperty("USAGE"),
					noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
					items: {
						path: "/WCUsageVHSet",
						template: new sap.m.StandardListItem({
							title: "{PLANV}",
							description: "{TXT}"
						})
					},
					confirm: function (E) {
						// if (g.action === "createWC") {
						wcData[g.sindex].usgValueState = "None";
						wcData[g.sindex].usgValueStateTxt = "";
						// m.setValue(E.getParameters().selectedItem.getProperty("title"));
						wcData[g.sindex].usg = E.getParameters().selectedItem.getProperty("title");
						wcData[g.sindex].usgDesc = E.getParameters().selectedItem.getProperty("description");
						AIWListWCModel.setData(wcData);
						g.getView().setModel(AIWListWCModel, "AIWListWCModel");
						// } 
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("PLANV", sap.ui.model.FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("TXT", sap.ui.model.FilterOperator.Contains, sValue)
								],
								false)
						]);
					}
				});
				var q = "/WCUsageVHSet";

				var M = this.getView().getModel("valueHelp");
				M.read(q, {
					success: function (h) {
						if (h.results.length > 0) {
							uSearchResults = h;
							var I = new sap.m.StandardListItem({
								title: "{PLANV}",
								description: "{TXT}",
								active: true
							});
							var e = new sap.ui.model.json.JSONModel();
							e.setData(h);
							uSelectDialog.setModel(e);
							uSelectDialog.setGrowingThreshold(h.results.length);
							uSelectDialog.bindAggregation("items", "/results", I);
						} else {
							uSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
						}
					}
				});

			} else {
				var template = new sap.m.StandardListItem({
					title: "{PLANV}",
					description: "{TXT}",
					active: true
				});

				var e = new sap.ui.model.json.JSONModel();
				e.setData(uSearchResults);
				uSelectDialog.setModel(e);
				uSelectDialog.setGrowingThreshold(uSearchResults.results.length);
				uSelectDialog.bindAggregation("items", "/results", template);
				var I = uSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			uSelectDialog.open();
		},
		/**
		 * To display Value Help of Standard value key
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		onStdValVH: function (oEvent) {
			var g = this;
			// if (this.action === "createWC") {
			var sPath = oEvent.getSource().getBindingContext("AIWListWCModel").getPath();
			g.sindex = parseInt(sPath.split("/")[1]);
			var wcData = oEvent.getSource().getBindingContext("AIWListWCModel").getModel().getData();
			var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel");
			// }

			/*var m = this.getView().byId("stdValueKey");
			var d = this.getView().byId("stdValueKeyDesc");*/

			var stdSearchResults;

			if (stdSearchResults === undefined) {

				var stdSelectDialog = new sap.m.SelectDialog({

					title: this.getView().getModel("i18n").getProperty("STD_VALUE_KEY"),
					noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
					items: {
						path: "/StandardValueKeySet",
						template: new sap.m.StandardListItem({
							title: "{Vgwts}",
							description: "{Txt}"
						})
					},
					confirm: function (E) {
						wcData[g.sindex].stdValueState = "None";
						wcData[g.sindex].stdValueStateTxt = "";
						// m.setValue(E.getParameters().selectedItem.getProperty("title"));
						wcData[g.sindex].stdVal = E.getParameters().selectedItem.getProperty("title");
						wcData[g.sindex].stdValDesc = E.getParameters().selectedItem.getProperty("description");
						AIWListWCModel.setData(wcData);
						g.getView().setModel(AIWListWCModel, "AIWListWCModel");
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("Vgwts", sap.ui.model.FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("Txt", sap.ui.model.FilterOperator.Contains, sValue)
								],
								false)
						]);
					}
				});
				var q = "/StandardValueKeySet";

				var M = this.getView().getModel("valueHelp");
				M.read(q, {
					success: function (h) {
						if (h.results.length > 0) {
							stdSearchResults = h;
							var I = new sap.m.StandardListItem({
								title: "{Vgwts}",
								description: "{Txt}",
								active: true
							});
							var e = new sap.ui.model.json.JSONModel();
							e.setData(h);
							stdSelectDialog.setModel(e);
							stdSelectDialog.setGrowingThreshold(h.results.length);
							stdSelectDialog.bindAggregation("items", "/results", I);
						} else {
							stdSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
						}
					}
				});

			} else {
				var template = new sap.m.StandardListItem({
					title: "{Vgwts}",
					description: "{Txt}",
					active: true
				});
				var e = new sap.ui.model.json.JSONModel();
				e.setData(stdSearchResults);
				stdSelectDialog.setModel(e);
				stdSelectDialog.setGrowingThreshold(stdSearchResults.results.length);
				stdSelectDialog.bindAggregation("items", "/results", template);
				var I = stdSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			stdSelectDialog.open();

		},
		/**
		 * To display Value Help of Person Responsible
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		onPerRespVH: function (oEvent) {
			var g = this;
			// if (this.action === "createWC") {
			var sPath = oEvent.getSource().getBindingContext("AIWListWCModel").getPath();
			g.sindex = parseInt(sPath.split("/")[1]);
			var wcData = oEvent.getSource().getBindingContext("AIWListWCModel").getModel().getData();
			var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel");
			// }

			// var m = this.getView().byId("personResp");
			// var n = this.getView().byId("personRespDesc");
			// var plant = this.getView().byId("plant").getValue();
			var plant = wcData[g.sindex].plant;
			var oFilter = new sap.ui.model.Filter("Werks", "EQ", plant);
			var prSearchResults;
			if (prSearchResults === undefined) {

				var prSelectDialog = new sap.m.TableSelectDialog({

					title: this.getView().getModel("i18n").getProperty("PERSON_RESP"),
					noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
					columns: [new sap.m.Column({
						header: [
							new sap.m.Text({
								text: "Plant"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "Person Responsible"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "Name"
							})
						]
					})],
					items: {
						//path: "/PersonRespVHSet?$filter=Werks%20eq%20%27" + plant + "%27",
						path: "/PersonRespVHSet",
						filters: oFilter,
						template: new sap.m.ColumnListItem({
							type: "Active",
							unread: false,
							cells: [
								new sap.m.Text({
									text: "{Werks}"
								}),
								new sap.m.Text({
									text: "{Veran}"
								}),
								new sap.m.Text({
									text: "{Ktext}"
								})
							]
						})

					},
					confirm: function (E) {
						wcData[g.sindex].personResValueState = "None";
						wcData[g.sindex].personResValueStateTxt = "";
						// m.setValue(E.getParameter("selectedItem").getCells()[1].getText());
						// n.setValue(E.getParameter("selectedItem").getCells()[2].getText());
						wcData[g.sindex].person = E.getParameter("selectedItem").getCells()[1].getText();
						wcData[g.sindex].personDesc = E.getParameter("selectedItem").getCells()[2].getText();
						AIWListWCModel.setData(wcData);
						g.getView().setModel(AIWListWCModel, "AIWListWCModel");
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("Veran", sap.ui.model.FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("Ktext", sap.ui.model.FilterOperator.Contains, sValue)
								],
								false)
						]);
					}
				});
				var q = "/PersonRespVHSet";
				// var oFilter = new sap.ui.model.Filter("Werks", "EQ", plant);
				var M = this.getView().getModel("valueHelp");
				M.read(q, {
					filters: [oFilter],
					success: function (h) {
						if (h.results.length > 0) {
							prSearchResults = h;
							var I = new sap.m.ColumnListItem({
								type: "Active",
								unread: false,
								cells: [
									new sap.m.Text({
										text: "{Werks}"
									}),
									new sap.m.Text({
										text: "{Veran}"
									}),
									new sap.m.Text({
										text: "{Ktext}"
									})
								]
							});
							var e = new sap.ui.model.json.JSONModel();
							e.setData(h);
							prSelectDialog.setModel(e);
							prSelectDialog.setGrowingThreshold(h.results.length);
							prSelectDialog.bindAggregation("items", "/results", I);
						} else {
							prSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
						}
					}
				});

			} else {
				var template = new sap.m.ColumnListItem({
					type: "Active",
					unread: false,
					cells: [
						new sap.m.Text({
							text: "{Werks}"
						}),
						new sap.m.Text({
							text: "{Veran}"
						}),
						new sap.m.Text({
							text: "{Ktext}"
						})
					]
				});
				var e = new sap.ui.model.json.JSONModel();
				e.setData(prSearchResults);
				prSelectDialog.setModel(e);
				prSelectDialog.setGrowingThreshold(prSearchResults.results.length);
				prSelectDialog.bindAggregation("items", "/results", template);
				var I = prSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			prSelectDialog.open();
		},
		/**
		 * To display Value Help of Control Key
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		onCtrlKeyVH: function (oEvent) {
			var g = this;
			// if (this.action === "createWC") {
			var sPath = oEvent.getSource().getBindingContext("AIWListWCModel").getPath();
			g.sindex = parseInt(sPath.split("/")[1]);
			var wcData = oEvent.getSource().getBindingContext("AIWListWCModel").getModel().getData();
			var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel");
			// }
			var ctrSearchResults;
			if (ctrSearchResults === undefined || ctrSearchResults === {}) {

				var ctrSelectDialog = new sap.m.SelectDialog({

					title: this.getView().getModel("i18n").getProperty("CTRL_KEY"),
					noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
					items: {
						path: "/ControlKeySet",
						template: new sap.m.StandardListItem({
							title: "{Steus}",
							description: "{Txt}"
						})
					},
					confirm: function (E) {
						wcData[g.sindex].cntrlKeyValueState = "None";
						wcData[g.sindex].cntrlKeyValueStateTxt = "";
						// m.setValue(E.getParameters().selectedItem.getProperty("title"));
						wcData[g.sindex].ctrlKey = E.getParameters().selectedItem.getProperty("title");
						wcData[g.sindex].ctrlKeyDesc = E.getParameters().selectedItem.getProperty("description");
						AIWListWCModel.setData(wcData);
						g.getView().setModel(AIWListWCModel, "AIWListWCModel");
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("Steus", sap.ui.model.FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("Txt", sap.ui.model.FilterOperator.Contains, sValue)
								],
								false)
						]);
					}
				});
				var q = "/ControlKeySet";

				var M = this.getView().getModel("valueHelp");
				M.read(q, {
					success: function (h) {
						if (h.results.length > 0) {
							ctrSearchResults = h;
							var I = new sap.m.StandardListItem({
								title: "{Steus}",
								description: "{Txt}",
								active: true
							});
							var e = new sap.ui.model.json.JSONModel();
							e.setData(h);
							ctrSelectDialog.setModel(e);
							ctrSelectDialog.setGrowingThreshold(h.results.length);
							ctrSelectDialog.bindAggregation("items", "/results", I);
						} else {
							ctrSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
						}
					}
				});

			} else {
				var template = new sap.m.StandardListItem({
					title: "{Steus}",
					description: "{Txt}",
					active: true
				});

				var e = new sap.ui.model.json.JSONModel();
				e.setData(ctrSearchResults);
				ctrSelectDialog.setModel(e);
				ctrSelectDialog.setGrowingThreshold(ctrSearchResults.results.length);
				ctrSelectDialog.bindAggregation("items", "/results", template);
				var I = ctrSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			ctrSelectDialog.open();
		},
		/**
		 * To display Value Help of Task list Group
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		onTLVH: function (oEvent) {
			var g = this;
			this.sourceId = oEvent.getSource().getId();
			var title = "";
			// var maxNo = "20";
			if (this.action === "copyGTL") {
				// var oFilter = new sap.ui.model.Filter("Plnty", "EQ", "A");
				var oFilter2 = new sap.ui.model.Filter("Plnty", "EQ", "A");
				title = this.getView().getModel("i18n").getProperty("copyGTLHeader");
			} else if (this.action === "copyETL") {
				var oFilter2 = new sap.ui.model.Filter("Plnty", "EQ", "E");
				title = this.getView().getModel("i18n").getProperty("copyETLHeader");
			} else if (this.action === "copyFTL") {
				var oFilter2 = new sap.ui.model.Filter("Plnty", "EQ", "T");
				title = this.getView().getModel("i18n").getProperty("copyFTLHeader");
			}
			var gtlSearchResults;
			if (gtlSearchResults === undefined) {
				var gtlSelectDialog = new sap.m.TableSelectDialog({
					title: title,
					noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
					columns: [new sap.m.Column({
							header: [
								new sap.m.Text({
									text: "Task List Type"
								})
							]
						}), new sap.m.Column({
							demandPopin: true,
							minScreenWidth: "Tablet",
							header: [
								new sap.m.Text({
									text: "Group"
								})
							]
						}), new sap.m.Column({
							demandPopin: true,
							minScreenWidth: "Tablet",
							header: [
								new sap.m.Text({
									text: "Group Counter"
								})
							]
						}), new sap.m.Column({
							demandPopin: true,
							minScreenWidth: "Tablet",
							header: [
								new sap.m.Text({
									text: "Valid From"
								})
							]
						}), new sap.m.Column({
							demandPopin: true,
							minScreenWidth: "Tablet",
							header: [
								new sap.m.Text({
									text: "Description"
								})
							]
						})
						/*, new sap.m.Column({
												demandPopin: true,
												minScreenWidth: "Tablet",
												header: [
													new sap.m.Text({
														text: "Pend Creq"
													})
												]
											})*/
					],
					items: {
						path: "/TLGroupVhSet",
						template: new sap.m.ColumnListItem({
							type: "Active",
							unread: false,
							cells: [
								new sap.m.Text({
									text: "{Plnty}"
								}),
								new sap.m.Text({
									text: "{Plnnr}"
								}),
								new sap.m.Text({
									text: "{Plnal}"
								}),
								new sap.m.Text({
									text: {
										parts: [{
											path: 'Datuv'
										}],
										formatter: g.formatter.dateFormat
									}
								}),
								new sap.m.Text({
									text: "{Ktext}"
								})
								/*new sap.m.Text({
									text: "{Spras}"
								})*/
							]
						})
					},
					confirm: function (E) {
						var sourceId = g.sourceId;
						sap.ui.getCore().byId(sourceId).setValue(E.getParameter("selectedItem").getCells()[1].getText());
						sap.ui.getCore().byId(sourceId).setValueState("None");
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("Plnnr", sap.ui.model.FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("Ktext", sap.ui.model.FilterOperator.Contains, sValue)
								],
								false)
						]);
					}
				});

				var q = "/TLGroupVhSet";
				var M = this.getView().getModel("valueHelp");

				M.read(q, {
					//filters: [oFilter1, oFilter2, oFilter3, oFilter4, oFilter5, oFilter6],
					filters: [oFilter2],
					/*urlParameters: {
						"$top": maxNo
					},*/
					success: function (h) {
						if (h.results.length > 0) {
							if (g._copyTLFragment) {
								var oModelData, Plnty;
								if (g.action === "copyGTL") {
									oModelData = g.getView().getModel("AIWListGTLModel").getData();
									Plnty = "A";
								} else if (g.action === "copyETL") {
									oModelData = g.getView().getModel("AIWListETLModel").getData();
									Plnty = "E";
								} else if (g.action === "copyFTL") {
									oModelData = g.getView().getModel("AIWListFTLModel").getData();
									Plnty = "F";
								}
								if (oModelData.length > 0) {
									for (var i = 0; i < oModelData.length; i++) {
										if (oModelData[i].header.length > 0) {
											for (var j = 0; j < oModelData[i].header.length; j++) {
												var sObj = {
													Plnty: Plnty,
													Plnnr: oModelData[i].grp,
													Plnal: oModelData[i].header[j].Plnal,
													Datuv: formatter.currentDate(),
													Ktext: oModelData[i].Ktext
												};
												h.results.unshift(sObj);
											}
										}
									}
								}
							}

							gtlSearchResults = h;
							var I = new sap.m.ColumnListItem({
								type: "Active",
								unread: false,
								cells: [
									new sap.m.Text({
										text: "{Plnty}"
									}),
									new sap.m.Text({
										text: "{Plnnr}"
									}),
									new sap.m.Text({
										text: "{Plnal}"
									}),
									/*new sap.m.Text({
										text: "{path: 'Datuv', formatter: '.formatter.dateFormat'}"
									}),*/
									new sap.m.Text({
										text: {
											parts: [{
												path: 'Datuv'
											}],
											formatter: g.formatter.dateFormat
										}
									}),
									new sap.m.Text({
										text: "{Ktext}"
									})
									/*new sap.m.Text({
										text: "{Spras}"
									})*/
								]
							});
							var e = new sap.ui.model.json.JSONModel();
							e.setData(h);
							gtlSelectDialog.setModel(e);
							// gtlSelectDialog.setGrowingThreshold(h.results.length);
							gtlSelectDialog.bindAggregation("items", "/results", I);
						} else {
							gtlSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
						}
					}
				});
			} else {
				var e = new sap.ui.model.json.JSONModel();
				e.setData(gtlSearchResults);
				gtlSelectDialog.setModel(e);
				gtlSelectDialog.setTitle(title);
				gtlSelectDialog.setGrowingThreshold(gtlSearchResults.results.length);
				// this.gtlSelectDialog.bindAggregation("items", "/results", I);
				var I = gtlSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			gtlSelectDialog.open();
		},

		// Specific to Task List
		/**
		 * To display Value Help of Planning plant
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		onPplantVH: function (oEvent) {
			var g = this;
			var sPath, gtlData, etlData, ftlData, GTLHeaderModel, ETLHeaderModel, FTLHeaderModel;
			if (this.action === "createGTL") {
				sPath = oEvent.getSource().getBindingContext("GTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
			} else if (this.action === "createETL") {
				sPath = oEvent.getSource().getBindingContext("ETLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
			} else if (this.action === "createFTL") {
				sPath = oEvent.getSource().getBindingContext("FTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
			}

			var settings = {
				title: this.getView().getModel("i18n").getProperty("PLAN_PLANT_TXT"),
				noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
				items: {
					path: "/PlanningPlantSet",
					template: new sap.m.StandardListItem({
						title: "{Werks}",
						description: "{Name1}"
					})
				},
				confirm: function (E) {
					if (g.action === "createGTL") {
						GTLHeaderModel = g.getView().getModel("GTLHeaderModel");
						gtlData = GTLHeaderModel.getData();
						gtlData[0][g.sindex].planningPlantValueState = "None";
						gtlData[0][g.sindex].Iwerk = E.getParameters().selectedItem.getProperty("title");
						gtlData[0][g.sindex].pPlantDesc = E.getParameters().selectedItem.getProperty("description");
						gtlData[0][g.sindex].planningPlantValueStateTxt = "";
						GTLHeaderModel.setData(gtlData);
						g.readHdrDefaults("planningPlant", g.sindex, gtlData);
					} else if (g.action === "createETL") {
						ETLHeaderModel = g.getView().getModel("ETLHeaderModel");
						etlData = ETLHeaderModel.getData();
						etlData[0][g.sindex].planningPlantValueState = "None";
						etlData[0][g.sindex].Iwerk = E.getParameters().selectedItem.getProperty("title");
						etlData[0][g.sindex].pPlantDesc = E.getParameters().selectedItem.getProperty("description");
						etlData[0][g.sindex].planningPlantValueStateTxt = "";
						ETLHeaderModel.setData(etlData);
						g.readHdrDefaults("planningPlant", g.sindex, etlData);
					} else if (g.action === "createFTL") {
						FTLHeaderModel = g.getView().getModel("FTLHeaderModel");
						ftlData = FTLHeaderModel.getData();
						ftlData[0][g.sindex].planningPlantValueState = "None";
						ftlData[0][g.sindex].Iwerk = E.getParameters().selectedItem.getProperty("title");
						ftlData[0][g.sindex].pPlantDesc = E.getParameters().selectedItem.getProperty("description");
						ftlData[0][g.sindex].planningPlantValueStateTxt = "";
						FTLHeaderModel.setData(ftlData);
						g.readHdrDefaults("planningPlant", g.sindex, ftlData);
					}
				}
			};

			var q = "/PlanningPlantSet";
			var M = this.getView().getModel("valueHelp");
			var ppSelectDialog = ValueHelpProvider.getSelectDialog(M, q, [], settings, "Werks", "Name1");
			ppSelectDialog.open();
		},
		/**
		 * To display Value Help of Usage
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		onTLUsageVH: function (oEvent) {
			var g = this;
			var sPath, gtlData, etlData, ftlData, GTLHeaderModel, ETLHeaderModel, FTLHeaderModel;
			if (this.action === "createGTL") {
				sPath = oEvent.getSource().getBindingContext("GTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
			} else if (this.action === "createETL") {
				sPath = oEvent.getSource().getBindingContext("ETLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
			} else if (this.action === "createFTL") {
				sPath = oEvent.getSource().getBindingContext("FTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
			}

			var settings = {
				title: this.getView().getModel("i18n").getProperty("USAGE"),
				noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
				items: {
					path: "/UsageVHSet",
					template: new sap.m.StandardListItem({
						title: "{VERWE}",
						description: "{TXT}"
					})
				},
				confirm: function (E) {
					if (g.action === "createGTL") {
						GTLHeaderModel = g.getView().getModel("GTLHeaderModel");
						gtlData = GTLHeaderModel.getData();
						gtlData[0][g.sindex].usgValueState = "None";
						gtlData[0][g.sindex].usgValueStateTxt = "";
						gtlData[0][g.sindex].tlusg = E.getParameters().selectedItem.getProperty("title");
						gtlData[0][g.sindex].usageDesc = E.getParameters().selectedItem.getProperty("description");
						GTLHeaderModel.setData(gtlData);
						g.readHdrDefaults("usage", g.sindex, gtlData);
					} else if (g.action === "createETL") {
						ETLHeaderModel = g.getView().getModel("ETLHeaderModel");
						etlData = ETLHeaderModel.getData();
						etlData[0][g.sindex].usgValueState = "None";
						etlData[0][g.sindex].usgValueStateTxt = "";
						etlData[0][g.sindex].tlusg = E.getParameters().selectedItem.getProperty("title");
						etlData[0][g.sindex].usageDesc = E.getParameters().selectedItem.getProperty("description");
						ETLHeaderModel.setData(etlData);
						g.readHdrDefaults("usage", g.sindex, etlData);
					} else if (g.action === "createFTL") {
						FTLHeaderModel = g.getView().getModel("FTLHeaderModel");
						ftlData = FTLHeaderModel.getData();
						ftlData[0][g.sindex].usgValueState = "None";
						ftlData[0][g.sindex].usgValueStateTxt = "";
						ftlData[0][g.sindex].tlusg = E.getParameters().selectedItem.getProperty("title");
						ftlData[0][g.sindex].usageDesc = E.getParameters().selectedItem.getProperty("description");
						FTLHeaderModel.setData(ftlData);
						g.readHdrDefaults("usage", g.sindex, ftlData);
					}
				}
			};

			var q = "/UsageVHSet";
			var M = this.getView().getModel("valueHelp");
			var uSelectDialog = ValueHelpProvider.getSelectDialog(M, q, [], settings, "VERWE", "TXT");
			uSelectDialog.open();
		},
		/**
		 * To display Value Help of Status
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		onStatusVH: function (oEvent) {
			var g = this;
			var sPath, gtlData, etlData, ftlData, GTLHeaderModel, ETLHeaderModel, FTLHeaderModel;
			if (this.action === "createGTL") {
				sPath = oEvent.getSource().getBindingContext("GTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
			} else if (this.action === "createETL") {
				sPath = oEvent.getSource().getBindingContext("ETLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
			} else if (this.action === "createFTL") {
				sPath = oEvent.getSource().getBindingContext("FTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
			}

			var settings = {
				title: this.getView().getModel("i18n").getProperty("STATUS"),
				noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
				items: {
					path: "/StatusVHSet",
					template: new sap.m.StandardListItem({
						title: "{PLNST}",
						description: "{TXT}"
					})
				},
				confirm: function (E) {
					if (g.action === "createGTL") {
						GTLHeaderModel = g.getView().getModel("GTLHeaderModel");
						gtlData = GTLHeaderModel.getData();
						gtlData[0][g.sindex].statusVS = "None";
						gtlData[0][g.sindex].Statu = E.getParameters().selectedItem.getProperty("title");
						gtlData[0][g.sindex].statusDesc = E.getParameters().selectedItem.getProperty("description");
						gtlData[0][g.sindex].statusVST = "";
						GTLHeaderModel.setData(gtlData);
						g.readHdrDefaults("status", g.sindex, gtlData);
					} else if (g.action === "createETL") {
						ETLHeaderModel = g.getView().getModel("ETLHeaderModel");
						etlData = ETLHeaderModel.getData();
						etlData[0][g.sindex].statusVS = "None";
						etlData[0][g.sindex].Statu = E.getParameters().selectedItem.getProperty("title");
						etlData[0][g.sindex].statusDesc = E.getParameters().selectedItem.getProperty("description");
						etlData[0][g.sindex].statusVST = "";
						ETLHeaderModel.setData(etlData);
						g.readHdrDefaults("status", g.sindex, etlData);
					} else if (g.action === "createFTL") {
						FTLHeaderModel = g.getView().getModel("FTLHeaderModel");
						ftlData = FTLHeaderModel.getData();
						ftlData[0][g.sindex].statusVS = "None";
						ftlData[0][g.sindex].Statu = E.getParameters().selectedItem.getProperty("title");
						ftlData[0][g.sindex].statusDesc = E.getParameters().selectedItem.getProperty("description");
						ftlData[0][g.sindex].statusVST = "";
						FTLHeaderModel.setData(ftlData);
						g.readHdrDefaults("status", g.sindex, ftlData);
					}
				}
			};

			var q = "/StatusVHSet";
			var M = this.getView().getModel("valueHelp");
			var sSelectDialog = ValueHelpProvider.getSelectDialog(M, q, [], settings, "PLNST", "TXT");
			sSelectDialog.open();
		},

		// Specific to Object Link
		/**
		 * To display Value Help of Equipment
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		onEquipVH: function (oEvent) {
			var g = this;
			var sPath = oEvent.getSource().getBindingContext("AIWListOLModel").getPath();
			g.sindex = parseInt(sPath.split("/")[1]);
			var olData = oEvent.getSource().getBindingContext("AIWListOLModel").getModel().getData();
			var AIWListOLModel = sap.ui.getCore().getModel("AIWListOLModel");
			var bindingPath;
			var tInput = oEvent.getSource().mBindingInfos.value.binding;
			if (tInput !== undefined && tInput !== null) {
				bindingPath = tInput.sPath;
			} else {
				bindingPath = oEvent.getSource().mBindingInfos.value.parts[0].path;
			}
			// bindingPath = bindingPath.substring(1);
			var eSearchResults;
			if (eSearchResults === undefined) {
				var eSelectDialog = new sap.m.SelectDialog({
					title: this.getView().getModel("i18n").getProperty("EQUIPMENT"),
					noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
					items: {
						path: "/EquipmentNumberSet",
						template: new sap.m.StandardListItem({
							title: "{Equnr}",
							description: "{Eqktx}"
						})
					},
					confirm: function (E) {
						if (bindingPath === "linkFrmEq") {
							olData[g.sindex].linkFrmEqVS = "None";
							olData[g.sindex].linkFrmEqVST = "";
							olData[g.sindex].linkFrmEq = E.getParameters().selectedItem.getProperty("title");
							olData[g.sindex].linkFrmEqDesc = E.getParameters().selectedItem.getProperty("description");
						} else if (bindingPath === "linkToEq") {
							olData[g.sindex].linkToEqVS = "None";
							olData[g.sindex].linkToEqVST = "";
							olData[g.sindex].linkToEq = E.getParameters().selectedItem.getProperty("title");
							olData[g.sindex].linkToEqDesc = E.getParameters().selectedItem.getProperty("description");
						} else if (bindingPath === "linkObjEq") {
							olData[g.sindex].linkObjEqVS = "None";
							olData[g.sindex].linkObjEqVST = "";
							olData[g.sindex].linkObjEq = E.getParameters().selectedItem.getProperty("title");
							olData[g.sindex].linkObjEqDesc = E.getParameters().selectedItem.getProperty("description");
						}
						AIWListOLModel.setData(olData);
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("Equnr", sap.ui.model.FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("Eqktx", sap.ui.model.FilterOperator.Contains, sValue)
								],
								false)
						]);
					}
				});
				var q = "/EquipmentNumberSet";

				var M = this.getView().getModel("valueHelp");
				M.read(q, {
					success: function (h, E) {
						if (h.results.length > 0) {
							var oModelData = sap.ui.getCore().getModel("AIWEQUI").getData();
							if (oModelData.length > 0) {
								for (var i = 0; i < oModelData.length; i++) {
									if (oModelData[i].Equnr) {
										var sObj = {
											Equnr: oModelData[i].Equnr,
											Eqktx: oModelData[i].Eqktx
										};
										h.results.unshift(sObj);
									}
								}
							}
							eSearchResults = h;
							var I = new sap.m.StandardListItem({
								title: "{Equnr}",
								description: "{Eqktx}",
								active: true
							});
							var e = new sap.ui.model.json.JSONModel();
							e.setData(h);
							eSelectDialog.setModel(e);
							// eSelectDialog.setGrowingThreshold(h.results.length);
							eSelectDialog.bindAggregation("items", "/results", I);
						} else {
							eSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
						}
					}
				});
			} else {
				var e = new sap.ui.model.json.JSONModel();
				e.setData(eSearchResults);
				eSelectDialog.setModel(e);
				var I = eSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			eSelectDialog.open();
		},
		/**
		 * To display Value Help of Functional Location
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		onFlocInOLVH: function (oEvent) {
			var g = this;
			var sPath = oEvent.getSource().getBindingContext("AIWListOLModel").getPath();
			g.sindex = parseInt(sPath.split("/")[1]);
			var olData = oEvent.getSource().getBindingContext("AIWListOLModel").getModel().getData();
			var AIWListOLModel = sap.ui.getCore().getModel("AIWListOLModel");
			var bindingPath;
			var tInput = oEvent.getSource().mBindingInfos.value.binding;
			if (tInput !== undefined && tInput !== null) {
				bindingPath = tInput.sPath;
			} else {
				bindingPath = oEvent.getSource().mBindingInfos.value.parts[0].path;
			}
			// bindingPath = bindingPath.substring(1);
			var fSearchResults;
			if (fSearchResults === undefined) {
				var fSelectDialog = new sap.m.SelectDialog({
					title: this.getView().getModel("i18n").getProperty("FLOC"),
					noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
					items: {
						// path: "/FunclocSHSet",
						path: "/FunctionLocationSet",
						template: new sap.m.StandardListItem({
							title: "{Tplnr}",
							description: "{Pltxt}"
						})
					},
					confirm: function (E) {
						if (bindingPath === "linkFrmFl") {
							olData[g.sindex].linkFrmFlVS = "None";
							olData[g.sindex].linkFrmFlVST = "";
							olData[g.sindex].linkFrmFl = E.getParameters().selectedItem.getProperty("title");
							olData[g.sindex].linkFrmFlDesc = E.getParameters().selectedItem.getProperty("description");
						} else if (bindingPath === "linkToFl") {
							olData[g.sindex].linkToFlVS = "None";
							olData[g.sindex].linkToFlVST = "";
							olData[g.sindex].linkToFl = E.getParameters().selectedItem.getProperty("title");
							olData[g.sindex].linkToFlDesc = E.getParameters().selectedItem.getProperty("description");
						} else if (bindingPath === "linkObjFl") {
							olData[g.sindex].linkObjFlVS = "None";
							olData[g.sindex].linkObjFlVST = "";
							olData[g.sindex].linkObjFl = E.getParameters().selectedItem.getProperty("title");
							olData[g.sindex].linkObjFlDesc = E.getParameters().selectedItem.getProperty("description");
						}
						AIWListOLModel.setData(olData);
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("Tplnr", sap.ui.model.FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("Pltxt", sap.ui.model.FilterOperator.Contains, sValue)
								],
								false)
						]);
					}
				});
				// var q = "/FunclocSHSet";
				var q = "/FunctionLocationSet";

				var M = this.getView().getModel("valueHelp");
				M.read(q, {
					success: function (h, E) {
						if (h.results.length > 0) {
							var oModelData = sap.ui.getCore().getModel("AIWFLOC").getData();
							if (oModelData.length > 0) {
								for (var i = 0; i < oModelData.length; i++) {
									if (oModelData[i].Functionallocation) {
										var sObj = {
											Tplnr: oModelData[i].Functionallocation,
											Pltxt: oModelData[i].Flocdescription
										};
										h.results.unshift(sObj);
									}
								}
							}
							fSearchResults = h;
							var I = new sap.m.StandardListItem({
								title: "{Tplnr}",
								description: "{Pltxt}",
								active: true
							});
							var e = new sap.ui.model.json.JSONModel();
							e.setData(h);
							fSelectDialog.setModel(e);
							// fSelectDialog.setGrowingThreshold(h.results.length);
							fSelectDialog.bindAggregation("items", "/results", I);
						} else {
							fSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
						}
					}
				});
			} else {
				var e = new sap.ui.model.json.JSONModel();
				e.setData(fSearchResults);
				fSelectDialog.setModel(e);
				var I = fSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			fSelectDialog.open();
		},
		/**
		 * To display Value Help of Object Link
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		onLinkVH: function (oEvent) {
			var g = this;
			var sourceId = oEvent.getSource().getId();
			// var m = this.getView().byId("linkSearch");
			var lSearchResults;
			if (lSearchResults === undefined) {

				var lSelectDialog = new sap.m.SelectDialog({

					title: this.getView().getModel("i18n").getProperty("xtxt.LINK"),
					noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
					items: {
						//path: "/LinkSet",
						path: "/ObjLinkSet",
						template: new sap.m.StandardListItem({
							title: "{Kante}",
							description: "{Kanxt}"
						})
					},
					confirm: function (E) {
						sap.ui.getCore().byId(sourceId).setValue(E.getParameters().selectedItem.getProperty("title"));
						sap.ui.getCore().byId(sourceId).setValueState("None");
						sap.ui.getCore().byId(sourceId).setValueStateText("");
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("Kante", sap.ui.model.FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("Kanxt", sap.ui.model.FilterOperator.Contains, sValue)
								],
								false)
						]);
					}
				});
				//var q = "/LinkSet";
				var q = "/ObjLinkSet";
				var M = this.getView().getModel("valueHelp");
				M.read(q, {
					success: function (h, E) {
						if (h.results.length > 0) {
							if (g._copyOLFragment) {
								var oModelData = g.getView().getModel("AIWListOLModel").getData();
								if (oModelData.length > 0) {
									for (var i = 0; i < oModelData.length; i++) {
										var sObj = {
											Kante: oModelData[i].link,
											Kanxt: oModelData[i].linkDesc
										};
										h.results.unshift(sObj);
									}
								}
							}
							lSearchResults = h;
							var I = new sap.m.StandardListItem({
								title: "{Kante}",
								description: "{Kanxt}",
								active: true
							});
							var e = new sap.ui.model.json.JSONModel();
							e.setData(h);
							lSelectDialog.setModel(e);
							// lSelectDialog.setGrowingThreshold(h.results.length);
							lSelectDialog.bindAggregation("items", "/results", I);
						} else {
							lSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
						}
					},
					error: function (err) {
						var error = [];
						if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
							.errordetails
							.length === 0) {
							error[0] = JSON.parse(err.responseText).error.message.value;
						} else {
							for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
								error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
							}
						}
						var value = error.join("\n");
						g.invokeMessage(value);
					}
				});

			} else {

				var e = new sap.ui.model.json.JSONModel();
				e.setData(lSearchResults);
				lSelectDialog.setModel(e);
				var I = lSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			lSelectDialog.open();
		},

		/**
		 * Triggered by the 'change' event of Input controls.
		 */
		/*
		 * Called when change event is triggered of WorkCenter, Plant, WorkCenter Category, Person Responsible, Usage, 
			Standard value key, Control key, Planning plant, link from equipment, link to equipment, link object equipment,
			link from functional location, link to functional location, link object functional location
		 */
		onChange: function (oEvent) {
			var value = oEvent.getSource().getValue();
			var bindingPath;
			var tInput = oEvent.getSource().mBindingInfos.value.binding;
			if (tInput !== undefined && tInput !== null) {
				bindingPath = tInput.sPath;
			} else {
				bindingPath = oEvent.getSource().mBindingInfos.value.parts[0].path;
			}
			if (this.action === "copyWC" || this.action === "changeWC") {
				bindingPath = bindingPath.substring(1);
			}
			switch (bindingPath) {
			case "wc":
				this._workCenter(value, oEvent);
				break;
			case "plant":
				this._plant(value, oEvent);
				break;
			case "wcCat":
				this._workCenterCategory(value, oEvent);
				break;
			case "person":
				this._personResponsible(value, oEvent);
				break;
			case "usg":
				this._usage(value, oEvent);
				break;
			case "tlusg":
				this._usage(value, oEvent);
				break;
			case "stdVal":
				this._standardValueKey(value, oEvent);
				break;
			case "ctrlKey":
				this._controlKey(value, oEvent);
				break;
			case "copyWCSource":
				this._workCenter(value, oEvent);
				break;
			case "copyPlantSource":
				this._plant(value, oEvent);
				break;
			case "copyWCTarget":
				this._workCenter(value, oEvent);
				break;
			case "copyPlantTarget":
				this._plant(value, oEvent);
				break;
				// Task List
			case "Iwerk":
				this._planPlant(value, oEvent);
				break;
			case "Statu":
				this._status(value, oEvent);
				break;
				// Object Link	
			case "linkFrmEq":
				this._equipment(value, oEvent);
				break;
			case "linkToEq":
				this._equipment(value, oEvent);
				break;
			case "linkObjEq":
				this._equipment(value, oEvent);
				break;
			case "linkFrmFl":
				this._floc(value, oEvent);
				break;
			case "linkToFl":
				this._floc(value, oEvent);
				break;
			case "linkObjFl":
				this._floc(value, oEvent);
				break;
			}
		},
		/**
		 * Function to handle change of Plant
		 * @param {string} f
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		_plant: function (f, oEvent) {
			var c = f.toUpperCase();
			var g = this;
			if (this.action === "createWC") {
				var sPath = oEvent.getSource().getBindingContext("AIWListWCModel").getPath();
				g.sindex = parseInt(sPath.split("/")[1]);
				var wcData = oEvent.getSource().getBindingContext("AIWListWCModel").getModel().getData();
				var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel");
			} else if (this.action === "createGTL") {
				var sPath = oEvent.getSource().getBindingContext("GTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var gtlData = oEvent.getSource().getBindingContext("GTLHeaderModel").getModel().getData();
				var GTLHeaderModel = this.getView().getModel("GTLHeaderModel");
			} else if (this.action === "createETL") {
				var sPath = oEvent.getSource().getBindingContext("ETLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var etlData = oEvent.getSource().getBindingContext("ETLHeaderModel").getModel().getData();
				var ETLHeaderModel = this.getView().getModel("ETLHeaderModel");
			} else if (this.action === "createFTL") {
				var sPath = oEvent.getSource().getBindingContext("FTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var ftlData = oEvent.getSource().getBindingContext("FTLHeaderModel").getModel().getData();
				var FTLHeaderModel = this.getView().getModel("FTLHeaderModel");
			}
			if (this.action === "copyWC" || this.action === "changeWC") {
				this.sourceId = oEvent.getSource().getId();
			}
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var q = "/PlantVHSet";
				var oFilter = new sap.ui.model.Filter("Plant", "EQ", c);
				var m = this.getView().getModel("valueHelp");
				m.read(q, {
					filters: [oFilter],
					success: function (d) {
						if (d.results.length > 0) {
							if (g.action === "createWC") {
								wcData[g.sindex].plant = a;
								wcData[g.sindex].plantDesc = d.results[0].PlantName;
								wcData[g.sindex].plEnable = false;
								AIWListWCModel.setData(wcData);
							} else if (g.action === "createGTL") {
								gtlData[0][g.sindex].plant = a; //g.gtlPath
								gtlData[0][g.sindex].plantDesc = d.results[0].PlantName;
								GTLHeaderModel.setData(gtlData);
							} else if (g.action === "createETL") {
								etlData[0][g.sindex].plant = a; //g.etlPath
								etlData[0][g.sindex].plantDesc = d.results[0].PlantName;
								ETLHeaderModel.setData(etlData);
							} else if (g.action === "createFTL") {
								ftlData[0][g.sindex].plant = a; //g.ftlPath
								ftlData[0][g.sindex].plantDesc = d.results[0].PlantName;
								FTLHeaderModel.setData(ftlData);
							}
							if (g.action === "copyWC") {
								sap.ui.getCore().byId(g.sourceId).setValue(a);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");
							}
						} else {
							if (g.action === "createWC") {
								wcData[g.sindex].plantValueState = "Error";
								wcData[g.sindex].plEnable = true;
								wcData[g.sindex].plantValueStateTxt = "Invalid Entry";
								AIWListWCModel.setData(wcData);
							} else if (g.action === "createGTL") {
								gtlData[0][g.sindex].plantValueState = "Error"; //g.gtlPath
								gtlData[0][g.sindex].plantValueStateTxt = "Invalid Entry";
								GTLHeaderModel.setData(gtlData);
							} else if (g.action === "createETL") {
								etlData[0][g.sindex].plantValueState = "Error"; //g.etlPath
								etlData[0][g.sindex].plantValueStateTxt = "Invalid Entry";
								ETLHeaderModel.setData(etlData);
							} else if (g.action === "createFTL") {
								ftlData[0][g.sindex].plantValueState = "Error"; //g.ftlPath
								ftlData[0][g.sindex].plantValueStateTxt = "Invalid Entry";
								FTLHeaderModel.setData(ftlData);
							}
							if (g.action === "copyWC" || g.action === "changeWC") {
								sap.ui.getCore().byId(g.sourceId).setValueState("Error");
								sap.ui.getCore().byId(g.sourceId).setValueStateText("Invalid Entry");
							}
						}
					},
					error: function (e) {
						var b = JSON.parse(e.responseText);
						var d = b.error.message.value;
						if (g.action === "createWC") {
							wcData[g.sindex].plEnable = true;
							wcData[g.sindex].plantValueState = "Error";
							wcData[g.sindex].plantValueStateTxt = d;
							AIWListWCModel.setData(wcData);
						} else if (g.action === "createGTL") {
							gtlData[0][g.sindex].plantValueState = "Error"; //g.gtlPath
							gtlData[0][g.sindex].plantValueStateTxt = d;
							GTLHeaderModel.setData(gtlData);
						} else if (g.action === "createETL") {
							etlData[0][g.sindex].plantValueState = "Error"; //g.etlPath
							etlData[0][g.sindex].plantValueStateTxt = d;
							ETLHeaderModel.setData(etlData);
						} else if (g.action === "createFTL") {
							ftlData[0][g.sindex].plantValueState = "Error"; //g.ftlPath
							ftlData[0][g.sindex].plantValueStateTxt = d;
							FTLHeaderModel.setData(ftlData);
						}
						if (g.action === "copyWC" || g.action === "changeWC") {
							sap.ui.getCore().byId(g.sourceId).setValueState("Error");
							sap.ui.getCore().byId(g.sourceId).setValueStateText(d);
						}
					}
				});
			} else {
				if (g.action === "createWC") {
					wcData[g.sindex].plant = a;
					AIWListWCModel.setData(wcData);
				} else if (g.action === "createGTL") {
					gtlData[0][g.sindex].plant = a; //g.gtlPath
					GTLHeaderModel.setData(gtlData);
				} else if (g.action === "createETL") {
					etlData[0][g.sindex].plant = a; //g.etlPath
					ETLHeaderModel.setData(etlData);
				} else if (g.action === "createFTL") {
					ftlData[0][g.sindex].plant = a; //g.ftlPath
					FTLHeaderModel.setData(ftlData);
				}
				if (g.action === "copyWC" || g.action === "changeWC") {
					sap.ui.getCore().byId(g.sourceId).setValue(a);
				}
			}
		},
		/**
		 * Function to handle change of Work center
		 * @param {string} f
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		_workCenter: function (f, oEvent) {
			var c = f.toUpperCase();
			var g = this;
			if (this.action === "createWC") {
				var sPath = oEvent.getSource().getBindingContext("AIWListWCModel").getPath();
				g.sindex = parseInt(sPath.split("/")[1]);
				var wcData = oEvent.getSource().getBindingContext("AIWListWCModel").getModel().getData();
				var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel");
			} else if (this.action === "createGTL") {
				var sPath = oEvent.getSource().getBindingContext("GTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var gtlData = oEvent.getSource().getBindingContext("GTLHeaderModel").getModel().getData();
				var GTLHeaderModel = this.getView().getModel("GTLHeaderModel");
			} else if (this.action === "createETL") {
				var sPath = oEvent.getSource().getBindingContext("ETLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var etlData = oEvent.getSource().getBindingContext("ETLHeaderModel").getModel().getData();
				var ETLHeaderModel = this.getView().getModel("ETLHeaderModel");
			} else if (this.action === "createFTL") {
				var sPath = oEvent.getSource().getBindingContext("FTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var ftlData = oEvent.getSource().getBindingContext("FTLHeaderModel").getModel().getData();
				var FTLHeaderModel = this.getView().getModel("FTLHeaderModel");
			}

			if (this.action === "copyWC" || this.action === "changeWC") {
				this.sourceId = oEvent.getSource().getId();
			}
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var q = "/WorkCenterVHSet";
				var oFilter = new sap.ui.model.Filter("Arbpl", "EQ", c);
				var m = this.getView().getModel("valueHelp");
				var lData = false;

				var oModelData = sap.ui.getCore().getModel("AIWListWCModel").getData();
				if (oModelData.length > 0) {
					for (var i = 0; i < oModelData.length; i++) {
						if (oModelData[i].wc === c) {
							if (g.action === "createWC") {
								wcData[g.sindex].wc = a.toUpperCase();
								wcData[g.sindex].wcDesc = oModelData[i].Ktext;
								wcData[g.sindex].wcEnable = false;
								AIWListWCModel.setData(wcData);
								lData = true;
							} else if (g.action === "createGTL") {
								gtlData[0][g.sindex].wc = a; //g.gtlPath
								gtlData[0][g.sindex].wcDesc = oModelData[i].Ktext;
								gtlData[0][g.sindex].plant = oModelData[i].plant;
								GTLHeaderModel.setData(gtlData);
								lData = true;
								g.WCPPCheck();
							} else if (g.action === "createETL") {
								etlData[0][g.sindex].wc = a;
								etlData[0][g.sindex].wcDesc = oModelData[i].Ktext;
								etlData[0][g.sindex].plant = oModelData[i].plant;
								ETLHeaderModel.setData(etlData);
								lData = true;
								g.WCPPCheck();
							} else if (g.action === "createFTL") {
								ftlData[0][g.sindex].wc = a;
								ftlData[0][g.sindex].wcDesc = oModelData[i].Ktext;
								ftlData[0][g.sindex].plant = oModelData[i].plant;
								FTLHeaderModel.setData(ftlData);
								lData = true;
								g.WCPPCheck();
							}

							if (g.action === "copyWC" || g.action === "changeWC") {
								sap.ui.getCore().byId(g.sourceId).setValue(a);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");
								lData = true;
							}
						}
					}
				}

				if (lData === true) {
					return;
				} else {
					m.read(q, {
						filters: [oFilter],
						success: function (d) {
							if (d.results.length > 0) {
								if (g.action === "createWC") {
									wcData[g.sindex].wc = a.toUpperCase();
									wcData[g.sindex].wcDesc = d.results[0].Ktext;
									wcData[g.sindex].wcEnable = false;
									AIWListWCModel.setData(wcData);
								} else if (g.action === "createGTL") {
									gtlData[g.gtlPath][g.sindex].wc = a;
									gtlData[g.gtlPath][g.sindex].wcDesc = d.results[0].Ktext;
									gtlData[g.gtlPath][g.sindex].plant = d.results[0].Werks;
									GTLHeaderModel.setData(gtlData);
									g.WCPPCheck();
								} else if (g.action === "createETL") {
									etlData[g.etlPath][g.sindex].wc = a;
									etlData[g.etlPath][g.sindex].wcDesc = d.results[0].Ktext;
									etlData[g.etlPath][g.sindex].plant = d.results[0].Werks;
									ETLHeaderModel.setData(etlData);
									g.WCPPCheck();
								} else if (g.action === "createFTL") {
									ftlData[g.ftlPath][g.sindex].wc = a;
									ftlData[g.ftlPath][g.sindex].wcDesc = d.results[0].Ktext;
									ftlData[g.ftlPath][g.sindex].plant = d.results[0].Werks;
									FTLHeaderModel.setData(ftlData);
									g.WCPPCheck();
								}

								if (g.action === "copyWC" || g.action === "changeWC") {
									sap.ui.getCore().byId(g.sourceId).setValue(a);
									sap.ui.getCore().byId(g.sourceId).setValueState("None");
								}
							} else {
								if (g.action === "createWC") {
									// wcData[g.sindex].wcValueState = "Error";
									// wcData[g.sindex].wcValueStateTxt = "Invalid Entry";
									wcData[g.sindex].wcEnable = false;
									wcData[g.sindex].wc = a.toUpperCase();
									AIWListWCModel.setData(wcData);
								} else if (g.action === "createGTL") {
									gtlData[g.gtlPath][g.sindex].wcValueState = "Error";
									gtlData[g.gtlPath][g.sindex].wcValueStateTxt = "Invalid Entry";
									GTLHeaderModel.setData(gtlData);
								} else if (g.action === "createETL") {
									etlData[g.etlPath][g.sindex].wcValueState = "Error";
									etlData[g.etlPath][g.sindex].wcValueStateTxt = "Invalid Entry";
									ETLHeaderModel.setData(etlData);
								} else if (g.action === "createFTL") {
									ftlData[g.ftlPath][g.sindex].wcValueState = "Error";
									ftlData[g.ftlPath][g.sindex].wcValueStateTxt = "Invalid Entry";
									FTLHeaderModel.setData(ftlData);
								}

								if (g.action === "copyWC" || g.action === "changeWC") {
									sap.ui.getCore().byId(g.sourceId).setValueState("Error");
									sap.ui.getCore().byId(g.sourceId).setValueStateText("Invalid Entry");
								}
							}
						},
						error: function (e) {
							var b = JSON.parse(e.responseText);
							var d = b.error.message.value;
							if (g.action === "createWC") {
								wcData[g.sindex].wcValueState = "Error";
								wcData[g.sindex].wcValueStateTxt = d;
								wcData[g.sindex].wcEnable = true;
								AIWListWCModel.setData(wcData);
							} else if (g.action === "createGTL") {
								gtlData[g.gtlPath][g.sindex].wcValueState = "Error";
								gtlData[g.gtlPath][g.sindex].wcValueStateTxt = d;
								GTLHeaderModel.setData(gtlData);
							} else if (g.action === "createETL") {
								etlData[g.etlPath][g.sindex].wcValueState = "Error";
								etlData[g.etlPath][g.sindex].wcValueStateTxt = d;
								ETLHeaderModel.setData(etlData);
							} else if (g.action === "createFTL") {
								ftlData[g.ftlPath][g.sindex].wcValueState = "Error";
								ftlData[g.ftlPath][g.sindex].wcValueStateTxt = d;
								FTLHeaderModel.setData(ftlData);
							}

							if (g.action === "copyWC" || g.action === "changeWC") {
								sap.ui.getCore().byId(g.sourceId).setValueState("Error");
								sap.ui.getCore().byId(g.sourceId).setValueStateText(d);
							}
						}
					});
				}
			} else {
				if (g.action === "createWC") {
					wcData[g.sindex].setValue(a);
					AIWListWCModel.setData(wcData);
				} else if (g.action === "createGTL") {
					gtlData[g.gtlPath][g.sindex].setValue(a);
					GTLHeaderModel.setData(gtlData);
				} else if (g.action === "createETL") {
					etlData[g.etlPath][g.sindex].setValue(a);
					ETLHeaderModel.setData(etlData);
				} else if (g.action === "createFTL") {
					ftlData[g.ftlPath][g.sindex].setValue(a);
					FTLHeaderModel.setData(ftlData);
				}

				if (g.action === "copyWC" || g.action === "changeWC") {
					sap.ui.getCore().byId(g.sourceId).setValue(a);
				}
			}
		},
		/**
		 * Function to handle change of WorkCenter category
		 * @param {string} f
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		_workCenterCategory: function (f, oEvent) {
			var c = f.toUpperCase();
			var g = this;
			// if (this.action === "createWC") {
			var sPath = oEvent.getSource().getBindingContext("AIWListWCModel").getPath();
			g.sindex = parseInt(sPath.split("/")[1]);
			var wcData = oEvent.getSource().getBindingContext("AIWListWCModel").getModel().getData();
			var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel");
			// }
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var q = "/WorkCentCatVHSet";
				var oFilter = new sap.ui.model.Filter("Verwe", "EQ", c);
				var m = this.getView().getModel("valueHelp");
				m.read(q, {
					filters: [oFilter],
					success: function (d) {
						if (d.results.length > 0) {
							wcData[g.sindex].wcCat = a;
							wcData[g.sindex].wcCatDesc = d.results[0].Ktext;
							wcData[g.sindex].wcatEnable = false;
							AIWListWCModel.setData(wcData);
						} else {
							wcData[g.sindex].wcCatValueState = "Error";
							wcData[g.sindex].wcatEnable = true;
							wcData[g.sindex].wcCatValueStateTxt = "Invalid Entry";
							AIWListWCModel.setData(wcData);
						}
					},
					error: function (e) {
						wcData[g.sindex].wcCatValueState = "Error";
						var b = JSON.parse(e.responseText);

						var d = b.error.message.value;
						wcData[g.sindex].wcCatValueStateTxt = d;
						wcData[g.sindex].wcatEnable = true;
						AIWListWCModel.setData(wcData);
					}
				});
			} else {
				wcData[g.sindex].wcCat = a;
				AIWListWCModel.setData(wcData);
			}
		},
		/**
		 * Function to handle change of Person Responsible
		 * @param {string} f
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		_personResponsible: function (f, oEvent) {
			var c = f.toUpperCase();
			var g = this;
			// if (this.action === "createWC") {
			var sPath = oEvent.getSource().getBindingContext("AIWListWCModel").getPath();
			g.sindex = parseInt(sPath.split("/")[1]);
			var wcData = oEvent.getSource().getBindingContext("AIWListWCModel").getModel().getData();
			var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel");
			// }
			var p = wcData[g.sindex].plant;
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var q = "/PersonRespVHSet";
				var oFilter = [new sap.ui.model.Filter("Werks", "EQ", p),
					new sap.ui.model.Filter("Veran", "EQ", c)
				];
				var m = this.getView().getModel("valueHelp");
				m.read(q, {
					filters: oFilter,
					success: function (d) {
						if (d.results.length > 0) {
							wcData[g.sindex].person = a;
							wcData[g.sindex].personDesc = d.results[0].Ktext;
							AIWListWCModel.setData(wcData);
						} else {
							wcData[g.sindex].personResValueState = "Error";
							wcData[g.sindex].personResValueStateTxt = "Invalid Entry";
							AIWListWCModel.setData(wcData);
						}
					},
					error: function (e) {
						wcData[g.sindex].personResValueState = "Error";
						var b = JSON.parse(e.responseText);
						var d = b.error.message.value;
						wcData[g.sindex].personResValueStateTxt = d;
						AIWListWCModel.setData(wcData);
					}
				});
			} else {
				wcData[g.sindex].person = a;
				AIWListWCModel.setData(wcData);
			}
		},
		/**
		 * Function to handle change of Usage
		 * @param {string} f
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		_usage: function (f, oEvent) {
			var c = f.toUpperCase();
			var g = this;
			var q = "",
				oFilter = "",
				sPath;
			if (this.action === "createWC") {
				sPath = oEvent.getSource().getBindingContext("AIWListWCModel").getPath();
				g.sindex = parseInt(sPath.split("/")[1]);
				var wcData = oEvent.getSource().getBindingContext("AIWListWCModel").getModel().getData();
				var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel");
				q = "/WCUsageVHSet";
				oFilter = new sap.ui.model.Filter("PLANV", "EQ", c);
			} else if (this.action === "createGTL") {
				sPath = oEvent.getSource().getBindingContext("GTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var gtlData = oEvent.getSource().getBindingContext("GTLHeaderModel").getModel().getData();
				var GTLHeaderModel = this.getView().getModel("GTLHeaderModel");
				q = "/UsageVHSet";
				oFilter = new sap.ui.model.Filter("VERWE", "EQ", c);
			} else if (this.action === "createETL") {
				sPath = oEvent.getSource().getBindingContext("ETLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var etlData = oEvent.getSource().getBindingContext("ETLHeaderModel").getModel().getData();
				var ETLHeaderModel = this.getView().getModel("ETLHeaderModel");
				q = "/UsageVHSet";
				oFilter = new sap.ui.model.Filter("VERWE", "EQ", c);
			} else if (this.action === "createFTL") {
				sPath = oEvent.getSource().getBindingContext("FTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var ftlData = oEvent.getSource().getBindingContext("FTLHeaderModel").getModel().getData();
				var FTLHeaderModel = this.getView().getModel("FTLHeaderModel");
				q = "/UsageVHSet";
				oFilter = new sap.ui.model.Filter("VERWE", "EQ", c);
			}
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				// var q = "/WCUsageVHSet";
				// var oFilter = new sap.ui.model.Filter("PLANV", "EQ", c);
				var m = this.getView().getModel("valueHelp");
				m.read(q, {
					filters: [oFilter],
					success: function (d) {
						if (d.results.length > 0) {
							if (g.action === "createWC") {
								wcData[g.sindex].usg = a;
								wcData[g.sindex].usgDesc = d.results[0].TXT;
								AIWListWCModel.setData(wcData);
							} else if (g.action === "createGTL") {
								gtlData[0][g.sindex].tlusg = a;
								gtlData[0][g.sindex].usageDesc = d.results[0].TXT;
								GTLHeaderModel.setData(gtlData);
								g.readHdrDefaults("usage", g.sindex, gtlData);
							} else if (g.action === "createETL") {
								etlData[0][g.sindex].tlusg = a;
								etlData[0][g.sindex].usageDesc = d.results[0].TXT;
								ETLHeaderModel.setData(etlData);
								g.readHdrDefaults("usage", g.sindex, etlData);
							} else if (g.action === "createFTL") {
								ftlData[0][g.sindex].tlusg = a;
								ftlData[0][g.sindex].usageDesc = d.results[0].TXT;
								FTLHeaderModel.setData(ftlData);
								g.readHdrDefaults("usage", g.sindex, ftlData);
							}
							if (g.action === "copyWC" || g.action === "changeWC") {
								sap.ui.getCore().byId(g.sourceId).setValue(a);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");
							}

						} else {
							if (g.action === "createWC") {
								wcData[g.sindex].usgValueState = "Error";
								wcData[g.sindex].usgValueStateTxt = "Invalid Entry";
								AIWListWCModel.setData(wcData);
							} else if (g.action === "createGTL") {
								gtlData[g.gtlPath][g.sindex].usgValueState = "Error";
								gtlData[g.gtlPath][g.sindex].usgValueStateTxt = "Invalid Entry";
								GTLHeaderModel.setData(gtlData);
							} else if (g.action === "createETL") {
								etlData[g.etlPath][g.sindex].usgValueState = "Error";
								etlData[g.etlPath][g.sindex].usgValueStateTxt = "Invalid Entry";
								ETLHeaderModel.setData(etlData);
							} else if (g.action === "createFTL") {
								ftlData[g.ftlPath][g.sindex].usgValueState = "Error";
								ftlData[g.ftlPath][g.sindex].usgValueStateTxt = "Invalid Entry";
								FTLHeaderModel.setData(ftlData);
							}
						}
					},
					error: function (e) {

						var b = JSON.parse(e.responseText);
						var d = b.error.message.value;
						if (g.action === "createWC") {
							wcData[g.sindex].usgValueState = "Error";
							wcData[g.sindex].usgValueStateTxt = d;
							AIWListWCModel.setData(wcData);
						} else if (g.action === "createGTL") {
							gtlData[g.gtlPath][g.sindex].usgValueState = "Error";
							gtlData[g.gtlPath][g.sindex].usgValueStateTxt = d;
							GTLHeaderModel.setData(gtlData);
						} else if (g.action === "createETL") {
							etlData[g.etlPath][g.sindex].usgValueState = "Error";
							etlData[g.etlPath][g.sindex].usgValueStateTxt = d;
							ETLHeaderModel.setData(etlData);
						} else if (g.action === "createFTL") {
							ftlData[g.ftlPath][g.sindex].usgValueState = "Error";
							ftlData[g.ftlPath][g.sindex].usgValueStateTxt = d;
							FTLHeaderModel.setData(ftlData);
						}
						if (g.action === "copyWC" || g.action === "changeWC") {
							sap.ui.getCore().byId(g.sourceId).setValueState("Error");
							sap.ui.getCore().byId(g.sourceId).setValueStateText(d);
						}
					}
				});
			} else {
				if (g.action === "createWC") {
					wcData[g.sindex].usg = a;
					AIWListWCModel.setData(wcData);
				} else if (g.action === "createGTL") {
					gtlData[g.gtlPath][g.sindex].tlusg = a;
					gtlData[g.gtlPath][g.sindex].usageDesc = "";
					GTLHeaderModel.setData(gtlData);
				} else if (g.action === "createETL") {
					etlData[g.etlPath][g.sindex].tlusg = a;
					etlData[g.etlPath][g.sindex].usageDesc = "";
					ETLHeaderModel.setData(etlData);
				} else if (g.action === "createFTL") {
					ftlData[g.ftlPath][g.sindex].tlusg = a;
					ftlData[g.ftlPath][g.sindex].usageDesc = "";
					FTLHeaderModel.setData(ftlData);
				}
				if (g.action === "copyWC" || g.action === "changeWC") {
					sap.ui.getCore().byId(g.sourceId).setValue(a);
				}
			}
		},
		/**
		 * Function to handle change of Standard Value key
		 * @param {string} f
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		_standardValueKey: function (f, oEvent) {
			var c = f.toUpperCase();
			var g = this;
			// if (this.action === "createWC") {
			var sPath = oEvent.getSource().getBindingContext("AIWListWCModel").getPath();
			g.sindex = parseInt(sPath.split("/")[1]);
			var wcData = oEvent.getSource().getBindingContext("AIWListWCModel").getModel().getData();
			var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel");
			// }
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var q = "/StandardValueKeySet";
				var oFilter = new sap.ui.model.Filter("Vgwts", "EQ", c);
				var m = this.getView().getModel("valueHelp");
				m.read(q, {
					filters: [oFilter],
					success: function (d) {
						if (d.results.length > 0) {
							wcData[g.sindex].stdVal = a;
							wcData[g.sindex].stdValDesc = d.results[0].Txt;
							AIWListWCModel.setData(wcData);
						} else {
							wcData[g.sindex].stdValueState = "Error";
							wcData[g.sindex].stdValueStateTxt = "Invalid Entry";
							AIWListWCModel.setData(wcData);
						}
					},
					error: function (e) {
						wcData[g.sindex].stdValueState = "Error";
						var b = JSON.parse(e.responseText);
						var d = b.error.message.value;
						wcData[g.sindex].stdValueStateTxt = d;
						AIWListWCModel.setData(wcData);
					}
				});
			} else {
				wcData[g.sindex].stdVal = a;
				AIWListWCModel.setData(wcData);
			}
		},
		/**
		 * Function to handle change of Control Key
		 * @param {string} f
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		_controlKey: function (f, oEvent) {
			var c = f.toUpperCase();
			var g = this;
			// if (this.action === "createWC") {
			var sPath = oEvent.getSource().getBindingContext("AIWListWCModel").getPath();
			g.sindex = parseInt(sPath.split("/")[1]);
			var wcData = oEvent.getSource().getBindingContext("AIWListWCModel").getModel().getData();
			var AIWListWCModel = sap.ui.getCore().getModel("AIWListWCModel");
			// }
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var q = "/ControlKeySet";
				var oFilter = new sap.ui.model.Filter("Steus", "EQ", c);
				var m = this.getView().getModel("valueHelp");
				m.read(q, {
					filters: [oFilter],
					success: function (d) {
						if (d.results.length > 0) {
							wcData[g.sindex].ctrlKey = a;
							wcData[g.sindex].ctrlKeyDesc = d.results[0].Txt;
							AIWListWCModel.setData(wcData);
						} else {
							wcData[g.sindex].cntrlKeyValueState = "Error";
							wcData[g.sindex].cntrlKeyValueStateTxt = "Invalid Entry";
							AIWListWCModel.setData(wcData);
						}
					},
					error: function (e) {
						wcData[g.sindex].cntrlKeyValueState = "Error";
						var b = JSON.parse(e.responseText);
						var d = b.error.message.value;
						wcData[g.sindex].cntrlKeyValueStateTxt = d;
						AIWListWCModel.setData(wcData);
					}
				});
			} else {
				wcData[g.sindex].ctrlKey = a;
				AIWListWCModel.setData(wcData);
			}
		},
		/**
		 * Function to handle change of Equipment
		 * @param {string} f
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		_equipment: function (f, oEvent) {
			var c = f.toUpperCase();
			var g = this;
			var sPath = oEvent.getSource().getBindingContext("AIWListOLModel").getPath();
			g.sindex = parseInt(sPath.split("/")[1]);
			var olData = oEvent.getSource().getBindingContext("AIWListOLModel").getModel().getData();
			var AIWListOLModel = sap.ui.getCore().getModel("AIWListOLModel");
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			var bindingPath;
			var tInput = oEvent.getSource().mBindingInfos.value.binding;
			if (tInput !== undefined && tInput !== null) {
				bindingPath = tInput.sPath;
			} else {
				bindingPath = oEvent.getSource().mBindingInfos.value.parts[0].path;
			}
			if (a !== "") {
				var q = "/EquipmentNumberSet";
				var oFilter = [new sap.ui.model.Filter("Equnr", "EQ", c)];
				var m = this.getView().getModel("valueHelp");
				var lData = false;

				var oModelData = sap.ui.getCore().getModel("AIWEQUI").getData();
				if (oModelData.length > 0) {
					for (var i = 0; i < oModelData.length; i++) {
						if (oModelData[i].Equnr === c) {
							if (bindingPath === "linkFrmEq") {
								olData[g.sindex].linkFrmEqVS = "None";
								olData[g.sindex].linkFrmEqVST = "";
								olData[g.sindex].linkFrmEq = a;
								olData[g.sindex].linkFrmEqDesc = oModelData[i].Eqktx;
								lData = true;
							} else if (bindingPath === "linkToEq") {
								olData[g.sindex].linkToEqVS = "None";
								olData[g.sindex].linkToEqVST = "";
								olData[g.sindex].linkToEq = a;
								olData[g.sindex].linkToEqDesc = oModelData[i].Eqktx;
								lData = true;
							} else if (bindingPath === "linkObjEq") {
								olData[g.sindex].linkObjEqVS = "None";
								olData[g.sindex].linkObjEqVST = "";
								olData[g.sindex].linkObjEq = a;
								olData[g.sindex].linkObjEqDesc = oModelData[i].Eqktx;
								lData = true;
							}
							AIWListOLModel.setData(olData);
						}
					}
				}
				if (lData === true) {
					return;
				} else {
					m.read(q, {
						filters: oFilter,
						success: function (d) {
							if (d.results.length > 0) {
								if (bindingPath === "linkFrmEq") {
									olData[g.sindex].linkFrmEqVS = "None";
									olData[g.sindex].linkFrmEqVST = "";
									olData[g.sindex].linkFrmEq = a;
									olData[g.sindex].linkFrmEqDesc = d.results[0].Eqktx;
								} else if (bindingPath === "linkToEq") {
									olData[g.sindex].linkToEqVS = "None";
									olData[g.sindex].linkToEqVST = "";
									olData[g.sindex].linkToEq = a;
									olData[g.sindex].linkToEqDesc = d.results[0].Eqktx;
								} else if (bindingPath === "linkObjEq") {
									olData[g.sindex].linkObjEqVS = "None";
									olData[g.sindex].linkObjEqVST = "";
									olData[g.sindex].linkObjEq = a;
									olData[g.sindex].linkObjEqDesc = d.results[0].Eqktx;
								}
								AIWListOLModel.setData(olData);
							} else {
								if (bindingPath === "linkFrmEq") {
									olData[g.sindex].linkFrmEqVS = "Error";
									olData[g.sindex].linkFrmEqVST = "Invalid Entry";
								} else if (bindingPath === "linkToEq") {
									olData[g.sindex].linkToEqVS = "Error";
									olData[g.sindex].linkToEqVST = "Invalid Entry";
								} else if (bindingPath === "linkObjEq") {
									olData[g.sindex].linkObjEqVS = "Error";
									olData[g.sindex].linkObjEqVST = "Invalid Entry";
								}
								AIWListOLModel.setData(olData);
							}
						},
						error: function (e) {
							var b = JSON.parse(e.responseText);
							var d = b.error.message.value;
							if (bindingPath === "linkFrmEq") {
								olData[g.sindex].linkFrmEqVS = "Error";
								olData[g.sindex].linkFrmEqVST = d;
							} else if (bindingPath === "linkToEq") {
								olData[g.sindex].linkToEqVS = "Error";
								olData[g.sindex].linkToEqVST = d;
							} else if (bindingPath === "linkObjEq") {
								olData[g.sindex].linkObjEqVS = "Error";
								olData[g.sindex].linkObjEqVST = d;
							}
							AIWListOLModel.setData(olData);
						}
					});
				}
			} else {
				if (bindingPath === "linkFrmEq") {
					olData[g.sindex].linkFrmEq = a;
				} else if (bindingPath === "linkToEq") {
					olData[g.sindex].linkToEq = a;
				} else if (bindingPath === "linkObjEq") {
					olData[g.sindex].linkObjEq = a;
				}
				AIWListOLModel.setData(olData);
			}
		},
		/**
		 * Function to handle change of Functional Location
		 * @param {string} f
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		_floc: function (f, oEvent) {
			var c = f.toUpperCase();
			var g = this;
			var sPath = oEvent.getSource().getBindingContext("AIWListOLModel").getPath();
			g.sindex = parseInt(sPath.split("/")[1]);
			var olData = oEvent.getSource().getBindingContext("AIWListOLModel").getModel().getData();
			var AIWListOLModel = sap.ui.getCore().getModel("AIWListOLModel");
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			var bindingPath;
			var tInput = oEvent.getSource().mBindingInfos.value.binding;
			if (tInput !== undefined && tInput !== null) {
				bindingPath = tInput.sPath;
			} else {
				bindingPath = oEvent.getSource().mBindingInfos.value.parts[0].path;
			}
			if (a !== "") {
				// var q = "/FunclocSHSet";
				var q = "/FunctionLocationSet";
				var oFilter = [new sap.ui.model.Filter("Tplnr", "EQ", c)];
				var m = this.getView().getModel("valueHelp");
				var lData = false;

				var oModelData = sap.ui.getCore().getModel("AIWFLOC").getData();
				if (oModelData.length > 0) {
					for (var i = 0; i < oModelData.length; i++) {
						if (oModelData[i].Functionallocation === c) {
							if (bindingPath === "linkFrmFl") {
								olData[g.sindex].linkFrmFlVS = "None";
								olData[g.sindex].linkFrmFlVST = "";
								olData[g.sindex].linkFrmFl = a;
								olData[g.sindex].linkFrmFlDesc = oModelData[i].Flocdescription;
								lData = true;
							} else if (bindingPath === "linkToFl") {
								olData[g.sindex].linkToFlVS = "None";
								olData[g.sindex].linkToFlVST = "";
								olData[g.sindex].linkToFl = a;
								olData[g.sindex].linkToFlDesc = oModelData[i].Flocdescription;
								lData = true;
							} else if (bindingPath === "linkObjFl") {
								olData[g.sindex].linkObjFlVS = "None";
								olData[g.sindex].linkObjFlVST = "";
								olData[g.sindex].linkObjFl = a;
								olData[g.sindex].linkObjFlDesc = oModelData[i].Flocdescription;
								lData = true;
							}
							AIWListOLModel.setData(olData);
						}
					}
				}
				if (lData === true) {
					return;
				} else {
					m.read(q, {
						filters: oFilter,
						success: function (d) {
							if (d.results.length > 0) {
								if (bindingPath === "linkFrmFl") {
									olData[g.sindex].linkFrmFlVS = "None";
									olData[g.sindex].linkFrmFlVST = "";
									olData[g.sindex].linkFrmFl = a;
									olData[g.sindex].linkFrmFlDesc = d.results[0].Pltxt;
								} else if (bindingPath === "linkToFl") {
									olData[g.sindex].linkToFlVS = "None";
									olData[g.sindex].linkToFlVST = "";
									olData[g.sindex].linkToFl = a;
									olData[g.sindex].linkToFlDesc = d.results[0].Pltxt;
								} else if (bindingPath === "linkObjFl") {
									olData[g.sindex].linkObjFlVS = "None";
									olData[g.sindex].linkObjFlVST = "";
									olData[g.sindex].linkObjFl = a;
									olData[g.sindex].linkObjFlDesc = d.results[0].Pltxt;
								}
								AIWListOLModel.setData(olData);
							} else {
								if (bindingPath === "linkFrmFl") {
									olData[g.sindex].linkFrmFlVS = "Error";
									olData[g.sindex].linkFrmFlVST = "Invalid Entry";
								} else if (bindingPath === "linkToFl") {
									olData[g.sindex].linkToFlVS = "Error";
									olData[g.sindex].linkToFlVST = "Invalid Entry";
								} else if (bindingPath === "linkObjFl") {
									olData[g.sindex].linkObjFlVS = "Error";
									olData[g.sindex].linkObjFlVST = "Invalid Entry";
								}
								AIWListOLModel.setData(olData);
							}
						},
						error: function (e) {
							var b = JSON.parse(e.responseText);
							var d = b.error.message.value;
							if (bindingPath === "linkFrmFl") {
								olData[g.sindex].linkFrmFlVS = "Error";
								olData[g.sindex].linkFrmFlVST = d;
							} else if (bindingPath === "linkToFl") {
								olData[g.sindex].linkToFlVS = "Error";
								olData[g.sindex].linkToFlVST = d;
							} else if (bindingPath === "linkObjFl") {
								olData[g.sindex].linkObjFlVS = "Error";
								olData[g.sindex].linkObjFlVST = d;
							}
							AIWListOLModel.setData(olData);
						}
					});
				}
			} else {
				if (bindingPath === "linkFrmFl") {
					olData[g.sindex].linkFrmFl = a;
				} else if (bindingPath === "linkToFl") {
					olData[g.sindex].linkToFl = a;
				} else if (bindingPath === "linkObjFl") {
					olData[g.sindex].linkObjFl = a;
				}
				AIWListOLModel.setData(olData);
			}
		},
		/**
		 * Function to handle change of Planning Plant
		 * @param {string} f
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		_planPlant: function (f, oEvent) {
			var c = f.toUpperCase();
			var g = this;
			var sPath;
			if (this.action === "createGTL") {
				sPath = oEvent.getSource().getBindingContext("GTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var gtlData = oEvent.getSource().getBindingContext("GTLHeaderModel").getModel().getData();
				var GTLHeaderModel = this.getView().getModel("GTLHeaderModel");
			} else if (this.action === "createETL") {
				sPath = oEvent.getSource().getBindingContext("ETLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var etlData = oEvent.getSource().getBindingContext("ETLHeaderModel").getModel().getData();
				var ETLHeaderModel = this.getView().getModel("ETLHeaderModel");
			} else if (this.action === "createFTL") {
				sPath = oEvent.getSource().getBindingContext("FTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var ftlData = oEvent.getSource().getBindingContext("FTLHeaderModel").getModel().getData();
				var FTLHeaderModel = this.getView().getModel("FTLHeaderModel");
			}
			if (this.action === "copyGTL" || this.action === "copyETL" || this.action === "copyFTL") {
				this.sourceId = oEvent.getSource().getId();
			}
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var q = "/PlanningPlantSet";
				var oFilter = new sap.ui.model.Filter("Werks", "EQ", c);
				var m = this.getView().getModel("valueHelp");
				m.read(q, {
					filters: [oFilter],
					success: function (d) {
						if (d.results.length > 0) {
							if (g.action === "createGTL") {
								gtlData[0][g.sindex].Iwerk = a;
								gtlData[0][g.sindex].pPlantDesc = d.results[0].Name1;
								GTLHeaderModel.setData(gtlData);
								g.readHdrDefaults("planningPlant", g.sindex, gtlData);
							} else if (g.action === "createETL") {
								etlData[0][g.sindex].Iwerk = a;
								etlData[0][g.sindex].pPlantDesc = d.results[0].Name1;
								ETLHeaderModel.setData(etlData);
								g.readHdrDefaults("planningPlant", g.sindex, etlData);
							} else if (g.action === "createFTL") {
								ftlData[0][g.sindex].Iwerk = a;
								ftlData[0][g.sindex].pPlantDesc = d.results[0].Name1;
								FTLHeaderModel.setData(ftlData);
								g.readHdrDefaults("planningPlant", g.sindex, ftlData);
							} else if (g.action === "copyGTL" || g.action === "copyETL" || g.action === "copyFTL") {
								sap.ui.getCore().byId(g.sourceId).setValue(a);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");
							}
						} else {
							if (g.action === "createGTL") {
								gtlData[g.gtlPath][g.sindex].planningPlantValueState = "Error";
								gtlData[g.gtlPath][g.sindex].planningPlantValueStateTxt = "Invalid Entry";
								GTLHeaderModel.setData(gtlData);
							} else if (g.action === "createETL") {
								etlData[g.etlPath][g.sindex].planningPlantValueState = "Error";
								etlData[g.etlPath][g.sindex].planningPlantValueStateTxt = "Invalid Entry";
								ETLHeaderModel.setData(etlData);
							} else if (g.action === "createFTL") {
								ftlData[g.ftlPath][g.sindex].planningPlantValueState = "Error";
								ftlData[g.ftlPath][g.sindex].planningPlantValueStateTxt = "Invalid Entry";
								FTLHeaderModel.setData(ftlData);
							} else if (g.action === "copyGTL" || g.action === "copyETL" || g.action === "copyFTL") {
								sap.ui.getCore().byId(g.sourceId).setValueState("Error");
								sap.ui.getCore().byId(g.sourceId).setValueStateText("Invalid Entry");
							}
						}
					},
					error: function (e) {
						var b = JSON.parse(e.responseText);
						var d = b.error.message.value;
						if (g.action === "createGTL") {
							gtlData[g.gtlPath][g.sindex].planningPlantValueState = "Error";
							gtlData[g.gtlPath][g.sindex].planningPlantValueStateTxt = d;
							GTLHeaderModel.setData(gtlData);
						} else if (g.action === "createETL") {
							etlData[g.etlPath][g.sindex].planningPlantValueState = "Error";
							etlData[g.etlPath][g.sindex].planningPlantValueStateTxt = d;
							ETLHeaderModel.setData(etlData);
						} else if (g.action === "createFTL") {
							ftlData[g.ftlPath][g.sindex].planningPlantValueState = "Error";
							ftlData[g.ftlPath][g.sindex].planningPlantValueStateTxt = d;
							FTLHeaderModel.setData(ftlData);
						} else if (g.action === "copyGTL" || g.action === "copyETL" || g.action === "copyFTL") {
							sap.ui.getCore().byId(g.sourceId).setValueState("Error");
							sap.ui.getCore().byId(g.sourceId).setValueStateText(d);
						}
					}
				});
			} else {
				if (g.action === "createGTL") {
					gtlData[g.gtlPath][g.sindex].Iwerk = a;
					gtlData[g.gtlPath][g.sindex].pPlantDesc = "";
					GTLHeaderModel.setData(gtlData);
				} else if (g.action === "createETL") {
					etlData[g.etlPath][g.sindex].Iwerk = a;
					etlData[g.etlPath][g.sindex].pPlantDesc = "";
					ETLHeaderModel.setData(etlData);
				} else if (g.action === "createFTL") {
					ftlData[g.ftlPath][g.sindex].Iwerk = a;
					ftlData[g.ftlPath][g.sindex].pPlantDesc = "";
					FTLHeaderModel.setData(ftlData);
				} else if (g.action === "copyGTL" || g.action === "copyETL" || g.action === "copyFTL") {
					sap.ui.getCore().byId(g.sourceId).setValue(a);
				}
			}
		},
		/**
		 * Function to handle change of Status
		 * @param {string} f
		 * @param {sap.ui.base.Event} oEvent
		 * @private
		 */
		_status: function (f, oEvent) {
			var c = f.toUpperCase();
			var g = this;
			var sPath;
			if (this.action === "createGTL") {
				sPath = oEvent.getSource().getBindingContext("GTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var gtlData = oEvent.getSource().getBindingContext("GTLHeaderModel").getModel().getData();
				var GTLHeaderModel = this.getView().getModel("GTLHeaderModel");
			} else if (this.action === "createETL") {
				sPath = oEvent.getSource().getBindingContext("ETLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var etlData = oEvent.getSource().getBindingContext("ETLHeaderModel").getModel().getData();
				var ETLHeaderModel = this.getView().getModel("ETLHeaderModel");
			} else if (this.action === "createFTL") {
				sPath = oEvent.getSource().getBindingContext("FTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				var ftlData = oEvent.getSource().getBindingContext("FTLHeaderModel").getModel().getData();
				var FTLHeaderModel = this.getView().getModel("FTLHeaderModel");
			}
			if (this.action === "copyGTL" || this.action === "copyETL" || this.action === "copyFTL") {
				this.sourceId = oEvent.getSource().getId();
			}
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var q = "/StatusVHSet";
				var oFilter = new sap.ui.model.Filter("PLNST", "EQ", c);
				var m = this.getView().getModel("valueHelp");
				m.read(q, {
					filters: [oFilter],
					success: function (d) {
						if (d.results.length > 0) {
							if (g.action === "createGTL") {
								gtlData[0][g.sindex].Statu = a;
								gtlData[0][g.sindex].statusDesc = d.results[0].TXT;
								GTLHeaderModel.setData(gtlData);
								g.readHdrDefaults("status", g.sindex, gtlData);
							} else if (g.action === "createETL") {
								etlData[0][g.sindex].Statu = a;
								etlData[0][g.sindex].statusDesc = d.results[0].TXT;
								ETLHeaderModel.setData(etlData);
								g.readHdrDefaults("status", g.sindex, etlData);
							} else if (g.action === "createFTL") {
								ftlData[0][g.sindex].Statu = a;
								ftlData[0][g.sindex].statusDesc = d.results[0].TXT;
								FTLHeaderModel.setData(ftlData);
								g.readHdrDefaults("status", g.sindex, ftlData);
							} else if (g.action === "copyGTL" || g.action === "copyETL" || g.action === "copyFTL") {
								sap.ui.getCore().byId(g.sourceId).setValue(a);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");
							}
						} else {
							if (g.action === "createGTL") {
								gtlData[g.gtlPath][g.sindex].statusVS = "Error";
								gtlData[g.gtlPath][g.sindex].statusVST = "Invalid Entry";
								GTLHeaderModel.setData(gtlData);
							} else if (g.action === "createETL") {
								etlData[g.etlPath][g.sindex].statusVS = "Error";
								etlData[g.etlPath][g.sindex].statusVST = "Invalid Entry";
								ETLHeaderModel.setData(etlData);
							} else if (g.action === "createFTL") {
								ftlData[g.ftlPath][g.sindex].statusVS = "Error";
								ftlData[g.ftlPath][g.sindex].statusVST = "Invalid Entry";
								FTLHeaderModel.setData(ftlData);
							} else if (g.action === "copyGTL" || g.action === "copyETL" || g.action === "copyFTL") {
								sap.ui.getCore().byId(g.sourceId).setValueState("Error");
								sap.ui.getCore().byId(g.sourceId).setValueStateText("Invalid Entry");
							}
						}
					},
					error: function (e) {
						var b = JSON.parse(e.responseText);
						var d = b.error.message.value;
						if (g.action === "createGTL") {
							gtlData[g.gtlPath][g.sindex].statusVS = "Error";
							gtlData[g.gtlPath][g.sindex].statusVST = d;
							GTLHeaderModel.setData(gtlData);
						} else if (g.action === "createETL") {
							etlData[g.etlPath][g.sindex].statusVS = "Error";
							etlData[g.etlPath][g.sindex].statusVST = d;
							ETLHeaderModel.setData(etlData);
						} else if (g.action === "createFTL") {
							ftlData[g.ftlPath][g.sindex].statusVS = "Error";
							ftlData[g.ftlPath][g.sindex].statusVST = d;
							FTLHeaderModel.setData(ftlData);
						} else if (g.action === "copyGTL" || g.action === "copyETL" || g.action === "copyFTL") {
							sap.ui.getCore().byId(g.sourceId).setValueState("Error");
							sap.ui.getCore().byId(g.sourceId).setValueStateText(d);
						}
					}
				});
			} else {
				if (g.action === "createGTL") {
					gtlData[g.gtlPath][g.sindex].Statu = a;
					gtlData[g.gtlPath][g.sindex].statusDesc = "";
					GTLHeaderModel.setData(gtlData);
				} else if (g.action === "createETL") {
					etlData[g.etlPath][g.sindex].Statu = a;
					etlData[g.etlPath][g.sindex].statusDesc = "";
					ETLHeaderModel.setData(etlData);
				} else if (g.action === "createFTL") {
					ftlData[g.ftlPath][g.sindex].Statu = a;
					ftlData[g.ftlPath][g.sindex].statusDesc = "";
					FTLHeaderModel.setData(ftlData);
				} else if (g.action === "copyGTL" || g.action === "copyETL" || g.action === "copyFTL") {
					sap.ui.getCore().byId(g.sourceId).setValue(a);
				}
			}
		},
		/*
		 * Called when change event is triggered of Link Category
		 * @param {sap.ui.base.Event} oEvent
		 */
		onLinkCatChange: function (oEvent) {
			var g = this;
			var sPath = oEvent.getSource().getBindingContext("AIWListOLModel").getPath();
			g.sindex = parseInt(sPath.split("/")[1]);
			var olData = oEvent.getSource().getBindingContext("AIWListOLModel").getModel().getData();
			var AIWListOLModel = sap.ui.getCore().getModel("AIWListOLModel");
			var linkCatModel = this.getView().getModel("linkCatModel");
			var linkCatData = linkCatModel.getData();

			if (olData[g.sindex].linkCat !== "") {
				for (var i = 0; i < linkCatData.length; i++) {
					if (linkCatData[i].NETYP === olData[g.sindex].linkCat) {
						olData[g.sindex].linkCatEn = false;
						olData[g.sindex].linkCatDesc = linkCatData[i].TYPTX;
					}
				}
				this.readStatusProfOL(olData[g.sindex].linkCat, olData);
			} else {
				olData[g.sindex].linkCatEn = true;
			}
			AIWListOLModel.setData(olData);
		},
		/*
		 * Called when change event is triggered of Object Category
		 * @param {sap.ui.base.Event} oEvent
		 */
		onObjCatChange: function (oEvent) {
			var g = this;
			var sPath = oEvent.getSource().getBindingContext("AIWListOLModel").getPath();
			g.sindex = parseInt(sPath.split("/")[1]);
			var olData = oEvent.getSource().getBindingContext("AIWListOLModel").getModel().getData();
			var AIWListOLModel = sap.ui.getCore().getModel("AIWListOLModel");
			var objCatModel = this.getView().getModel("objCatModel");
			var objCatData = objCatModel.getData();

			for (var i = 0; i < objCatData.length; i++) {
				if (objCatData[i].Kantyp === olData[g.sindex].objCat) {
					olData[g.sindex].objCatEn = false;
					olData[g.sindex].objCatDesc = objCatData[i].Kantyp_txt;
				}
			}

			if (olData[g.sindex].objCat === "E") {
				// olData[g.sindex].linkCatEn = false;
				olData[g.sindex].linkFrmFlEn = false;
				olData[g.sindex].linkToFlEn = false;
				olData[g.sindex].linkObjFlEn = false;
				olData[g.sindex].linkFromEQEn = true;
				olData[g.sindex].linkToEQEn = true;
				olData[g.sindex].linkObjEqEn = true;
				olData[g.sindex].linkFrmFl = "";
				olData[g.sindex].linkToFl = "";
				olData[g.sindex].linkObjFl = "";
				olData[g.sindex].linkFrmflLblV = false;
				olData[g.sindex].linkFrmFlV = false;
				olData[g.sindex].linkFrmFlDescV = false;
				olData[g.sindex].linkToFlLblV = false;
				olData[g.sindex].linkToFlV = false;
				olData[g.sindex].linkToFlDescV = false;
				olData[g.sindex].linkObjFlLblV = false;
				olData[g.sindex].linkObjFlV = false;
				olData[g.sindex].linkObjFlDescV = false;

				olData[g.sindex].linkFrmEqLblV = true;
				olData[g.sindex].linkFrmEqV = true;
				olData[g.sindex].linkFrmEqDescV = true;
				olData[g.sindex].linkToEqLblV = true;
				olData[g.sindex].linkToEQV = true;
				olData[g.sindex].linkToEqDescV = true;
				olData[g.sindex].linkObjEqLblV = true;
				olData[g.sindex].linkObjEqV = true;
				olData[g.sindex].linkObjEqDescV = true;
			} else if (olData[g.sindex].objCat === "T") {
				// olData[g.sindex].linkCatEn = false;
				olData[g.sindex].linkFromEQEn = false;
				olData[g.sindex].linkToEQEn = false;
				olData[g.sindex].linkObjEqEn = false;
				olData[g.sindex].linkFrmFlEn = true;
				olData[g.sindex].linkToFlEn = true;
				olData[g.sindex].linkObjFlEn = true;
				olData[g.sindex].linkFrmEq = "";
				olData[g.sindex].linkToEq = "";
				olData[g.sindex].linkObjEq = "";

				olData[g.sindex].linkFrmEqLblV = false;
				olData[g.sindex].linkFrmEqV = false;
				olData[g.sindex].linkFrmEqDescV = false;
				olData[g.sindex].linkToEqLblV = false;
				olData[g.sindex].linkToEQV = false;
				olData[g.sindex].linkToEqDescV = false;
				olData[g.sindex].linkObjEqLblV = false;
				olData[g.sindex].linkObjEqV = false;
				olData[g.sindex].linkObjEqDescV = false;

				olData[g.sindex].linkFrmflLblV = true;
				olData[g.sindex].linkFrmFlV = true;
				olData[g.sindex].linkFrmFlDescV = true;
				olData[g.sindex].linkToFlLblV = true;
				olData[g.sindex].linkToFlV = true;
				olData[g.sindex].linkToFlDescV = true;
				olData[g.sindex].linkObjFlLblV = true;
				olData[g.sindex].linkObjFlV = true;
				olData[g.sindex].linkObjFlDescV = true;
			} else if (olData[g.sindex].objCat === "") {
				olData[g.sindex].linkCatEn = true;
			}
			AIWListOLModel.setData(olData);
		},

		/************************************ EQUI/FLOC/MSPT/MPMI Code ****************************************/

		onTableUpdateFinished: function () {
			var g = this;
			var oEAMModel = sap.ui.getCore().getModel("EAMCRModel");
			if (g.copyEquiTempKey) {
				g.readCreateTempKey(oEAMModel.getProperty("/12").CRType, "Equipment", null, g.noOfCopyObjects);
			}
			if (g.copyMsptTempKey) {
				g.readCreateTempKey(oEAMModel.getProperty("/8").CRType, "MeasuringPoint", null, g.noOfCopyObjects);
			}
			if (g.copyMpmiTempKey) {
				g.readCreateTempKey(oEAMModel.getProperty("/7").CRType, "MaintenancePlan", null, g.noOfCopyObjects);
			}
		},
		/*
		 * Function to read Change request type
		 */
		readEAMCRType: function () {
			var g = this;
			var bd = new sap.m.BusyDialog();
			bd.open();
			var sPath = "/EAMCRTypeSet";
			var oModel = g.getView().getModel("valueHelp");
			var fnSuccess = function (d) {
				var sArray = [];
				for (var i = 0; i < d.results.length; i++) {
					var sObj = {
						CRType: d.results[i].CRType,
						Obtab: d.results[i].Obtab,
						Action: d.results[i].Action,
						ObjLabel: d.results[i].ObjLabel,
						CRDescription: d.results[i].CRDescription
					};
					sArray.push(sObj);
				}

				var sModel = new JSONModel();
				sModel.setData(sArray);
				sap.ui.getCore().setModel(sModel, "EAMCRModel");
				bd.close();
			};
			var fnError = function (err) {
				var error = [];
				if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror.errordetails
					.length === 0) {
					error[0] = JSON.parse(err.responseText).error.message.value;
				} else {
					for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
						error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
					}
				}
				var value = error.join("\n");
				bd.close();
				g.invokeMessage(value);
			};

			g._readData(sPath, oModel, fnSuccess, fnError);
		},
		/*
		 * Function to read Temporary key
		 * @param {string} pItemName
		 * @param {object} cDataObj
		 * @param {number} noOfObjects
		 * @public
		 */
		readCreateTempKeyT: function (pItemName, cDataObj, noOfObjects) {
			var g = this;
			var EAMCRModel = sap.ui.getCore().getModel("EAMCRModel");
			var EAMCRdata = EAMCRModel.getData();
			var TLFragmentId = this.getView().createId("tlMain");
			var TLKey = sap.ui.core.Fragment.byId(TLFragmentId, "_iconTabBarTL").getSelectedKey();
			var pCRType = "";
			/*if (this.action.indexOf("GTL") > 0) {
				pCRType = EAMCRModel.getProperty("/2").CRType;
			}
			if (this.action.indexOf("ETL") > 0) {
				pCRType = EAMCRModel.getProperty("/4").CRType;
			}
			if (this.action.indexOf("FTL") > 0) {
				pCRType = EAMCRModel.getProperty("/3").CRType;
			}*/
			if (TLKey === "GTLTab") {
				for (var a = 0; a < EAMCRdata.length; a++) {
					if (EAMCRdata[a].Obtab === "PLKO" && EAMCRdata[a].ObjLabel.indexOf("General Task List") > -1) {
						// if (type === "type") {
						pCRType = EAMCRdata[a].CRType;
						// } else {
						// 	sObTab = crTypes[a].Obtab;
						// }
						break;
					}
				}
				// pCRType = EAMCRModel.getProperty("/2").CRType;
			}
			if (TLKey === "EqTLTab") {
				for (var a = 0; a < EAMCRdata.length; a++) {
					if (EAMCRdata[a].Obtab === "PLKO" && EAMCRdata[a].ObjLabel.indexOf("Equipment Task List") > -1) {
						// if (type === "type") {
						pCRType = EAMCRdata[a].CRType;
						// } else {
						// 	sObTab = crTypes[a].Obtab;
						// }
						break;
					}
				}
				// pCRType = EAMCRModel.getProperty("/4").CRType;
			}
			if (TLKey === "FLOCTLTab") {
				for (var a = 0; a < EAMCRdata.length; a++) {
					if (EAMCRdata[a].Obtab === "PLKO" && EAMCRdata[a].ObjLabel.indexOf("Functional Location Task List") > -1) {
						// if (type === "type") {
						pCRType = EAMCRdata[a].CRType;
						// } else {
						// 	sObTab = crTypes[a].Obtab;
						// }
						break;
					}
				}
				// pCRType = EAMCRModel.getProperty("/3").CRType;
			}
			if (this.action.indexOf("OL") > 0) {
				for (var a = 0; a < EAMCRdata.length; a++) {
					if (EAMCRdata[a].Obtab === "INET") {
						// if (type === "type") {
						pCRType = EAMCRdata[a].CRType;
						// } else {
						// 	sObTab = crTypes[a].Obtab;
						// }
						break;
					}
				}
				// pCRType = EAMCRModel.getProperty("/6").CRType;
			}
			// var sPath = "/TempKeySet('" + pCRType + "')";
			var sPath = "/TempKeySet";
			var oModel = g.getView().getModel("valueHelp");
			var oFilter = [new sap.ui.model.Filter("CRType", "EQ", pCRType),
				new sap.ui.model.Filter("ObjNo", "EQ", noOfObjects)
			];

			function fnSuccess(d) {
				g.BusyDialog.close();
				var results = d.results;
				if (g.action.indexOf("GTL") > 0) {
					if (cDataObj) {
						if (TLKey === "GTLTab") {
							for (var i = 0; i < results.length; i++) {
								var AIWListGTLModel = sap.ui.getCore().getModel("AIWListGTLModel");
								var AIWListGTLData = AIWListGTLModel.getData();
								AIWListGTLData.push(cDataObj);
								var sArray = $.map(AIWListGTLData, function (obj) {
									return $.extend(true, {}, obj);
								});
								sArray[sArray.length - 1].grp = results[i].Key;
								// if(sArray[sArray.length - 1].header){
								// 	sArray[sArray.length - 1].header.forEach(function(item){
								// 		item.Iwerk = "";
								// 		item.pPlantDesc = "";
								// 	})
								// }
								AIWListGTLModel.setData(sArray);
								AIWListGTLModel.setSizeLimit(sArray.length);
								g.getView().setModel(AIWListGTLModel, "AIWListGTLModel");
								g.updateCount("generalTL", AIWListGTLData);
							}
							g._copyTLFragment.close();
							/*if (noOfObjects > 1) {
								noOfObjects--;
								g.readCreateTempKeyT(pItemName, cDataObj, noOfObjects);
							}*/
							// g.action = "createGTL";
						} else if (TLKey === "EqTLTab") {
							for (var i = 0; i < results.length; i++) {
								var AIWListETLModel = sap.ui.getCore().getModel("AIWListETLModel");
								var AIWListETLData = AIWListETLModel.getData();
								AIWListETLData.push(cDataObj);
								var sArray = $.map(AIWListETLData, function (obj) {
									return $.extend(true, {}, obj);
								});
								sArray[sArray.length - 1].grp = results[i].Key;
								AIWListETLModel.setData(sArray);
								AIWListETLModel.setSizeLimit(sArray.length);
								g.getView().setModel(AIWListETLModel, "AIWListETLModel");
								g.updateCount("equiTL", AIWListETLData);
							}
							g._copyTLFragment.close();
							/*if (noOfObjects > 1) {
								noOfObjects--;
								g.readCreateTempKeyT(pItemName, cDataObj, noOfObjects);
							}*/
							/*else if(noOfObjects === 1){
								g.action = "createETL";
							}*/
							// g.action = "createETL";
						} else if (TLKey === "FLOCTLTab") {
							for (var i = 0; i < results.length; i++) {
								var AIWListFTLModel = sap.ui.getCore().getModel("AIWListFTLModel");
								var AIWListFTLData = AIWListFTLModel.getData();
								AIWListFTLData.push(cDataObj);
								var sArray = $.map(AIWListFTLData, function (obj) {
									return $.extend(true, {}, obj);
								});
								sArray[sArray.length - 1].grp = results[i].Key;
								AIWListFTLModel.setData(sArray);
								AIWListFTLModel.setSizeLimit(sArray.length);
								g.getView().setModel(AIWListFTLModel, "AIWListFTLModel");
								g.updateCount("flocTL", AIWListFTLData);
							}
							g._copyTLFragment.close();
							/*if (noOfObjects > 1) {
								noOfObjects--;
								g.readCreateTempKeyT(pItemName, cDataObj, noOfObjects);
							}*/
							/*else if(noOfObjects === 1){
								g.action = "createFTL";
							}*/
						}
					} else {
						for (var i = 0; i < results.length; i++) {
							g.CreatRow(pItemName, results[i].Key);
						}
					}
				}
				if (g.action.indexOf("ETL") > 0) {
					if (cDataObj) {
						if (TLKey === "GTLTab") {
							for (var i = 0; i < results.length; i++) {
								var AIWListGTLModel = sap.ui.getCore().getModel("AIWListGTLModel");
								var AIWListGTLData = AIWListGTLModel.getData();
								AIWListGTLData.push(cDataObj);
								var sArray = $.map(AIWListGTLData, function (obj) {
									return $.extend(true, {}, obj);
								});
								sArray[sArray.length - 1].grp = results[i].Key;
								AIWListGTLModel.setData(sArray);
								AIWListGTLModel.setSizeLimit(sArray.length);
								g.getView().setModel(AIWListGTLModel, "AIWListGTLModel");
								g.updateCount("generalTL", AIWListGTLData);
							}
							g._copyTLFragment.close();
							/*if (noOfObjects > 1) {
								noOfObjects--;
								g.readCreateTempKeyT(pItemName, cDataObj, noOfObjects);
							}*/
							/*else if(noOfObjects === 1){
								g.action = "createGTL";
							}*/
						} else if (TLKey === "EqTLTab") {
							for (var i = 0; i < results.length; i++) {
								var AIWListETLModel = sap.ui.getCore().getModel("AIWListETLModel");
								var AIWListETLData = AIWListETLModel.getData();
								AIWListETLData.push(cDataObj);
								var sArray = $.map(AIWListETLData, function (obj) {
									return $.extend(true, {}, obj);
								});
								sArray[sArray.length - 1].grp = results[i].Key;
								sArray[sArray.length - 1].equipment = "";
								sArray[sArray.length - 1].equipmentDesc = "";
								if (sArray[sArray.length - 1].header) {
									sArray[sArray.length - 1].header.forEach(function (item) {
										item.equipment = "";
										item.equipmentDesc = "";
										item.Iwerk = "";
										item.pPlantDesc = "";
									})
								}
								AIWListETLModel.setData(sArray);
								AIWListETLModel.setSizeLimit(sArray.length);
								g.getView().setModel(AIWListETLModel, "AIWListETLModel");
								g.updateCount("equiTL", AIWListETLData);
							}
							g._copyTLFragment.close();
							/*if (noOfObjects > 1) {
								noOfObjects--;
								g.readCreateTempKeyT(pItemName, cDataObj, noOfObjects);
							}*/
							/*else if(noOfObjects === 1){
								g.action = "createETL";
							}*/
						} else if (TLKey === "FLOCTLTab") {
							for (var i = 0; i < results.length; i++) {
								var AIWListFTLModel = sap.ui.getCore().getModel("AIWListFTLModel");
								var AIWListFTLData = AIWListFTLModel.getData();
								AIWListFTLData.push(cDataObj);
								var sArray = $.map(AIWListFTLData, function (obj) {
									return $.extend(true, {}, obj);
								});
								sArray[sArray.length - 1].grp = results[i].Key;
								AIWListFTLModel.setData(sArray);
								AIWListFTLModel.setSizeLimit(sArray.length);
								g.getView().setModel(AIWListFTLModel, "AIWListFTLModel");
								g.updateCount("flocTL", AIWListFTLData);
							}
							g._copyTLFragment.close();
							/*if (noOfObjects > 1) {
								noOfObjects--;
								g.readCreateTempKeyT(pItemName, cDataObj, noOfObjects);
							}*/
							/*else if(noOfObjects === 1){
								g.action = "createFTL";
							}*/
						}
					} else {
						for (var i = 0; i < results.length; i++) {
							g.CreatRow(pItemName, results[i].Key);
						}
					}
				}
				if (g.action.indexOf("FTL") > 0) {
					if (cDataObj) {
						if (TLKey === "GTLTab") {
							for (var i = 0; i < results.length; i++) {
								var AIWListGTLModel = sap.ui.getCore().getModel("AIWListGTLModel");
								var AIWListGTLData = AIWListGTLModel.getData();
								AIWListGTLData.push(cDataObj);
								var sArray = $.map(AIWListGTLData, function (obj) {
									return $.extend(true, {}, obj);
								});
								sArray[sArray.length - 1].grp = results[i].Key;
								AIWListGTLModel.setData(sArray);
								AIWListGTLModel.setSizeLimit(sArray.length);
								g.getView().setModel(AIWListGTLModel, "AIWListGTLModel");
								g.updateCount("generalTL", AIWListGTLData);
							}
							g._copyTLFragment.close();
							/*if (noOfObjects > 1) {
								noOfObjects--;
								g.readCreateTempKeyT(pItemName, cDataObj, noOfObjects);
							}*/
							/*else if(noOfObjects === 1){
								g.action = "createGTL";
							}*/
						} else if (TLKey === "EqTLTab") {
							for (var i = 0; i < results.length; i++) {
								var AIWListETLModel = sap.ui.getCore().getModel("AIWListETLModel");
								var AIWListETLData = AIWListETLModel.getData();
								AIWListETLData.push(cDataObj);
								var sArray = $.map(AIWListETLData, function (obj) {
									return $.extend(true, {}, obj);
								});
								sArray[sArray.length - 1].grp = results[i].Key;
								AIWListETLModel.setData(sArray);
								AIWListETLModel.setSizeLimit(sArray.length);
								g.getView().setModel(AIWListETLModel, "AIWListETLModel");
								g.updateCount("equiTL", AIWListETLData);
							}
							g._copyTLFragment.close();
							/*if (noOfObjects > 1) {
								noOfObjects--;
								g.readCreateTempKeyT(pItemName, cDataObj, noOfObjects);
							}*/
							/*else if(noOfObjects === 1){
								g.action = "createETL";
							}*/
						} else if (TLKey === "FLOCTLTab") {
							for (var i = 0; i < results.length; i++) {
								var AIWListFTLModel = sap.ui.getCore().getModel("AIWListFTLModel");
								var AIWListFTLData = AIWListFTLModel.getData();
								AIWListFTLData.push(cDataObj);
								var sArray = $.map(AIWListFTLData, function (obj) {
									return $.extend(true, {}, obj);
								});
								sArray[sArray.length - 1].grp = results[i].Key;
								sArray[sArray.length - 1].floc = "";
								sArray[sArray.length - 1].flocDesc = "";
								if (sArray[sArray.length - 1].header) {
									sArray[sArray.length - 1].header.forEach(function (item) {
										item.floc = "";
										item.flocDesc = "";
										item.Iwerk = "";
										item.pPlantDesc = "";
									})
								}
								AIWListFTLModel.setData(sArray);
								AIWListFTLModel.setSizeLimit(sArray.length);
								g.getView().setModel(AIWListFTLModel, "AIWListFTLModel");
								g.updateCount("flocTL", AIWListFTLData);
							}
							g._copyTLFragment.close();
							/*if (noOfObjects > 1) {
								noOfObjects--;
								g.readCreateTempKeyT(pItemName, cDataObj, noOfObjects);
							}*/
							/*else if(noOfObjects === 1){
								g.action = "createFTL";
							}*/
						}
					} else {
						for (var i = 0; i < results.length; i++) {
							g.CreatRow(pItemName, results[i].Key);
						}
					}
				}
				if (g.action.indexOf("OL") > 0) {
					if (cDataObj) {
						for (var i = 0; i < results.length; i++) {
							var AIWListOLModel = sap.ui.getCore().getModel("AIWListOLModel");
							var AIWListOLData = AIWListOLModel.getData();
							AIWListOLData.push(cDataObj);
							var sArray = $.map(AIWListOLData, function (obj) {
								return $.extend(true, {}, obj);
							});
							sArray[sArray.length - 1].link = results[i].Key;
							AIWListOLModel.setSizeLimit(sArray.length);
							AIWListOLModel.setData(sArray);
							g.getView().setModel(AIWListOLModel, "AIWListOLModel");
							g.updateCount("objLink", AIWListOLData);
						}
						g._copyOLFragment.close();
						/*if (noOfObjects > 1) {
							noOfObjects--;
							g.readCreateTempKeyT(pItemName, cDataObj, noOfObjects);
						}*/
					} else {
						for (var i = 0; i < results.length; i++) {
							g.CreatRow(pItemName, results[i].Key);
						}
					}
				}
			}

			function fnError(err) {
				g.BusyDialog.close();
				var error = [];
				if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror.errordetails
					.length === 0) {
					error[0] = JSON.parse(err.responseText).error.message.value;
				} else {
					for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
						error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
					}
				}
				var value = error.join("\n");
				g.invokeMessage(value);
			}

			g.BusyDialog.open();
			oModel.read(sPath, {
				filters: oFilter,
				success: fnSuccess,
				error: fnError
			});
		},
		/*
		 * Function to read Temporary key
		 * @param {string} pItemName
		 * @param {string} pModelName
		 * @param {string} pMenuAction
		 * @param {number} pNoOfObject
		 * @param {array} pCopyData
		 * @param {string} pSubItem
		 * @public
		 */
		readCreateTempKey: function (pCRType, pModelName, pMenuAction, pNoOfObject, pCopyData, pSubItem) {
			var g = this;
			var sCopyTempArray = [];
			var sPath = "/TempKeySet";
			var oFilters = [new Filter("CRType", "EQ", pCRType), new Filter("ObjNo", "EQ", pNoOfObject)];
			var oModel = g.getView().getModel("valueHelp");
			var oMainModel = g.getView().getModel("mainView");
			var oMainData = oMainModel.getData();

			oMainData.tableBusy = true;
			oMainModel.setData(oMainData);
			var fnSuccess = function (d) {
				g.BusyDialog.close();
				for (var i = 0; i < pNoOfObject; i++) {
					sCopyTempArray.push(d.results[i].Key);
				}

				if (pMenuAction === "create") {
					g.onCreateRowPress(pModelName, sCopyTempArray[0]);
				}

				if (pMenuAction === "stagging_copy") {
					var oAIWModel, oData, sArray;
					if (pCopyData) {
						oAIWModel = g.getView().getModel(pModelName);
						if (pModelName === "AIWEQUI") {
							for (var a = 0; a < pNoOfObject; a++) {
								oData = oAIWModel.getData();
								oData.push(pCopyData);
								sArray = $.map(oData, function (obj) {
									return $.extend(true, {}, obj);
								});
								sArray[sArray.length - 1].Equnr = sCopyTempArray[a];
								// sArray[sArray.length - 1].SuperordinateEquip = "";
								// sArray[sArray.length - 1].SuperordinateEquipDesc = "";
								sArray[sArray.length - 1].UstaEqui = g.stagingEqUserSts;
								sArray[sArray.length - 1].UswoEqui = g.stagingEqStsWOnumber;
								sArray[sArray.length - 1].viewParameter = "create";
								sArray[sArray.length - 1].EqunrEnabled = true;
								sArray[sArray.length - 1].EquipCatEnabled = true;
								sArray[sArray.length - 1].MaintplantEnabled = true;
								sArray[sArray.length - 1].BukrsEnabled = true;
								// sArray[sArray.length - 1].UswoEqui = g.userWithoutSts;

								var oAddressModel = sap.ui.getCore().getModel("equiAddressView");
								var oAddressData = oAddressModel.getData();
								var mCountFlag = true;
								var sObj;
								if (oAddressData.length > 0) {
									for (var sa = 0; sa < oAddressData.length; sa++) {
										if (sCopyTempArray[a] === oAddressData[sa].Equnr) {
											mCountFlag = false;
											break;
										}
									}
								}
								if (mCountFlag) {
									sObj = {
										Equnr: sCopyTempArray[a],
										IsEditable: sArray[sArray.length - 1].IsEditable
									};
									oAddressData.push(sObj);
									oAddressModel.setData(oAddressData);
								}
								oAIWModel.setData(sArray);
								sap.ui.getCore().setModel(new JSONModel(oAIWModel.getData()), pModelName);
								g.onUpdateTitleCount(pModelName, oAIWModel.getData());

								var tempEQDOI = $.map(g.DOIarrayEQ, function (obj) {
									return $.extend(true, {}, obj);
								});
								sap.ui.getCore().getModel("dataOriginMOP").getData().EQ.push({
									key: sArray[sArray.length - 1].Equnr,
									DOI: tempEQDOI
								});
							}
						}
						if (pModelName === "AIWMSPT") {
							for (var b = 0; b < pNoOfObject; b++) {
								oData = oAIWModel.getData();
								oData.push(pCopyData);
								sArray = $.map(oData, function (obj) {
									return $.extend(true, {}, obj);
								});
								sArray[sArray.length - 1].Mspoint = sCopyTempArray[b];
								sArray[sArray.length - 1].viewParameter = "create";
								sArray[sArray.length - 1].MspointEnabled = true;
								sArray[sArray.length - 1].ObtypMsEnabled = true;
								if (sArray[sArray.length - 1].Equnr === "" || sArray[sArray.length - 1].Equnr === undefined) {
									sArray[sArray.length - 1].EqunrEnabled = false;
								} else {
									sArray[sArray.length - 1].EqunrEnabled = true;
								}
								if (sArray[sArray.length - 1].Tplnr === "" || sArray[sArray.length - 1].Tplnr === undefined) {
									sArray[sArray.length - 1].TplnrEnabled = false;
								} else {
									sArray[sArray.length - 1].TplnrEnabled = true;
								}
								sArray[sArray.length - 1].MptypEnabled = true;
								sArray[sArray.length - 1].AtnamMsEnabled = true;
								oAIWModel.setData(sArray);
								sap.ui.getCore().setModel(new JSONModel(oAIWModel.getData()), pModelName);
								g.onUpdateTitleCount(pModelName, oAIWModel.getData());
							}
						}
						if (pModelName === "AIWMPMI") {
							if (pSubItem === "HEADER") {
								g.CopyTempArray = sCopyTempArray;
								g.CopyNoOfObject = pNoOfObject;
								g.readCreateTempKey("MPITEM", pModelName, "stagging_copy", pCopyData.itemModel.length * pNoOfObject, pCopyData, "MPITEM");
							}
							if (pSubItem === "MPITEM") {
								for (var c = 0; c < g.CopyNoOfObject; c++) {
									oData = oAIWModel.getData();
									oData.push(pCopyData);
									sArray = $.map(oData, function (obj) {
										return $.extend(true, {}, obj);
									});

									var aObjListItems = sArray[sArray.length - 1].ObjListItems;
									for (var z = 0; z < aObjListItems.length; z++) {
										if (aObjListItems[z].Warpl === sArray[sArray.length - 1].Warpl) {
											aObjListItems[z].Warpl = g.CopyTempArray[c];
										}
									}

									sArray[sArray.length - 1].Warpl = g.CopyTempArray[c];
									sArray[sArray.length - 1].menuAction = "copy";
									sArray[sArray.length - 1].viewParameter = "create";
									sArray[sArray.length - 1].WarplEnabled = true;
									sArray[sArray.length - 1].HorizVisible = false;
									if (sArray[sArray.length - 1].Mptyp === "" || sArray[sArray.length - 1].Mptyp === undefined || sArray[sArray.length - 1].Mptyp ===
										" ") {
										sArray[sArray.length - 1].MptypEnabled = true;
									} else {
										sArray[sArray.length - 1].MptypEnabled = false;
									}
									if (sArray[sArray.length - 1].cycleType === 1 && (sArray[sArray.length - 1].Strat === "" || sArray[sArray.length - 1].Strat ===
											undefined || sArray[sArray.length - 1].Strat === " ")) {
										sArray[sArray.length - 1].StratEnabled = true;
									} else {
										sArray[sArray.length - 1].StratEnabled = false;
									}
									if (sArray[sArray.length - 1].cycleType === 2 && (sArray[sArray.length - 1].Mehrfach === false || sArray[sArray.length - 1].Mehrfach ===
											"" || sArray[sArray.length - 1].Mehrfach === undefined || sArray[sArray.length - 1].Mehrfach === " ")) {
										sArray[sArray.length - 1].MehrfachEnabled = true;
									} else {
										sArray[sArray.length - 1].MehrfachEnabled = false;
									}
									if (sArray[sArray.length - 1].cycleType === 2 && (sArray[sArray.length - 1].Wset === "" || sArray[sArray.length - 1].Wset ===
											undefined || sArray[sArray.length - 1].Wset === " ")) {
										sArray[sArray.length - 1].WsetEnabled = true;
									} else {
										sArray[sArray.length - 1].WsetEnabled = false;
									}

									var sCycleLength = sArray[sArray.length - 1].cycleModel.length;
									for (var cp = 0; cp < sCycleLength; cp++) {
										sArray[sArray.length - 1].cycleModel[cp].Zykl1Enabled = false;
										sArray[sArray.length - 1].cycleModel[cp].ZeiehEnabled = false;
										sArray[sArray.length - 1].cycleModel[cp].PakTextEnabled = false;
										sArray[sArray.length - 1].cycleModel[cp].OffsetEnabled = false;
										sArray[sArray.length - 1].cycleModel[cp].PointEnabled = false;
										sArray[sArray.length - 1].cycleModel[cp].CycleseqiEnabled = false;
									}

									var sItemLength = sArray[sArray.length - 1].itemModel.length;
									var aObjListItems = sArray[sArray.length - 1].ObjListItems;
									for (var p = 0; p < sItemLength; p++) {
										for (var z = 0; z < aObjListItems.length; z++) {
											if (aObjListItems[z].Warpl === sArray[sArray.length - 1].Warpl && aObjListItems[z].Mitemnumb === sArray[sArray.length - 1]
												.itemModel[p].Mitemnumb) {
												aObjListItems[z].Mitemnumb = sCopyTempArray[p];
											}
										}
										sArray[sArray.length - 1].itemModel[p].Mitemnumb = sCopyTempArray[p];
									}
									for (var q = 0; q < sItemLength; q++) {
										sCopyTempArray.shift();
									}

									oAIWModel.setData(sArray);
									sap.ui.getCore().setModel(new JSONModel(oAIWModel.getData()), pModelName);
									g.cycleIndicatorSelected(sArray.length - 1);
									g.onUpdateTitleCount(pModelName, oAIWModel.getData());
								}
								g.CopyNoOfObject = 0;
								g.CopyTempArray = [];
							}
						}

					}
				}

				if (pMenuAction === "active_copy") {
					if (pCopyData) {
						g.CopyTempArray = sCopyTempArray;
						oAIWModel = g.getView().getModel(pModelName);
						if (pModelName === "AIWEQUI") {
							for (var e = 0; e < pNoOfObject; e++) {
								g.readEquipmentData(pCopyData.Equnr);
							}
						}
						if (pModelName === "AIWMSPT") {
							for (var f = 0; f < pNoOfObject; f++) {
								g.readMeasuringPointData(pCopyData.Mspoint);
							}
						}
						if (pModelName === "AIWMPMI") {
							if (pSubItem === "HEADER") {
								for (var h = 0; h < pNoOfObject; h++) {
									g.readMaintenancePlanData(pCopyData.Warpl);
								}
								g.CopyTempArray = sCopyTempArray;
								g.CopyNoOfObject = pNoOfObject;
							}
							if (pSubItem === "MPITEM") {
								for (var y = 0; y < parseInt(g.CopyNoOfObject); y++) {
									oData = oAIWModel.getData();

									var sActiveItemLength = pCopyData[y].itemModel.length;
									var aObjListItems = pCopyData[y].ObjListItems;
									for (var r = 0; r < sActiveItemLength; r++) {
										for (var z = 0; z < aObjListItems.length; z++) {
											if (aObjListItems[z].Warpl === pCopyData[y].Warpl && aObjListItems[z].Mitemnumb === pCopyData[y].itemModel[r].Mitemnumb) {
												aObjListItems[z].Mitemnumb = sCopyTempArray[r];
											}
										}
										pCopyData[y].itemModel[r].Mitemnumb = sCopyTempArray[r];
									}
									for (var s = 0; s < sActiveItemLength; s++) {
										sCopyTempArray.shift();
									}

									oData.push(pCopyData[y]);
									oAIWModel.setData(oData);
									sap.ui.getCore().setModel(new JSONModel(oAIWModel.getData()), pModelName);
								}
							}
						}
					}
				}

				oMainData.tableBusy = false;
				oMainModel.setData(oMainData);
			};
			var fnError = function () {
				g.BusyDialog.close();
				oMainData.tableBusy = false;
				oMainModel.setData(oMainData);
			};
			g.BusyDialog.open();
			g._readData(sPath, oModel, fnSuccess, fnError, oFilters);
		},
		/*
		 * Function to set Reject dialog
		 * @param {object} f - xmlfragment object
		 * @public
		 */
		setRejectDialog: function (f) {
			this.rejectDialog = f;
		},
		/*
		 * Function to get Reject dialog
		 */
		getRejectDialog: function () {
			return this.rejectDialog;
		},
		/*
		 * Function to handle Reject dialog close
		 */
		onRejectClose: function () {
			this.getRejectDialog().close();
			this._reject();
		},
		_reject: function () {
			var g = this;
			var n = sap.ui.getCore().byId("rejectNote").getValue();
			var q = sap.ui.getCore().byId("rejectReason").getValue();
			var crCollection = this.getView().getModel("crCollection");
			var changdAt = crCollection.getProperty(this.itemPath).ChangedAt.ms;
			g.ChangedAt = this.getTime(changdAt);

			var payload = {
				"ActionCode": this.ractionCode,
				"ChangeRequestID": g.cReqNo,
				"Model": crCollection.getProperty(this.itemPath).Model,
				"Note": n,
				"CreatedBy": crCollection.getProperty(this.itemPath).CreatedBy,
				"ObjectDescription": encodeURIComponent(g.crDesc),
				// "MainEntity": crCollection[this.itemPath].MainEntity,
				"ChangedAt": crCollection.getProperty(this.itemPath).CRChangedAt,
				"RejectionReasonCode": q
			};
			this.decisionDialog.open();
			var sPath = "/ExecuteCRSet";
			var oModel = g.getView().getModel("ApprovalModel");
			var fnSuccess = function (o) {
				var m = o.Message;
				sap.m.MessageToast.show(m, {
					duration: 6000
				});
				g.decisionDialog.close();
				// g.getDecision();
				window.history.back();

			};
			var fnError = function (err) {
				g.decisionDialog.close();
				var error = [];
				if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror.errordetails
					.length === 0) {
					error[0] = JSON.parse(err.responseText).error.message.value;
				} else {
					for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
						error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
					}
				}

				var oMessageList = [];
				for (var e = 0; e < error.length; e++) {
					oMessageList.push({
						type: "Error",
						title: error[e]
					});
				}

				g.createMessagePopover(oMessageList, false);

				// var value = error.join("\n");
				// sap.m.MessageBox.show(value, {
				// 	title: "Error",
				// 	icon: sap.m.MessageBox.Icon.ERROR,
				// 	onClose: function () {}
				// });
			};

			oModel.create(sPath, payload, {
				success: fnSuccess,
				error: fnError
			});

		},
		/*
		 * Function to handle Reject dialog cancel press
		 */
		onRejectCancel: function () {
			this.getRejectDialog().close();
		},
		/*
		 * Function to handle Text entered in Reason
		 */
		onTextEnter: function () {
			var r = sap.ui.getCore().byId("rejectReason").getValue();
			var n = sap.ui.getCore().byId("rejectNote").getValue();
			var b = sap.ui.getCore().byId("rejectOk");
			if (r === "" || n === "") {
				b.setEnabled(false);
			} else {
				b.setEnabled(true);
			}
		},
		/*
		 * Function to handle change event of Reason
		 * @param {sap.ui.base.Event} evt
		 */
		onReasonChange: function (evt) {
			var r = sap.ui.getCore().byId("rejectReason").getValue();
			var n = sap.ui.getCore().byId("rejectNote").getValue();
			var b = sap.ui.getCore().byId("rejectOk");
			if (r === "" || n === "") {
				b.setEnabled(false);
			} else {
				b.setEnabled(true);
			}
		},
		/*
		 * Function to open popover of Change request details
		 * @param {sap.ui.base.Event} evt
		 */
		onOpenPopover: function (e) {
			if (this._oPopover !== "" && this._oPopover !== undefined) {
				this._oPopover.destroy();
				this._oPopover = "";
			}
			if (!this._oPopover) {
				this._oPopover = sap.ui.xmlfragment("ugiaiwui.mdg.aiw.request.Fragments.Common.CRdetails", this);
				this.getView().addDependent(this._oPopover);
			}
			var b = e.getSource();
			jQuery.sap.delayedCall(0, this, function () {
				this._oPopover.openBy(b);
			});
		},
		/*
		 * Function to bind Reject reason drop down
		 * @param e
		 * @param a
		 */
		bindRejectReason: function (e, a) {
			var rModel = this.getView().getModel("valueHelp");
			rModel.setDefaultCountMode(sap.ui.model.odata.CountMode.None);
			sap.ui.getCore().byId("rejectReason").setModel(rModel);
			var oFilter = [new sap.ui.model.Filter("CreqType", "EQ", this.crType)];
			sap.ui.getCore().byId("rejectReason").bindAggregation("items", {
				path: '/RejectReasonSet',
				template: new sap.ui.core.ListItem({
					text: "{ReasonRej}",
					additionalText: "{Description}"
				}),
				filters: oFilter, //Filters
				sorter: [] //pass sorter

			});
			/*sap.ui.getCore().byId("rejectReason").bindItems("/RejectReasonSet",
			filters= [oFilter],
			new sap.ui.core.ListItem({
				text: "{ReasonRej}",
				additionalText: "{Description}"
			}));*/
		},
		/*
		 * Function to get Model name
		 * @param {sap.ui.base.Event} oEvent
		 * @returns sModelName
		 */
		getFragmentModelName: function (oEvent) {
			var sModelName, sSelectedFragment;

			if (this._copyFragmentFlag) {
				if (oEvent.getSource().getId().indexOf("dialog") !== -1) {
					sSelectedFragment = oEvent.getSource().getProperty("title");
				} else {
					sSelectedFragment = oEvent.getSource().getParent().getProperty("title");
				}
			} else {
				if (oEvent.getSource().getId().indexOf("dialog") !== -1) {
					sSelectedFragment = oEvent.getSource().getTitle();
				} else {
					sSelectedFragment = oEvent.getSource().getParent().getParent().getParent().getParent().getText();
				}
			}

			if (sSelectedFragment.indexOf("FLOC") !== -1 || sSelectedFragment.indexOf("Functional") !== -1) {
				sModelName = this.oModelAIWFLOC;
			}
			if (sSelectedFragment.indexOf("EQUI") !== -1 || sSelectedFragment.indexOf("Equipment") !== -1) {
				sModelName = this.oModelAIWEQUI;
			}
			if (sSelectedFragment.indexOf("MSPT") !== -1 || sSelectedFragment.indexOf("Measuring") !== -1) {
				sModelName = this.oModelAIWMSPT;
			}
			if (sSelectedFragment.indexOf("MPMI") !== -1 || sSelectedFragment.indexOf("Maintenance") !== -1) {
				sModelName = this.oModelAIWMPMI;
			}
			return sModelName;
		},
		/*
		 * Function to handle 'itemSelected'of Menu
		 * @param {sap.ui.base.Event} oEvent
		 */
		onMenuAction: function (oEvent) {
			var selectedAction = oEvent.getParameter("item").getKey();
			var oModel = sap.ui.getCore().getModel("EAMCRModel");
			var crType = "";

			switch (selectedAction) {
			case "createFloc":
				this._copyFragmentFlag = false;
				this.onCreateRowPress("AIWFLOC");
				break;
			case "copyFloc":
				this.openCopyFragment("CopyFunctionalLocation");
				break;
			case "changeFloc":
				this._copyFragmentFlag = false;
				this.getRouter().navTo("search", {
					// FragmentName: "SearchFunctionalLocation"
					action: "changeFloc"
				});
				break;
			case "createEqui":
				this._copyFragmentFlag = false;
				crType = this.getObTab(this.oModelAIWEQUI, "type");
				this.readCreateTempKey(crType, this.oModelAIWEQUI, "create", 1); //oModel.getProperty("/12").CRType
				break;
			case "copyEqui":
				this.openCopyFragment("CopyEquipment");
				break;
			case "changeEqui":
				this._copyFragmentFlag = false;
				this.getRouter().navTo("search", {
					// FragmentName: "SearchEquipment"
					action: "changeEqui"
				});
				break;
			case "createMspt":
				this._copyFragmentFlag = false;
				crType = this.getObTab(this.oModelAIWMSPT, "type");
				this.readCreateTempKey(crType, this.oModelAIWMSPT, "create", 1); //oModel.getProperty("/8").CRType
				break;
			case "copyMspt":
				this.openCopyFragment("CopyMeasuringPoint");
				break;
			case "changeMspt":
				this._copyFragmentFlag = false;
				this.getRouter().navTo("search", {
					// FragmentName: "SearchMeasuringPoint"
					action: "changeMspt"
				});
				break;
			case "createMpmi":
				crType = this.getObTab(this.oModelAIWMPMI, "type")
				this.readCreateTempKey(crType, this.oModelAIWMPMI, "create", 1); //oModel.getProperty("/7").CRType
				break;
			case "copyMpmi":
				this.openCopyFragment("CopyMaintenancePlan");
				break;
			case "changeMpmi":
				this.getRouter().navTo("search", {
					// FragmentName: "SearchMaintenancePlan"
					action: "changeMpmi"
				});
				break;

				//Material BOM action handle
			case "createMbom":
				this.action = "createMbom";
				this.CreateBomRow("CreateMaterialBom");
				break;
			case "copyMbom":
				this.action = "copyMbom";
				this.openCopyFragment("CopyMaterialBom");
				break;
			case "changeMbom":
				this.getRouter().navTo("search", {
					// FragmentName: "SearchMaterialBom"
					action: "changeMbom"
				});
				break;
				//Equipment BOM action handle
			case "createEbom":
				this.action = "createEbom";
				this.CreateBomRow("CreateEquipmentBom");
				break;
			case "changeEbom":
				this.getRouter().navTo("search", {
					// FragmentName: "SearchEquipmentBom"
					action: "changeEbom"
				});
				break;
			case "copyEbom":
				this.action = "copyEbom";
				this.openCopyFragment("CopyEquipmentBom");
				break;
			case "copyMtoEbom":
				this.action = "copyMtoEbom";
				this.openCopyFragment("CopyMaterialtoEquipmentBom");
				break;
				//Functional Location BOM action handle
			case "createFlbom":
				this.action = "createFlbom";
				this.CreateBomRow("CreateFLBom");
				break;
			case "changeFlbom":
				this.getRouter().navTo("search", {
					// FragmentName: "SearchFLBom"
					action: "changeFlbom"
				});
				break;
			case "copyFlbom":
				this.action = "copyFlbom";
				this.openCopyFragment("CopyFlocBom");
				break;
			case "copyMtoFlbom":
				this.action = "copyMtoFlbom";
				this.openCopyFragment("CopyMaterialtoFlocBom");
				break;
				//WBS BOM action handle
			case "createWbsbom":
				this.action = "createWbsbom";
				this.CreateBomRow("createWbsbom");
				break;
			case "changeWbsbom":
				this.getRouter().navTo("search", {
					// FragmentName: "SearchWBSBom"
					action: "changeWbsbom"
				});
				break;
			case "copyWbsbom":
				this.action = "copyWbsbom";
				this.openCopyFragment("CopyWBSBom");
				break;
			case "copyMtoWbsbom":
				this.action = "copyMtoWbsbom";
				this.openCopyFragment("CopyMaterialtoWBSBom");
				break;
				//OBJECT NETWORK
			case "createOn":
				this.action = "createOn";
				this.CreateBomRow("createObjNet");
				break;
			case "changeOn":
				this.action = "changeOn";
				this.getRouter().navTo("search", {
					action: "changeOn"
				});
				break;
			case "copyOn":
				this.action = "copyOn";
				this.openCopyOnFragment();
				break;
				// TL/WC/OL

				//Work Center action handle
			case "createWC":
				this.action = "createWC";
				this.CreatRow("CreateWorkCenter");
				break;
			case "copyWC":
				this.action = "copyWC";
				this.openCopyFragment("CopyWorkCenter");
				break;
			case "changeWC":
				this.action = "changeWC";
				this.getRouter().navTo("search", {
					// FragmentName: "SearchWorkCenter"
					action: this.action
				});
				break;
			case "approveWC":
				this.action = "approveWC";
				this.mode = "display";
				break;
				// Task List Action Handle
			case "createGTL":
				this.action = "createGTL";
				this.readCreateTempKeyT("CreateTaskList", null, 0);
				break;
			case "copyGTL":
				this.action = "copyGTL";
				this.openCopyFragment("CopyTaskList");
				break;
			case "changeGTL":
				this.action = "changeGTL";
				this.getRouter().navTo("search", {
					// FragmentName: "SearchTaskList"
					action: this.action
				});
				break;
			case "approveGTL":
				this.action = "approveGTL";
				break;
			case "createETL":
				this.action = "createETL";
				this.readCreateTempKeyT("CreateTaskList", null, 0);
				break;
			case "copyETL":
				this.action = "copyETL";
				this.openCopyFragment("CopyTaskList");
				break;
			case "changeETL":
				this.action = "changeETL";
				this.getRouter().navTo("search", {
					// FragmentName: "SearchTaskList"
					action: this.action
				});
				break;
			case "approveETL":
				this.action = "approveETL";
				break;
			case "createFTL":
				this.action = "createFTL";
				this.readCreateTempKeyT("CreateTaskList", null, 0);
				break;
			case "copyFTL":
				this.action = "copyFTL";
				this.openCopyFragment("CopyTaskList");
				break;
			case "changeFTL":
				this.action = "changeFTL";
				this.getRouter().navTo("search", {
					// FragmentName: "SearchTaskList"
					action: this.action
				});
				break;
			case "approveFTL":
				this.action = "approveFTL";
				break;
				//Object Link action handle
			case "createOL":
				this.action = "createOL";
				this.enableFields();
				this.readCreateTempKeyT("CreateObjectLink", null, 0);
				break;
			case "copyOL":
				this.action = "copyOL";
				this.enableFields();
				this.openCopyFragment("CopyObjectLink");
				break;
			case "changeOL":
				this.action = "changeOL";
				this.enableFields();
				this.getRouter().navTo("search", {
					action: this.action
				});
				break;
			case "approveOL":
				this.action = "approveOL";
				this.disableFields("OL");
				this.mode = "display";
				// this.handleApproveOL();
				break;
			}

		},
		/*
		 * Function to add Counter
		 */
		onAddCounter: function () {
			var Plnal;
			var g = this;

			var header = {
				//Plnal: Plnal,
				Ktext: "",
				Iwerk: "",
				wc: "",
				wcDesc: "",
				plant: "",
				plantDesc: "",
				usg: "",
				//usgDesc: "",
				Statu: "",
				statusDesc: "",
				Plnnr: "",
				Werks: "",
				Verwe: "",
				usageDesc: "",
				KapArbpl: "",
				Vagrp: "",
				plGrpDesc: "",
				Anlzu: "",
				sysCondDesc: "",
				pPlantDesc: "",
				Strat: "",
				stratDesc: "",
				valueStatePP: "None",
				valueStateS: "None",
				valueStateU: "None",
				valueStateT: "None",
				plEnable: true,
				planningPlantValueState: "None",
				statusVS: "None",
				plantValueState: "None",
				usgValueState: "None",

				planningPlantValueStateTxt: "",
				statusVST: "",
				plantValueStateTxt: "",
				usgValueStateTxt: "",

				//detail page
				vEquiLbl: false,
				vEqui: false,
				vEquiDesc: false,
				equipment: "",
				equipmentDesc: "",
				floc: "",
				flocDesc: "",
				vFlocLbl: false,
				vFloc: false,
				vFlocDesc: false,
				rbGen: true,
				rbEqui: true,
				rbFloc: true,
				bAddHeader: false,
				bAddOperation: false,
				bAddComponent: false,
				bAddOprRel: false,
				enable: true
			};

			if (this.action === "createGTL") {
				var AIWListGTLModel = sap.ui.getCore().getModel("AIWListGTLModel");
				var AIWListGTLData = AIWListGTLModel.getData();
				if (AIWListGTLData.length > 0) {
					for (var i = 0; i < AIWListGTLData.length; i++) {
						if (this.gtlPath === i) {
							if (AIWListGTLData[i].header.length > 0) {
								var grpCounter = AIWListGTLData[i].header[AIWListGTLData[i].header.length - 1].Plnal;
								Plnal = parseInt(grpCounter) + 1;
							} else {
								Plnal = 1;
							}
						}
					}
				} else {
					Plnal = 1;
				}
			} else if (this.action === "createETL") {
				var AIWListETLModel = sap.ui.getCore().getModel("AIWListETLModel");
				var AIWListETLData = AIWListETLModel.getData();
				if (AIWListETLData.length > 0) {
					for (var i = 0; i < AIWListETLData.length; i++) {
						if (this.etlPath === i) {
							if (AIWListETLData[i].header.length > 0) {
								var grpCounter = AIWListETLData[i].header[AIWListETLData[i].header.length - 1].Plnal;
								Plnal = parseInt(grpCounter) + 1;
							} else {
								Plnal = 1;
							}

							header.equipment = AIWListETLData[i].equipment;
							header.equipmentDesc = AIWListETLData[i].equipmentDesc;
						}
					}
				} else {
					Plnal = 1;
				}
			} else if (this.action === "createFTL") {
				var AIWListFTLModel = sap.ui.getCore().getModel("AIWListFTLModel");
				var AIWListFTLData = AIWListFTLModel.getData();
				if (AIWListFTLData.length > 0) {
					for (var i = 0; i < AIWListFTLData.length; i++) {
						if (this.ftlPath === i) {
							if (AIWListFTLData[i].header.length > 0) {
								var grpCounter = AIWListFTLData[i].header[AIWListFTLData[i].header.length - 1].Plnal;
								Plnal = parseInt(grpCounter) + 1;
							} else {
								Plnal = 1;
							}
						}

						header.floc = AIWListFTLData[i].floc;
						header.flocDesc = AIWListFTLData[i].floc;
					}
				} else {
					Plnal = 1;
				}
			}

			header.Plnal = Plnal;
			/*	var GTLHeaderModel = new JSONModel([]);
				var GTLHeaderData = GTLHeaderModel.getData();*/
			if (this.action === "createGTL") {
				var AIWListGTLModel = sap.ui.getCore().getModel("AIWListGTLModel");
				var AIWListGTLData = AIWListGTLModel.getData();
				var GTLHeaderModel = this.getView().getModel("GTLHeaderModel");
				var gtlHeader = [];
				for (var i = 0; i < AIWListGTLData.length; i++) {
					if (this.gtlPath === i) {
						AIWListGTLData[i].header.push(header);
						gtlHeader.push(AIWListGTLData[i].header);
						g.readHdrDefaults("tlDesc", gtlHeader[0].length - 1, gtlHeader);
					}
				}
				AIWListGTLModel.setData(AIWListGTLData);
				this.getView().getModel("AIWListGTLModel").refresh();
				this.getView().setModel(AIWListGTLModel, "AIWListGTLModel");

				GTLHeaderModel.setData(gtlHeader);
				this.getView().setModel(GTLHeaderModel, "GTLHeaderModel");

			} else if (this.action === "createETL") {
				var AIWListETLModel = sap.ui.getCore().getModel("AIWListETLModel");
				var AIWListETLData = AIWListETLModel.getData();
				var ETLHeaderModel = this.getView().getModel("ETLHeaderModel");
				var etlHeader = [];
				for (var i = 0; i < AIWListETLData.length; i++) {
					if (this.etlPath === i) {
						AIWListETLData[i].header.push(header);
						etlHeader.push(AIWListETLData[i].header);
						g.readHdrDefaults("tlDesc", etlHeader[0].length - 1, etlHeader);
					}
				}
				AIWListETLModel.setData(AIWListETLData);
				this.getView().getModel("AIWListETLModel").refresh();
				this.getView().setModel(AIWListETLModel, "AIWListETLModel");

				ETLHeaderModel.setData(etlHeader);
				this.getView().setModel(ETLHeaderModel, "ETLHeaderModel");

				this.DeriveEquiFlocData(AIWListETLData[this.etlPath].equipment, 'E');

			} else if (this.action === "createFTL") {
				var AIWListFTLModel = sap.ui.getCore().getModel("AIWListFTLModel");
				var AIWListFTLData = AIWListFTLModel.getData();
				var FTLHeaderModel = this.getView().getModel("FTLHeaderModel");
				var ftlHeader = [];
				for (var i = 0; i < AIWListFTLData.length; i++) {
					if (this.ftlPath === i) {
						AIWListFTLData[i].header.push(header);
						ftlHeader.push(AIWListFTLData[i].header);
						g.readHdrDefaults("tlDesc", ftlHeader[0].length - 1, ftlHeader);
					}
				}
				AIWListFTLModel.setData(AIWListFTLData);
				this.getView().getModel("AIWListFTLModel").refresh();
				this.getView().setModel(AIWListFTLModel, "AIWListFTLModel");

				FTLHeaderModel.setData(ftlHeader);
				this.getView().setModel(FTLHeaderModel, "FTLHeaderModel");

				this.DeriveEquiFlocData(AIWListFTLData[this.ftlPath].floc, 'F');
			}
		},
		/*
		 * Function to create row of FL, EQ, MSPT & MPMI
		 * @param {string} pItemName
		 * @param {string} pTempKey
		 */
		onCreateRowPress: function (pItemName, pTempKey) {
			var g = this;
			var sObject = {};
			if (pItemName === "AIWFLOC") {
				sObject = {
					Adrnr: "",
					Adrnri: "",
					viewParameter: "create",
					Functionallocation: "", // Floc
					Flocdescription: "", // Floc Description
					Strucindicator: g.StrcIndDerv === undefined ? "" : g.StrcIndDerv, // Strucindicator 
					StrucIndicatorDesc: g.StrcIndDescDerv === undefined ? "" : g.StrcIndDescDerv, // StrucIndicatorDesc
					EditMask: g.EditMaskDerv === undefined ? "" : g.EditMaskDerv,
					Hierarchy: g.HierDerv === undefined ? "" : g.HierDerv,
					Alkey: g.AltKeyDerv === undefined ? "" : g.AltKeyDerv,
					Altxt: g.AltKeyDescDerv === undefined ? "" : g.AltKeyDescDerv,
					Floccategory: "",
					FlocCategoryDesc: "",
					Maintplant: "",
					MaintplantDesc: "", // MaintenanceplantDesc
					Location: "",
					Locationdesc: "",
					Abckz: "", // ABC Indicator
					Abctx: "", // ABC Indicator Description
					Bukrs: "", // Company Code
					Butxt: "", // Company Code Description
					City: "", // Currency
					Kostl: "", // Cost Center
					Mctxt: "", // Cost Center Description
					Kokrs: "", // Co Area
					Werks: "", // Planning Plant
					Planningplantdes: "", // Planning Plant Description
					Ingrp: "", // Planning Group
					Innam: "", // Plannergrpdesc
					MainArbpl: "", // Main Work Center
					MainKtext: "", // Main Work Center Plant
					MainWerks: "", // Main WC Description
					Arbpl: "", // Main WC
					Ktext: "", // Plant Work Center
					WcWerks: "", // Name
					SupFunctionallocation: "", // Sup FuncLoc
					SupFlocdescription: "", // Sup FlocDescription
					TechnicalObjectTyp: "", // TechnicalObjectTyp
					Description: "", // TechnicalObjectTyp Description
					BeberFl: "", // Plant Section
					Fing: "", // Person responsible
					Tele: "", // Phone
					ConstrType: "",
					ConstructionDesc: "",
					AcsnodeIppe: "",
					DescIppe: "",
					VariantIppe: "",
					AltIppe: "",

					Stattext: "", // System Status
					StsmEqui: "", // Status Profile
					StsmEquiDesc: "", // Status Profile Description
					UstwEqui: "", // Status with Status Number
					UswoEqui: "", // Status without Status Number
					UstaEqui: "", // User Status
					Deact: false,
					DeactEnable: true,

					lam: {
						Lrpid: "",
						LrpidDesc: "",
						Strtptatr: "",
						Endptatr: "",
						Length: "",
						LinUnit: "",
						LinUnitDesc: "",
						Startmrkr: "",
						Endmrkr: "",
						Mrkdisst: "",
						Mrkdisend: "",
						MrkrUnit: "",
						enableLrp: true,
						enableMarker: false,
						LrpidVS: "None",
						StrtptatrVS: "None",
						EndptatrVS: "None",
						LinUnitVS: "None",
						StartmrkrVS: "None",
						EndmrkrVS: "None",
						MrkdisstVS: "None",
						MrkdisendVS: "None",
						MrkrUnitVS: "None"
					},

					classItems: [], // Class Details
					characteristics: [], // Characteristics Details
					linearChar: [],
					charNewButton: false,
					linearCharAddEnable: true,

					attachmentCount: "0", // Attachment Count
					Guids: "", // Attachment

					// Address : EquiAddr
					Title: "",
					TitleCode: "",
					Name1: "",
					Name2: "",
					Name3: "",
					Name4: "",
					AddrLocation: "",
					Sort1: "", // searchTerm1
					Sort2: "", // searchTerm2
					NameCo: "", // Company 
					PostCod1: "", // Postal code
					City1: "", // City
					Building: "",
					Floor: "",
					Roomnum: "",
					Street: "",
					Strsuppl1: "",
					Strsuppl2: "",
					Strsuppl3: "",
					RefPosta: "",
					Landx: "",
					Langucode: "",
					LanguP: "",
					TimeZone: "",
					Region: "",
					RegionDesc: "",

					intlAddr: [], // International Address
					altlbl: [], // Alternate Labels

					// Approve App fields 
					Lvorm: false,
					// Deact: false,

					FunctionallocationVS: "Error",
					FunctionallocationVST: "",
					FlocdescriptionVS: "None",
					FlocdescriptionVST: "",
					StrucindicatorVS: "None",
					StrucindicatorVST: "",
					FloccategoryVS: "None",
					FloccategoryVST: "",
					SupFunctionallocationVS: "None",
					SupFunctionallocationVST: "",
					MaintplantVS: "None",
					MaintplantVST: "",
					StsmEquiVS: "None",
					StsmEquiVST: "",
					UstwEquiVS: "None",
					UstwEquiVST: "",
					UswoEquiVS: "None",
					UswoEquiVST: "",
					TechnicalObjectTypVS: "None",
					TechnicalObjectTypVST: "",
					LocationVS: "None",
					LocationVST: "",
					AbckzVS: "None",
					AbckzVST: "",
					MainArbplVS: "None",
					MainArbplVST: "",
					BeberFlVS: "None",
					BeberFlVST: "",
					BukrsVS: "None",
					BukrsVST: "",
					KostlVS: "None",
					KostlVST: "",
					WerksVS: "None",
					WerksVST: "",
					IngrpVS: "None",
					IngrpVST: "",
					ArbplVS: "None",
					ArbplVST: "",
					ConstrTypeVS: "None",
					ConstrTypeVST: "",
					RefPostaVS: "None",
					RefPostaVST: "",
					LangucodeVS: "None",
					LangucodeVST: "",
					TimeZoneVS: "None",
					TimeZoneVST: "",

					BukrsEnabled: true,
					TplnrEnabled: true,
					MaintplantEnabled: true,

					Modeldesc: "",
					Modelref: "",
					Modelrver: "",
					Modelext: "",
					Modelname: "",
					Modelver: "",
				};
				this.handleCreatePress(this, sObject, this.oModelAIWFLOC);
				this.handleDoiCreate(sObject.Functionallocation, "FL");
				return;
			} else if (pItemName === "AIWEQUI") {
				sObject = {
					Adrnr: "",
					Adrnri: "",
					viewParameter: "create",
					Equnr: pTempKey, // Equipment
					Eqktx: "", // Equipment Description
					EquipmentCatogory: "", // Equipment Category
					EquipCatgDescription: "", // Equiment Category Description
					Maintplant: "", // Maintenance Plant
					MaintplantDesc: "", // Maintenance Plant Description
					Tplnr: "", // Functional Location
					Pltxt: "", // Functional Location Description
					SuperordinateEquip: "", // Superord. Equipment
					SuperordinateEquipDesc: "", // Superord. Equipment Description
					Bukrs: "", // Company Code
					Butxt: "", // Company Code Description
					Location: "", // Location
					Locationdesc: "", // Location Description
					Abckz: "", // ABC Indicator
					Abctx: "", // ABS Indicator Description
					Kostl: "", // Cost Center
					Kokrs: "", // ccPart1
					Mctxt: "", // Name
					Answt: "0.000", // Acquisition Value
					Ansdt: null, // Acquisition Date
					Waers: "", // Currency
					Werks: "", // Planning Plant
					Planningplantdes: "", // Planning Plant Description
					Ingrp: "", // Planner Group
					Innam: "", // Planner Group Description
					Arbpl: "", // Work Center
					Ktext: "", // Work Center Description
					WcWerks: "", // Work center Plant
					MainArbpl: "", // Main Work Center
					MainKtext: "", // Plant Work Center
					MainWerks: "", // Name
					BeberFl: "", // Plant Section
					Herst: "", // Manufacturer
					TechnicalObjectTyp: "", // TechnicalObjectTyp
					Description: "", // TechnicalObjectTyp Description
					Typbz: "", // Model Number
					ConstrType: "", // Construction Type
					ConstructionDesc: "", // Construction Description
					// Kmatn: "",
					TechIdNum: "", // techIndNo
					Serge: "", // manfSerNo
					MapaEeqz: "", // partNum
					EquipPosition: "", // Position
					PlanvPrt: "",
					SteufPrt: "",
					KtschPrt: "",
					Ewformprt: "",
					SteufRef: false,
					KtschRef: false,
					EwformRef: false,
					Deact: false,
					DeactEnable: true,
					Funcid: "",
					Frcfit: "",
					Frcrmv: "",
					Ppeguid: null,

					lam: {
						Lrpid: "",
						LrpidDesc: "",
						Strtptatr: "",
						Endptatr: "",
						Length: "",
						LinUnit: "",
						LinUnitDesc: "",
						Startmrkr: "",
						Endmrkr: "",
						Mrkdisst: "",
						Mrkdisend: "",
						MrkrUnit: "",
						enableLrp: true,
						enableMarker: false,
						LrpidVS: "None",
						StrtptatrVS: "None",
						EndptatrVS: "None",
						LinUnitVS: "None",
						StartmrkrVS: "None",
						EndmrkrVS: "None",
						MrkdisstVS: "None",
						MrkdisendVS: "None",
						MrkrUnitVS: "None"
					},

					// Address : EquiAddr
					Title: "",
					TitleCode: "",
					Name1: "",
					Name2: "",
					Name3: "",
					Name4: "",
					AddrLocation: "",
					Sort1: "", // searchTerm1
					Sort2: "", // searchTerm2
					NameCo: "", // Company 
					PostCod1: "", // Postal code
					City1: "", // City
					Building: "",
					Floor: "",
					Roomnum: "",
					Street: "",
					Strsuppl1: "",
					Strsuppl2: "",
					Strsuppl3: "",
					RefPosta: "",
					Landx: "",
					Langucode: "",
					LanguP: "",
					TimeZone: "",
					Region: "",
					RegionDesc: "",

					intlAddr: [], // International Address
					classItems: [], // Class Details
					characteristics: [], // Characteristics Details
					linearChar: [],
					linearCharAddEnable: false,
					charNewButton: false,

					attachmentCount: "0", // Attachment Count
					Guids: "", // Attachment

					Stattext: "", // System Status
					StsmEqui: "", // Status Profile
					StsmEquiDesc: "", // Status Profile Description
					UstwEqui: "", // Status with Status Number
					UswoEqui: "", // Status without Status Number
					UstaEqui: "", // User Status

					EqunrVS: "None",
					EqunrVST: "",
					EqktxVS: "None",
					EqktxVST: "",
					EquipmentCatogoryVS: "None",
					EquipmentCatogoryVST: "",
					MaintplantVS: "None",
					MaintplantVST: "",
					TplnrVS: "None",
					TplnrVST: "",
					SuperordinateEquipVS: "None",
					SuperordinateEquipVST: "",
					StsmEquiVS: "None",
					StsmEquiVST: "",
					UstwEquiVS: "None",
					UstwEquiVST: "",
					UswoEquiVS: "None",
					UswoEquiVST: "",
					TechnicalObjectTypVS: "None",
					TechnicalObjectTypVST: "",
					LocationVS: "None",
					LocationVSTL: "",
					AbckzVS: "None",
					AbckzVST: "",
					ArbplVS: "None",
					ArbplVST: "",
					BukrsVS: "None",
					BukrsVST: "",
					KostlVS: "None",
					KostlVST: "",
					WerksVS: "None",
					WerksVST: "",
					IngrpVS: "None",
					IngrpVST: "",
					ConstrTypeVS: "None",
					ConstrTypeVST: "",
					RefPostaVS: "None",
					RefPostaVST: "",
					MainArbplVS: "None",
					MainArbplVST: "",
					LangucodeVS: "None",
					LangucodeVST: "",
					TimeZoneVS: "None",
					TimeZoneVST: "",

					ConstrTypeMaxL: 0,
					charValueMaxL: 0,
					BukrsEnabled: true,
					TplnrEnabled: true,

					dfps: {
						Tailno: "",
						TailnoVS: "None",
						Area: "",
						AreaDesc: "",
						AreaPrfl: "",
						Site: "",
						SiteDesc: "",
						SiteVS: "None",
						SitePrfl: "",
						MPO: "",
						MPODesc: "",
						RIC: "",
						RICDesc: "",
						ModelId: "",
						ModelIdDesc: "",
						ModelIdVS: "None",
						ForeignEq: false,
						TechSts: "",
						OperSts: "0001",
						Remark: "",
						dfpsCrtEnabled: true,
						dfpsDltEnabled: false,
						dfpsEnabled: false,
						TailnoReq: false,
					}
				};
				this.handleCreatePress(this, sObject, this.oModelAIWEQUI);
				this.handleDoiCreate(sObject.Equnr, "EQ");
				return;
			} else if (pItemName === "AIWMSPT") {
				sObject = {
					viewParameter: "create",
					Mspoint: pTempKey, // Measuring Point
					Pttxt: "", // MSPT Description
					ObtypMs: "IEQ", // MSPT Object Type
					Txt: "Equipment", // MSPT Object Type Desctiption
					Mptyp: "", // MeasPoint Category
					Mpttx: "", // MeasPoint Category Description
					Equnr: "", // Equipment
					Eqktx: "", // Equipment Description
					Tplnr: "", // Floc 
					Pltxt: "", // Floc Description
					Indct: false, // MeasPoint is counter
					AtnamMs: "", // Characteristic Name
					Atbez: "", // Characteristic Name Description
					Codgr: "", // Code Group
					Codgrtxt: "", // code Group Description
					Cjumc: "", // countOverFlow
					Cdsuf: false, // valCodeStuff
					Pyeac: "", // annual estm
					Desir: "", // target value
					Mrmax: "", // up limit
					Mrmin: "", // lower limit
					Decim: "0",

					lam: {
						Lrpid: "",
						LrpidDesc: "",
						Strtptatr: "",
						Endptatr: "",
						Length: "",
						LinUnit: "",
						LinUnitDesc: "",
						Startmrkr: "",
						Endmrkr: "",
						Mrkdisst: "",
						Mrkdisend: "",
						MrkrUnit: "",
						enableLrp: true,
						enableMarker: false,
						LrpidVS: "None",
						StrtptatrVS: "None",
						EndptatrVS: "None",
						LinUnitVS: "None",
						StartmrkrVS: "None",
						EndmrkrVS: "None",
						MrkdisstVS: "None",
						MrkdisendVS: "None",
						MrkrUnitVS: "None"
					},

					classItems: [], // Class Details
					characteristics: [], // Characteristics Details
					charNewButton: false,
					attachmentCount: "0", // Attachment Count
					Guids: "", // Attachment

					PttxtVS: "None",
					PttxtVST: "",
					ObtypMsVS: "None",
					ObtypMsVST: "",
					MptypVS: "None",
					MptypVST: "",
					AtnamMsVS: "None",
					AtnamMsVST: "",
					EqunrVS: "None",
					EqunrVST: "",
					TplnrVS: "None",
					TplnrVST: "",
					CodgrVS: "None",
					CodgrVST: "",
					Deact: false,
					DeactEnable: true,

					// Visibility
					EqunrEnabled: true, //false, // by default it was true
					TplnrEnabled: false, // by default it was true
					EqunrLblVis: true,
					EqunrInpVis: true,
					EqktxInpVis: true,
					TplnrLblVis: false,
					TplnrInpVis: false,
					PltxtInpVis: false,
					valCodeStuffSel: false,
					countEnable: false,
					tEnable: true
				};
				this.handleCreatePress(this, sObject, this.oModelAIWMSPT);
				return;
			} else if (pItemName === "AIWMPMI") {
				sObject = {
					menuAction: "create",
					viewParameter: "create",
					Warpl: pTempKey, // Maintenance Plan
					Wptxt: "", // MainPlanText
					Mptyp: "", // Mplan Cat.
					Txt: "",
					CycleType: "",
					Strat: "", // Strategy
					StratDesc: "", // Strategy Desc
					Mehrfach: false, // Multiple counter
					Wset: "", // Cycle Set
					Ktext: "", // Cycle Desc
					Sfakt: "0", // Cycle Modif. factor
					Abrho: "000", // Schedule Period
					Hunit: "", // Schedule Period unit
					Stadt: formatter.currentDate(), // Start of Cycle
					StadtLBLText: this.getView().getModel("i18n").getProperty("CYCLE_START_TXT"),
					Fabkl: "", // Factory Calendar
					FabklDesc: "", // Factory Cal Desc
					Stich: 4, // Scheduling Ind
					Szaeh: "", // Start Counter Reading
					Unitc: "", // Start Counter Reading unit
					Mpcycleno: "", // Counter
					Andor: "",
					Deact: false,
					DeactEnable: true,

					ButtonNewItemEnabled: true,
					ButtonAssignItemEnabled: true,
					ButtonNewCycleEnabled: false,
					CycleSetSeqVis: true,

					ScheIndRbTime: true, // RB-1
					ScheIndRbTimeKeyDate: false, // RB-2
					ScheIndRbTimeFactCal: false, // RB-3
					ScheIndRbPerformance: false, // RB-4
					cycleIndSingle: false, // RBSC
					cycleIndStrategy: false, // RBST
					cycleIndMultCntr: false, // RBMC
					OROP: false,
					AndOP: false,
					MaintenanceCycleMode: "Delete",
					MaintenanceItemMode: "Delete",

					// Fields Enability
					MptypEnabled: true,
					cycleIndSingleEnabled: true,
					cycleIndStrategyEnabled: true,
					cycleIndMultCntrEnabled: true,
					ScheIndRbTimeEnabled: true,
					ScheIndRbTimeKeyDateEnabled: true,
					ScheIndRbTimeFactCalEnabled: true,
					ScheIndRbPerformanceEnabled: true,
					FabklEnabled: false,

					FabklLBLReq: false,

					// Label Visibility
					OPText: false,
					OPTitle: false,
					OPLBL: false,
					MpcyclenoLBL: false,
					FabklLBL: true,
					AbrhoLBL: true,
					MehrfachLBL: false, // Multiple counter Label
					ScheIndText: true,
					ScheIndTitle: true,
					ScheIndLBL: true,
					StratLBL: false,
					StratDescLBL: false,
					WsetLBL: false,
					SzaehLBL: false,
					StadtLBL: true,

					// Fields Visibility
					HorizVisible: false,
					cycleSetSeqColVis: false,
					OROPVis: false,
					AndOPvis: false,
					ScheIndRbTimeVis: true,
					ScheIndRbTimeKeyDateVis: true,
					ScheIndRbTimeFactCalVis: true,
					ScheIndRbPerformanceVis: true,
					MpcyclenoVis: false,
					HunitVis: true,
					AbrhoVis: true,
					MehrfachVis: false,
					StratVis: false, // Strategy Visibility
					StratDescVis: false,
					WsetVis: false,
					KtextVis: false,
					SzaehVis: false,
					UnitcVis: false,
					StadtVis: true,

					cycleModel: [], // Cycle Table
					itemModel: [], // Item Details
					ObjListItems: [], // Object List Item Details
					attachmentCount: "0", // Attachment Count
					Guids: "", // Attachment

					// Fields ValueState
					WarplVS: "None",
					WarplVST: "",
					WptxtVS: "None",
					WptxtVST: "",
					StratVS: "None",
					StratVST: "",
					WsetVS: "None",
					WsetVST: "",
					StadtVS: "None",
					StadtVST: "",
					StichVS: "None",
					StichVST: "",
					HunitVS: "None",
					HunitVST: "",

					classItems: [],
					characteristics: [],
					charNewButton: false,
				};
				this.handleCreatePress(this, sObject, this.oModelAIWMPMI);
				return;
			}
		},
		/*
		 * Function to create DOI object for the EQ/FL
		 * @param {string} key - EQ/FL key
		 * @param {string} obj - Flag
		 */
		handleDoiCreate: function (key, obj) {
			var g = this;
			var mDataOriginMOP = sap.ui.getCore().getModel("dataOriginMOP");
			var aDataOriginMOP = mDataOriginMOP.getData();
			if (obj === "EQ") {
				var tempEQDOI = $.map(g.DOIarrayEQ, function (obj) {
					return $.extend(true, {}, obj);
				});
				var oDOI = {
					key: key,
					DOI: tempEQDOI
				};
				aDataOriginMOP.EQ.push(oDOI);
				mDataOriginMOP.setData(aDataOriginMOP);
			}
			if (obj === "FL") {
				var tempFLDOI = $.map(g.DOIarrayFL, function (obj) {
					return $.extend(true, {}, obj);
				});
				var oDOI = {
					key: key,
					DOI: tempFLDOI
				};
				aDataOriginMOP.FL.push(oDOI);
				mDataOriginMOP.setData(aDataOriginMOP);
			}
		},
		/*
		 * Function to set Model of EQ, FL, MSPT & MPMI
		 * @param {object} g - this
		 * @param {object} sObject - row object
		 * @param {string} sModelName
		 */
		handleCreatePress: function (g, sObject, sModelName) {
			var sJsonModel, sArray;
			sJsonModel = g.getView().getModel(sModelName);
			sArray = sJsonModel.getData();
			sArray.push(sObject);
			sJsonModel.setData(sArray);

			if (g.mode !== "display") {
				g.onUpdateTitleCount(sModelName, sArray);
			}
			g.getView().setModel(sJsonModel, sModelName);
			sap.ui.getCore().setModel(sJsonModel, sModelName);
		},
		/*
		 * Function to update count in the iconTabFilter for EQ, FL, MSPT & MPMI
		 * @param {string} sModelName
		 * @param {array} sArray
		 */
		onUpdateTitleCount: function (sModelName, sArray) {
			if (this.mode !== "display") {
				var mainData = this.getView().getModel("mainView").getData();
				var length = 0;
				if (sArray) {
					length = sArray.length;
				}
				if (sModelName === this.oModelAIWFLOC) {
					mainData.functionalLocationMain = length; //this.getResourceBundle().getText("functionalLocationMain", [length]);
				}
				if (sModelName === this.oModelAIWEQUI) {
					mainData.equipmentMain = length; //this.getResourceBundle().getText("equipmentMain", [length]);
				}
				if (sModelName === this.oModelAIWMSPT) {
					mainData.measuringPointMain = length; //this.getResourceBundle().getText("measuringPointMain", [length]);
				}
				if (sModelName === this.oModelAIWMPMI) {
					mainData.maintenancePlanMain = length; //this.getResourceBundle().getText("maintenancePlanMain", [length]);
				}
				this.getView().getModel("mainView").setData(mainData);
			}
		},
		/*
		 * Function to open Copy dialog of all objects
		 * @param {string} sFragmentName
		 */
		openCopyFragment: function (sFragmentName) {
			this._copyFragment = undefined;
			this._copyFragmentFlag = true;
			var i18n = this.getView().getModel("i18n");
			if (sFragmentName === "CopyFunctionalLocation" || sFragmentName === "CopyEquipment" || sFragmentName === "CopyMeasuringPoint" ||
				sFragmentName === "CopyMaintenancePlan") {
				var oCopyVisible = {
					header: "",
					noOfObjects: 1,
					Tplnr: "",
					Equnr: "",
					Mspoint: "",
					Warpl: "",
					functionalLocVis: true,
					equipmentVis: true,
					measuringPointVis: true,
					maintenancePlanVis: true
				};

				if (sFragmentName === "CopyFunctionalLocation") {
					this.oCopyModelName = this.oModelAIWFLOC;
					oCopyVisible.header = i18n.getProperty("copyFlocs");
					oCopyVisible.equipmentVis = false;
					oCopyVisible.measuringPointVis = false;
					oCopyVisible.maintenancePlanVis = false;
				}
				if (sFragmentName === "CopyEquipment") {
					this.oCopyModelName = this.oModelAIWEQUI;
					oCopyVisible.header = i18n.getProperty("copyEquis");
					oCopyVisible.functionalLocVis = false;
					oCopyVisible.measuringPointVis = false;
					oCopyVisible.maintenancePlanVis = false;
				}
				if (sFragmentName === "CopyMeasuringPoint") {
					this.oCopyModelName = this.oModelAIWMSPT;
					oCopyVisible.header = i18n.getProperty("copyMspts");
					oCopyVisible.functionalLocVis = false;
					oCopyVisible.equipmentVis = false;
					oCopyVisible.maintenancePlanVis = false;
				}
				if (sFragmentName === "CopyMaintenancePlan") {
					this.oCopyModelName = this.oModelAIWMPMI;
					oCopyVisible.header = i18n.getProperty("copyMpmis");
					oCopyVisible.functionalLocVis = false;
					oCopyVisible.equipmentVis = false;
					oCopyVisible.measuringPointVis = false;
				}
				var copyModel = new JSONModel(oCopyVisible);
				this._copyFragment = sap.ui.xmlfragment("ugiaiwui.mdg.aiw.request.Fragments.Common.CopyFragment", this);
				this._copyFragment.setModel(copyModel, "copyModel");
				this.getView().addDependent(this._copyFragment);
				this._copyFragment.open();
			}

			// BOM/ON
			else if (sFragmentName === "CopyMaterialBom" || sFragmentName === "CopyEquipmentBom" || sFragmentName ===
				"CopyMaterialtoEquipmentBom" || sFragmentName === "CopyFlocBom" || sFragmentName === "CopyMaterialtoFlocBom" || sFragmentName ===
				"CopyWBSBom" || sFragmentName === "CopyMaterialtoWBSBom") {
				var oCopyObj = {
					header: "",
					sourceHeader: "",
					targetHeader: "",
					copyMaterialSource: "",
					copyEquipmentSource: "",
					copyFlocSource: "",
					copyWBSSource: "",
					copyPlantSource: "",
					copyUsageSource: "",
					copyAltBomSource: "",
					copyMaterialTarget: "",
					copyEquipmentTarget: "",
					copyFlocTarget: "",
					copyWBSTarget: "",
					copyPlantTarget: "",
					copyUsageTarget: "",
					copyAltBomTarget: "",

					copyMaterialSourceDesc: "",
					copyEquipmentSourceDesc: "",
					copyFlocSourceDesc: "",
					copyWBSSourceDesc: "",
					copyPlantSourceDesc: "",
					copyUsageSourceDesc: "",
					copyMaterialTargetDesc: "",
					copyEquipmentTargetDesc: "",
					copyFlocTargetDesc: "",
					copyWBSTargetDesc: "",
					copyPlantTargetDesc: "",
					copyUsageTargetDesc: "",

					srcMatVisible: true,
					srcEquiVisible: true,
					srcFlocVisible: true,
					srcWBSVisible: true,
					srcAltBomVisible: true,
					tarMatVisible: true,
					tarEquiVisible: true,
					tarFlocVisible: true,
					tarWBSVisible: true,
					tarAltBomVisible: true,

					srcMatValueState: "None",
					srcEquiValueState: "None",
					srcFlocValueState: "None",
					srcWBSValueState: "None",
					srcPlantValueState: "None",
					srcUsageValueState: "None",
					srcAltBomValueState: "None",
					tarMatValueState: "None",
					tarEquiValueState: "None",
					tarFlocValueState: "None",
					tarWBSValueState: "None",
					tarPlantValueState: "None",
					tarUsageValueState: "None",
					tarAltBomValueState: "None"
				};

				if (sFragmentName === "CopyMaterialBom") {
					oCopyObj.srcEquiVisible = false;
					oCopyObj.srcFlocVisible = false;
					oCopyObj.srcWBSVisible = false;
					oCopyObj.tarEquiVisible = false;
					oCopyObj.tarFlocVisible = false;
					oCopyObj.tarWBSVisible = false;
					oCopyObj.header = i18n.getProperty("copyMbomTitle");
					oCopyObj.sourceHeader = i18n.getProperty("SourceMbom");
					oCopyObj.targetHeader = i18n.getProperty("targetMbom");
				}
				if (sFragmentName === "CopyEquipmentBom") {
					oCopyObj.srcMatVisible = false;
					oCopyObj.srcFlocVisible = false;
					oCopyObj.srcWBSVisible = false
					oCopyObj.tarMatVisible = false;
					oCopyObj.tarFlocVisible = false;
					oCopyObj.tarWBSVisible = false;
					oCopyObj.srcAltBomVisible = false;
					oCopyObj.tarAltBomVisible = false;
					oCopyObj.header = i18n.getProperty("copyEbomTitle");
					oCopyObj.sourceHeader = i18n.getProperty("SourceEbom");
					oCopyObj.targetHeader = i18n.getProperty("targetEbom");
				}
				if (sFragmentName === "CopyMaterialtoEquipmentBom") {
					oCopyObj.srcEquiVisible = false;
					oCopyObj.srcFlocVisible = false;
					oCopyObj.srcWBSVisible = false;
					oCopyObj.tarMatVisible = false;
					oCopyObj.tarFlocVisible = false;
					oCopyObj.tarWBSVisible = false;
					oCopyObj.tarAltBomVisible = false;
					oCopyObj.header = i18n.getProperty("copyMROBomTitle");
					oCopyObj.sourceHeader = i18n.getProperty("SourceMbom");
					oCopyObj.targetHeader = i18n.getProperty("targetEbom");
				}
				if (sFragmentName === "CopyFlocBom") {
					oCopyObj.srcMatVisible = false;
					oCopyObj.srcEquiVisible = false;
					oCopyObj.srcWBSVisible = false;
					oCopyObj.tarMatVisible = false;
					oCopyObj.tarEquiVisible = false;
					oCopyObj.tarWBSVisible = false;
					oCopyObj.srcAltBomVisible = false;
					oCopyObj.tarAltBomVisible = false;
					oCopyObj.header = i18n.getProperty("copyFlbomTitle");
					oCopyObj.sourceHeader = i18n.getProperty("SourceFlbom");
					oCopyObj.targetHeader = i18n.getProperty("targetFlom");
				}
				if (sFragmentName === "CopyMaterialtoFlocBom") {
					oCopyObj.srcEquiVisible = false;
					oCopyObj.srcFlocVisible = false;
					oCopyObj.srcWBSVisible = false;
					oCopyObj.tarMatVisible = false;
					oCopyObj.tarEquiVisible = false;
					oCopyObj.tarWBSVisible = false;
					oCopyObj.tarAltBomVisible = false;
					oCopyObj.header = i18n.getProperty("copyMROBomTitle");
					oCopyObj.sourceHeader = i18n.getProperty("SourceMbom");
					oCopyObj.targetHeader = i18n.getProperty("targetFlom");
				}
				if (sFragmentName === "CopyWBSBom") {
					oCopyObj.srcEquiVisible = false;
					oCopyObj.srcFlocVisible = false;
					oCopyObj.tarEquiVisible = false;
					oCopyObj.tarFlocVisible = false;
					oCopyObj.srcAltBomVisible = false;
					oCopyObj.tarAltBomVisible = false;
					oCopyObj.header = i18n.getProperty("copyWbsbomTitle");
					oCopyObj.sourceHeader = i18n.getProperty("SourceWbsbom");
					oCopyObj.targetHeader = i18n.getProperty("targetWbsbom");
				}
				if (sFragmentName === "CopyMaterialtoWBSBom") {
					oCopyObj.srcEquiVisible = false;
					oCopyObj.srcFlocVisible = false;
					oCopyObj.srcWBSVisible = false;
					oCopyObj.tarEquiVisible = false;
					oCopyObj.tarFlocVisible = false;
					oCopyObj.tarAltBomVisible = false;
					oCopyObj.header = i18n.getProperty("copyMROBomTitle");
					oCopyObj.sourceHeader = i18n.getProperty("SourceMbom");
					oCopyObj.targetHeader = i18n.getProperty("targetWbsbom");
				}
				var copyModel = new JSONModel(oCopyObj);
				if (!this._copyFragment) {
					this._copyFragment = sap.ui.xmlfragment("ugiaiwui.mdg.aiw.request.Fragments.BOM.CopyBomGeneral", this);
					this.getView().addDependent(this._copyFragment);
				}
				this._copyFragment.setModel(copyModel, "copyModel");
				this._copyFragment.open();
			}

			// TL/WC/OL
			else if (sFragmentName.indexOf("WorkCenter") > 0 || sFragmentName.indexOf("TaskList") > 0 || sFragmentName.indexOf("ObjectLink") >
				0) {
				var oCopyWC = {
					copyWCSource: "",
					copyPlantSource: "",
					copyWCTarget: "",
					copyPlantTarget: "",
					copyHeader: "",
					Type: "",

					sWCValueState: "None",
					sPlantValueState: "None",
					tWCValueState: "None",
					tPlantValueState: "None",

					sWCValueStateTxt: "",
					sPlantValueStateTxt: "",
					tWCValueStateTxt: "",
					tPlantValueStateTxt: ""
				};

				var oCopyTL = {
					noObj: "1",
					genTLGrp: "",
					eqTLGrp: "",
					flocTLGrp: "",
					copyHeader: "",

					genTLGrpVisible: true,
					eqTLGrpVisible: true,
					flocTLGrpVisible: true
				};

				var oCopyOL = {
					noObj: "1",
					sLink: "",
					copyHeader: ""
				};
				if (sFragmentName === "CopyWorkCenter") {
					oCopyWC.copyHeader = i18n.getProperty("copyWCTitle");
					var copyWCModel = new JSONModel(oCopyWC);
					if (!this._copyWCFragment) {
						this._copyWCFragment = sap.ui.xmlfragment("ugiaiwui.mdg.aiw.request.Fragments.WC.CopyWorkCenter", this);
						this.getView().addDependent(this._copyWCFragment);
					}
					this._copyWCFragment.setModel(copyWCModel, "copyWCModel");
					sap.ui.getCore().setModel(copyWCModel, "copyWCModel");
					this._copyWCFragment.open();
				} else if (sFragmentName === "CopyTaskList") {
					if (this.action === "copyGTL") {
						oCopyTL.copyHeader = i18n.getProperty("copyGTLTitle");
						oCopyTL.eqTLGrpVisible = false;
						oCopyTL.flocTLGrpVisible = false;
					} else if (this.action === "copyETL") {
						oCopyTL.copyHeader = i18n.getProperty("copyETLTitle");
						oCopyTL.genTLGrpVisible = false;
						oCopyTL.flocTLGrpVisible = false;
					} else if (this.action === "copyFTL") {
						oCopyTL.copyHeader = i18n.getProperty("copyFTLTitle");
						oCopyTL.eqTLGrpVisible = false;
						oCopyTL.genTLGrpVisible = false;
					}
					var copyTLModel = new JSONModel(oCopyTL);
					if (!this._copyTLFragment) {
						this._copyTLFragment = sap.ui.xmlfragment("ugiaiwui.mdg.aiw.request.Fragments.TL.CopyTaskList", this);
						this.getView().addDependent(this._copyTLFragment);
					}
					this._copyTLFragment.setModel(copyTLModel, "copyTLModel");
					sap.ui.getCore().setModel(copyTLModel, "copyTLModel");
					this._copyTLFragment.open();
				} else if (sFragmentName === "CopyObjectLink") {
					oCopyOL.copyHeader = i18n.getProperty("copyOL");
					var copyOLModel = new JSONModel(oCopyOL);
					if (!this._copyOLFragment) {
						this._copyOLFragment = sap.ui.xmlfragment("ugiaiwui.mdg.aiw.request.Fragments.OL.CopyObjectLink", this);
						this.getView().addDependent(this._copyOLFragment);
					}
					this._copyOLFragment.setModel(copyOLModel, "copyOLModel");
					sap.ui.getCore().setModel(copyOLModel, "copyOLModel");
					this._copyOLFragment.open();
				}

			}
		},
		/*
		 * Function to handle change of Number of objects
		 * @param {sap.ui.base.Event} oEvent
		 */
		onNoOfObjectChange: function (oEvent) {
			var noOfObjects = oEvent.getSource().getModel("copyModel").getData().noOfObjects;
			oEvent.getSource().getModel("copyModel").getData().noOfObjects = noOfObjects;
		},
		/*
		 * Function to handle 'change' of value field in copy dialog
		 * @param {sap.ui.base.Event} oEvent
		 */
		onCopyValueChange: function (oEvent) {
			var sFieldPath = oEvent.getSource().getBindingInfo("value").binding.sPath;
			var sValue = oEvent.getSource().getValue();
			if (sValue === "" || sValue === undefined) {
				oEvent.getSource().setValue("");
			} else {
				oEvent.getSource().setValue(sValue.toUpperCase());
				this._copyValueChange(sFieldPath, sValue, oEvent);
			}
		},
		_copyValueChange: function (sFieldPath, sValue, oEvent) {
			var c = sValue;
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			var sPath, oFilters;

			if (a !== "") {
				if (sFieldPath === "Tplnr") {
					sPath = "/FunctionLocationSet";
					oFilters = [new sap.ui.model.Filter("Tplnr", "EQ", c)];
				}
				if (sFieldPath === "Equnr") {
					sPath = "/EquipmentNumberSet";
					oFilters = [new sap.ui.model.Filter("Equnr", "EQ", c)];
				}
				if (sFieldPath === "Mspoint") {
					sPath = "/MSPT_FL_VHSet";
					oFilters = [new sap.ui.model.Filter("Obtyp", "EQ", c)];
				}
				if (sFieldPath === "Warpl") {
					sPath = "/MPlanVHSet";
					oFilters = [new sap.ui.model.Filter("Warpl", "EQ", c)];
				}

				var oModel = this.getView().getModel("valueHelp");
				var fnSuccess = function (d) {
					if (d.results.length > 0) {
						oEvent.getSource().setValue(a);
					} else {
						oEvent.setValueState("Error");
					}
				};
				var fnError = function (e) {
					var b = JSON.parse(e.responseText);
					var d = b.error.message.value;
					oEvent.setValueState("Error");
					oEvent.setValueStateText(d);
				};
				this._readData(sPath, oModel, fnSuccess, fnError, oFilters);
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' of value field in copy dialog
		 * @param {sap.ui.base.Event} oEvent
		 */
		copyValueHelpSelect: function (oEvent) {
			var sPath = oEvent.getSource().getBindingInfo("value").binding.sPath;
			if (sPath.indexOf("/Tplnr") !== -1) {
				ValueHelpRequest.valueHelpFunCopyFloc(this._copyFragment.getModel("copyModel").getData(), this);
			}
			if (sPath.indexOf("/Equnr") !== -1) {
				ValueHelpRequest.valueHelpFunCopyEqui(this._copyFragment.getModel("copyModel").getData(), this);
			}
			if (sPath.indexOf("/Mspoint") !== -1) {
				ValueHelpRequest.valueHelpFunMeasPoint(this._copyFragment.getModel("copyModel").getData(), this);
			}
			if (sPath.indexOf("/Warpl") !== -1) {
				ValueHelpRequest.valueHelpFunMaintPlan(this._copyFragment.getModel("copyModel").getData(), this);
			}
		},
		/*
		 * Function to get User Status
		 * @param {string} d
		 * @param {object} g - this
		 * @param {string} b - index
		 * @param {string} obj - model name
		 * @param {object} sDataObject
		 */
		getUserStatus: function (d, g, b, obj, sDataObject) {
			var q;
			var m = g.getView().getModel();
			var oJsonModel = this.getView().getModel(obj);
			var oJsonData = oJsonModel.getData()[b];
			var oAIWModel = this.getView().getModel(obj);
			var oAIWData = oJsonModel.getData();
			// var oMainModel = g.getView().getModel("mainView");
			// var oMainData = oMainModel.getData();
			if (obj === "AIWEQUI") {
				q = "/DeriveSTProfileSet(Eqtyp='" + d + "',Lvorm=false,Deact=" + oJsonData.Deact + ",Fltyp='')";
			}
			if (obj === "AIWFLOC") {
				q = "/DeriveSTProfileSet(Eqtyp='',Lvorm=false,Deact=" + oJsonData.Deact + ",Fltyp='" + d + "')";
			}
			m.read(q, {
				success: function (r) {
					if (obj === "AIWEQUI") {
						g.stagingEqUserSts = r.JTxt30;
						g.stagingEqStsWOnumber = r.Dscstatwoutnum;
					}
					if (obj === "AIWFLOC") {
						// oJsonData.UstaEqui = r.JTxt30;
						// oJsonData.UswoEqui = r.Dscstatwoutnum;
						// oJsonModel.refresh();
						// if (sDataObject) {
						// jQuery.sap.delayedCall(4000, g, function () {
						oAIWData = oJsonModel.getData();
						oAIWData.push(sDataObject);
						var sArray = $.map(oAIWData, function (obj) {
							return $.extend(true, {}, obj);
						});
						sArray[sArray.length - 1].Functionallocation = "";
						sArray[sArray.length - 1].SupFunctionallocation = "";
						sArray[sArray.length - 1].SupFlocdescription = "";
						sArray[sArray.length - 1].FunctionallocationVS = "Error";
						sArray[sArray.length - 1].viewParameter = "create";
						sArray[sArray.length - 1].FunctionalLocEnabled = true;
						sArray[sArray.length - 1].FlocCatEnabled = true;
						sArray[sArray.length - 1].StrucIndEnabled = true;
						sArray[sArray.length - 1].MaintplantEnabled = true;
						sArray[sArray.length - 1].BukrsEnabled = true;
						sArray[sArray.length - 1].altlbl = []; // ALt Label not to be copied
						sArray[sArray.length - 1].UstaEqui = r.JTxt30; //g.stagingEqUserSts;
						sArray[sArray.length - 1].UswoEqui = r.Dscstatwoutnum //g.stagingEqStsWOnumber;
						oAIWModel.setData(sArray);
						sap.ui.getCore().setModel(new JSONModel(sArray), g.oModelAIWFLOC);
						sDataObject = null;
						g.onUpdateTitleCount(g.oModelAIWFLOC, sArray);

						var tempFLDOI = $.map(g.DOIarrayFL, function (obj) {
							return $.extend(true, {}, obj);
						});
						sap.ui.getCore().getModel("dataOriginMOP").getData().FL.push({
							key: sArray[sArray.length - 1].Functionallocation,
							DOI: tempFLDOI
						});
						// });
						// } else {
						// 	g.readFunctionalLocData(copyData.Tplnr);
						// }
					}
					// oMainModel.setData(oMainData);
					// oJsonModel.setData(oJsonData);
				},
				error: function () {}
			});
		},
		/*
		 * Function to handle CONFIRM button press of copy dialog
		 * @param {sap.ui.base.Event} oEvent
		 */
		handleConfirmPress: function (oEvent) {
			var g = this;
			var sModelName = this.getFragmentModelName(oEvent);
			var copyFlag = false;
			var copyData = this._copyFragment.getModel("copyModel").getData();
			var noOfObjects = copyData.noOfObjects;
			this.noOfCopyObjects = copyData.noOfObjects;

			if (copyData.noOfObjects === "" || copyData.noOfObjects === undefined) {
				copyData.noOfObjectsVS = "Error";
				copyFlag = true;
			}
			if (sModelName === this.oModelAIWFLOC) {
				if (copyData.Tplnr === "" || copyData.Tplnr === undefined) {
					copyData.TplnrVS = "Error";
					copyFlag = true;
				}
			}
			if (sModelName === this.oModelAIWEQUI) {
				if (copyData.Equnr === "" || copyData.Equnr === undefined) {
					copyData.EqunrVS = "Error";
					copyFlag = true;
				}
			}
			if (sModelName === this.oModelAIWMSPT) {
				if (copyData.Mspoint === "" || copyData.Mspoint === undefined) {
					copyData.MspointVS = "Error";
					copyFlag = true;
				}
			}
			if (sModelName === this.oModelAIWMPMI) {
				if (copyData.Warpl === "" || copyData.Warpl === undefined) {
					copyData.WarplVS = "Error";
					copyFlag = true;
				}
			}

			if (copyFlag) {
				this._copyFragment.getModel("copyModel").setData(copyData);
				return;
			}

			var sDataObject, oAIWModel, oAIWData;
			var oEAMModel = sap.ui.getCore().getModel("EAMCRModel");

			for (var i = 0; i < noOfObjects; i++) {
				if (sModelName === this.oModelAIWFLOC) {
					oAIWModel = this.getView().getModel(this.oModelAIWFLOC);
					oAIWData = oAIWModel.getData();
					for (var a = 0; a < oAIWData.length; a++) {
						if (copyData.Tplnr === oAIWData[a].Functionallocation) {
							sDataObject = oAIWData[a];
							break;
						}
					}

					if (sDataObject) {
						this.getUserStatus(sDataObject.Floccategory, this, a, this.oModelAIWFLOC, sDataObject);
						// 	// jQuery.sap.delayedCall(4000, g, function () {
						// 	oAIWData.push(sDataObject);
						// 	var sArray = $.map(oAIWData, function (obj) {
						// 		return $.extend(true, {}, obj);
						// 	});
						// 	sArray[sArray.length - 1].Functionallocation = "";
						// 	sArray[sArray.length - 1].SupFunctionallocation = "";
						// 	sArray[sArray.length - 1].SupFlocdescription = "";
						// 	sArray[sArray.length - 1].FunctionallocationVS = "Error";
						// 	sArray[sArray.length - 1].viewParameter = "create";
						// 	sArray[sArray.length - 1].FunctionalLocEnabled = true;
						// 	sArray[sArray.length - 1].FlocCatEnabled = true;
						// 	sArray[sArray.length - 1].StrucIndEnabled = true;
						// 	sArray[sArray.length - 1].MaintplantEnabled = true;
						// 	sArray[sArray.length - 1].BukrsEnabled = true;
						// 	sArray[sArray.length - 1].altlbl = []; // ALt Label not to be copied
						// 	sArray[sArray.length - 1].UstaEqui = g.stagingEqUserSts;
						// 	sArray[sArray.length - 1].UswoEqui = g.stagingEqStsWOnumber;
						// 	oAIWModel.setData(sArray);
						// 	sap.ui.getCore().setModel(new JSONModel(sArray), this.oModelAIWFLOC);
						// 	sDataObject = null;
						// 	this.onUpdateTitleCount(this.oModelAIWFLOC, sArray);

						// 	sap.ui.getCore().getModel("dataOriginMOP").getData().FL.push({
						// 		key: sArray[sArray.length - 1].Functionallocation,
						// 		DOI: this.DOIarrayFL
						// 	});
						// 	// });
					} else {
						this.readFunctionalLocData(copyData.Tplnr);
					}
				}
			}

			if (sModelName === this.oModelAIWEQUI) {
				oAIWModel = this.getView().getModel(this.oModelAIWEQUI);
				oAIWData = oAIWModel.getData();
				for (var b = 0; b < oAIWData.length; b++) {
					if (copyData.Equnr === oAIWData[b].Equnr) {
						sDataObject = oAIWData[b];
						break;
					}
				}

				if (sDataObject) {
					this.getUserStatus(sDataObject.EquipmentCatogory, this, b, this.oModelAIWEQUI);
					this.readCreateTempKey(oEAMModel.getProperty("/12").CRType, this.oModelAIWEQUI, "stagging_copy", noOfObjects, sDataObject);
					sDataObject = null;
				} else {
					this.readCreateTempKey(oEAMModel.getProperty("/12").CRType, this.oModelAIWEQUI, "active_copy", noOfObjects, copyData);
				}
			}

			if (sModelName === this.oModelAIWMSPT) {
				oAIWModel = this.getView().getModel(this.oModelAIWMSPT);
				oAIWData = oAIWModel.getData();
				for (var c = 0; c < oAIWData.length; c++) {
					if (copyData.Mspoint === oAIWData[c].Mspoint) {
						sDataObject = oAIWData[c];
						break;
					}
				}

				if (sDataObject) {
					this.readCreateTempKey(oEAMModel.getProperty("/8").CRType, this.oModelAIWMSPT, "stagging_copy", noOfObjects, sDataObject);
					sDataObject = null;
				} else {
					this.readCreateTempKey(oEAMModel.getProperty("/8").CRType, this.oModelAIWMSPT, "active_copy", noOfObjects, copyData);
				}
			}

			if (sModelName === this.oModelAIWMPMI) {
				oAIWModel = this.getView().getModel(this.oModelAIWMPMI);
				oAIWData = oAIWModel.getData();
				for (var d = 0; d < oAIWData.length; d++) {
					if (copyData.Warpl === oAIWData[d].Warpl) {
						sDataObject = oAIWData[d];
						break;
					}
				}

				if (sDataObject) {
					this.readCreateTempKey(oEAMModel.getProperty("/7").CRType, this.oModelAIWMPMI, "stagging_copy", noOfObjects, sDataObject,
						"HEADER");
					sDataObject = null;
				} else {
					this.readCreateTempKey(oEAMModel.getProperty("/7").CRType, this.oModelAIWMPMI, "active_copy", noOfObjects, copyData, "HEADER");
					// for (var l = 0; l < noOfObjects; l++) {
					// 	this.readMaintenancePlanData(copyData.Warpl);
					// }
				}
			}
			this.handleCancelPress();
		},
		/*
		 * Function to handle CANCEL button press of copy dialog
		 * @param {sap.ui.base.Event} oEvent
		 */
		handleCancelPress: function () {
			this._copyFragment.close();
			this._copyFragment.destroy();
			this._copyFragment = undefined;
			this._copyFragmentFlag = false;
		},

		/* =========================================================== */
		/* event handlers                                              */
		/* =========================================================== */
		/*
		 * Function to handle 'change' of value field in copy dialog
		 * @param {string} sParameter
		 * @param {string} sParameterVS
		 * @param {sap.ui.base.Event} oEvent
		 * @param {string} sIndex
		 * @param {string} sModelName
		 */
		handleValueState: function (sParameter, sParameterVS, oEvent, sIndex, sModelName) {
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData[sParameter];
			if (sValue === "" || sValue === undefined) {
				this.doneFlag = false;
				oModelData[sParameterVS] = "Error";
			}
		},
		/*
		 * Function to handle validations of EQ, FL, MSPT & MPMI data
		 * @param {sap.ui.base.Event} oEvent
		 * @param {array} AIWFLOCModel
		 * @param {array} AIWEQUIModel
		 * @param {array} AIWMSPTModel
		 * @param {array} AIWMPMIModel
		 */
		handleValidation: function (oEvent, AIWFLOCModel, AIWEQUIModel, AIWMSPTModel, AIWMPMIModel) {
			var g = this;
			// g.errorFlag = true;
			// g.MessageList = [];
			if (AIWFLOCModel.length > 0) {
				for (var a = 0; a < AIWFLOCModel.length; a++) {
					g.handleSubmitValueState("Functionallocation", "FunctionallocationVS", AIWFLOCModel[a], g.getResourceBundle().getText(
						"functionalLocationMand"));
					g.handleSubmitValueState("Flocdescription", "FlocdescriptionVS", AIWFLOCModel[a], g.getResourceBundle().getText("flocDescMand"));
					g.handleSubmitValueState("Strucindicator", "StrucindicatorVS", AIWFLOCModel[a], g.getResourceBundle().getText("flocStrIndMand", [
						AIWFLOCModel[a].Functionallocation
					]));
					g.handleSubmitValueState("Floccategory", "FloccategoryVS", AIWFLOCModel[a], g.getResourceBundle().getText("flocCatMand", [
						AIWFLOCModel[a].Functionallocation
					]));

					if ((AIWFLOCModel[a].Title !== "" && AIWFLOCModel[a].Title !== undefined) || (AIWFLOCModel[a].TitleCode !== "" && AIWFLOCModel[
								a]
							.TitleCode !== undefined) || (AIWFLOCModel[a].Name1 !== "" && AIWFLOCModel[a].Name1 !== undefined) || (AIWFLOCModel[a].Name2 !==
							"" && AIWFLOCModel[a].Name2 !== undefined) || (AIWFLOCModel[a].Name3 !== "" && AIWFLOCModel[a].Name3 !== undefined) ||
						(AIWFLOCModel[a].Name4 !== "" && AIWFLOCModel[a].Name4 !== undefined) || (AIWFLOCModel[a].Sort1 !== "" && AIWFLOCModel[a].Sort1 !==
							undefined) || (AIWFLOCModel[a].Sort2 !== "" && AIWFLOCModel[a].Sort2 !== undefined) || (AIWFLOCModel[a].NameCo !== "" &&
							AIWFLOCModel[a].NameCo !== undefined) || (AIWFLOCModel[a].PostCod1 !== "" && AIWFLOCModel[a].PostCod1 !== undefined) || (
							AIWFLOCModel[a].City1 !== "" && AIWFLOCModel[a].City1 !== undefined) || (AIWFLOCModel[a].Building !== "" && AIWFLOCModel[a].Building !==
							undefined) || (AIWFLOCModel[a].Floor !== "" && AIWFLOCModel[a].Floor !== undefined) || (AIWFLOCModel[a].Roomnum !== "" &&
							AIWFLOCModel[a].Roomnum !== undefined) || (AIWFLOCModel[a].AddrLocation !== "" && AIWFLOCModel[a].AddrLocation !== undefined) ||
						(AIWFLOCModel[a].Strsuppl1 !== "" && AIWFLOCModel[a].Strsuppl1 !== undefined) || (AIWFLOCModel[a].Strsuppl2 !== "" &&
							AIWFLOCModel[a].Strsuppl2 !== undefined) || (AIWFLOCModel[a].Strsuppl3 !== "" &&
							AIWFLOCModel[a].Strsuppl3 !== undefined) || (AIWFLOCModel[a].TimeZone !== "" && AIWFLOCModel[a].TimeZone !== undefined) || (
							AIWFLOCModel[a].RefPosta !== "" && AIWFLOCModel[a].RefPosta !== undefined) || (
							AIWFLOCModel[a].Region !== "" && AIWFLOCModel[a].Region !== undefined)) {
						g.handleSubmitValueState("RefPosta", "RefPostaVS", AIWFLOCModel[a], g.getResourceBundle().getText("flocCountryMand", [
							AIWFLOCModel[a].Functionallocation
						]));
					}
				}
				g.getView().getModel(g.oModelAIWFLOC).setData(AIWFLOCModel);
			}

			if (AIWEQUIModel.length > 0) {
				for (var b = 0; b < AIWEQUIModel.length; b++) {
					g.handleSubmitValueState("Equnr", "EqunrVS", AIWEQUIModel[b], g.getResourceBundle().getText("equiMand"));
					g.handleSubmitValueState("Eqktx", "EqktxVS", AIWEQUIModel[b], g.getResourceBundle().getText("equiDescMand"));
					g.handleSubmitValueState("EquipmentCatogory", "EquipmentCatogoryVS", AIWEQUIModel[b], g.getResourceBundle().getText(
						"equiCatMand", [
							AIWEQUIModel[b].Equnr
						]));

					if ((AIWEQUIModel[b].Title !== "" && AIWEQUIModel[b].Title !== undefined) || (AIWEQUIModel[b].TitleCode !== "" && AIWEQUIModel[
								b]
							.TitleCode !== undefined) || (AIWEQUIModel[b].Name1 !== "" && AIWEQUIModel[b].Name1 !== undefined) || (AIWEQUIModel[b].Name2 !==
							"" && AIWEQUIModel[b].Name2 !== undefined) || (AIWEQUIModel[b].Name3 !== "" && AIWEQUIModel[b].Name3 !== undefined) ||
						(AIWEQUIModel[b].Name4 !== "" && AIWEQUIModel[b].Name4 !== undefined) || (AIWEQUIModel[b].Sort1 !== "" && AIWEQUIModel[b].Sort1 !==
							undefined) || (AIWEQUIModel[b].Sort2 !== "" && AIWEQUIModel[b].Sort2 !== undefined) || (AIWEQUIModel[b].NameCo !== "" &&
							AIWEQUIModel[b].NameCo !== undefined) || (AIWEQUIModel[b].PostCod1 !== "" &&
							AIWEQUIModel[b].PostCod1 !== undefined) || (AIWEQUIModel[b].City1 !== "" && AIWEQUIModel[b].City1 !== undefined) ||
						(AIWEQUIModel[b].Building !== "" && AIWEQUIModel[b].Building !== undefined) || (AIWEQUIModel[b].Floor !== "" && AIWEQUIModel[b]
							.Floor !==
							undefined) || (AIWEQUIModel[b].Roomnum !== "" && AIWEQUIModel[b].Roomnum !==
							undefined) || (AIWEQUIModel[b].AddrLocation !== "" && AIWEQUIModel[b].AddrLocation !== undefined) || (AIWEQUIModel[b].Strsuppl1 !==
							"" && AIWEQUIModel[b].Strsuppl1 !== undefined) || (AIWEQUIModel[b].Strsuppl2 !== "" && AIWEQUIModel[b].Strsuppl2 !==
							undefined) ||
						(AIWEQUIModel[b].Strsuppl3 !== "" && AIWEQUIModel[b].Strsuppl3 !== undefined) || (AIWEQUIModel[b].TimeZone !== "" &&
							AIWEQUIModel[b].TimeZone !== undefined) || (AIWEQUIModel[b].RefPosta !== "" && AIWEQUIModel[b].RefPosta !== undefined) || (
							AIWEQUIModel[b].Region !== "" && AIWEQUIModel[b].Region !== undefined)) {
						g.handleSubmitValueState("RefPosta", "RefPostaVS", AIWEQUIModel[b], g.getResourceBundle().getText("equiCountryMand", [
							AIWEQUIModel[b].Equnr
						]));
					}
				}

				g.getView().getModel(g.oModelAIWEQUI).setData(AIWEQUIModel);
			}

			if (AIWMSPTModel.length > 0) {
				for (var c = 0; c < AIWMSPTModel.length; c++) {
					g.handleSubmitValueState("Pttxt", "PttxtVS", AIWMSPTModel[c], g.getResourceBundle().getText("msptDescMand"));
					g.handleSubmitValueState("ObtypMs", "ObtypMsVS", AIWMSPTModel[c], g.getResourceBundle().getText("msptCatTypeMand"));
					g.handleSubmitValueState("Mptyp", "MptypVS", AIWMSPTModel[c], g.getResourceBundle().getText("msptCatMand"));

					var sEqunrInpVis = AIWMSPTModel[c].EqunrInpVis;
					if (sEqunrInpVis) {
						g.handleSubmitValueState("Equnr", "EqunrVS", AIWMSPTModel[c], g.getResourceBundle().getText("msptEquiMand"));
					}
					var sTplnrInpVis = AIWMSPTModel[c].TplnrInpVis;
					if (sTplnrInpVis) {
						g.handleSubmitValueState("Tplnr", "TplnrVS", AIWMSPTModel[c], g.getResourceBundle().getText("msptFlocMand"));
					}

					if (AIWMSPTModel[c].Indct === true && (AIWMSPTModel[c].AtnamMs === "" || AIWMSPTModel[c].AtnamMs === undefined)) {
						// AIWMSPTModel[c].AtnamMsVS = "Error";
						g.errorFlag = false;
						g.MessageList.push({
							type: "Error",
							title: g.getResourceBundle().getText("MCOUNTER_CHAR_ERR")
						});
					}
					if (AIWMSPTModel[c].Cdsuf === true && (AIWMSPTModel[c].Codgr === "" || AIWMSPTModel[c].Codgr === undefined)) {
						// AIWMSPTModel[c].CodgrVS = "Error";
						g.errorFlag = false;
						g.MessageList.push({
							type: "Error",
							title: g.getResourceBundle().getText("VCODE_ERR")
						});
					}

					if ((AIWMSPTModel[c].AtnamMs === "" || AIWMSPTModel[c].AtnamMs === undefined) || (AIWMSPTModel[c].Codgr === "" || AIWMSPTModel[
							c].Codgr === undefined)) {
						var sCharCodeFlag = false;
						if (AIWMSPTModel[c].AtnamMs === "" || AIWMSPTModel[c].AtnamMs === undefined) {
							// AIWMSPTModel[c].AtnamMsVS = "Error";
						} else {
							sCharCodeFlag = true;
						}
						if (AIWMSPTModel[c].Codgr === "" || AIWMSPTModel[c].Codgr === undefined) {
							// AIWMSPTModel[c].CodgrVS = "Error";
						} else {
							sCharCodeFlag = true;
						}

						if (!sCharCodeFlag) {
							g.errorFlag = false;
							g.MessageList.push({
								type: "Error",
								title: g.getResourceBundle().getText("msptCharCodeMand")
							});
						}
					}

					var sDesirVis = AIWMSPTModel[c].tEnable;
					if (sDesirVis) {
						var sDesir = parseInt(AIWMSPTModel[c].Desir);
						var sMrmax = parseInt(AIWMSPTModel[c].Mrmax);

						if (sDesir > sMrmax) {
							g.errorFlag = false;
							g.MessageList.push({
								type: "Error",
								title: g.getResourceBundle().getText("msptTargetExdMand")
							});
						}
					}
				}
				g.getView().getModel(g.oModelAIWMSPT).setData(AIWMSPTModel);
			}

			if (AIWMPMIModel.length > 0) {
				for (var d = 0; d < AIWMPMIModel.length; d++) {
					g.handleSubmitValueState("Warpl", "WarplVS", AIWMPMIModel[d], g.getResourceBundle().getText("mpmiMand"));
					g.handleSubmitValueState("Wptxt", "WptxtVS", AIWMPMIModel[d], g.getResourceBundle().getText("mpmiDescMand", [AIWMPMIModel[d].Warpl]));
					g.handleSubmitValueState("Mptyp", "MptypVS", AIWMPMIModel[d], g.getResourceBundle().getText("mpmiCatMand", [AIWMPMIModel[d].Warpl]));
					var sCycleType = AIWMPMIModel[d].cycleType;
					if (sCycleType === "" || sCycleType === undefined) {
						g.errorFlag = false;
						g.MessageList.push({
							type: "Error",
							title: g.getResourceBundle().getText("mpmiCycleType", [AIWMPMIModel[d].Warpl])
						});
					}
					var sButtonNewCycleEnabled = AIWMPMIModel[d].ButtonNewCycleEnabled;
					if (sButtonNewCycleEnabled && sCycleType === 0) {
						var oCycleData = AIWMPMIModel[d].cycleModel;
						if (oCycleData.length <= 0) {
							g.errorFlag = false;
							g.MessageList.push({
								type: "Error",
								title: g.getResourceBundle().getText("mpmiCycleMand", [AIWMPMIModel[d].Warpl])
							});
						}
					}
					var oItemData = AIWMPMIModel[d].itemModel;
					if (oItemData.length <= 0) {
						g.errorFlag = false;
						g.MessageList.push({
							type: "Error",
							title: g.getResourceBundle().getText("mpmiItemMand", [AIWMPMIModel[d].Warpl])
						});
					}
				}
				g.getView().getModel(g.oModelAIWMPMI).setData(AIWMPMIModel);
			}

			// g.createMessagePopover(g.MessageList, g.errorFlag);
		},
		/*
		 * Function to handle row press of EQ, FL, MSPT & MPMI table. Routes to SOP screen.
		 * @param {sap.ui.base.Event} oEvent
		 */
		onPress: function (oEvent) {
			var sSelectedFragment = oEvent.getSource().getParent().getParent().getParent().getText();
			var sIndex, sModelName, oModelData, sViewName, oAIWData;

			if (sSelectedFragment.indexOf("FLOC") !== -1) {
				sModelName = this.oModelAIWFLOC;
				sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
				oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);

				if (this.mode === "display") {
					sViewName = "Approve";
				} else {
					this.handleValueState("Functionallocation", "FunctionallocationVS", oEvent, sIndex, sModelName);
					this.handleValueState("Flocdescription", "FlocdescriptionVS", oEvent, sIndex, sModelName);
					this.handleValueState("Strucindicator", "StrucindicatorVS", oEvent, sIndex, sModelName);
					this.handleValueState("Floccategory", "FloccategoryVS", oEvent, sIndex, sModelName);

					if ((oModelData.Title !== "" && oModelData.Title !== undefined) || (oModelData.TitleCode !== "" && oModelData.TitleCode !==
							undefined) || (oModelData.Name1 !== "" && oModelData.Name1 !== undefined) || (oModelData.Name2 !== "" && oModelData.Name2 !==
							undefined) || (oModelData.Name3 !==
							"" && oModelData.Name3 !== undefined) || (oModelData.Name4 !== "" && oModelData.Name4 !== undefined) ||
						(oModelData.Sort1 !== "" && oModelData.Sort1 !== undefined) || (oModelData.Sort2 !== "" && oModelData.Sort2 !== undefined) ||
						(
							oModelData.NameCo !== "" && oModelData.NameCo !== undefined) || (oModelData.PostCod1 !== "" && oModelData.PostCod1 !==
							undefined) || (oModelData.City1 !==
							"" && oModelData.City1 !== undefined) || (oModelData.Building !== "" && oModelData.Building !== undefined) ||
						(oModelData.Floor !== "" && oModelData.Floor !== undefined) || (oModelData.Roomnum !== "" && oModelData.Roomnum !== undefined) ||
						(oModelData.AddrLocation !== "" && oModelData.AddrLocation !== undefined) || (oModelData.Strsuppl1 !== "" && oModelData.Strsuppl1 !==
							undefined) ||
						(oModelData.Strsuppl2 !== "" && oModelData.Strsuppl2 !== undefined) ||
						(oModelData.Strsuppl3 !== "" && oModelData.Strsuppl3 !== undefined) || (oModelData.TimeZone !== "" && oModelData.TimeZone !==
							undefined) || (oModelData.RefPosta !== "" && oModelData.RefPosta !== undefined) || (oModelData.Region !== "" && oModelData.Region !==
							undefined)) {
						this.handleValueState("RefPosta", "RefPostaVS", oEvent, sIndex, sModelName);

						if (oModelData.RefPostaVS !== "Error") {
							oAIWData = this.getView().getModel(sModelName).getProperty(sIndex);
							oAIWData.RefPostaLblReq = true;
							oAIWData.RefPostaVS = "None";
							this.getView().getModel(sModelName).setProperty(sIndex, oAIWData);
						}
					}
					sViewName = "CreateFloc";

				}

				this.getRouter().navTo("detailFloc", {
					Path: encodeURIComponent(sIndex),
					ViewName: sViewName,
					Floc: " ",
					CrStatus: " "
				});
			}
			if (sSelectedFragment.indexOf("EQUI") !== -1) {
				sModelName = this.oModelAIWEQUI;
				sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
				oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);

				if (this.mode === "display") {
					sViewName = "Approve";
				} else {
					this.handleValueState("Equnr", "EqunrVS", oEvent, sIndex, sModelName);
					this.handleValueState("Eqktx", "Eqktx	VS", oEvent, sIndex, sModelName);
					this.handleValueState("EquipmentCatogory", "EquipmentCatogoryVS", oEvent, sIndex, sModelName);

					if ((oModelData.Title !== "" && oModelData.Title !== undefined) || (oModelData.TitleCode !== "" && oModelData.TitleCode !==
							undefined) || (oModelData.Name1 !== "" && oModelData.Name1 !== undefined) || (oModelData.Name2 !== "" && oModelData.Name2 !==
							undefined) || (oModelData.Name3 !==
							"" && oModelData.Name3 !== undefined) || (oModelData.Name4 !== "" && oModelData.Name4 !== undefined) ||
						(oModelData.Sort1 !== "" && oModelData.Sort1 !== undefined) || (oModelData.Sort2 !== "" && oModelData.Sort2 !== undefined) ||
						(
							oModelData.NameCo !== "" && oModelData.NameCo !== undefined) || (oModelData.PostCod1 !== "" && oModelData.PostCod1 !==
							undefined) || (oModelData.City1 !==
							"" && oModelData.City1 !== undefined) || (oModelData.Building !== "" && oModelData.Building !== undefined) ||
						(oModelData.Floor !== "" && oModelData.Floor !== undefined) || (oModelData.Roomnum !== "" && oModelData.Roomnum !== undefined) ||
						(oModelData.AddrLocation !== "" && oModelData.AddrLocation !== undefined) || (oModelData.Strsuppl1 !== "" && oModelData.Strsuppl1 !==
							undefined) ||
						(oModelData.Strsuppl2 !== "" && oModelData.Strsuppl2 !== undefined) ||
						(oModelData.Strsuppl3 !== "" && oModelData.Strsuppl3 !== undefined) || (oModelData.TimeZone !== "" && oModelData.TimeZone !==
							undefined) || (oModelData.RefPosta !== "" && oModelData.RefPosta !== undefined) || (oModelData.Region !== "" && oModelData.Region !==
							undefined)) {
						this.handleValueState("RefPosta", "RefPostaVS", oEvent, sIndex, sModelName);

						if (oModelData.RefPostaVS !== "Error") {
							oAIWData = this.getView().getModel(sModelName).getProperty(sIndex);
							oAIWData.RefPostaLblReq = true;
							oAIWData.RefPostaVS = "None";
							this.getView().getModel(sModelName).setProperty(sIndex, oAIWData);
						}
					}
					sViewName = "CreateEqui";

				}

				this.getRouter().navTo("detailEqui", {
					Path: encodeURIComponent(sIndex),
					ViewName: sViewName,
					Equi: " ",
					CrStatus: " "
				});
			}
			if (sSelectedFragment.indexOf("MSPT") !== -1) {
				sModelName = this.oModelAIWMSPT;
				sIndex = oEvent.getSource().getBindingContext(this.oModelAIWMSPT).getPath();
				oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);

				if (this.mode === "display") {
					sViewName = "Approve";
				} else {
					this.handleValueState("Pttxt", "PttxtVS", oEvent, sIndex, sModelName);
					this.handleValueState("ObtypMs", "ObtypMsVS", oEvent, sIndex, sModelName);
					this.handleValueState("Mptyp", "MptypVS", oEvent, sIndex, sModelName);

					var sEqunrInpVis = oModelData.EqunrInpVis;
					if (sEqunrInpVis) {
						this.handleValueState("Equnr", "EqunrVS", oEvent, sIndex, sModelName);
					}
					var sTplnrInpVis = oModelData.TplnrInpVis;
					if (sTplnrInpVis) {
						this.handleValueState("Tplnr", "TplnrVS", oEvent, sIndex, sModelName);
					}

					sViewName = "CreateMspt";

				}

				this.getRouter().navTo("detailMspt", {
					Path: encodeURIComponent(sIndex),
					ViewName: sViewName,
					Mspt: " ",
					CrStatus: " "
				});
			}
			if (sSelectedFragment.indexOf("MPMI") !== -1) {
				sModelName = this.oModelAIWMPMI;
				sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
				oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);

				if (this.mode === "display") {
					sViewName = "Approve";
				} else {
					this.handleValueState("Warpl", "WarplVS", oEvent, sIndex, sModelName);
					this.handleValueState("Wptxt", "WptxtVS", oEvent, sIndex, sModelName);
					this.handleValueState("Mptyp", "MptypVS", oEvent, sIndex, sModelName);
					sViewName = "CreateMpmi";

				}

				this.getRouter().navTo("detailMpmi", {
					Path: encodeURIComponent(sIndex),
					ViewName: sViewName,
					Mplan: " ",
					CrStatus: " "
				});
			}
		},
		/*
		 * Function to handle select row of EQ, FL, MSPT & MPMI table. Sets/Unsets delete button.
		 * @param {sap.ui.base.Event} oEvent
		 */
		onMainTableRowSelect: function (oEvent) {
			var sSelectedFragment = oEvent.getSource().getParent().getParent().getParent().getSelectedKey();
			var oMainModel = this.getView().getModel("mainView");
			var oMainData = oMainModel.getData();
			this.tableId = oEvent.getSource().getId();

			if (sSelectedFragment.indexOf("FLOCTab") !== -1) {
				this.selectedRowsFLOC = oEvent.getSource()._aSelectedPaths;
				if (this.selectedRowsFLOC.length > 0) {
					oMainData.deleteFLOC = true;
				} else {
					oMainData.deleteFLOC = false;
				}
			}
			if (sSelectedFragment.indexOf("EQUITab") !== -1) {
				this.selectedRowsEQUI = oEvent.getSource()._aSelectedPaths;
				if (this.selectedRowsEQUI.length > 0) {
					oMainData.deleteEQUI = true;
				} else {
					oMainData.deleteEQUI = false;
				}
			}
			if (sSelectedFragment.indexOf("MSPTTab") !== -1) {
				this.selectedRowsMSPT = oEvent.getSource()._aSelectedPaths;
				if (this.selectedRowsMSPT.length > 0) {
					oMainData.deleteMSPT = true;
				} else {
					oMainData.deleteMSPT = false;
				}
			}
			if (sSelectedFragment.indexOf("MPMITab") !== -1) {
				this.selectedRowsMPMI = oEvent.getSource()._aSelectedPaths;
				if (this.selectedRowsMPMI.length > 0) {
					oMainData.deleteMPMI = true;
				} else {
					oMainData.deleteMPMI = false;
				}
			}
			oMainModel.setData(oMainData);
		},
		/*
		 * Function to handle deletion of rows of EQ, FL, MSPT & MPMI table
		 * @param {sap.ui.base.Event} oEvent
		 */
		onRemoveMainTablePress: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var oMainModel = this.getView().getModel("mainView");
			var oMainData = oMainModel.getData();
			var tempArray = [];
			var index;

			if (sModelName === this.oModelAIWFLOC) {
				var oAIWFLOCModel = sap.ui.getCore().getModel(this.oModelAIWFLOC); //this.getView().getModel(this.oModelAIWFLOC);
				var oAIWFLOCData = oAIWFLOCModel.getData();
				tempArray = [];

				for (var rf = 0; rf < this.selectedRowsFLOC.length; rf++) {
					tempArray.push(parseInt(this.selectedRowsFLOC[rf].split("/")[1]));
				}
				tempArray.sort(function (a, b) {
					return a - b;
				});

				this.checkDependantObject(tempArray, sModelName);

				// for (var i = tempArray.length - 1; i >= 0; i--) {
				// 	index = tempArray[i];
				// 	index = parseInt(index);

				// 	var mFlocAddressModel = sap.ui.getCore().getModel("flocAddressView");
				// 	var mFlocAddressData = mFlocAddressModel.getData();
				// 	if (index <= mFlocAddressData.length) {
				// 		for (var af = 0; af < mFlocAddressData.length; af++) {
				// 			if (oAIWFLOCData[index].Functionallocation === mFlocAddressData[af].Functionallocation) {
				// 				mFlocAddressData.splice(af, 1);
				// 				mFlocAddressModel.setData(mFlocAddressData);
				// 				break;
				// 			}
				// 		}
				// 	}

				// 	var aDOIFL = sap.ui.getCore().getModel("dataOriginMOP").getData().FL;
				// 	if (oAIWFLOCData[index].Functionallocation === "") {
				// 		sap.ui.getCore().getModel("dataOriginMOP").getData().FL.splice(index, 1);
				// 	} else {
				// 		for (var z = 0; z < aDOIFL.length; z++) {
				// 			if (aDOIFL[z].key === oAIWFLOCData[index].Functionallocation) {
				// 				sap.ui.getCore().getModel("dataOriginMOP").getData().FL.splice(z, 1);
				// 			}
				// 		}
				// 	}

				// 	oAIWFLOCData.splice(index, 1);
				// 	// this.getView().getModel(this.oModelAIWFLOC).getData().splice(index, 1)
				// }

				// sap.ui.getCore().byId(this.tableId).removeSelections();
				// sap.ui.getCore().byId(this.tableId).getModel(this.oModelAIWFLOC).refresh();
				// this.getView().getModel(this.oModelAIWFLOC).refresh();
				// oAIWFLOCModel.setData(oAIWFLOCData);
				// this.onUpdateTitleCount(sModelName, oAIWFLOCData);
				// this.selectedRowsFLOC = [];
				// oMainData.deleteFLOC = false;
			}

			if (sModelName === this.oModelAIWEQUI) {
				var oAIWEQUIModel = sap.ui.getCore().getModel(this.oModelAIWEQUI); //this.getView().getModel(this.oModelAIWEQUI);
				var oAIWEQUIData = oAIWEQUIModel.getData();
				tempArray = [];

				for (var re = 0; re < this.selectedRowsEQUI.length; re++) {
					tempArray.push(parseInt(this.selectedRowsEQUI[re].split("/")[1]));
				}
				tempArray.sort(function (a, b) {
					return a - b;
				});

				this.checkDependantObject(tempArray, sModelName);

				// for (var j = tempArray.length - 1; j >= 0; j--) {
				// 	index = tempArray[j];
				// 	index = parseInt(index);

				// 	var mEquiAddressModel = sap.ui.getCore().getModel("equiAddressView");
				// 	var mEquiAddressData = mEquiAddressModel.getData();
				// 	if (index <= mEquiAddressData.length) {
				// 		for (var as = 0; as < mEquiAddressData.length; as++) {
				// 			if (oAIWEQUIData[index].Equnr === mEquiAddressData[as].Equnr) {
				// 				mEquiAddressData.splice(as, 1);
				// 				mEquiAddressModel.setData(mEquiAddressData);
				// 				break;
				// 			}
				// 		}
				// 	}

				// 	var ainMop = sap.ui.getCore().getModel("ainMOP").getData();
				// 	for (var x = 0; x < ainMop.length; x++) {
				// 		if (ainMop[x].key === oAIWEQUIData[index].Equnr) {
				// 			sap.ui.getCore().getModel("ainMOP").getData().splice(x, 1);
				// 			break;
				// 		}
				// 	}

				// 	sap.ui.getCore().getModel("dataOriginMOP").getData().EQ.splice(index, 1);

				// 	oAIWEQUIData.splice(index, 1);
				// }
				// sap.ui.getCore().byId(this.tableId).removeSelections();
				// sap.ui.getCore().byId(this.tableId).getModel(this.oModelAIWEQUI).refresh();
				// this.getView().getModel(this.oModelAIWEQUI).refresh();
				// oAIWEQUIModel.setData(oAIWEQUIData);
				// this.onUpdateTitleCount(sModelName, oAIWEQUIData);
				// this.selectedRowsEQUI = [];
				// oMainData.deleteEQUI = false;
			}

			if (sModelName === this.oModelAIWMSPT) {
				var oAIWMSPTModel = this.getView().getModel(this.oModelAIWMSPT);
				var oAIWMSPTData = oAIWMSPTModel.getData();
				tempArray = [];

				for (var rs = 0; rs < this.selectedRowsMSPT.length; rs++) {
					tempArray.push(parseInt(this.selectedRowsMSPT[rs].split("/")[1]));
				}
				tempArray.sort(function (a, b) {
					return a - b;
				});

				this.checkDependantObject(tempArray, sModelName);

				// for (var k = tempArray.length - 1; k >= 0; k--) {
				// 	index = tempArray[k];
				// 	index = parseInt(index);
				// 	oAIWMSPTData.splice(index, 1);
				// }
				// sap.ui.getCore().byId(this.tableId).removeSelections();
				// sap.ui.getCore().byId(this.tableId).getModel(this.oModelAIWMSPT).refresh();
				// this.getView().getModel(this.oModelAIWMSPT).refresh();
				// oAIWMSPTModel.setData(oAIWMSPTData);
				// this.onUpdateTitleCount(sModelName, oAIWMSPTData);
				// this.selectedRowsMSPT = [];
				// oMainData.deleteMSPT = false;
			}

			if (sModelName === this.oModelAIWMPMI) {
				var oAIWMPMIModel = this.getView().getModel(this.oModelAIWMPMI);
				var oAIWMPMIData = oAIWMPMIModel.getData();
				tempArray = [];

				for (var rp = 0; rp < this.selectedRowsMPMI.length; rp++) {
					tempArray.push(parseInt(this.selectedRowsMPMI[rp].split("/")[1]));
				}
				tempArray.sort(function (a, b) {
					return a - b;
				});

				for (var l = tempArray.length - 1; l >= 0; l--) {
					index = tempArray[l];
					index = parseInt(index);
					oAIWMPMIData.splice(index, 1);
				}
				sap.ui.getCore().byId(this.tableId).removeSelections();
				sap.ui.getCore().byId(this.tableId).getModel(this.oModelAIWMPMI).refresh();
				this.getView().getModel(this.oModelAIWMPMI).refresh();
				oAIWMPMIModel.setData(oAIWMPMIData);
				this.onUpdateTitleCount(sModelName, oAIWMPMIData);
				this.selectedRowsMPMI = [];
				oMainData.deleteMPMI = false;
			}
			oMainModel.setData(oMainData);
		},

		checkDependantObject: function (tempArray, sModelName) {
			var g = this;
			var AIWFLOCModel = sap.ui.getCore().getModel(g.oModelAIWFLOC).getData();
			var AIWEQUIModel = sap.ui.getCore().getModel(g.oModelAIWEQUI).getData();
			var AIWMSPTModel = sap.ui.getCore().getModel(g.oModelAIWMSPT).getData();
			var AIWMPMIModel = sap.ui.getCore().getModel(g.oModelAIWMPMI).getData();
			var AIWListMatData = sap.ui.getCore().getModel("AIWListMatModel").getData();
			var AIWListEqData = sap.ui.getCore().getModel("AIWListEqModel").getData();
			var AIWListFLData = sap.ui.getCore().getModel("AIWListFLModel").getData();
			var AIWListWBSData = sap.ui.getCore().getModel("AIWListWBSModel").getData();
			var AIWListONData = sap.ui.getCore().getModel("AIWListONModel").getData();
			var AIWListWCData = sap.ui.getCore().getModel("AIWListWCModel").getData();
			var AIWListGTLData = sap.ui.getCore().getModel("AIWListGTLModel").getData();
			var AIWListETLData = sap.ui.getCore().getModel("AIWListETLModel").getData();
			var AIWListFTLData = sap.ui.getCore().getModel("AIWListFTLModel").getData();
			var AIWListOLData = sap.ui.getCore().getModel("AIWListOLModel").getData();
			var sPayload = {
				"ChangeRequestType": this.getCrType(),
				"CrDescription": this.getView().byId("Description").getValue(),
				"Reason": this.getView().byId("reasonForRequest").getSelectedKey(),
				"Guids": this.oAttach,
				"Action": "MDG_REMOVE",
				"IsDraft": "C",
				"RemoveMsg": "",
				"Messages": [],
				"FuncLoc": [],
				"FLAddr": [],
				"FLAddrI": [],
				"FLALTLBEL": [],
				"FLLAM": [],
				"FLClass": [],
				"FLVal": [],
				"Equipment": [],
				"EqAddr": [],
				"EqAddrI": [],
				"EqPRT": [],
				"EqLAM": [],
				"EqDFPS": [],
				"EqClass": [],
				"EqVal": [],
				"MSPoint": [],
				"MSLAM": [],
				"MSClass": [],
				"MSVal": [],
				"MPLAN": [],
				"MPItem": [],
				"MPLAM": [],
				"MPOBList": [],
				"MPCycle": [],
				"ClassMpl": [],
				"ValuaMpl": [],
				"MRBHeader": [],
				"MRBItem": [],
				"MRBSBIT": [],
				"EBHeader": [],
				"EBItem": [],
				"EBSBIT": [],
				"FBHeader": [],
				"FBItem": [],
				"FBSBIT": [],
				"WBHeader": [],
				"WBItem": [],
				"WBSBIT": [],
				"ONetwork": [],
				"ONLAM": [],
				"Workcenter": [],
				"WCCost": [],
				"ClassWC": [],
				"ValueWC": [],
				"GTList": [],
				"GTOprs": [],
				"GTComp": [],
				"GTMPack": [],
				"GTRel": [],
				"GTSpack": [],
				"GTPRT": [],
				"GTInsp": [],
				"GTClass": [],
				"GTVal": [],
				"ETList": [],
				"ETOprs": [],
				"ETComp": [],
				"ETMPack": [],
				"ETRel": [],
				"ETSpack": [],
				"ETPRT": [],
				"ETInsp": [],
				"ETClass": [],
				"ETVal": [],
				"FTList": [],
				"FTOprs": [],
				"FTComp": [],
				"FTMPack": [],
				"FTRel": [],
				"FTSpack": [],
				"FTPRT": [],
				"FTInsp": [],
				"FTClass": [],
				"FTVal": [],
				"Olink": [],
				"OLClass": [],
				"OLVal": []

			};

			if (this.oAttach.length === 0 || this.oAttach === undefined) {
				delete sPayload.Guids;
			}
			if (AIWFLOCModel.length > 0) {
				for (var a = 0; a < AIWFLOCModel.length; a++) {
					var sFuncLoc = {
						"Tplnr": AIWFLOCModel[a].Functionallocation,
						"Txtmi": AIWFLOCModel[a].Flocdescription, // Floc Description
						"TplkzFlc": AIWFLOCModel[a].Strucindicator,
						"Tplxt": AIWFLOCModel[a].StrucIndicatorDesc,
						"EditMask": AIWFLOCModel[a].EditMask,
						"Hierarchy": AIWFLOCModel[a].Hierarchy,
						"Fltyp": AIWFLOCModel[a].Floccategory,
						"Flttx": AIWFLOCModel[a].FlocCategoryDesc,
						"Swerk": AIWFLOCModel[a].Maintplant,
						"Plantname": AIWFLOCModel[a].MaintplantDesc,
						"StorFloc": AIWFLOCModel[a].Location, // Location
						"Locationdesc": AIWFLOCModel[a].Locationdesc, // Location Description
						"Abckzfloc": AIWFLOCModel[a].Abckz,
						"Abctx": AIWFLOCModel[a].Abctx,
						"Bukrsfloc": AIWFLOCModel[a].Bukrs,
						"Butxt": AIWFLOCModel[a].Butxt,
						"City": AIWFLOCModel[a].City,
						"KostFloc": AIWFLOCModel[a].Kostl, // Cost Center
						"KokrFloc": AIWFLOCModel[a].Kokrs, // ccPart1
						"Contareaname": AIWFLOCModel[a].Mctxt, // Name
						"PlntFloc": AIWFLOCModel[a].Werks, // Planning Plant
						"Planningplantdes": AIWFLOCModel[a].Planningplantdes, // Planning Plant Description
						"Ingrp": AIWFLOCModel[a].Ingrp, // Planner Group
						"Plannergrpdesc": AIWFLOCModel[a].Innam, // Planner Group Description
						"Arbplfloc": AIWFLOCModel[a].Arbpl, // Work Center
						// "Workcenterdesc" : AIWFLOCModel[a].Ktext, // Plant Work Center
						"Wergwfloc": AIWFLOCModel[a].WcWerks, // Name
						"Gewrkfloc": AIWFLOCModel[a].MainArbpl, // Main Work Center
						// "MainWcDesc" : AIWFLOCModel[a].MainKtext, // Work center Plant
						"MainWcPlant": AIWFLOCModel[a].MainWerks, // Work Center Description
						"Tplma": AIWFLOCModel[a].SupFunctionallocation, // Sup FuncLoc
						"Supflocdesc": AIWFLOCModel[a].SupFlocdescription, // Sup FlocDescription
						"BeberFl": AIWFLOCModel[a].BeberFl, // Plant Section
						"Fing": AIWFLOCModel[a].Fing, // Person responsible
						"Tele": AIWFLOCModel[a].Tele, // Phone
						"Submtiflo": AIWFLOCModel[a].ConstrType, // Construction Type
						"Constdesc": AIWFLOCModel[a].ConstructionDesc, // Construction Description
						"Eqart": AIWFLOCModel[a].TechnicalObjectTyp, // TechnicalObjectTyp
						"Eartx": AIWFLOCModel[a].Description, // TechnicalObjectTyp Description
						"Stattext": AIWFLOCModel[a].Stattext, // System Status
						"StsmFloc": AIWFLOCModel[a].StsmEqui, // Status Profile
						"Statproftxt": AIWFLOCModel[a].StsmEquiDesc, // Status Profile Description
						"UstwFloc": AIWFLOCModel[a].UstwEqui, // Status with Status Number
						"UswoFloc": AIWFLOCModel[a].UswoEqui, // Status without Status Number
						"UstaFloc": AIWFLOCModel[a].UstaEqui, // User Status
						"Adrnri": AIWFLOCModel[a].Adrnri,
						"Deact": AIWFLOCModel[a].Deact,
						"Type": AIWFLOCModel[a].viewParameter === "create" ? true : false,
						Modeldesc: AIWFLOCModel[a].Modeldesc,
						Modelref: AIWFLOCModel[a].Modelref,
						Modelrver: AIWFLOCModel[a].Modelrver,
						Modelext: AIWFLOCModel[a].Modelext,
						Modelname: AIWFLOCModel[a].Modelname,
						Modelver: AIWFLOCModel[a].Modelver,
					};
					sPayload.FuncLoc.push(sFuncLoc);

					var sFLAddr = {
						"Funcloc": AIWFLOCModel[a].Functionallocation,
						"Title": AIWFLOCModel[a].TitleCode,
						"Name1": AIWFLOCModel[a].Name1,
						"Name2": AIWFLOCModel[a].Name2,
						"Name3": AIWFLOCModel[a].Name3,
						"Name4": AIWFLOCModel[a].Name4,
						"Sort1": AIWFLOCModel[a].Sort1,
						"Sort2": AIWFLOCModel[a].Sort2,
						"NameCo": AIWFLOCModel[a].NameCo,
						"PostCod1": AIWFLOCModel[a].PostCod1,
						"City1": AIWFLOCModel[a].City1,
						"Building": AIWFLOCModel[a].Building,
						"Floor": AIWFLOCModel[a].Floor,
						"Roomnum": AIWFLOCModel[a].Roomnum,
						"Strsuppl1": AIWFLOCModel[a].Strsuppl1,
						"Strsuppl2": AIWFLOCModel[a].Strsuppl2,
						"Strsuppl3": AIWFLOCModel[a].Strsuppl3,
						"Location": AIWFLOCModel[a].AddrLocation,
						"RPostafl": AIWFLOCModel[a].RefPosta,
						"Landx": AIWFLOCModel[a].Landx,
						"TimeZone": AIWFLOCModel[a].TimeZone,
						"RPostFl": AIWFLOCModel[a].Region,
						"Regiotxt": AIWFLOCModel[a].RegionDesc
					};
					sPayload.FLAddr.push(sFLAddr);

					var aIntlAddr = AIWFLOCModel[a].intlAddr;
					if (aIntlAddr) {
						for (var z = 0; z < aIntlAddr.length; z++) {
							sPayload.FLAddrI.push(aIntlAddr[z]);
						}
					}

					if (g.AltLblDerv === "2" && AIWFLOCModel[a].altlbl) {
						for (var y = 0; y < AIWFLOCModel[a].altlbl.length; y++) {
							var oAltLbl = {
								"Funcloc": AIWFLOCModel[a].Functionallocation,
								"AltAlkey": AIWFLOCModel[a].altlbl[y].AltAlkey,
								"AltStrno": AIWFLOCModel[a].altlbl[y].AltStrno,
								"AltTplkz": AIWFLOCModel[a].altlbl[y].AltTplkz
							};
							sPayload.FLALTLBEL.push(oAltLbl);
						}
					}

					if (AIWFLOCModel[a].Floccategory === "L" && AIWFLOCModel[a].lam) {
						var sFLLAM = {
							"Funcloc": AIWFLOCModel[a].Functionallocation,
							"Lrpid": AIWFLOCModel[a].lam.Lrpid,
							"Strtptatr": AIWFLOCModel[a].lam.Strtptatr,
							"Endptatr": AIWFLOCModel[a].lam.Endptatr,
							"Length": AIWFLOCModel[a].lam.Length,
							"LinUnit": AIWFLOCModel[a].lam.LinUnit,
							"Startmrkr": AIWFLOCModel[a].lam.Startmrkr,
							"Endmrkr": AIWFLOCModel[a].lam.Endmrkr,
							"Mrkdisst": AIWFLOCModel[a].lam.Mrkdisst,
							"Mrkdisend": AIWFLOCModel[a].lam.Mrkdisend,
							"MrkrUnit": AIWFLOCModel[a].lam.MrkrUnit
						};
						sPayload.FLLAM.push(sFLLAM);
					}

					var sFLClassList = AIWFLOCModel[a].classItems;
					if (sFLClassList) {
						if (sFLClassList.length > 0) {
							for (var b = 0; b < sFLClassList.length; b++) {
								var sFLClass = {
									"Funcloc": AIWFLOCModel[a].Functionallocation,
									"Classtype": sFLClassList[b].Classtype,
									"Class": sFLClassList[b].Class,
									"Clstatus1": sFLClassList[b].Clstatus1
								};
								sPayload.FLClass.push(sFLClass);
							}
						}
					}

					var sFLCharList = AIWFLOCModel[a].characteristics;
					if (sFLCharList) {
						if (sFLCharList.length > 0) {
							for (var c = 0; c < sFLCharList.length; c++) {
								var sFLVal = {
									"Funcloc": AIWFLOCModel[a].Functionallocation,
									"Atnam": sFLCharList[c].Atnam,
									"Textbez": sFLCharList[c].Textbez,
									"Atwrt": sFLCharList[c].Atwrt,
									"Class": sFLCharList[c].Class
								};
								sPayload.FLVal.push(sFLVal);
							}
						}
					}
				}
			}

			if (AIWEQUIModel.length > 0) {
				for (var d = 0; d < AIWEQUIModel.length; d++) {
					var sEquipment = {
						"Herst": AIWEQUIModel[d].Herst, // Manufacturer
						"Equnr": AIWEQUIModel[d].Equnr,
						"Txtmi": AIWEQUIModel[d].Eqktx,
						//"Eqktx" : AIWEQUIModel[d].Eqktx,
						"Swerk": AIWEQUIModel[d].Maintplant,
						"Name1": AIWEQUIModel[d].MaintplantDesc,
						"TplnEilo": AIWEQUIModel[d].Tplnr,
						"Flocdescription": AIWEQUIModel[d].Pltxt,
						"Eqtyp": AIWEQUIModel[d].EquipmentCatogory,
						"Etytx": AIWEQUIModel[d].EquipCatgDescription,
						"Eqart": AIWEQUIModel[d].TechnicalObjectTyp, // TechnicalObjectTyp
						"Eartx": AIWEQUIModel[d].Description, // TechnicalObjectTyp Description
						"Typbz": AIWEQUIModel[d].Typbz, // Model Number
						"SubmEeqz": AIWEQUIModel[d].ConstrType, // Construction Type
						"Constdesc": AIWEQUIModel[d].ConstructionDesc, // Construction Description
						"BukrEilo": AIWEQUIModel[d].Bukrs,
						"Butxt": AIWEQUIModel[d].Butxt,
						"HequEeqz": AIWEQUIModel[d].SuperordinateEquip, // Superord. Equipment
						"SuperordEqDes": AIWEQUIModel[d].SuperordinateEquipDesc, // Superord. Equipment Description
						"TidnEeqz": AIWEQUIModel[d].TechIdNum, // techIndNo
						"KostEilo": AIWEQUIModel[d].Kostl, // Cost Center
						"KokrEilo": AIWEQUIModel[d].Kokrs, // ccPart1
						"Contareaname": AIWEQUIModel[d].Mctxt, // Name
						"StorEilo": AIWEQUIModel[d].Location,
						"Locationdesc": AIWEQUIModel[d].Locationdesc,
						"AbckEilo": AIWEQUIModel[d].Abckz,
						"Abctx": AIWEQUIModel[d].Abctx,
						"PplaEeqz": AIWEQUIModel[d].Werks, // Planning Plant
						"Planningplantdes": AIWEQUIModel[d].Planningplantdes, // Planning Plant Description
						"IngrEeqz": AIWEQUIModel[d].Ingrp, // Planner Group
						"Plannergrpdesc": AIWEQUIModel[d].Innam, // Planner Group Description
						"Serge": AIWEQUIModel[d].Serge, // manfSerNo
						"MapaEeqz": AIWEQUIModel[d].MapaEeqz, // partNum
						"Stattext": AIWEQUIModel[d].Stattext, // System Status
						"StsmEqui": AIWEQUIModel[d].StsmEqui, // Status Profile
						"Statproftxt": AIWEQUIModel[d].StsmEquiDesc, // Status Profile Description
						"UstwEqui": AIWEQUIModel[d].UstwEqui, // Status with Status Number
						"UswoEqui": AIWEQUIModel[d].UswoEqui, // Status without Status Number
						"UstaEqui": AIWEQUIModel[d].UstaEqui, // User Status
						"Deact": AIWEQUIModel[d].Deact,
						"Answt": AIWEQUIModel[d].Answt,
						"Ansdt": g._formatDate(AIWEQUIModel[d].Ansdt),
						"Waers": AIWEQUIModel[d].Waers, // Currency

						"ArbpEilo": AIWEQUIModel[d].Arbpl, // Work Center
						// "Workcenterdesc" : AIWEQUIModel[d].Ktext, // Plant Work Center
						"WorkCenterPlant": AIWEQUIModel[d].WcWerks, // Name
						"ArbpEeqz": AIWEQUIModel[d].MainArbpl, // Main Work Center
						// "MainWcDesc" : AIWEQUIModel[d].MainKtext, // Work Center Description
						"MainWcPlant": AIWEQUIModel[d].MainWerks, // Work center Plant

						"BebeEilo": AIWEQUIModel[d].BeberFl, // Plant Section
						"Fing": AIWEQUIModel[d].Fing, // Plant Section
						"Tele": AIWEQUIModel[d].Tele, // Plant Section
						"HeqnEeqz": AIWEQUIModel[d].EquipPosition, // Position
						"Adrnri": AIWEQUIModel[d].Adrnri,

						"Funcid": AIWEQUIModel[d].Funcid, // Config Control data
						"Frcfit": AIWEQUIModel[d].Frcfit,
						"Frcrmv": AIWEQUIModel[d].Frcrmv,
						"Modelid": "",

						Ppeguid: AIWEQUIModel[d].Ppeguid,
					};
					sPayload.Equipment.push(sEquipment);

					var sEqPRT = {
						"Equi": AIWEQUIModel[d].Equnr,
						"PlanvPrt": AIWEQUIModel[d].PlanvPrt,
						"SteufPrt": AIWEQUIModel[d].SteufPrt,
						"KtschPrt": AIWEQUIModel[d].KtschPrt,
						"Ewformprt": AIWEQUIModel[d].Ewformprt,
						"SteufRef": AIWEQUIModel[d].SteufRef,
						"KtschRef": AIWEQUIModel[d].KtschRef,
						"EwformRef": AIWEQUIModel[d].EwformRef
					};
					sPayload.EqPRT.push(sEqPRT);

					if (AIWEQUIModel[d].EquipmentCatogory === "L" && AIWEQUIModel[d].lam) {
						var sEqLAM = {
							"Equi": AIWEQUIModel[d].Equnr,
							"Lrpid": AIWEQUIModel[d].lam.Lrpid,
							"Strtptatr": AIWEQUIModel[d].lam.Strtptatr,
							"Endptatr": AIWEQUIModel[d].lam.Endptatr,
							"Length": AIWEQUIModel[d].lam.Length,
							"LinUnit": AIWEQUIModel[d].lam.LinUnit,
							"Startmrkr": AIWEQUIModel[d].lam.Startmrkr,
							"Endmrkr": AIWEQUIModel[d].lam.Endmrkr,
							"Mrkdisst": AIWEQUIModel[d].lam.Mrkdisst,
							"Mrkdisend": AIWEQUIModel[d].lam.Mrkdisend,
							"MrkrUnit": AIWEQUIModel[d].lam.MrkrUnit
						};
						sPayload.EqLAM.push(sEqLAM);
					}

					var sEqAddr = {
						"Equi": AIWEQUIModel[d].Equnr,
						"Title": AIWEQUIModel[d].TitleCode,
						"Name1": AIWEQUIModel[d].Name1,
						"Name2": AIWEQUIModel[d].Name2,
						"Name3": AIWEQUIModel[d].Name3,
						"Name4": AIWEQUIModel[d].Name4,
						"Sort1": AIWEQUIModel[d].Sort1,
						"Sort2": AIWEQUIModel[d].Sort2,
						"NameCo": AIWEQUIModel[d].NameCo,
						"PostCod1": AIWEQUIModel[d].PostCod1,
						"City1": AIWEQUIModel[d].City1,
						"Building": AIWEQUIModel[d].Building,
						"Floor": AIWEQUIModel[d].Floor,
						"Roomnum": AIWEQUIModel[d].Roomnum,
						"Strsuppl1": AIWEQUIModel[d].Strsuppl1,
						"Strsuppl2": AIWEQUIModel[d].Strsuppl2,
						"Strsuppl3": AIWEQUIModel[d].Strsuppl3,
						"Location": AIWEQUIModel[d].AddrLocation,
						"RefPosta": AIWEQUIModel[d].RefPosta,
						"Landx": AIWEQUIModel[d].Landx,
						"TimeZone": AIWEQUIModel[d].TimeZone,
						"RfePost": AIWEQUIModel[d].Region,
						"Regiotxt": AIWEQUIModel[d].RegionDesc
					};
					sPayload.EqAddr.push(sEqAddr);

					var aIntlAddrItems = AIWEQUIModel[d].intlAddr;
					if (aIntlAddrItems) {
						for (var z = 0; z < aIntlAddrItems.length; z++) {
							sPayload.EqAddrI.push(aIntlAddrItems[z]);
						}
					}

					if (AIWEQUIModel[d].dfps) {
						var oEqDFPS = {
							Equi: AIWEQUIModel[d].Equnr,
							DeviceId: AIWEQUIModel[d].dfps.Tailno,
							Topsiteid: AIWEQUIModel[d].dfps.Area,
							Topsitede: AIWEQUIModel[d].dfps.AreaDesc,
							AreaPro: AIWEQUIModel[d].dfps.AreaPrfl,
							SiteId: AIWEQUIModel[d].dfps.Site,
							SiteDesc: AIWEQUIModel[d].dfps.SiteDesc,
							SitePro: AIWEQUIModel[d].dfps.SitePrfl,
							MpoId: AIWEQUIModel[d].dfps.MPO,
							MpoDescr: AIWEQUIModel[d].dfps.MPODesc,
							RicId: AIWEQUIModel[d].dfps.RIC,
							RicDescr: AIWEQUIModel[d].dfps.RICDesc,
							ModelId: AIWEQUIModel[d].dfps.ModelId,
							ModelDes: AIWEQUIModel[d].dfps.ModelIdDesc,
							Foreignob: formatter.truetoX(AIWEQUIModel[d].dfps.ForeignEq),
							TecState: AIWEQUIModel[d].dfps.TechSts,
							DepState: AIWEQUIModel[d].dfps.OperSts,
							DfpsRmrk: AIWEQUIModel[d].dfps.Remark
						};
						sPayload.EqDFPS.push(oEqDFPS);
					}

					var sEqClassList = AIWEQUIModel[d].classItems;
					if (sEqClassList) {
						if (sEqClassList.length > 0) {
							for (var e = 0; e < sEqClassList.length; e++) {
								var sEqClass = {
									"Equi": AIWEQUIModel[d].Equnr,
									"Classtype": sEqClassList[e].Classtype,
									"Class": sEqClassList[e].Class,
									"Clstatus1": sEqClassList[e].Clstatus1
								};
								sPayload.EqClass.push(sEqClass);
							}
						}
					}

					var sEqCharList = AIWEQUIModel[d].characteristics;
					if (sEqCharList) {
						if (sEqCharList.length > 0) {
							for (var f = 0; f < sEqCharList.length; f++) {
								var sEqVal = {
									"Equi": AIWEQUIModel[d].Equnr,
									"Atnam": sEqCharList[f].Atnam,
									"Textbez": sEqCharList[f].Textbez,
									"Atwrt": sEqCharList[f].Atwrt,
									"Class": sEqCharList[f].Class
								};
								sPayload.EqVal.push(sEqVal);
							}
						}
					}

					var aAinMOP = sap.ui.getCore().getModel("ainMOP").getData();
					for (var z = 0; z < aAinMOP.length; z++) {
						if (sEquipment.Equnr === aAinMOP[z].key) {
							sEquipment.Modelid = aAinMOP[z].AIN.Modelid;
						}
					}
				}
			}

			if (AIWMSPTModel.length > 0) {
				for (var j = 0; j < AIWMSPTModel.length; j++) {
					var sMsPoint = {
						"Point": AIWMSPTModel[j].Mspoint,
						"Equnr": AIWMSPTModel[j].Equnr,
						"Eqktx": AIWMSPTModel[j].Eqktx,
						"Tplnr": AIWMSPTModel[j].Tplnr,
						"Floctxt": AIWMSPTModel[j].Pltxt,
						"Mptyp": AIWMSPTModel[j].Mptyp,
						"Mpttx": AIWMSPTModel[j].Mpttx,
						"Codgr": AIWMSPTModel[j].Codgr,
						"Codgrtxt": AIWMSPTModel[j].Codgrtxt,
						"ObtypMs": AIWMSPTModel[j].ObtypMs,
						"Objtypetxt": AIWMSPTModel[j].Txt,
						"AtnamMs": AIWMSPTModel[j].AtnamMs,
						"Atbez": AIWMSPTModel[j].Atbez,
						"Indct": AIWMSPTModel[j].Indct,
						"Cdsuf": AIWMSPTModel[j].Cdsuf,
						"Cjumc": AIWMSPTModel[j].Cjumc,
						"Desir": AIWMSPTModel[j].Desir,
						"Pyeac": AIWMSPTModel[j].Pyeac,
						"Mrmin": AIWMSPTModel[j].Mrmin,
						"Mrmax": AIWMSPTModel[j].Mrmax,
						"Pttxt": AIWMSPTModel[j].Pttxt,
						"Psort": AIWMSPTModel[j].Psort,
						"Inact": AIWMSPTModel[j].Inact,
						"Mseh6": AIWMSPTModel[j].Mseh6,
						"Msehl": AIWMSPTModel[j].Msehl,
						"Decim": AIWMSPTModel[j].Decim.toString(), //parseFloat(AIWMSPTModel[j].Decim),
						"Locas": AIWMSPTModel[j].Locas,
						"Maktx": AIWMSPTModel[j].Maktx,
						"Begru": AIWMSPTModel[j].Begru,
						"Begtx": AIWMSPTModel[j].Begtx,
						"Expon": AIWMSPTModel[j].Expon,
						"Mrngu": AIWMSPTModel[j].Mrngu,
						"Dstxt": AIWMSPTModel[j].Dstxt,
						"Indrv": AIWMSPTModel[j].Indrv,
						"Indtr": AIWMSPTModel[j].readTransfSel,
						"Trans": AIWMSPTModel[j].readTransf,
						// "Inact": AIWMSPTModel[j].Inact
					};
					sPayload.MSPoint.push(sMsPoint);

					if (AIWMSPTModel[j].Mptyp === "L" && AIWMSPTModel[j].lam) {
						var sMSLAM = {
							"Mspoint": AIWMSPTModel[j].Mspoint,
							"Lrpid": AIWMSPTModel[j].lam.Lrpid,
							"Strtptatr": AIWMSPTModel[j].lam.Strtptatr,
							"Endptatr": AIWMSPTModel[j].lam.Endptatr,
							"Length": AIWMSPTModel[j].lam.Length,
							"LinUnit": AIWMSPTModel[j].lam.LinUnit,
							"Startmrkr": AIWMSPTModel[j].lam.Startmrkr,
							"Endmrkr": AIWMSPTModel[j].lam.Endmrkr,
							"Mrkdisst": AIWMSPTModel[j].lam.Mrkdisst,
							"Mrkdisend": AIWMSPTModel[j].lam.Mrkdisend,
							"MrkrUnit": AIWMSPTModel[j].lam.MrkrUnit
						};
						sPayload.MSLAM.push(sMSLAM);
					}

					var sMsClassList = AIWMSPTModel[j].classItems;
					if (sMsClassList) {
						if (sMsClassList.length > 0) {
							for (var h = 0; h < sMsClassList.length; h++) {
								var sMsClass = {
									"Mspoint": AIWMSPTModel[j].Mspoint,
									"Classtype": sMsClassList[h].Classtype,
									"Class": sMsClassList[h].Class,
									"Clstatus1": sMsClassList[h].Clstatus1
								};
								sPayload.MSClass.push(sMsClass);
							}
						}
					}

					var sMsCharList = AIWMSPTModel[j].characteristics;
					if (sMsCharList) {
						if (sMsCharList.length > 0) {
							for (var i = 0; i < sMsCharList.length; i++) {
								var sMsVal = {
									"Mspoint": AIWMSPTModel[j].Mspoint,
									"Atnam": sMsCharList[i].Atnam,
									"Textbez": sMsCharList[i].Textbez,
									"Atwrt": sMsCharList[i].Atwrt,
									"Class": sMsCharList[i].Class
								};
								sPayload.MSVal.push(sMsVal);
							}
						}
					}
				}
			}

			if (AIWMPMIModel.length > 0) {
				for (var k = 0; k < AIWMPMIModel.length; k++) {
					var sMPLAN = {
						"Warpl": AIWMPMIModel[k].Warpl,
						"Abrho": AIWMPMIModel[k].Abrho,
						"Hunit": AIWMPMIModel[k].Hunit,
						"Mptyp": AIWMPMIModel[k].Mptyp,
						"Wptxt": AIWMPMIModel[k].Wptxt,
						"Stich": AIWMPMIModel[k].Stich.toString(),
						"Fabkl": AIWMPMIModel[k].Fabkl,
						"FabklDesc": AIWMPMIModel[k].FabklDesc,
						"Sfakt": AIWMPMIModel[k].Sfakt,
						"Andor": g.parseValue(AIWMPMIModel[k].Andor),
						"Mehrfach": g.parseValue(AIWMPMIModel[k].Mehrfach),
						"Strat": AIWMPMIModel[k].Strat,
						"StratDesc": AIWMPMIModel[k].StratDesc,
						"Wset": AIWMPMIModel[k].Wset,
						"Startdate": g._formatDate(AIWMPMIModel[k].Stadt),
						"Unitc": AIWMPMIModel[k].Unitc,
						"Szaeh": AIWMPMIModel[k].Szaeh,
						"PointStp": AIWMPMIModel[k].Mpcycleno,

						"Vspos": AIWMPMIModel[k].Vspos,
						"Topos": AIWMPMIModel[k].Topos,
						"Vsneg": AIWMPMIModel[k].Vsneg,
						"Toneg": AIWMPMIModel[k].Toneg,
						"Horiz": AIWMPMIModel[k].Horiz,
						"CallConf": AIWMPMIModel[k].CallConf,
						"PlanSort": AIWMPMIModel[k].PlanSort,
						"Begru": AIWMPMIModel[k].Begru,
						"InactMp": AIWMPMIModel[k].Deact
					};
					sPayload.MPLAN.push(sMPLAN);

					var sItem = AIWMPMIModel[k].itemModel;
					if (sItem) {
						for (var l = 0; l < sItem.length; l++) {
							var sMPItem = {
								"Mplan": AIWMPMIModel[k].Warpl,
								"Qmart": sItem[l].Qmart, // notif type
								"Qmartx": sItem[l].nTypeTxt, // notif type desc
								"PlntMi": sItem[l].Werks, // planning plant
								"Planningplantdes": sItem[l].Planningplantdes, // planning plant desc
								"IngrpMi": sItem[l].Ingrp, // planner grp
								"Plannergrpdesc": sItem[l].Innam, // planner grp desc
								"Pstxt": sItem[l].Pstxt, // maint item desc
								"WergwMi": sItem[l].WergwMi, // main wc desc
								"ArbpMi": sItem[l].ArbpMi, // main wc
								"Auart": sItem[l].Auart, // order type 
								"Ordertypedesc": sItem[l].oTypeTxt, // order type desc
								"Bautl": sItem[l].AsmblyOb, // assembly
								"Cycleseq": sItem[l].Cycleseq,
								"Equnr": sItem[l].Equnr, // equip
								"Equipdesc": sItem[l].Eqktx, // equip desc
								"TplnrMi": sItem[l].Tplnr, // floc
								"Flocdesc": sItem[l].Pltxt, // floc desc
								"Mitemnumb": sItem[l].Mitemnumb, // maint item 
								"PlnnrMi": sItem[l].PlnnrMi, // TL Type
								"PlntyMi": sItem[l].PlntyMi, // TL Group
								"PlnalMi": sItem[l].PlnalMi, // TL Counter
								SwerkMil: sItem[l].SwerkMil,
								// Name1 = "",
								StortMil: sItem[l].StortMil,
								// Locationdesc = "",
								MsgrpIl: sItem[l].MsgrpIl,
								BeberMil: sItem[l].BeberMil,
								Fing: sItem[l].Fing,
								ArbplIl: sItem[l].ArbplIl,
								// Workcenterdesc = "",
								AbckzIl: sItem[l].AbckzIl,
								// Abctx = "",
								EqfnrIl: sItem[l].EqfnrIl,
								BukrsMil: sItem[l].BukrsMil,
								Butxt: sItem[l].Butxt,
								City: sItem[l].City,
								Anln1Mil: sItem[l].Anln1Mil,
								// Txt50 = "",
								Anln2Mil: sItem[l].Anln2Mil,
								GsberIl: sItem[l].GsberIl,
								// Gtext = "",
								KostlMil: sItem[l].KostlMil,
								// Contareaname = "",
								KokrsMil: sItem[l].KokrsMil,
								Posid: sItem[l].Posid,
								// Post1 = "",
								AufnrIl: sItem[l].AufnrIl,
								// SettleOrdDesc = "",

							};
							sPayload.MPItem.push(sMPItem);

							if (sItem[l].lam) {
								var sMSLAM = {
									"Mplan": AIWMPMIModel[k].Warpl,
									"Mitemnumb": sItem[l].lam.Mitemnumb,
									"Lrpid": sItem[l].lam.Lrpid,
									"Strtptatr": sItem[l].lam.Strtptatr,
									"Endptatr": sItem[l].lam.Endptatr,
									"Length": sItem[l].lam.Length,
									"LinUnit": sItem[l].lam.LinUnit,
									"Startmrkr": sItem[l].lam.Startmrkr,
									"Endmrkr": sItem[l].lam.Endmrkr,
									"Mrkdisst": sItem[l].lam.Mrkdisst,
									"Mrkdisend": sItem[l].lam.Mrkdisend,
									"MrkrUnit": sItem[l].lam.MrkrUnit
								};
								sPayload.MPLAM.push(sMSLAM);
							}
						}
					}

					var sCycle = AIWMPMIModel[k].cycleModel;
					if (sCycle) {
						for (var m = 0; m < sCycle.length; m++) {
							var sMPCycle = {
								"Mplan": AIWMPMIModel[k].Warpl,
								"Point": sCycle[m].Point,
								"PointTxt": sCycle[m].Psort,
								"Offset": sCycle[m].Offset,
								"Ofsetunit": sCycle[m].Ofsetunit,
								"PakText": sCycle[m].PakText,
								"Zeieh": sCycle[m].Zeieh,
								"Zykl1": sCycle[m].Zykl1,
								"Cycleseqi": sCycle[m].Cycleseqi,
								"Mpcycleno": sCycle[m].Mpcycleno
							};
							sPayload.MPCycle.push(sMPCycle);
						}
					}

					var sObjListItem = AIWMPMIModel[k].ObjListItems;
					if (sObjListItem) {
						for (var z = 0; z < sObjListItem.length; z++) {
							var oOLI = {
								"AsmblyOb": sObjListItem[z].AsmblyOb,
								"EquiObj": sObjListItem[z].EquiObj,
								"FlocObj": sObjListItem[z].FlocObj,
								"MatnrObj": sObjListItem[z].MatnrObj,
								"Mitemnumb": sObjListItem[z].Mitemnumb,
								"Mplan": sObjListItem[z].Warpl
							};
							sPayload.MPOBList.push(oOLI);
						}
					}

					var sMsClassList = AIWMPMIModel[k].classItems;
					if (sMsClassList) {
						if (sMsClassList.length > 0) {
							for (var h = 0; h < sMsClassList.length; h++) {
								var sMsClass = {
									"Mplan": AIWMPMIModel[k].Warpl,
									"Classtype": sMsClassList[h].Classtype,
									"Class": sMsClassList[h].Class,
									"Clstatus1": sMsClassList[h].Clstatus1
								};
								sPayload.ClassMpl.push(sMsClass);
							}
						}
					}

					var sMsCharList = AIWMPMIModel[k].characteristics;
					if (sMsCharList) {
						if (sMsCharList.length > 0) {
							for (var i = 0; i < sMsCharList.length; i++) {
								var sMsVal = {
									"Mplan": AIWMPMIModel[k].Warpl,
									"Atnam": sMsCharList[i].Atnam,
									"Textbez": sMsCharList[i].Textbez,
									"Atwrt": sMsCharList[i].Atwrt,
									"Class": sMsCharList[i].Class
								};
								sPayload.ValuaMpl.push(sMsVal);
							}
						}
					}
				}
			}

			if (AIWListMatData.length > 0) {
				for (var i = 0; i < AIWListMatData.length; i++) {
					var mHeader = {
						"Matnr": AIWListMatData[i].Matnr,
						"Stalt": AIWListMatData[i].Stalt,
						"Stlan": AIWListMatData[i].Stlan,
						"Werks": AIWListMatData[i].Werks,
						"Pmbomtech": AIWListMatData[i].Pmbomtech ? AIWListMatData[i].Pmbomtech : "",
						"PmbomtechTxt": AIWListMatData[i].PmbomtechTxt ? AIWListMatData[i].PmbomtechTxt : "",
						"Bomstatus": AIWListMatData[i].Bomstatus,
						"Lngtxt": AIWListMatData[i].Lngtxt,
						"Txtmi": AIWListMatData[i].Lngtxt,
						"Validfrom": this._formatDate(AIWListMatData[i].Validfrom),
						"Baseqty": AIWListMatData[i].BaseQty,
						"Baseuom": AIWListMatData[i].BaseUom,
						"Validtoda": this._formatDate(AIWListMatData[i].Validtoda)
					};
					sPayload.MRBHeader.push(mHeader);

					if (AIWListMatData[i].matItem) {
						for (var j = 0; j < AIWListMatData[i].matItem.length; j++) {
							var mItem = {
								"Matnr": AIWListMatData[i].Matnr,
								"Stlan": AIWListMatData[i].Stlan,
								"Werks": AIWListMatData[i].Werks,
								//"Bomitmnod": AIWListMatData[i].Bomitmnod, //13.08
								"Bomitmpos": AIWListMatData[i].matItem[j].Bomitmpos,
								"Itemcat": AIWListMatData[i].matItem[j].Itemcat,
								"Itemcomp": AIWListMatData[i].matItem[j].Itemcomp,
								"Compdesc": "",
								"Itmqty": AIWListMatData[i].matItem[j].Itmqty,
								"Itmuom": AIWListMatData[i].matItem[j].Itmuom,
								"Recurallo": AIWListMatData[i].matItem[j].Recurallo,
								"Erskz": AIWListMatData[i].matItem[j].Erskz,
								"Rvrel": AIWListMatData[i].matItem[j].Rvrel === "0" ? "" : AIWListMatData[i].matItem[j].Rvrel,
								"Sanfe": AIWListMatData[i].matItem[j].Sanfe,
								"Sanin": AIWListMatData[i].matItem[j].Sanin,
								"Sanko": AIWListMatData[i].matItem[j].Sanko,
								"Itmcmpdesc": AIWListMatData[i].matItem[j].Itmcmpdesc,
								"Costgrelv": AIWListMatData[i].matItem[j].Costgrelv === "0" ? "" : AIWListMatData[i].matItem[j].Costgrelv,
							};
							if (AIWListMatData[i].bomType === "Change") {
								mItem.Bomitmnod = AIWListMatData[i].matItem[j].Bomitmnod;
							}
							if (AIWListMatData[i].matItem[j].Itemcat === "N") {
								mItem.Ekorg = AIWListMatData[i].matItem[j].Ekorg;
								mItem.Ekotx = AIWListMatData[i].matItem[j].Ekotx;
								mItem.Ekgrp = AIWListMatData[i].matItem[j].Ekgrp;
								mItem.Eknam = AIWListMatData[i].matItem[j].Eknam;
								mItem.Preis = AIWListMatData[i].matItem[j].Preis;
								mItem.Waers = AIWListMatData[i].matItem[j].Waers;
								mItem.Peinh = AIWListMatData[i].matItem[j].Peinh;
								mItem.Matkl = AIWListMatData[i].matItem[j].Matkl;
								mItem.Wgbez = AIWListMatData[i].matItem[j].Wgbez;
								mItem.Potx1 = AIWListMatData[i].matItem[j].Potx1;
							} else if (AIWListMatData[i].matItem[j].Itemcat === "D") {
								mItem.Bomdocitm = AIWListMatData[i].matItem[j].Bomdocitm;
								mItem.Bomitmdkr = AIWListMatData[i].matItem[j].Bomitmdkr;
								mItem.BomitmdkrTxt = AIWListMatData[i].matItem[j].BomitmdkrTxt;
								mItem.Bomitmdtl = AIWListMatData[i].matItem[j].Bomitmdtl;
								mItem.Bomitmdvr = AIWListMatData[i].matItem[j].Bomitmdvr;
							} else if (AIWListMatData[i].matItem[j].Itemcat === "R") {
								mItem.Roms1 = AIWListMatData[i].matItem[j].Roms1;
								mItem.Romei = AIWListMatData[i].matItem[j].Romei;
								mItem.Roms2 = AIWListMatData[i].matItem[j].Roms2;
								mItem.Roms3 = AIWListMatData[i].matItem[j].Roms3;
								mItem.Rform = AIWListMatData[i].matItem[j].Rform;
								// mItem.FrmlaKeyDesc = AIWListMatData[i].matItem[j].Itemcat;
								mItem.Roanz = AIWListMatData[i].matItem[j].Roanz;
								// mItem.numVarSizeDesc = AIWListMatData[i].matItem[j].Itemcat;
								mItem.Romen = AIWListMatData[i].matItem[j].Romen;
								mItem.Rokme = AIWListMatData[i].matItem[j].Rokme;
							} else if (AIWListMatData[i].matItem[j].Itemcat === "T") {
								mItem.Potx1 = AIWListMatData[i].matItem[j].Potx1;
							}
							sPayload.MRBItem.push(mItem);
						}
					}

					if (AIWListMatData[i].matSubItem) {
						for (var k = 0; k < AIWListMatData[i].matSubItem.length; k++) {
							var mSubItem = {
								"Matnr": AIWListMatData[i].Matnr,
								"Stlan": AIWListMatData[i].Stlan,
								"Werks": AIWListMatData[i].Werks,
								"Posnr": AIWListMatData[i].matSubItem[k].Posnr,
								"Bomitmnod": AIWListMatData[i].matSubItem[k].Bomitmnod,
								"Bomsubno": AIWListMatData[i].matSubItem[k].Bomsubno,
								"Ebort": AIWListMatData[i].matSubItem[k].Ebort,
								"Upmng": AIWListMatData[i].matSubItem[k].Upmng,
								"Uptxt": AIWListMatData[i].matSubItem[k].Uptxt
							};
							sPayload.MRBSBIT.push(mSubItem);
						}
					}
				}
			}

			if (AIWListEqData.length > 0) {
				for (var i = 0; i < AIWListEqData.length; i++) {
					var eHeader = {
						"Eqnrbom": AIWListEqData[i].Eqnrbom,
						//"Stalt": "",
						"Stlan": AIWListEqData[i].Stlan,
						"Werks": AIWListEqData[i].Werks,
						"Bomstatus": AIWListEqData[i].Bomstatus,
						"Lngtxt": AIWListEqData[i].Lngtxt,
						"Txtmi": AIWListEqData[i].Lngtxt,
						"Validfrom": this._formatDate(AIWListEqData[i].Validfrom),
						"Baseqty": AIWListEqData[i].BaseQty,
						"Baseuom": AIWListEqData[i].BaseUom,
						"Validtoda": this._formatDate(AIWListEqData[i].Validtoda)
					};
					sPayload.EBHeader.push(eHeader);

					if (AIWListEqData[i].eqItem) {
						for (var j = 0; j < AIWListEqData[i].eqItem.length; j++) {
							var eItem = {
								"Eqnrbom": AIWListEqData[i].Eqnrbom,
								"Stlan": AIWListEqData[i].Stlan,
								"Werks": AIWListEqData[i].Werks,
								"Bomitmpos": AIWListEqData[i].eqItem[j].Bomitmpos,
								"Itemcat": AIWListEqData[i].eqItem[j].Itemcat,
								"Itemcomp": AIWListEqData[i].eqItem[j].Itemcomp,
								"Compdesc": "",
								"Itmqty": AIWListEqData[i].eqItem[j].Itmqty,
								"Itmuom": AIWListEqData[i].eqItem[j].Itmuom,
								"Recurallo": AIWListEqData[i].eqItem[j].Recurallo,
								"Erskz": AIWListEqData[i].eqItem[j].Erskz,
								"Rvrel": AIWListEqData[i].eqItem[j].Rvrel === "0" ? "" : AIWListEqData[i].eqItem[j].Rvrel,
								"Sanfe": AIWListEqData[i].eqItem[j].Sanfe,
								"Sanin": AIWListEqData[i].eqItem[j].Sanin,
								"Sanko": AIWListEqData[i].eqItem[j].Sanko,
								"Itmcmpdesc": AIWListEqData[i].eqItem[j].Itmcmpdesc,
								"Costgrelv": AIWListEqData[i].eqItem[j].Costgrelv === "0" ? "" : AIWListEqData[i].eqItem[j].Costgrelv
							};
							if (AIWListEqData[i].bomType === "Change") {
								eItem.Bomitmnod = AIWListEqData[i].eqItem[j].Bomitmnod;
							}
							if (AIWListEqData[i].eqItem[j].Itemcat === "N") {
								eItem.Ekorg = AIWListEqData[i].eqItem[j].Ekorg;
								eItem.Ekotx = AIWListEqData[i].eqItem[j].Ekotx;
								eItem.Ekgrp = AIWListEqData[i].eqItem[j].Ekgrp;
								eItem.Eknam = AIWListEqData[i].eqItem[j].Eknam;
								eItem.Preis = AIWListEqData[i].eqItem[j].Preis;
								eItem.Waers = AIWListEqData[i].eqItem[j].Waers;
								eItem.Peinh = AIWListEqData[i].eqItem[j].Peinh;
								eItem.Matkl = AIWListEqData[i].eqItem[j].Matkl;
								eItem.Wgbez = AIWListEqData[i].eqItem[j].Wgbez;
								eItem.Potx1 = AIWListEqData[i].eqItem[j].Potx1;
							} else if (AIWListEqData[i].eqItem[j].Itemcat === "D") {
								eItem.Bomdocitm = AIWListEqData[i].eqItem[j].Bomdocitm;
								eItem.Bomitmdkr = AIWListEqData[i].eqItem[j].Bomitmdkr;
								eItem.BomitmdkrTxt = AIWListEqData[i].eqItem[j].BomitmdkrTxt;
								eItem.Bomitmdtl = AIWListEqData[i].eqItem[j].Bomitmdtl;
								eItem.Bomitmdvr = AIWListEqData[i].eqItem[j].Bomitmdvr;
							} else if (AIWListEqData[i].eqItem[j].Itemcat === "R") {
								eItem.Roms1 = AIWListEqData[i].eqItem[j].Roms1;
								eItem.Romei = AIWListEqData[i].eqItem[j].Romei;
								eItem.Roms2 = AIWListEqData[i].eqItem[j].Roms2;
								eItem.Roms3 = AIWListEqData[i].eqItem[j].Roms3;
								eItem.Rform = AIWListEqData[i].eqItem[j].Rform;
								// eItem.FrmlaKeyDesc = AIWListEqData[i].eqItem[j].Itemcat;
								eItem.Roanz = AIWListEqData[i].eqItem[j].Roanz;
								// eItem.numVarSizeDesc = AIWListEqData[i].eqItem[j].Itemcat;
								eItem.Romen = AIWListEqData[i].eqItem[j].Romen;
								eItem.Rokme = AIWListEqData[i].eqItem[j].Rokme;
							} else if (AIWListEqData[i].eqItem[j].Itemcat === "T") {
								eItem.Potx1 = AIWListEqData[i].eqItem[j].Potx1;
							}
							sPayload.EBItem.push(eItem);
						}
					}

					if (AIWListEqData[i].eqSubItem) {
						for (var k = 0; k < AIWListEqData[i].eqSubItem.length; k++) {
							var eSubItem = {
								"Eqnrbom": AIWListEqData[i].Eqnrbom,
								"Stlan": AIWListEqData[i].Stlan,
								"Werks": AIWListEqData[i].Werks,
								"Posnr": AIWListEqData[i].eqSubItem[k].Posnr,
								"Bomitmnod": AIWListEqData[i].eqSubItem[k].Bomitmnod,
								"Bomsubno": AIWListEqData[i].eqSubItem[k].Bomsubno,
								"Ebort": AIWListEqData[i].eqSubItem[k].Ebort,
								"Upmng": AIWListEqData[i].eqSubItem[k].Upmng,
								"Uptxt": AIWListEqData[i].eqSubItem[k].Uptxt
							};
							sPayload.EBSBIT.push(eSubItem);
						}
					}
				}
			}

			if (AIWListFLData.length > 0) {
				for (var i = 0; i < AIWListFLData.length; i++) {
					var flHeader = {
						"Tplnrbom": AIWListFLData[i].Tplnrbom,
						"Stlan": AIWListFLData[i].Stlan,
						"Werks": AIWListFLData[i].Werks,
						"Bomstatus": AIWListFLData[i].Bomstatus,
						"Lngtxt": AIWListFLData[i].Lngtxt,
						"Txtmi": AIWListFLData[i].Lngtxt,
						"Validfrom": this._formatDate(AIWListFLData[i].Validfrom),
						"Baseqty": AIWListFLData[i].BaseQty,
						"Baseuom": AIWListFLData[i].BaseUom,
						"Validtoda": this._formatDate(AIWListFLData[i].Validtoda)
							//"Stalt": ""
					};
					sPayload.FBHeader.push(flHeader);

					if (AIWListFLData[i].flItem) {
						for (var j = 0; j < AIWListFLData[i].flItem.length; j++) {
							var flItem = {
								"Tplnrbom": AIWListFLData[i].Tplnrbom,
								"Stlan": AIWListFLData[i].Stlan,
								"Werks": AIWListFLData[i].Werks,
								"Bomitmpos": AIWListFLData[i].flItem[j].Bomitmpos,
								"Itemcat": AIWListFLData[i].flItem[j].Itemcat,
								"Itemcomp": AIWListFLData[i].flItem[j].Itemcomp,
								"Compdesc": "",
								"Itmqty": AIWListFLData[i].flItem[j].Itmqty,
								"Itmuom": AIWListFLData[i].flItem[j].Itmuom,
								"Recurallo": AIWListFLData[i].flItem[j].Recurallo,
								"Erskz": AIWListFLData[i].flItem[j].Erskz,
								"Rvrel": AIWListFLData[i].flItem[j].Rvrel === "0" ? "" : AIWListFLData[i].flItem[j].Rvrel,
								"Sanfe": AIWListFLData[i].flItem[j].Sanfe,
								"Sanin": AIWListFLData[i].flItem[j].Sanin,
								"Sanko": AIWListFLData[i].flItem[j].Sanko,
								"Itmcmpdesc": AIWListFLData[i].flItem[j].Itmcmpdesc,
								"Costgrelv": AIWListFLData[i].flItem[j].Costgrelv === "0" ? "" : AIWListFLData[i].flItem[j].Costgrelv
							};
							if (AIWListFLData[i].bomType === "Change") { //13.08
								flItem.Bomitmnod = AIWListFLData[i].flItem[j].Bomitmnod;
							}
							if (AIWListFLData[i].flItem[j].Itemcat === "N") {
								flItem.Ekorg = AIWListFLData[i].flItem[j].Ekorg;
								flItem.Ekotx = AIWListFLData[i].flItem[j].Ekotx;
								flItem.Ekgrp = AIWListFLData[i].flItem[j].Ekgrp;
								flItem.Eknam = AIWListFLData[i].flItem[j].Eknam;
								flItem.Preis = AIWListFLData[i].flItem[j].Preis;
								flItem.Waers = AIWListFLData[i].flItem[j].Waers;
								flItem.Peinh = AIWListFLData[i].flItem[j].Peinh;
								flItem.Matkl = AIWListFLData[i].flItem[j].Matkl;
								flItem.Wgbez = AIWListFLData[i].flItem[j].Wgbez;
								flItem.Potx1 = AIWListFLData[i].flItem[j].Potx1;
							} else if (AIWListFLData[i].flItem[j].Itemcat === "D") {
								flItem.Bomdocitm = AIWListFLData[i].flItem[j].Bomdocitm;
								flItem.Bomitmdkr = AIWListFLData[i].flItem[j].Bomitmdkr;
								flItem.BomitmdkrTxt = AIWListFLData[i].flItem[j].BomitmdkrTxt;
								flItem.Bomitmdtl = AIWListFLData[i].flItem[j].Bomitmdtl;
								flItem.Bomitmdvr = AIWListFLData[i].flItem[j].Bomitmdvr;
							} else if (AIWListFLData[i].flItem[j].Itemcat === "R") {
								flItem.Roms1 = AIWListFLData[i].flItem[j].Roms1;
								flItem.Romei = AIWListFLData[i].flItem[j].Romei;
								flItem.Roms2 = AIWListFLData[i].flItem[j].Roms2;
								flItem.Roms3 = AIWListFLData[i].flItem[j].Roms3;
								flItem.Rform = AIWListFLData[i].flItem[j].Rform;
								// flItem.FrmlaKeyDesc = AIWListFLData[i].flItem[j].Itemcat;
								flItem.Roanz = AIWListFLData[i].flItem[j].Roanz;
								// flItem.numVarSizeDesc = AIWListFLData[i].flItem[j].Itemcat;
								flItem.Romen = AIWListFLData[i].flItem[j].Romen;
								flItem.Rokme = AIWListFLData[i].flItem[j].Rokme;
							} else if (AIWListFLData[i].flItem[j].Itemcat === "T") {
								flItem.Potx1 = AIWListFLData[i].flItem[j].Potx1;
							}
							sPayload.FBItem.push(flItem);
						}
					}

					if (AIWListFLData[i].flSubItem) {
						for (var k = 0; k < AIWListFLData[i].flSubItem.length; k++) {
							var flSubItem = {
								"Tplnrbom": AIWListFLData[i].Tplnrbom,
								"Stlan": AIWListFLData[i].Stlan,
								"Werks": AIWListFLData[i].Werks,
								"Posnr": AIWListFLData[i].flSubItem[k].Posnr,
								"Bomitmnod": AIWListFLData[i].flSubItem[k].Bomitmnod,
								"Bomsubno": AIWListFLData[i].flSubItem[k].Bomsubno,
								"Ebort": AIWListFLData[i].flSubItem[k].Ebort,
								"Upmng": AIWListFLData[i].flSubItem[k].Upmng,
								"Uptxt": AIWListFLData[i].flSubItem[k].Uptxt
							};
							sPayload.FBSBIT.push(flSubItem);
						}
					}
				}
			}

			if (AIWListWBSData.length > 0) {
				for (var i = 0; i < AIWListWBSData.length; i++) {
					var wbsHeader = {
						"WbsExt": AIWListWBSData[i].WbsExt,
						"MatnrWbs": AIWListWBSData[i].Matnr,
						"Stlan": AIWListWBSData[i].Stlan,
						"Werks": AIWListWBSData[i].Werks,
						"Bomstatus": AIWListWBSData[i].Bomstatus,
						"Lngtxt": AIWListWBSData[i].Lngtxt,
						"Txtmi": AIWListWBSData[i].Lngtxt,
						"Validfrom": this._formatDate(AIWListWBSData[i].Validfrom),
						"Baseqty": AIWListWBSData[i].BaseQty,
						"Baseuom": AIWListWBSData[i].BaseUom,
						"Validtoda": this._formatDate(AIWListWBSData[i].Validtoda)
							//"Stalt": ""
					};
					sPayload.WBHeader.push(wbsHeader);

					if (AIWListWBSData[i].wbsItem) {
						for (var j = 0; j < AIWListWBSData[i].wbsItem.length; j++) {
							var wbsItem = {
								"WbsExt": AIWListWBSData[i].WbsExt,
								"MatnrWbs": AIWListWBSData[i].Matnr,
								"Stlan": AIWListWBSData[i].Stlan,
								"Werks": AIWListWBSData[i].Werks,
								"Bomitmpos": AIWListWBSData[i].wbsItem[j].Bomitmpos,
								"Itemcat": AIWListWBSData[i].wbsItem[j].Itemcat,
								"Itemcomp": AIWListWBSData[i].wbsItem[j].Itemcomp,
								"Compdesc": "",
								"Itmqty": AIWListWBSData[i].wbsItem[j].Itmqty,
								"Itmuom": AIWListWBSData[i].wbsItem[j].Itmuom,
								"Recurallo": AIWListWBSData[i].wbsItem[j].Recurallo,
								"Erskz": AIWListWBSData[i].wbsItem[j].Erskz,
								"Rvrel": AIWListWBSData[i].wbsItem[j].Rvrel === "0" ? "" : AIWListWBSData[i].wbsItem[j].Rvrel,
								"Sanfe": AIWListWBSData[i].wbsItem[j].Sanfe,
								"Sanin": AIWListWBSData[i].wbsItem[j].Sanin,
								"Sanko": AIWListWBSData[i].wbsItem[j].Sanko,
								"Itmcmpdesc": AIWListWBSData[i].wbsItem[j].Itmcmpdesc,
								"Costgrelv": AIWListWBSData[i].wbsItem[j].Costgrelv === "0" ? "" : AIWListWBSData[i].wbsItem[j].Costgrelv
							};
							if (AIWListWBSData[i].bomType === "Change") { //13.08
								wbsItem.Bomitmnod = AIWListWBSData[i].wbsItem[j].Bomitmnod;
							}
							if (AIWListWBSData[i].wbsItem[j].Itemcat === "N") {
								wbsItem.Ekorg = AIWListWBSData[i].wbsItem[j].Ekorg;
								wbsItem.Ekotx = AIWListWBSData[i].wbsItem[j].Ekotx;
								wbsItem.Ekgrp = AIWListWBSData[i].wbsItem[j].Ekgrp;
								wbsItem.Eknam = AIWListWBSData[i].wbsItem[j].Eknam;
								wbsItem.Preis = AIWListWBSData[i].wbsItem[j].Preis;
								wbsItem.Waers = AIWListWBSData[i].wbsItem[j].Waers;
								wbsItem.Peinh = AIWListWBSData[i].wbsItem[j].Peinh;
								wbsItem.Matkl = AIWListWBSData[i].wbsItem[j].Matkl;
								wbsItem.Wgbez = AIWListWBSData[i].wbsItem[j].Wgbez;
								wbsItem.Potx1 = AIWListWBSData[i].wbsItem[j].Potx1;
							} else if (AIWListWBSData[i].wbsItem[j].Itemcat === "D") {
								wbsItem.Bomdocitm = AIWListWBSData[i].wbsItem[j].Bomdocitm;
								wbsItem.Bomitmdkr = AIWListWBSData[i].wbsItem[j].Bomitmdkr;
								wbsItem.BomitmdkrTxt = AIWListWBSData[i].wbsItem[j].BomitmdkrTxt;
								wbsItem.Bomitmdtl = AIWListWBSData[i].wbsItem[j].Bomitmdtl;
								wbsItem.Bomitmdvr = AIWListWBSData[i].wbsItem[j].Bomitmdvr;
							} else if (AIWListWBSData[i].wbsItem[j].Itemcat === "R") {
								wbsItem.Roms1 = AIWListWBSData[i].wbsItem[j].Roms1;
								wbsItem.Romei = AIWListWBSData[i].wbsItem[j].Romei;
								wbsItem.Roms2 = AIWListWBSData[i].wbsItem[j].Roms2;
								wbsItem.Roms3 = AIWListWBSData[i].wbsItem[j].Roms3;
								wbsItem.Rform = AIWListWBSData[i].wbsItem[j].Rform;
								// wbsItem.FrmlaKeyDesc = AIWListWBSData[i].wbsItem[j].Itemcat;
								wbsItem.Roanz = AIWListWBSData[i].wbsItem[j].Roanz;
								// wbsItem.numVarSizeDesc = AIWListWBSData[i].wbsItem[j].Itemcat;
								wbsItem.Romen = AIWListWBSData[i].wbsItem[j].Romen;
								wbsItem.Rokme = AIWListWBSData[i].wbsItem[j].Rokme;
							} else if (AIWListWBSData[i].wbsItem[j].Itemcat === "T") {
								wbsItem.Potx1 = AIWListWBSData[i].wbsItem[j].Potx1;
							}
							sPayload.WBItem.push(wbsItem);
						}
					}

					if (AIWListWBSData[i].wbsSubItem) {
						for (var k = 0; k < AIWListWBSData[i].wbsSubItem.length; k++) {
							var wbsSubItem = {
								"WbsExt": AIWListWBSData[i].WbsExt,
								"MatnrWbs": AIWListWBSData[i].Matnr,
								"Stlan": AIWListWBSData[i].Stlan,
								"Werks": AIWListWBSData[i].Werks,
								"Posnr": AIWListWBSData[i].wbsSubItem[k].Posnr,
								"Bomitmnod": AIWListWBSData[i].wbsSubItem[k].Bomitmnod,
								"Bomsubno": AIWListWBSData[i].wbsSubItem[k].Bomsubno,
								"Ebort": AIWListWBSData[i].wbsSubItem[k].Ebort,
								"Upmng": AIWListWBSData[i].wbsSubItem[k].Upmng,
								"Uptxt": AIWListWBSData[i].wbsSubItem[k].Uptxt
							};
							sPayload.WBSBIT.push(wbsSubItem);
						}
					}
				}
			}

			if (AIWListONData.length > 0) {
				for (var i = 0; i < AIWListONData.length; i++) {
					var onNetwork = {
						"Objnetwrk": AIWListONData[i].Objnetwrk,
						"Netgrp": AIWListONData[i].Netgrp,
						"Netwtyp": AIWListONData[i].Netwtyp,
						"Netxt": AIWListONData[i].Netxt,
						"Ntobjtyp": AIWListONData[i].Ntobjtyp
					};
					sPayload.ONetwork.push(onNetwork);

					if (AIWListONData[i].lam) {
						var onLAM = {
							"Objnetwrk": AIWListONData[i].Objnetwrk,
							"Lrpid": AIWListONData[i].lam.Lrpid,
							"Strtptatr": AIWListONData[i].lam.Strtptatr,
							"Endptatr": AIWListONData[i].lam.Endptatr,
							"Length": AIWListONData[i].lam.Length,
							"LinUnit": AIWListONData[i].lam.LinUnit,
							"Startmrkr": AIWListONData[i].lam.Startmrkr,
							"Endmrkr": AIWListONData[i].lam.Endmrkr,
							"Mrkdisst": AIWListONData[i].lam.Mrkdisst,
							"Mrkdisend": AIWListONData[i].lam.Mrkdisend,
							"MrkrUnit": AIWListONData[i].lam.MrkrUnit
						};
						sPayload.ONLAM.push(onLAM);
					}
				}
			}

			if (AIWListWCData.length > 0) {
				for (var i = 0; i < AIWListWCData.length; i++) {
					var mHeader = {
						"Werks": AIWListWCData[i].plant,
						"Arbpl": AIWListWCData[i].wc,
						"Txtmi": AIWListWCData[i].wcDesc,
						"Verwe": AIWListWCData[i].wcCat,
						"Crveran": AIWListWCData[i].person,
						"Planv": AIWListWCData[i].usg,
						"Vgwts": AIWListWCData[i].stdVal,
						"Crsteus": AIWListWCData[i].ctrlKey
					};
					if (AIWListWCData[i].hasOwnProperty("Type")) {
						if (AIWListWCData[i].Type === "X") {
							mHeader.Type = "X";
						}
					}
					sPayload.Workcenter.push(mHeader);

					if (AIWListWCData[i].cost) {
						for (var j = 0; j < AIWListWCData[i].cost.length; j++) {
							var mCost = {
								"Werks": AIWListWCData[i].cost[j].CrKokrs,
								"Arbpl": AIWListWCData[i].wc,
								"CrKostl": AIWListWCData[i].cost[j].CrKostl,
								"Costcentxt": AIWListWCData[i].cost[j].Costcentxt,
								"CrLstar": AIWListWCData[i].cost[j].CrLstar,
								"Forn1": AIWListWCData[i].cost[j].Forn1,
								"ActvttypeTxt": AIWListWCData[i].cost[j].ActvttypeTxt,
								"Frmltxt": AIWListWCData[i].cost[j].Frmltxt
							};
							sPayload.WCCost.push(mCost);
						}
					}

					var sWCClassList = AIWListWCData[i].classItems;
					if (sWCClassList) {
						if (sWCClassList.length > 0) {
							for (var e = 0; e < sWCClassList.length; e++) {
								var sWCClass = {
									"Arbpl": AIWListWCData[i].wc,
									"Werks": AIWListWCData[i].plant,
									"Classtype": sWCClassList[e].Classtype,
									"Class": sWCClassList[e].Class,
									// "Clstatus1": sWCClassList[e].Clstatus1
								};
								sPayload.ClassWC.push(sWCClass);
							}
						}
					}

					var sWCCharList = AIWListWCData[i].characteristics;
					if (sWCCharList) {
						if (sWCCharList.length > 0) {
							for (var f = 0; f < sWCCharList.length; f++) {
								var sWCVal = {
									"Arbpl": AIWListWCData[i].wc,
									"Werks": AIWListWCData[i].plant,
									"Atnam": sWCCharList[f].Atnam,
									"Textbez": sWCCharList[f].Textbez,
									"Atwrt": sWCCharList[f].Atwrt,
									"Class": sWCCharList[f].Class
								};
								sPayload.ValueWC.push(sWCVal);
							}
						}
					}

				}
			}

			if (AIWListGTLData.length > 0) {
				for (var i = 0; i < AIWListGTLData.length; i++) {
					if (AIWListGTLData[i].header) {
						for (var j = 0; j < AIWListGTLData[i].header.length; j++) {
							if (AIWListGTLData[i].header[j].Iwerk !== "") {
								AIWListGTLData[i].header[j].Werks = AIWListGTLData[i].header[j].Iwerk;
							}
							var gtList = {
								"Werks": AIWListGTLData[i].header[j].Werks,
								"Wcplant": AIWListGTLData[i].header[j].plant,
								"Statu": AIWListGTLData[i].header[j].Statu,
								"Tverwe": AIWListGTLData[i].header[j].tlusg,
								"Ktext": AIWListGTLData[i].header[j].Ktext,
								"Tarbpl": AIWListGTLData[i].header[j].wc,
								"Vagrp": AIWListGTLData[i].header[j].Vagrp,
								"Anlzu": AIWListGTLData[i].header[j].Anlzu,
								"Tplnal": (AIWListGTLData[i].header[j].Plnal).toString(),
								"Tlgnhdr": AIWListGTLData[i].grp,
								"Strat": AIWListGTLData[i].header[j].Strat,
								"Datuv": this._formatDate(AIWListGTLData[i].validFrm)
							};
							sPayload.GTList.push(gtList);
						}
					}

					if (AIWListGTLData[i].operation) {
						for (var k = 0; k < AIWListGTLData[i].operation.length; k++) {
							var gtlOpr = {
								"Tlgnhdr": AIWListGTLData[i].grp,
								"Vornr": AIWListGTLData[i].operation[k].Vornr,
								"TlArbpl": AIWListGTLData[i].operation[k].Arbpl,
								"Werks2gop": AIWListGTLData[i].operation[k].Werks,
								"Steus2gop": AIWListGTLData[i].operation[k].Steus,
								"Ltxa1": AIWListGTLData[i].operation[k].Ltxa1,
								"Arbei": AIWListGTLData[i].operation[k].Arbei,
								"Dauno": AIWListGTLData[i].operation[k].Dauno,
								"Arbeh": AIWListGTLData[i].operation[k].Arbeh,
								"Anzzl": AIWListGTLData[i].operation[k].Anzzl,
								"Daune": AIWListGTLData[i].operation[k].Daune,
								"Indet": AIWListGTLData[i].operation[k].Indet,
								"Tplnal": (AIWListGTLData[i].operation[k].Plnal).toString(),
								"Uvorn": AIWListGTLData[i].operation[k].Uvorn,
								"Larnt2gop": AIWListGTLData[i].operation[k].Larnt,
								"Prznt": AIWListGTLData[i].operation[k].workPerc === "" ? 0 : parseFloat(AIWListGTLData[i].operation[k].workPerc),
								"Bmvrg": AIWListGTLData[i].operation[k].orderQty,
								"Bmeih": AIWListGTLData[i].operation[k].ordQtyUnit,
								"Opreis": AIWListGTLData[i].operation[k].netPrice === "" ? "0.000" : parseFloat(AIWListGTLData[i].operation[k].netPrice).toFixed(
									3).toString(),
								"Owaers": AIWListGTLData[i].operation[k].currency,
								"Opeinh": AIWListGTLData[i].operation[k].priceUnit === "" ? "0.000" : parseFloat(AIWListGTLData[i].operation[k].priceUnit).toFixed(
									3).toString(),
								"Sakto2gop": AIWListGTLData[i].operation[k].costElement,
								"Omatkl": AIWListGTLData[i].operation[k].materialGrp,
								"Oekgrp": AIWListGTLData[i].operation[k].puchGroup,
								"Ekorg": AIWListGTLData[i].operation[k].purchOrg,
								"EqunrGop": AIWListGTLData[i].operation[k].equi,
								"TplnrGop": AIWListGTLData[i].operation[k].floc,
							};
							sPayload.GTOprs.push(gtlOpr);

							for (var z = 0; z < AIWListGTLData[i].operation[k].OprRel.length; z++) {
								var selObj = AIWListGTLData[i].operation[k].OprRel[z];
								var oOprRel = {
									Tlgnhdr: AIWListGTLData[i].grp, //this.currentObj.grp,
									Tplnal: selObj.Plnal.toString(),
									Vorn2: selObj.Vornr,
									Vornrgrel: selObj.OperationOR,
									Dauer: selObj.Offset,
									Zeinh: selObj.OUn,
									Aobar: selObj.RelType,
									Gprznt: selObj.PO,
									Provg: selObj.OI,
									Gkalid: selObj.ID,
									Arbplgrel: selObj.WrkCtrOR,
									Werksgrel: selObj.PlantOR,
								};
								sPayload.GTRel.push(oOprRel);
							}

							for (var z = 0; z < AIWListGTLData[i].operation[k].SrvPckgOvrw.length; z++) {
								var selObj = AIWListGTLData[i].operation[k].SrvPckgOvrw[z];
								var svObj = {
									Tlgnhdr: AIWListGTLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal.toString(),
									Vornrr: selObj.Vornr,
									SrvLine: selObj.LineNum,
									Del: formatter.truetoX(selObj.DelIndSP),
									Srvpos: selObj.ActNum,
									Ktext1: selObj.ShrtTxt,
									Mengegspk: selObj.Qty,
									Meinsgspk: selObj.BUomSP,
									Tbtwr: selObj.GrossPrc,
									Waersgspk: selObj.CurKey,
									IntWork: selObj.Work,
									Iwein: selObj.UnitOfWork,
								};
								sPayload.GTSpack.push(svObj);
							}

							for (var z = 0; z < AIWListGTLData[i].operation[k].PRT.length; z++) {
								var selObj = AIWListGTLData[i].operation[k].PRT[z];
								var prtObj = {
									Tlgnhdr: AIWListGTLData[i].grp, //selObj.grp,
									Tplnal: selObj.Plnal.toString(),
									Vornrgprt: selObj.Vornr,
									Psnfh: selObj.ItmNum,
									Fhmar: selObj.ItmCat,
									// Fhmnr: selObj.PRT,
									Matnrgprt: selObj.Mat,
									EqunrGpt: selObj.Equi,
									Eqpnt: selObj.Mspt,
									Doknrgprt: selObj.doc,
									Dokargprt: selObj.docType,
									Doktlgprt: selObj.docPart,
									Dokvrgprt: selObj.docVersion,
									Fhmnr: selObj.Othr,
									Fhwrk: selObj.Plant, //PRTDesc,
									Mgvgw: selObj.Qty,
									Mgeinh: selObj.UOM,
									Mgform: selObj.QtyFrmla,
									Steuf: selObj.PRTCtrl,
									Stftxt: selObj.PRTCtrlDesc,
									Ewvgw: selObj.StdUsgVal,
									Eweinh: selObj.StdUsgUOM,
									Ewform: selObj.UsgValFrmla,
								};
								sPayload.GTPRT.push(prtObj);
							}

							for (var z = 0; z < AIWListGTLData[i].operation[k].InspChar.length; z++) {
								var selObj = AIWListGTLData[i].operation[k].InspChar[z];
								var inspObj = {
									Tlgnhdr: AIWListGTLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal.toString(),
									Vornrgins: selObj.Vornr,
									Merknr: selObj.InspChar,
									Vste2gins: selObj.PrstInd,
									Quantitat: formatter.truetoX(selObj.QuanChar),
									QpmkRef: formatter.truetoX(selObj.QualChar),
									Verw2gins: selObj.MastInspChar,
									Uzae2tlgn: selObj.Plant,
									Mkv2tlgni: selObj.Version, //Ver2tlgni
									Kurztext: selObj.ShrtTxt,
									Pmth2gins: selObj.InspMthd,
									Qwe2tlgni: selObj.InspMthdPlnt,
									Toleranzs: selObj.TolKey,
									Ver2tlgni: selObj.VrsnInspMthd, //Pmtversio
									Stichprve: selObj.SampProc,
									Probemgeh: selObj.SampUOM,
									Pruefeinh: selObj.BaseSampQty === "" ? "0.00" : parseFloat(selObj.BaseSampQty).toFixed(2),
									Auswmenge: selObj.CodeGrp,
								};
								sPayload.GTInsp.push(inspObj);
							}
						}
					}

					if (AIWListGTLData[i].MaintPckg && AIWListGTLData[i].MaintPckg.length > 0) {
						for (var z = 0; z < AIWListGTLData[i].MaintPckg.length; z++) {
							if (AIWListGTLData[i].MaintPckg[z].MPArr && AIWListGTLData[i].MaintPckg[z].MPArr.length > 0) {
								for (var y = 0; y < AIWListGTLData[i].MaintPckg[z].MPArr.length; y++) {
									var curObj = AIWListGTLData[i].MaintPckg[z].MPArr[y];
									var moObj = {
										// Gplnkn: curObj.Gplnkn,
										// IsSelected: curObj.IsSelected,
										Ktex1: curObj.Ktex1,
										Ktxhi: curObj.Ktxhi,
										Kzyk1: curObj.Kzyk1,
										// Paket: curObj.IsSelected,
										Paketgmpk: curObj.Paket,
										Startgmpk: curObj.Strat,
										// Strat: curObj.Strat,
										Tlgnhdr: AIWListGTLData[i].grp, //this.currentObj.grp,
										Tplnal: curObj.Plnal.toString(),
										// Uzaehl: curObj.Uzaehl,
										Vorn2gmpk: curObj.Vornr,
										// Vornr: curObj.IsSelected,
									};
								}
								sPayload.GTMPack.push(moObj);
							}
						}
					}

					if (AIWListGTLData[i].component) {
						for (var l = 0; l < AIWListGTLData[i].component.length; l++) {
							var gtlComp = {
								"Tlgnhdr": AIWListGTLData[i].grp,
								"Idnrk": AIWListGTLData[i].component[l].Idnrk,
								"Menge": AIWListGTLData[i].component[l].Menge,
								"MeinsGcp": AIWListGTLData[i].component[l].MeinsGcp,
								"Vornr": AIWListGTLData[i].component[l].Vornr,
								"Postp": AIWListGTLData[i].component[l].Postp,
								"Tplnal": (AIWListGTLData[i].component[l].Plnal).toString()
							};
							sPayload.GTComp.push(gtlComp);
						}
					}

					if (AIWListGTLData[i].Class) {
						for (var m = 0; m < AIWListGTLData[i].Class.length; m++) {
							var gtlClass = {
								"Tlgnhdr": AIWListGTLData[i].grp,
								"Classtype": AIWListGTLData[i].Class[m].Classtype,
								"Class": AIWListGTLData[i].Class[m].Class,
								"Clstatus1": AIWListGTLData[i].Class[m].Clstatus1,
								"Tplnal": (AIWListGTLData[i].Class[m].Plnal).toString()
							};
							sPayload.GTClass.push(gtlClass);
						}
					}

					if (AIWListGTLData[i].Char) {
						for (var n = 0; n < AIWListGTLData[i].Char.length; n++) {
							// for (var k = 0; k < AIWListGTLData[i].Class.length; k++) {
							// 	if (AIWListGTLData[i].Class[k].Class === AIWListGTLData[i].Char[n].Class) {
							// 		AIWListGTLData[i].Char[n].Plnal = AIWListGTLData[i].Class[k].Plnal;
							// 	}
							// }
							var gtlChar = {
								"Tlgnhdr": AIWListGTLData[i].grp,
								"Atnam": AIWListGTLData[i].Char[n].Atnam,
								"Textbez": AIWListGTLData[i].Char[n].Textbez,
								"Atwrt": AIWListGTLData[i].Char[n].Atwrt,
								"Class": AIWListGTLData[i].Char[n].Class,
								"Tplnal": (AIWListGTLData[i].Char[n].Plnal).toString()
							};
							sPayload.GTVal.push(gtlChar);
						}
					}
				}
			}

			if (AIWListETLData.length > 0) {
				for (var i = 0; i < AIWListETLData.length; i++) {
					if (AIWListETLData[i].header) {
						for (var j = 0; j < AIWListETLData[i].header.length; j++) {
							if (AIWListETLData[i].header[j].Iwerk !== "") {
								AIWListETLData[i].header[j].Werks = AIWListETLData[i].header[j].Iwerk;
							}
							var etList = {
								"Werks": AIWListETLData[i].header[j].Werks,
								"Wcplant": AIWListETLData[i].header[j].plant,
								"Statu": AIWListETLData[i].header[j].Statu,
								"Tverwe": AIWListETLData[i].header[j].tlusg,
								"Ktext": AIWListETLData[i].header[j].Ktext,
								"Tarbpl": AIWListETLData[i].header[j].wc,
								"Vagrp": AIWListETLData[i].header[j].Vagrp,
								"Anlzu": AIWListETLData[i].header[j].Anlzu,
								"Tplnal": (AIWListETLData[i].header[j].Plnal).toString(),
								"Tleqhdr": AIWListETLData[i].grp,
								"Strat": AIWListETLData[i].header[j].Strat,
								"Eq2tl": AIWListETLData[i].header[j].equipment,
								"Datuv": this._formatDate(AIWListETLData[i].validFrm)
							};
							sPayload.ETList.push(etList);
						}
					}

					if (AIWListETLData[i].operation) {
						for (var k = 0; k < AIWListETLData[i].operation.length; k++) {
							var etlOpr = {
								"Tleqhdr": AIWListETLData[i].grp,
								"Vornr": AIWListETLData[i].operation[k].Vornr,
								"TlArbpl": AIWListETLData[i].operation[k].Arbpl,
								"Werks2eop": AIWListETLData[i].operation[k].Werks,
								"Steus2eop": AIWListETLData[i].operation[k].Steus,
								"Ltxa1": AIWListETLData[i].operation[k].Ltxa1,
								"Arbei": AIWListETLData[i].operation[k].Arbei,
								"Dauno": AIWListETLData[i].operation[k].Dauno,
								"Arbeh": AIWListETLData[i].operation[k].Arbeh,
								"Anzzl": AIWListETLData[i].operation[k].Anzzl,
								"Daune": AIWListETLData[i].operation[k].Daune,
								"Indet": AIWListETLData[i].operation[k].Indet,
								"Tplnal": (AIWListETLData[i].operation[k].Plnal).toString(),
								"Uvorn": AIWListETLData[i].operation[k].Uvorn,
								"Larnt2eop": AIWListETLData[i].operation[k].Larnt,
								"Prznt": AIWListETLData[i].operation[k].workPerc === "" ? 0 : parseFloat(AIWListETLData[i].operation[k].workPerc),
								"Bmvrg": AIWListETLData[i].operation[k].orderQty,
								"Bmeih": AIWListETLData[i].operation[k].ordQtyUnit,
								"Opreis": AIWListETLData[i].operation[k].netPrice === "" ? "0.000" : parseFloat(AIWListETLData[i].operation[k].netPrice).toFixed(
									3).toString(),
								"Owaers": AIWListETLData[i].operation[k].currency,
								"Opeinh": AIWListETLData[i].operation[k].priceUnit === "" ? "0.000" : parseFloat(AIWListETLData[i].operation[k].priceUnit).toFixed(
									3).toString(),
								"Sakto2eop": AIWListETLData[i].operation[k].costElement,
								"Omatkl": AIWListETLData[i].operation[k].materialGrp,
								"Oekgrp": AIWListETLData[i].operation[k].puchGroup,
								"Ekorg": AIWListETLData[i].operation[k].purchOrg,
								"EqunrEop": AIWListETLData[i].operation[k].equi,
								"TplnrEop": AIWListETLData[i].operation[k].floc,
							};
							sPayload.ETOprs.push(etlOpr);

							for (var z = 0; z < AIWListETLData[i].operation[k].OprRel.length; z++) {
								var selObj = AIWListETLData[i].operation[k].OprRel[z];
								var oOprRel = {
									Tleqhdr: AIWListETLData[i].grp, //this.currentObj.grp,
									Tplnal: selObj.Plnal.toString(),
									Vorn2: selObj.Vornr,
									Vornrerel: selObj.OperationOR,
									Dauer: selObj.Offset,
									Zeinh: selObj.OUn,
									Aobar: selObj.RelType,
									Eprznt: selObj.PO,
									Provg: selObj.OI,
									Ekalid: selObj.ID,
									Arbplerel: selObj.WrkCtrOR,
									Werkserel: selObj.PlantOR,
								};
								sPayload.ETRel.push(oOprRel);
							}

							for (var z = 0; z < AIWListETLData[i].operation[k].SrvPckgOvrw.length; z++) {
								var selObj = AIWListETLData[i].operation[k].SrvPckgOvrw[z];
								var svObj = {
									Tleqhdr: AIWListETLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal.toString(),
									Vornrr: selObj.Vornr,
									SrvLine: selObj.LineNum,
									Del: formatter.truetoX(selObj.DelIndSP),
									Srvpos: selObj.ActNum,
									Ktext1: selObj.ShrtTxt,
									Mengeespk: selObj.Qty,
									Meinsespk: selObj.BUomSP,
									Tbtwr: selObj.GrossPrc,
									Waersespk: selObj.CurKey,
									IntWork: selObj.Work,
									Iwein: selObj.UnitOfWork,
								};
								sPayload.ETSpack.push(svObj);
							}

							for (var z = 0; z < AIWListETLData[i].operation[k].PRT.length; z++) {
								var selObj = AIWListETLData[i].operation[k].PRT[z];
								var prtObj = {
									Tleqhdr: AIWListETLData[i].grp, //selObj.grp,
									Tplnal: selObj.Plnal.toString(),
									Vornreprt: selObj.Vornr,
									Psnfh: selObj.ItmNum,
									Fhmar: selObj.ItmCat,
									// Fhmnr: selObj.PRT,
									Matnreprt: selObj.Mat,
									EqunrEpt: selObj.Equi,
									Eqpnt: selObj.Mspt,
									Doknreprt: selObj.doc,
									Dokareprt: selObj.docType,
									Doktleprt: selObj.docPart,
									Dokvreprt: selObj.docVersion,
									Fhmnr: selObj.Othr,
									Fhwrk: selObj.Plant, //PRTDesc,
									Mgvgw: selObj.Qty,
									Mgeinh: selObj.UOM,
									Mgform: selObj.QtyFrmla,
									Steuf: selObj.PRTCtrl,
									Stftxt: selObj.PRTCtrlDesc,
									Ewvgw: selObj.StdUsgVal,
									Eweinh: selObj.StdUsgUOM,
									Ewform: selObj.UsgValFrmla,
								};
								sPayload.ETPRT.push(prtObj);
							}

							for (var z = 0; z < AIWListETLData[i].operation[k].InspChar.length; z++) {
								var selObj = AIWListETLData[i].operation[k].InspChar[z];
								var inspObj = {
									Tleqhdr: AIWListETLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal.toString(),
									Vornreins: selObj.Vornr,
									Merknr: selObj.InspChar,
									Vste2eins: selObj.PrstInd,
									Quantitat: formatter.truetoX(selObj.QuanChar),
									QpmkRef: formatter.truetoX(selObj.QualChar),
									Verw2eins: selObj.MastInspChar,
									Uzae2tlen: selObj.Plant,
									Mkv2tleni: selObj.Version, //Ver2tleqi
									Kurztext: selObj.ShrtTxt,
									Pmth2eins: selObj.InspMthd,
									Qwe2tleqi: selObj.InspMthdPlnt,
									Toleranzs: selObj.TolKey,
									Ver2tleqi: selObj.VrsnInspMthd, //Pmtversio
									Stichprve: selObj.SampProc,
									Probemgeh: selObj.SampUOM,
									Pruefeinh: selObj.BaseSampQty === "" ? "0.00" : parseFloat(selObj.BaseSampQty).toFixed(2),
									Auswmenge: selObj.CodeGrp,
								};
								sPayload.ETInsp.push(inspObj);
							}
						}
					}

					if (AIWListETLData[i].MaintPckg && AIWListETLData[i].MaintPckg.length > 0) {
						for (var z = 0; z < AIWListETLData[i].MaintPckg.length; z++) {
							if (AIWListETLData[i].MaintPckg[z].MPArr && AIWListETLData[i].MaintPckg[z].MPArr.length > 0) {
								for (var y = 0; y < AIWListETLData[i].MaintPckg[z].MPArr.length; y++) {
									var curObj = AIWListETLData[i].MaintPckg[z].MPArr[y];
									var moObj = {
										// Gplnkn: curObj.Gplnkn,
										// IsSelected: curObj.IsSelected,
										Ktex1: curObj.Ktex1,
										Ktxhi: curObj.Ktxhi,
										Kzyk1: curObj.Kzyk1,
										// Paket: curObj.IsSelected,
										Paketempk: curObj.Paket,
										Startempk: curObj.Strat,
										// Strat: curObj.Strat,
										Tleqhdr: AIWListETLData[i].grp, //this.currentObj.grp,
										Tplnal: curObj.Plnal.toString(),
										// Uzaehl: curObj.Uzaehl,
										Vorn2empk: curObj.Vornr,
										// Vornr: curObj.IsSelected,
									};
								}
								sPayload.ETMPack.push(moObj);
							}
						}
					}

					if (AIWListETLData[i].component) {
						for (var l = 0; l < AIWListETLData[i].component.length; l++) {
							var etlComp = {
								"Tleqhdr": AIWListETLData[i].grp,
								"Idnrk": AIWListETLData[i].component[l].Idnrk,
								"Menge": AIWListETLData[i].component[l].Menge,
								"MeinsEcp": AIWListETLData[i].component[l].MeinsGcp,
								"Vornr": AIWListETLData[i].component[l].Vornr,
								"Postp": AIWListETLData[i].component[l].Postp,
								"Tplnal": (AIWListETLData[i].component[l].Plnal).toString()
							};
							sPayload.ETComp.push(etlComp);
						}
					}

					if (AIWListETLData[i].Class) {
						for (var m = 0; m < AIWListETLData[i].Class.length; m++) {
							var etlClass = {
								"Tleqhdr": AIWListETLData[i].grp,
								"Classtype": AIWListETLData[i].Class[m].Classtype,
								"Class": AIWListETLData[i].Class[m].Class,
								"Clstatus1": AIWListETLData[i].Class[m].Clstatus1,
								"Tplnal": (AIWListETLData[i].Class[m].Plnal).toString()
							};
							sPayload.ETClass.push(etlClass);
						}
					}

					if (AIWListETLData[i].Char) {
						for (var n = 0; n < AIWListETLData[i].Char.length; n++) {
							// for (var k = 0; k < AIWListETLData[i].Class.length; k++) {
							// 	if (AIWListETLData[i].Class[k].Class === AIWListETLData[i].Char[n].Class) {
							// 		AIWListETLData[i].Char[n].Plnal = AIWListETLData[i].Class[k].Plnal;
							// 	}
							// }
							var etlChar = {
								"Tleqhdr": AIWListETLData[i].grp,
								"Atnam": AIWListETLData[i].Char[n].Atnam,
								"Textbez": AIWListETLData[i].Char[n].Textbez,
								"Atwrt": AIWListETLData[i].Char[n].Atwrt,
								"Class": AIWListETLData[i].Char[n].Class,
								"Tplnal": (AIWListETLData[i].Char[n].Plnal).toString()
							};
							sPayload.ETVal.push(etlChar);
						}
					}
				}
			}

			if (AIWListFTLData.length > 0) {
				for (var i = 0; i < AIWListFTLData.length; i++) {
					if (AIWListFTLData[i].header) {
						for (var j = 0; j < AIWListFTLData[i].header.length; j++) {
							if (AIWListFTLData[i].header[j].Iwerk !== "") {
								AIWListFTLData[i].header[j].Werks = AIWListFTLData[i].header[j].Iwerk;
							}
							var ftList = {
								"Werks": AIWListFTLData[i].header[j].Werks,
								"Wcplant": AIWListFTLData[i].header[j].plant,
								"Statu": AIWListFTLData[i].header[j].Statu,
								"Tverwe": AIWListFTLData[i].header[j].tlusg,
								"Ktext": AIWListFTLData[i].header[j].Ktext,
								"Tarbpl": AIWListFTLData[i].header[j].wc,
								"Vagrp": AIWListFTLData[i].header[j].Vagrp,
								"Anlzu": AIWListFTLData[i].header[j].Anlzu,
								"Tplnal": (AIWListFTLData[i].header[j].Plnal).toString(),
								"Tlflhdr": AIWListFTLData[i].grp,
								"Strat": AIWListFTLData[i].header[j].Strat,
								"Fl2tl": AIWListFTLData[i].header[j].floc,
								"Datuv": this._formatDate(AIWListETLData[i].validFrm)
							};
							sPayload.FTList.push(ftList);
						}
					}

					if (AIWListFTLData[i].operation) {
						for (var k = 0; k < AIWListFTLData[i].operation.length; k++) {
							var ftlOpr = {
								"Tlflhdr": AIWListFTLData[i].grp,
								"Vornr": AIWListFTLData[i].operation[k].Vornr,
								"TlArbpl": AIWListFTLData[i].operation[k].Arbpl,
								"Werks2fop": AIWListFTLData[i].operation[k].Werks,
								"Steus2fop": AIWListFTLData[i].operation[k].Steus,
								"Ltxa1": AIWListFTLData[i].operation[k].Ltxa1,
								"Arbei": AIWListFTLData[i].operation[k].Arbei,
								"Dauno": AIWListFTLData[i].operation[k].Dauno,
								"Arbeh": AIWListFTLData[i].operation[k].Arbeh,
								"Anzzl": AIWListFTLData[i].operation[k].Anzzl,
								"Daune": AIWListFTLData[i].operation[k].Daune,
								"Indet": AIWListFTLData[i].operation[k].Indet,
								"Tplnal": (AIWListFTLData[i].operation[k].Plnal).toString(),
								"Uvorn": AIWListFTLData[i].operation[k].Uvorn,
								"Larnt2fop": AIWListFTLData[i].operation[k].Larnt,
								"Prznt": AIWListFTLData[i].operation[k].workPerc === "" ? 0 : parseFloat(AIWListFTLData[i].operation[k].workPerc),
								"Bmvrg": AIWListFTLData[i].operation[k].orderQty,
								"Bmeih": AIWListFTLData[i].operation[k].ordQtyUnit,
								"Opreis": AIWListFTLData[i].operation[k].netPrice === "" ? "0.000" : parseFloat(AIWListFTLData[i].operation[k].netPrice).toFixed(
									3).toString(),
								"Owaers": AIWListFTLData[i].operation[k].currency,
								"Opeinh": AIWListFTLData[i].operation[k].priceUnit === "" ? "0.000" : parseFloat(AIWListFTLData[i].operation[k].priceUnit).toFixed(
									3).toString(),
								"Sakto2fop": AIWListFTLData[i].operation[k].costElement,
								"Omatkl": AIWListFTLData[i].operation[k].materialGrp,
								"Oekgrp": AIWListFTLData[i].operation[k].puchGroup,
								"Ekorg": AIWListFTLData[i].operation[k].purchOrg,
								"EqunrFop": AIWListFTLData[i].operation[k].equi,
								"TplnrFop": AIWListFTLData[i].operation[k].floc,
							};
							sPayload.FTOprs.push(ftlOpr);

							for (var z = 0; z < AIWListFTLData[i].operation[k].OprRel.length; z++) {
								var selObj = AIWListFTLData[i].operation[k].OprRel[z];
								var oOprRel = {
									Tlflhdr: AIWListFTLData[i].grp, //this.currentObj.grp,
									Tplnal: selObj.Plnal.toString(),
									Vorn2: selObj.Vornr,
									Vornrfrel: selObj.OperationOR,
									Dauer: selObj.Offset,
									Zeinh: selObj.OUn,
									Aobar: selObj.RelType,
									Fprznt: selObj.PO,
									Provg: selObj.OI,
									Fkalid: selObj.ID,
									Arbplfrel: selObj.WrkCtrOR,
									Werksfrel: selObj.PlantOR,
								};
								sPayload.FTRel.push(oOprRel);
							}

							for (var z = 0; z < AIWListFTLData[i].operation[k].SrvPckgOvrw.length; z++) {
								var selObj = AIWListFTLData[i].operation[k].SrvPckgOvrw[z];
								var svObj = {
									Tlflhdr: AIWListFTLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal.toString(),
									Vornrr: selObj.Vornr,
									SrvLine: selObj.LineNum,
									Del: formatter.truetoX(selObj.DelIndSP),
									Srvpos: selObj.ActNum,
									Ktext1: selObj.ShrtTxt,
									Mengefspk: selObj.Qty,
									Meinsfspk: selObj.BUomSP,
									Tbtwr: selObj.GrossPrc,
									Waersfspk: selObj.CurKey,
									IntWork: selObj.Work,
									Iwein: selObj.UnitOfWork,
								};
								sPayload.FTSpack.push(svObj);
							}

							for (var z = 0; z < AIWListFTLData[i].operation[k].PRT.length; z++) {
								var selObj = AIWListFTLData[i].operation[k].PRT[z];
								var prtObj = {
									Tlflhdr: AIWListFTLData[i].grp, //selObj.grp,
									Tplnal: selObj.Plnal.toString(),
									Vornrfprt: selObj.Vornr,
									Psnfh: selObj.ItmNum,
									Fhmar: selObj.ItmCat,
									// Fhmnr: selObj.PRT,
									Matnrfprt: selObj.Mat,
									EqunrFpt: selObj.Equi,
									Eqpnt: selObj.Mspt,
									Doknrfprt: selObj.doc,
									Dokarfprt: selObj.docType,
									Doktlfprt: selObj.docPart,
									Dokvrfprt: selObj.docVersion,
									Fhmnr: selObj.Othr,
									Fhwrk: selObj.Plant, //PRTDesc,
									Mgvgw: selObj.Qty,
									Mgeinh: selObj.UOM,
									Mgform: selObj.QtyFrmla,
									Steuf: selObj.PRTCtrl,
									Stftxt: selObj.PRTCtrlDesc,
									Ewvgw: selObj.StdUsgVal,
									Eweinh: selObj.StdUsgUOM,
									Ewform: selObj.UsgValFrmla,
								};
								sPayload.FTPRT.push(prtObj);
							}

							for (var z = 0; z < AIWListFTLData[i].operation[k].InspChar.length; z++) {
								var selObj = AIWListFTLData[i].operation[k].InspChar[z];
								var inspObj = {
									Tlflhdr: AIWListFTLData[i].grp, //selObj.group,
									Tplnal: selObj.Plnal.toString(),
									Vornrfins: selObj.Vornr,
									Merknr: selObj.InspChar,
									Vste2eins: selObj.PrstInd,
									Quantitat: formatter.truetoX(selObj.QuanChar),
									QpmkRef: formatter.truetoX(selObj.QualChar),
									Verw2fins: selObj.MastInspChar,
									Uzae2tlfn: selObj.Plant,
									Mkv2tleni: selObj.Version, //Ver2tlfli
									Kurztext: selObj.ShrtTxt,
									Pmth2fins: selObj.InspMthd,
									Qwe2tlfli: selObj.InspMthdPlnt,
									Toleranzs: selObj.TolKey,
									Ver2tlfli: selObj.VrsnInspMthd, //Pmtversio
									Stichprve: selObj.SampProc,
									Probemgeh: selObj.SampUOM,
									Pruefeinh: selObj.BaseSampQty === "" ? "0.00" : parseFloat(selObj.BaseSampQty).toFixed(2),
									Auswmenge: selObj.CodeGrp,
								};
								sPayload.FTInsp.push(inspObj);
							}
						}
					}

					if (AIWListFTLData[i].MaintPckg && AIWListFTLData[i].MaintPckg.length > 0) {
						for (var z = 0; z < AIWListFTLData[i].MaintPckg.length; z++) {
							if (AIWListFTLData[i].MaintPckg[z].MPArr && AIWListFTLData[i].MaintPckg[z].MPArr.length > 0) {
								for (var y = 0; y < AIWListFTLData[i].MaintPckg[z].MPArr.length; y++) {
									var curObj = AIWListFTLData[i].MaintPckg[z].MPArr[y];
									var moObj = {
										// Gplnkn: curObj.Gplnkn,
										// IsSelected: curObj.IsSelected,
										Ktex1: curObj.Ktex1,
										Ktxhi: curObj.Ktxhi,
										Kzyk1: curObj.Kzyk1,
										// Paket: curObj.IsSelected,
										Paketfmpk: curObj.Paket,
										Startfmpk: curObj.Strat,
										// Strat: curObj.Strat,
										Tlflhdr: AIWListFTLData[i].grp, //this.currentObj.grp,
										Tplnal: curObj.Plnal.toString(),
										// Uzaehl: curObj.Uzaehl,
										Vorn2fmpk: curObj.Vornr,
										// Vornr: curObj.IsSelected,
									};
								}
								sPayload.FTMPack.push(moObj);
							}
						}
					}

					if (AIWListFTLData[i].component) {
						for (var l = 0; l < AIWListFTLData[i].component.length; l++) {
							var ftlComp = {
								"Tlflhdr": AIWListFTLData[i].grp,
								"Idnrk": AIWListFTLData[i].component[l].Idnrk,
								"Menge": AIWListFTLData[i].component[l].Menge,
								"MeinsFcp": AIWListFTLData[i].component[l].MeinsGcp,
								"Vornr": AIWListFTLData[i].component[l].Vornr,
								"Postp": AIWListFTLData[i].component[l].Postp,
								"Tplnal": (AIWListFTLData[i].component[l].Plnal).toString()
							};
							sPayload.FTComp.push(ftlComp);
						}
					}

					if (AIWListFTLData[i].Class) {
						for (var m = 0; m < AIWListFTLData[i].Class.length; m++) {
							var ftlClass = {
								"Tlflhdr": AIWListFTLData[i].grp,
								"Classtype": AIWListFTLData[i].Class[m].Classtype,
								"Class": AIWListFTLData[i].Class[m].Class,
								"Clstatus1": AIWListFTLData[i].Class[m].Clstatus1,
								"Tplnal": (AIWListFTLData[i].Class[m].Plnal).toString()
							};
							sPayload.FTClass.push(ftlClass);
						}
					}

					if (AIWListFTLData[i].Char) {
						for (var n = 0; n < AIWListFTLData[i].Char.length; n++) {
							// for (var k = 0; k < AIWListFTLData[i].Class.length; k++) {
							// 	if (AIWListFTLData[i].Class[k].Class === AIWListFTLData[i].Char[n].Class) {
							// 		AIWListFTLData[i].Char[n].Plnal = AIWListFTLData[i].Class[k].Plnal;
							// 	}
							// }
							var ftlChar = {
								"Tlflhdr": AIWListFTLData[i].grp,
								"Atnam": AIWListFTLData[i].Char[n].Atnam,
								"Textbez": AIWListFTLData[i].Char[n].Textbez,
								"Atwrt": AIWListFTLData[i].Char[n].Atwrt,
								"Class": AIWListFTLData[i].Char[n].Class,
								"Tplnal": (AIWListFTLData[i].Char[n].Plnal).toString()
							};
							sPayload.FTVal.push(ftlChar);
						}
					}
				}
			}

			if (AIWListOLData.length > 0) {
				for (var i = 0; i < AIWListOLData.length; i++) {
					var olHeader = {
						"Begru": AIWListOLData[i].autGrp,
						"Objlink": AIWListOLData[i].link,
						"Kanxt": AIWListOLData[i].linkDesc,
						"Eqkant": AIWListOLData[i].linkObjEq,
						"Tpkant": AIWListOLData[i].linkObjFl,
						"Netyp": AIWListOLData[i].linkCat,
						"Eqvon": AIWListOLData[i].linkFrmEq,
						"Tpvon": AIWListOLData[i].linkFrmFl,
						"Eqnach": AIWListOLData[i].linkToEq,
						"Tpnach": AIWListOLData[i].linkToFl,
						"Mediu": AIWListOLData[i].medium,
						"Lfdknr": AIWListOLData[i].linkNum,
						"Kantyp": AIWListOLData[i].objCat,
						"Netid": AIWListOLData[i].netId,
						"Bezarp": AIWListOLData[i].Bezarp,
						"Bezarl": AIWListOLData[i].Bezarl,
						"Datva": formatter._formatDate(AIWListOLData[i].validFrm),
						"Zeitva": formatter._timeConvert(AIWListOLData[i].timeFrm),
						"Datvb": formatter._formatDate(AIWListOLData[i].validTo),
						"Zeitvb": formatter._timeConvert(AIWListOLData[i].timeTo),
						"Stattext": AIWListOLData[i].Stattext,
						"StsmOl": AIWListOLData[i].StsmOl,
						"UstwOl": AIWListOLData[i].UstwOl,
						"UswoOl": AIWListOLData[i].UswoOl,
						"UstaOl": AIWListOLData[i].UstaOl
					};
					sPayload.Olink.push(olHeader);

					if (AIWListOLData[i].Class) {
						for (var j = 0; j < AIWListOLData[i].Class.length; j++) {
							var mClass = {
								"Objlink": AIWListOLData[i].Class[j].Objlink,
								"Classtype": AIWListOLData[i].Class[j].Classtype,
								"Class": AIWListOLData[i].Class[j].Class,
								"Clstatus1": AIWListOLData[i].Class[j].Clstatus1
							};
							sPayload.OLClass.push(mClass);
						}
					}

					if (AIWListOLData[i].Char) {
						for (var k = 0; k < AIWListOLData[i].Char.length; k++) {
							var mChar = {
								"Objlink": AIWListOLData[i].Char[k].Objlink,
								"Atnam": AIWListOLData[i].Char[k].Atnam,
								"Textbez": AIWListOLData[i].Char[k].Textbez,
								"Atwrt": AIWListOLData[i].Char[k].Atwrt,
								"Class": AIWListOLData[i].Char[k].Class
							};
							sPayload.OLVal.push(mChar);
						}
					}

				}
			}

			var oModel = this.getView().getModel();
			var h = {
				"X-Requested-With": "xmlHTTPrequest"
			};
			oModel.setHeaders(h);

			if (sPayload.FLAddrI.length > 0) {
				sPayload.FLAddrI = $.map(sPayload.FLAddrI, function (obj) {
					return $.extend(true, {}, obj);
				});
				for (var i = 0; i < sPayload.FLAddrI.length > 0; i++) {
					delete sPayload.FLAddrI[i].AdNationEnable;
					delete sPayload.FLAddrI[i].City1iVS;
					delete sPayload.FLAddrI[i].StreetiVS;
				}
			}
			if (sPayload.EqAddrI.length > 0) {
				sPayload.EqAddrI = $.map(sPayload.EqAddrI, function (obj) {
					return $.extend(true, {}, obj);
				});
				for (var i = 0; i < sPayload.EqAddrI.length > 0; i++) {
					delete sPayload.EqAddrI[i].AdNationEnable;
					delete sPayload.EqAddrI[i].City1iVS;
					delete sPayload.EqAddrI[i].StreetiVS;
				}
			}

			sPayload.SelectedObject = [];
			if (sModelName === this.oModelAIWFLOC) {
				for (var i = tempArray.length - 1; i >= 0; i--) {
					var index = tempArray[i];
					index = parseInt(index);

					var oSel = {
						Tplnr: AIWFLOCModel[index].Functionallocation
					};
					sPayload.SelectedObject.push(oSel);
				}
			}
			if (sModelName === this.oModelAIWEQUI) {
				for (var i = tempArray.length - 1; i >= 0; i--) {
					var index = tempArray[i];
					index = parseInt(index);

					var oSel = {
						Equnr: AIWEQUIModel[index].Equnr
					};
					sPayload.SelectedObject.push(oSel);
				}
			}
			if (sModelName === this.oModelAIWMSPT) {
				for (var i = tempArray.length - 1; i >= 0; i--) {
					var index = tempArray[i];
					index = parseInt(index);

					var oSel = {
						Mspoint: AIWMSPTModel[index].Mspoint
					};
					sPayload.SelectedObject.push(oSel);
				}
			}
			if (sModelName === "AIWListWCModel") {
				for (var i = tempArray.length - 1; i >= 0; i--) {
					var index = tempArray[i];
					index = parseInt(index);

					var oSel = {
						Workcntr: AIWListWCData[index].wc,
						Werks: AIWListWCData[index].plant,
					};
					sPayload.SelectedObject.push(oSel);
				}
			}
			if (sModelName === "AIWListGTLModel") {
				for (var i = tempArray.length - 1; i >= 0; i--) {
					var index = tempArray[i];
					index = parseInt(index);

					var oSel = {
						Tlgnhdr: AIWListGTLData[index].grp
					};
					sPayload.SelectedObject.push(oSel);
				}
			}
			if (sModelName === "AIWListETLModel") {
				for (var i = tempArray.length - 1; i >= 0; i--) {
					var index = tempArray[i];
					index = parseInt(index);

					var oSel = {
						Tleqhdr: AIWListETLData[index].grp
					};
					sPayload.SelectedObject.push(oSel);
				}
			}
			if (sModelName === "AIWListFTLModel") {
				for (var i = tempArray.length - 1; i >= 0; i--) {
					var index = tempArray[i];
					index = parseInt(index);

					var oSel = {
						Tlflhdr: AIWListFTLData[index].grp
					};
					sPayload.SelectedObject.push(oSel);
				}
			}

			g.BusyDialog.open();
			oModel.create("/ChangeRequestSet", sPayload, {
				success: function (r) {
					g.BusyDialog.close();
					if (r.RemoveMsg !== "") {
						var bCompact = !!g.getView().$().closest(".sapUiSizeCompact").length;
						sap.m.MessageBox.information(
							r.RemoveMsg, {
								actions: [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL],
								styleClass: bCompact ? "sapUiSizeCompact" : "",
								onClose: function (sAction) {
									if (sAction === "OK") {
										g.proceedDelete(tempArray, sModelName);
									}
								}
							}
						);
					} else {
						g.proceedDelete(tempArray, sModelName);
					}
				},
				error: function (err) {
					g.BusyDialog.close();
					var error = [];
					if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
						.errordetails
						.length === 0) {
						error[0] = JSON.parse(err.responseText).error.message.value;
					} else {
						for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
							error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
						}
					}

					var oMessageList = [];
					for (var e = 0; e < error.length; e++) {
						oMessageList.push({
							type: "Error",
							title: error[e]
						});
					}

					g.createMessagePopover(oMessageList, false);
				}
			});
		},

		proceedDelete: function (tempArray, sModelName) {
			if (sModelName === this.oModelAIWFLOC) {
				var oMainModel = this.getView().getModel("mainView");
				var oMainData = oMainModel.getData();

				var oAIWFLOCModel = sap.ui.getCore().getModel(this.oModelAIWFLOC);
				var oAIWFLOCData = oAIWFLOCModel.getData();

				for (var i = tempArray.length - 1; i >= 0; i--) {
					var index = tempArray[i];
					index = parseInt(index);

					var mFlocAddressModel = sap.ui.getCore().getModel("flocAddressView");
					var mFlocAddressData = mFlocAddressModel.getData();
					if (index <= mFlocAddressData.length) {
						for (var af = 0; af < mFlocAddressData.length; af++) {
							if (oAIWFLOCData[index].Functionallocation === mFlocAddressData[af].Functionallocation) {
								mFlocAddressData.splice(af, 1);
								mFlocAddressModel.setData(mFlocAddressData);
								break;
							}
						}
					}

					var aDOIFL = sap.ui.getCore().getModel("dataOriginMOP").getData().FL;
					if (oAIWFLOCData[index].Functionallocation === "") {
						sap.ui.getCore().getModel("dataOriginMOP").getData().FL.splice(index, 1);
					} else {
						for (var z = 0; z < aDOIFL.length; z++) {
							if (aDOIFL[z].key === oAIWFLOCData[index].Functionallocation) {
								sap.ui.getCore().getModel("dataOriginMOP").getData().FL.splice(z, 1);
							}
						}
					}

					oAIWFLOCData.splice(index, 1);
					// this.getView().getModel(this.oModelAIWFLOC).getData().splice(index, 1)
				}

				sap.ui.getCore().byId(this.tableId).removeSelections();
				sap.ui.getCore().byId(this.tableId).getModel(this.oModelAIWFLOC).refresh();
				this.getView().getModel(this.oModelAIWFLOC).refresh();
				oAIWFLOCModel.setData(oAIWFLOCData);
				this.onUpdateTitleCount(sModelName, oAIWFLOCData);
				this.selectedRowsFLOC = [];
				oMainData.deleteFLOC = false;
			}

			if (sModelName === this.oModelAIWEQUI) {
				var oMainModel = this.getView().getModel("mainView");
				var oMainData = oMainModel.getData();

				var oAIWEQUIModel = sap.ui.getCore().getModel(this.oModelAIWEQUI);
				var oAIWEQUIData = oAIWEQUIModel.getData();

				for (var j = tempArray.length - 1; j >= 0; j--) {
					var index = tempArray[j];
					index = parseInt(index);

					var mEquiAddressModel = sap.ui.getCore().getModel("equiAddressView");
					var mEquiAddressData = mEquiAddressModel.getData();
					if (index <= mEquiAddressData.length) {
						for (var as = 0; as < mEquiAddressData.length; as++) {
							if (oAIWEQUIData[index].Equnr === mEquiAddressData[as].Equnr) {
								mEquiAddressData.splice(as, 1);
								mEquiAddressModel.setData(mEquiAddressData);
								break;
							}
						}
					}

					var ainMop = sap.ui.getCore().getModel("ainMOP").getData();
					for (var x = 0; x < ainMop.length; x++) {
						if (ainMop[x].key === oAIWEQUIData[index].Equnr) {
							sap.ui.getCore().getModel("ainMOP").getData().splice(x, 1);
							break;
						}
					}

					sap.ui.getCore().getModel("dataOriginMOP").getData().EQ.splice(index, 1);

					oAIWEQUIData.splice(index, 1);
				}
				sap.ui.getCore().byId(this.tableId).removeSelections();
				sap.ui.getCore().byId(this.tableId).getModel(this.oModelAIWEQUI).refresh();
				this.getView().getModel(this.oModelAIWEQUI).refresh();
				oAIWEQUIModel.setData(oAIWEQUIData);
				this.onUpdateTitleCount(sModelName, oAIWEQUIData);
				this.selectedRowsEQUI = [];
				oMainData.deleteEQUI = false;
			}

			if (sModelName === this.oModelAIWMSPT) {
				var oMainModel = this.getView().getModel("mainView");
				var oMainData = oMainModel.getData();

				var oAIWMSPTModel = this.getView().getModel(this.oModelAIWMSPT);
				var oAIWMSPTData = oAIWMSPTModel.getData();

				for (var k = tempArray.length - 1; k >= 0; k--) {
					var index = tempArray[k];
					index = parseInt(index);
					oAIWMSPTData.splice(index, 1);
				}
				sap.ui.getCore().byId(this.tableId).removeSelections();
				sap.ui.getCore().byId(this.tableId).getModel(this.oModelAIWMSPT).refresh();
				this.getView().getModel(this.oModelAIWMSPT).refresh();
				oAIWMSPTModel.setData(oAIWMSPTData);
				this.onUpdateTitleCount(sModelName, oAIWMSPTData);
				this.selectedRowsMSPT = [];
				oMainData.deleteMSPT = false;
			}

			if (sModelName === "AIWListWCModel") {
				var AIWListWCModel = this.getView().getModel("AIWListWCModel");
				var AIWListWCData = AIWListWCModel.getData();

				for (var i = tempArray.length - 1; i >= 0; i--) {
					//var index = this.selectedRowsMAT[i].split("/")[1];
					index = tempArray[i];
					AIWListWCData.splice(index, 1);
				}
				sap.ui.getCore().byId(this.tableId).removeSelections();
				AIWListWCModel.setData(AIWListWCData);
				this.updateCount("workCenter", AIWListWCData);
				this.selectedRowsWC = [];

				var EnableDELModel = this.getView().getModel("EnableDELModel");
				var EnableDELData = EnableDELModel.getData();
				EnableDELData.deleteWC = false;
				EnableDELModel.setData(EnableDELData);
			}

			if (sModelName === "AIWListGTLModel") {
				var AIWListGTLModel = this.getView().getModel("AIWListGTLModel");
				var AIWListGTLData = AIWListGTLModel.getData();

				for (var i = tempArray.length - 1; i >= 0; i--) {
					//var index = this.selectedRowsMAT[i].split("/")[1];
					var index = tempArray[i];
					AIWListGTLData.splice(index, 1);
				}
				sap.ui.getCore().byId(this.tableId).removeSelections();
				AIWListGTLModel.setData(AIWListGTLData);

				this.updateCount("generalTL", AIWListGTLData);
				this.selectedRowsGTL = [];

				var EnableDELModel = this.getView().getModel("EnableDELModel");
				var EnableDELData = EnableDELModel.getData();
				EnableDELData.deleteGTL = false;
				EnableDELModel.setData(EnableDELData);

				var aCounterModel = this.getView().getModel("aCounterModel");
				var aCounterData = aCounterModel.getData();
				aCounterData.addGTLCounter = false;
				aCounterModel.setData(aCounterData);
			}
			if (sModelName === "AIWListETLModel") {
				var AIWListETLModel = this.getView().getModel("AIWListETLModel");
				var AIWListETLData = AIWListETLModel.getData();

				for (var i = tempArray.length - 1; i >= 0; i--) {
					//var index = this.selectedRowsMAT[i].split("/")[1];
					var index = tempArray[i];
					AIWListETLData.splice(index, 1);
				}
				sap.ui.getCore().byId(this.tableId).removeSelections();
				AIWListETLModel.setData(AIWListETLData);
				this.updateCount("equiTL", AIWListETLData);
				this.selectedRowsETL = [];

				var EnableDELModel = this.getView().getModel("EnableDELModel");
				var EnableDELData = EnableDELModel.getData();
				EnableDELData.deleteETL = false;
				EnableDELModel.setData(EnableDELData);

				var aCounterModel = this.getView().getModel("aCounterModel");
				var aCounterData = aCounterModel.getData();
				aCounterData.addETLCounter = false;
				aCounterModel.setData(aCounterData);
			}
			if (sModelName === "AIWListFTLModel") {
				var AIWListFTLModel = this.getView().getModel("AIWListFTLModel");
				var AIWListFTLData = AIWListFTLModel.getData();

				for (var i = tempArray.length - 1; i >= 0; i--) {
					//var index = this.selectedRowsMAT[i].split("/")[1];
					var index = tempArray[i];
					AIWListFTLData.splice(index, 1);
				}
				sap.ui.getCore().byId(this.tableId).removeSelections();
				AIWListFTLModel.setData(AIWListFTLData);
				this.updateCount("flocTL", AIWListFTLData);
				this.selectedRowsFTL = [];

				var EnableDELModel = this.getView().getModel("EnableDELModel");
				var EnableDELData = EnableDELModel.getData();
				EnableDELData.deleteFTL = false;
				EnableDELModel.setData(EnableDELData);

				var aCounterModel = this.getView().getModel("aCounterModel");
				var aCounterData = aCounterModel.getData();
				aCounterData.addFTLCounter = false;
				aCounterModel.setData(aCounterData);
			}
		},

		/*
		 * Function to handle deletion of rows
		 * @param {sap.ui.base.Event} oEvent
		 */
		onDeletePress: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			this.handleDeletePress(oEvent.getSource(), sModelName);

			if (sap.ui.getCore().getModel("AIWAPPROVE")) {
				var oModel = sap.ui.getCore().getModel("AIWAPPROVE");
				var sData = oModel.getProperty("/");
				sData.splice(this.indexApprove, 1);
				oModel.setProperty("/", sData);
				sap.ui.getCore().setModel(oModel, "AIWAPPROVE");
			}
		},
		/*
		 * Function to handle deletion of rows
		 * @param {object} sSource
		 * @param {string} sModelName
		 */
		handleDeletePress: function (sSource, sModelName) {
			var sPath, sIndex, sData, oModel;
			sPath = sSource.getBindingContext(sModelName).getPath();
			sPath = sPath.substring(sPath.lastIndexOf("/") + 1);
			sIndex = parseInt(sPath.substr(-1), 10);
			oModel = sSource.getModel(sModelName);
			sData = oModel.getProperty("/");
			sData.splice(sIndex, 1);
			oModel.setProperty("/", sData);
			this.indexApprove = sIndex;
			this.getView().setModel(oModel, sModelName);
			this.onUpdateTitleCount(sModelName, this.getView().getModel(sModelName).getData());
		},

		/** Functional Location **/
		/*
		 * Function to handle 'liveChange' event of Structure Indicator
		 * @param {sap.ui.base.Event} oEvent
		 */
		StructureIndicatorChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.Strucindicator;
			if (sValue === "" || sValue === undefined) {
				oModelData.Strucindicator = "";
				oModelData.StrucIndicatorDesc = "";
				oModelData.EditMask = "";
				oModelData.Hierarchy = "";
				// oModelData.Maintplant = "";
				// oModelData.MaintplantDesc = "";
				oModelData.Location = "";
				oModelData.Locationdesc = "";
				oModelData.Abckz = "";
				oModelData.Abctx = "";
				oModelData.Bukrs = "";
				oModelData.Butxt = "";
				oModelData.City = "";
				oModelData.Kostl = "";
				oModelData.Mctxt = "";
				oModelData.Kokrs = "";
				oModelData.Werks = "";
				oModelData.Planningplantdes = "";
				oModelData.Ingrp = "";
				oModelData.Innam = "";
				oModelData.MainArbpl = "";
				oModelData.MainKtext = "";
				oModelData.MainWerks = "";
				// oModelData.SupFunctionallocation = "";
				// oModelData.SupFlocdescription = "";
			}
			oEvent.getSource().setValueState("None");
		},
		/*
		 * Function to handle 'change' event of Structure Indicator
		 * @param {sap.ui.base.Event} oEvent
		 */
		onStrChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oEvent.getSource().getValue();
			if (sValue === "" || sValue === undefined) {
				oEvent.getSource().setValue("");
			} else {
				var sFunctionalLocation = oModelData.Functionallocation;
				if (sFunctionalLocation === "" || sFunctionalLocation === undefined) {
					oEvent.getSource().setValue("");
					this.invokeMessage(this.getResourceBundle().getText("functionalLocationMand"));
				} else {
					oModelData.Strucindicator = sValue.toUpperCase();
					this._strIndicator(oModelData, sIndex, sModelName);
				}
			}
		},
		_strIndicator: function (f, sIndex, sModelName) {
			var g = this;
			var c = f.Strucindicator;
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				//var q = "/StrucIndicatorValueHelpSet?$filter=" + jQuery.sap.encodeURL("StrucIndicator eq '" + c + "'");
				var sPath = "/StrucIndicatorValueHelpSet";
				var oFilters = [new sap.ui.model.Filter("StrucIndicator", "EQ", c)];
				var oModel = g.getView().getModel("valueHelp");
				var fnSuccess = function (d) {
					if (d.results.length > 0) {
						f.Strucindicator = a;
						f.StrucIndicatorDesc = d.results[0].StrucIndicatorDesc;
						f.EditMask = d.results[0].EditMask;
						f.Hierarchy = d.results[0].Hierarchy;
						g.getModel(sModelName).refresh();
						g.readSupFlocDetails(f.Functionallocation);
					} else {
						f.Strucindicator = "";
						f.StrucIndicatorDesc = "";
						f.EditMask = "";
						f.Hierarchy = "";
						f.StrucindicatorVS = "Error";
						f.StrucindicatorVST = "Invalid Entry";
						g.getModel(sModelName).refresh();
					}
				};
				var fnError = function (e) {
					var b = JSON.parse(e.responseText);
					var d = b.error.message.value;
					f.StrucindicatorVS = "Error";
					f.StrucindicatorVST = d;
					g.getModel(sModelName).refresh();
				};
				g._readData(sPath, oModel, fnSuccess, fnError, oFilters);
			} else {
				f.Strucindicator = a;
				g.getModel(sModelName).refresh();
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Structure Indicator
		 * @param {sap.ui.base.Event} oEvent
		 */
		onStrIndVH: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			this.strIndVH(oModelData, sIndex, sModelName);
		},
		/*
		 * To display value help dialog of Structure Indicator
		 * @param {object} p
		 * @param {string} sIndex
		 * @param {string} sModelName
		 */
		strIndVH: function (p, sIndex, sModelName) {
			var g = this;
			var settings = {
				title: this.getView().getModel("i18n").getProperty("STR_IND"),
				noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
				columns: [new sap.m.Column({
						header: [
							new sap.m.Text({
								text: "{i18n>STR_IND}"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>STR_IND_DESC}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>EDIT_MASK}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>HIER_LEVELS}"
							})
						]
					})
				],
				items: {
					path: "/StrucIndicatorValueHelpSet",
					template: new sap.m.ColumnListItem({
						type: "Active",
						unread: false,
						cells: [
							new sap.m.Text({
								text: "{StrucIndicator}"
							}),
							new sap.m.Text({
								text: "{StrucIndicatorDesc}"
							}),
							new sap.m.Text({
								text: "{EditMask}"
							}),
							new sap.m.Text({
								text: "{Hierarchy}"
							})
						]
					})
				},
				confirm: function (E) {
					if (p.Functionallocation === "" || p.Functionallocation === undefined) {
						p.Strucindicator = "";
						g.getView().getModel(sModelName).refresh();
						g.invokeMessage(g.getResourceBundle().getText("functionalLocationMand"));
					} else {
						p.StrucindicatorVS = "None";
						p.StrucindicatorVST = "";
						p.Strucindicator = E.getParameter("selectedItem").getCells()[0].getText();
						p.StrucIndicatorDesc = E.getParameter("selectedItem").getCells()[1].getText();
						p.EditMask = E.getParameter("selectedItem").getCells()[2].getText();
						p.Hierarchy = E.getParameter("selectedItem").getCells()[3].getText();
						g.getView().getModel(sModelName).refresh();
						g.readSupFlocDetails(p.Functionallocation);
					}
				}
			};

			var sPath = "/StrucIndicatorValueHelpSet";
			var oModel = g.getView().getModel("valueHelp");
			var oFilter = [];
			var cells = [
				new sap.m.Text({
					text: "{StrucIndicator}"
				}),
				new sap.m.Text({
					text: "{StrucIndicator}"
				}),
				new sap.m.Text({
					text: "{EditMask}"
				}),
				new sap.m.Text({
					text: "{Hierarchy}"
				})
			];
			var stSelectDialog = ValueHelpProvider.getValueHelp(oModel, sPath, cells, oFilter, settings, "StrucIndicator", "StrucIndicator");
			stSelectDialog.open();
			stSelectDialog.setModel(this.getView().getModel("i18n"), "i18n");
		},
		/*
		 * Function to handle 'liveChange' event of Functional location category
		 * @param {sap.ui.base.Event} oEvent
		 */
		flocCatChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.Floccategory;
			if (sValue === "" || sValue === undefined) {
				oModelData.Floccategory = "";
				oModelData.FlocCategoryDesc = "";
			}
			oEvent.getSource().setValueState("None");
		},
		/*
		 * Function to handle 'change' event of Functional location category
		 * @param {sap.ui.base.Event} oEvent
		 */
		onFlocCatChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.Floccategory;
			if (sValue === "" || sValue === undefined) {
				oModelData.Floccategory = "";
				oModelData.FlocCategoryDesc = "";
			} else {
				oModelData.Floccategory = sValue.toUpperCase();
				this._flocCategory(oModelData, sIndex, sModelName);
			}
		},
		_flocCategory: function (f, sIndex, sModelName) {
			var g = this;
			var c = f.Floccategory;
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				//var q = "/FLocCatgValueHelpSet?$filter=" + jQuery.sap.encodeURL("FlocCategory eq '" + c + "'");
				var sPath = "/FLocCatgValueHelpSet";
				var oFilters = [new sap.ui.model.Filter("FlocCategory", "EQ", c)];
				var oModel = g.getView().getModel("valueHelp");
				var fnSuccess = function (d) {
					if (d.results.length > 0) {
						f.Floccategory = a;
						f.FlocCategoryDesc = d.results[0].FlocCategoryDesc;

						if (f.Floccategory === "L" && f.lam === undefined) {
							f.lam = {
								Lrpid: "",
								LrpidDesc: "",
								Strtptatr: "",
								Endptatr: "",
								Length: "",
								LinUnit: "",
								LinUnitDesc: "",
								Startmrkr: "",
								Endmrkr: "",
								Mrkdisst: "",
								Mrkdisend: "",
								MrkrUnit: "",
								enableLrp: true,
								enableMarker: false,
								LrpidVS: "None",
								StrtptatrVS: "None",
								EndptatrVS: "None",
								LinUnitVS: "None",
								StartmrkrVS: "None",
								EndmrkrVS: "None",
								MrkdisstVS: "None",
								MrkdisendVS: "None",
								MrkrUnitVS: "None"
							};
						}

						g.readStatusProf(c, sIndex, sModelName);
					} else {
						f.Floccategory = "";
						f.FlocCategoryDesc = "";
						f.FloccategoryVS = "Error";
						f.FloccategoryVST = "Invalid Entry";
						g.getModel(sModelName).refresh();
					}
				};
				var fnError = function (e) {
					var b = JSON.parse(e.responseText);
					var d = b.error.message.value;
					f.FloccategoryVS = "Error";
					f.FloccategoryVST = d;
					g.getModel(sModelName).refresh();
				};
				g._readData(sPath, oModel, fnSuccess, fnError, oFilters);
			} else {
				f.Floccategory = a;
				g.getModel(sModelName).refresh();
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Functional location category
		 * @param {sap.ui.base.Event} oEvent
		 */
		onFlocCatVH: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			this.flocCatVH(oModelData, sIndex, sModelName);
		},
		/*
		 * To display value help dialog of Functional location category
		 * @param {object} p
		 * @param {string} sIndex
		 * @param {string} sModelName
		 */
		flocCatVH: function (p, sIndex, sModelName) {
			var g = this;
			var flCatSearchResults;
			if (flCatSearchResults === undefined) {
				var flCatSelectDialog = new sap.m.SelectDialog({
					title: this.getView().getModel("i18n").getProperty("FUNLOC_CAT"),
					noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
					items: {
						path: "/FLocCatgValueHelpSet",
						template: new sap.m.StandardListItem({
							title: "{FlocCategory}",
							description: "{FlocCategoryDesc}"
						})
					},
					confirm: function (E) {
						p.Floccategory = E.getParameters().selectedItem.getProperty("title");
						p.FlocCategoryDesc = E.getParameters().selectedItem.getProperty("description");
						p.FloccategoryVS = "None";
						p.FloccategoryVST = "";

						if (p.Floccategory === "L" && p.lam === undefined) {
							p.lam = {
								Lrpid: "",
								LrpidDesc: "",
								Strtptatr: "",
								Endptatr: "",
								Length: "",
								LinUnit: "",
								LinUnitDesc: "",
								Startmrkr: "",
								Endmrkr: "",
								Mrkdisst: "",
								Mrkdisend: "",
								MrkrUnit: "",
								enableLrp: true,
								enableMarker: false,
								LrpidVS: "None",
								StrtptatrVS: "None",
								EndptatrVS: "None",
								LinUnitVS: "None",
								StartmrkrVS: "None",
								EndmrkrVS: "None",
								MrkdisstVS: "None",
								MrkdisendVS: "None",
								MrkrUnitVS: "None"
							};
						}

						g.readStatusProf(p.Floccategory, sIndex, sModelName);
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("FlocCategory", FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("FlocCategoryDesc", FilterOperator.Contains, sValue)
								],
								false)
						]);
					}
				});

				var sPath = "/FLocCatgValueHelpSet";
				var oModel = g.getView().getModel("valueHelp");
				var fnSuccess = function (h) {
					if (h.results.length > 0) {
						flCatSearchResults = h;
						var I = new sap.m.StandardListItem({
							title: "{FlocCategory}",
							description: "{FlocCategoryDesc}",
							active: true
						});
						var e = new sap.ui.model.json.JSONModel();
						e.setData(h);
						flCatSelectDialog.setModel(e);
						// flCatSelectDialog.setGrowingThreshold(h.results.length);
						flCatSelectDialog.bindAggregation("items", "/results", I);
					} else {
						flCatSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
					}
				};
				var fnError = function () {};
				g._readData(sPath, oModel, fnSuccess, fnError);
			} else {
				var e = new sap.ui.model.json.JSONModel();
				e.setData(flCatSearchResults);
				flCatSelectDialog.setModel(e);
				var I = flCatSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			flCatSelectDialog.open();
		},
		/*
		 * Function to handle 'liveChange' event of Superior functional location
		 * @param {sap.ui.base.Event} oEvent
		 */
		SupflocChange: function (oEvent) {
			oEvent.getSource().setValueState("None");
		},
		/*
		 * Function to handle 'change' event of Superior functional location
		 * @param {sap.ui.base.Event} oEvent
		 */
		onSupFlocChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.SupFunctionallocation;
			if (sValue) {
				oModelData.SupFunctionallocation = sValue.toUpperCase();
				var sExistFlag = false;
				var AIWModel = sap.ui.getCore().getModel(sModelName);
				var oAIWData = AIWModel.getData();

				for (var i = 0; i < oAIWData.length; i++) {
					if (oModelData.SupFunctionallocation === oAIWData[i].Functionallocation) {
						oModelData.SupFlocdescription = oAIWData[i].Flocdescription;
						sExistFlag = true;
						break;
					}
				}

				if (sExistFlag && oModelData.Strucindicator) {
					AIWModel.setProperty(sIndex, oModelData);
					this.readSupFlocDetails(oModelData.Functionallocation, "SUP", sIndex);
				} else {
					this._supFunctionalLocation(oModelData, sIndex, sModelName);
				}
			} else {
				oModelData.SupFunctionallocation = "";
				oModelData.SupFlocdescription = "";
				if (sap.ui.getCore().getModel("SUP_FLOC_DATA")) {
					var mSupFlocModel = sap.ui.getCore().getModel("SUP_FLOC_DATA");
					var mSupFlocData = mSupFlocModel.getData();
					var mSupFlocIndex;
					if (mSupFlocData.length > 0) {
						for (var a = 0; a < mSupFlocData.length; a++) {
							if (oModelData.Functionallocation === mSupFlocData[a].Functionallocation) {
								mSupFlocIndex = a;
								break;
							}
						}
						var sSupFlocData = sap.ui.getCore().getModel("SUP_FLOC_DATA").getProperty("/" + mSupFlocIndex);
						if (sSupFlocData) {
							oModelData.Title = "";
							oModelData.TitleCode = "";
							oModelData.Name1 = "";
							oModelData.Name2 = "";
							oModelData.Name3 = "";
							oModelData.Name4 = "";
							oModelData.Sort1 = "";
							oModelData.Sort2 = "";
							oModelData.NameCo = "";
							oModelData.PostCod1 = "";
							oModelData.City1 = "";
							oModelData.Building = "";
							oModelData.Floor = "";
							oModelData.Roomnum = "";
							oModelData.Strsuppl1 = "";
							oModelData.Strsuppl2 = "";
							oModelData.Strsuppl3 = "";
							oModelData.AddrLocation = "";
							oModelData.RefPosta = "";
							oModelData.Landx = "";
							oModelData.TimeZone = "";
							oModelData.Region = "";
							oModelData.RegionDesc = "";
							oModelData.RefPostaLblReq = false;

							var mAddressModel = sap.ui.getCore().getModel("flocAddressView");
							var mAddressData = mAddressModel.getData();
							for (var as = 0; as < mAddressData.length; as++) {
								if (oModelData.Functionallocation === mAddressData[as].Functionallocation) {
									mAddressData.splice(as, 1);
									mAddressModel.setData(mAddressData);
									break;
								}
							}

							mSupFlocData.splice(mSupFlocIndex, 1);
							mSupFlocModel.setData(mSupFlocData);
						}
					}
				}

				var currentDoi = [];
				sap.ui.getCore().getModel("dataOriginMOP").getData().FL.forEach(function (item) {
					if (item.key === oModelData.Functionallocation) {
						currentDoi = item.DOI;
					}
				});
				currentDoi.forEach(function (d) {
					if (d.maintenance === false) {
						d.instLoc = false;
						d.SupFlVal = "";
					}
				});
			}
		},
		_supFunctionalLocation: function (f, sIndex, sModelName) {
			var g = this;
			var c = f.SupFunctionallocation;
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var sPath = "/ChangeRequestSet";
				var oFilters = [new sap.ui.model.Filter("Tplnr", "EQ", ""),
					new sap.ui.model.Filter("Tplma", "EQ", c),
					new sap.ui.model.Filter("Tplkz", "EQ", f.Strucindicator)
				];
				var oExpand = ["FLAddr", "FLClass", "FLEmail", "FLFax", "FLLAM", "FLLAMCH", "FLMltxt", "FLPermit", "FLPrtnr", "FLTele", "FLUrl",
					"FLVal", "FuncLoc"
				];
				var urlParameters = {
					"$expand": oExpand
				};
				var oModel = g.getView().getModel();
				g.BusyDialog.open();
				var fnSuccess = function (d) {
					g.BusyDialog.close();
					if (d.results.length > 0) {
						var h = d.results[0].FuncLoc.results[0];
						f.SupFunctionallocation = a;
						g.SupFunctionallocation = a;
						f.SupFlocdescription = h.Supflocdesc;
						g.getModel(sModelName).refresh();
						g.readSupFlocDetails(f.Functionallocation, "SUP", sIndex);
					} else {
						f.SupFunctionallocation = g.SupFunctionallocation;
						f.SupFunctionallocationVS = "Error";
						f.SupFunctionallocationVST = "Invalid Entry";
						g.getModel(sModelName).refresh();
					}
				};
				var fnError = function (e) {
					g.BusyDialog.close();
					var b = JSON.parse(e.responseText);
					var d = b.error.message.value;
					f.SupFunctionallocationVS = "Error";
					f.SupFunctionallocationVST = d;
					g.getModel(sModelName).refresh();
				};
				g._readData(sPath, oModel, fnSuccess, fnError, oFilters, urlParameters);
			} else {
				f.SupFunctionallocation = g.SupFunctionallocation;
				g.getModel(sModelName).refresh();
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Superior functional location
		 * @param {sap.ui.base.Event} oEvent
		 */
		onSupFlocVH: function (oEvent) {
			var g = this;
			var mpSearchResults;
			if (mpSearchResults === undefined) {
				var oSource = oEvent.getSource();
				var oJsonModel = g.getView().getModel("AIWFLOC");
				var AIWModel = sap.ui.getCore().getModel("AIWFLOC");
				var oJsonData;
				var mpSelectDialog = new sap.m.SelectDialog({
					title: g.getView().getModel("i18n").getProperty("FLOC_TXT"),
					noDataText: g.getView().getModel("i18n").getProperty("LOAD") + "...",
					growingThreshold: 5000,
					items: {
						path: "/FunctionLocationSet",
						template: new sap.m.StandardListItem({
							title: "{Tplnr}",
							description: "{Pltxt}"
						})
					},
					confirm: function (E) {
						var sIndex = oSource.getBindingContext("AIWFLOC").getPath();
						oJsonData = oJsonModel.getProperty(sIndex);
						oSource.setValue(E.getParameters().selectedItem.getProperty("title"));
						oJsonData.SupFlocdescription = E.getParameters().selectedItem.getProperty("description");
						oSource.setValueState("None");
						oSource.setValueStateText("");
						oJsonModel.setProperty(sIndex, oJsonData);
						AIWModel.setProperty(sIndex, oJsonData);
						g.readSupFlocDetails(oJsonData.Functionallocation, "SUP", sIndex);
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("Tplnr", sap.ui.model.FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("Pltxt", sap.ui.model.FilterOperator.Contains, sValue)
								],
								false)
						]);
					}
				});

				var sPath = "/FunctionLocationSet";
				var oModel = g.getView().getModel("valueHelp");
				var fnSuccess = function (h) {
					if (h.results.length > 0) {
						var oModelData = sap.ui.getCore().getModel(g.oModelAIWFLOC).getData();
						if (oModelData.length > 0) {
							for (var i = 0; i < oModelData.length; i++) {
								if (oModelData[i].Functionallocation) {
									var sObj = {
										Tplnr: oModelData[i].Functionallocation,
										Pltxt: oModelData[i].Flocdescription
									};
									h.results.unshift(sObj);
								}
							}
						}
						mpSearchResults = h;
						var I = new sap.m.StandardListItem({
							title: "{Tplnr}",
							description: "{Pltxt}",
							active: true
						});
						var e = new sap.ui.model.json.JSONModel();
						e.setData(h);

						mpSelectDialog.setModel(e);
						mpSelectDialog.bindAggregation("items", "/results", I);
					} else {
						mpSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
					}
				};
				var fnError = function () {};
				g._readData(sPath, oModel, fnSuccess, fnError);
			} else {
				var e = new sap.ui.model.json.JSONModel();
				e.setData(mpSearchResults);
				mpSelectDialog.setModel(e);
				var I = mpSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			mpSelectDialog.open();
			// this.sFlocIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			// var oModel = this.getView().getModel("valueHelp");
			// this._valueHelpDialog = sap.ui.xmlfragment("ugiaiwui.mdg.aiw.ZAIW_UI_03.Fragments.FlocVH", this);
			// this.getView().addDependent(this._valueHelpDialog);
			// this._valueHelpDialog.setModel(oModel);
			// this._valueHelpDialog.open();
			// // this.inputId = this._valueHelpDialog.getTitle();
			// this.inputId = "SuperiorFloc";

		},
		/*
		 * To read derive data of Superior functional location
		 * @param {string} pFunctionallocation
		 * @param {string} supflag
		 * @param {string} sIndex
		 */
		readSupFlocDetails: function (pFunctionallocation, supflag, sIndex) {
			var g = this;
			var sPath = "/ChangeRequestSet";
			var oModel = g.getView().getModel();
			var oMainModel = g.getView().getModel("mainView");
			var oMainData = oMainModel.getData();
			var oAIWModel = g.getView().getModel(g.oModelAIWFLOC);
			var oGlobalModel = sap.ui.getCore().getModel(g.oModelAIWFLOC);
			var sArray = [];

			var sPayload = {
				"ChangeRequestType": "AIWEAM0P",
				"CrDescription": "",
				"Reason": "01",
				"DeriveData": true,
				"FuncLoc": [],
				"FLAddr": [],
				"FLAddrI": [],
				"FLALTLBEL": [],
				"FLLAM": [],
				"FLClass": [],
				"FLVal": [],
				"FLLAMCH": [],
				"Equipment": [],
				"EqAddr": [],
				"EqAddrI": [],
				"EqPRT": [],
				"EqLAM": [],
				"EqClass": [],
				"EqVal": [],
				"MSPoint": [],
				"MSLAM": [],
				"MSClass": [],
				"MSVal": [],
				"MPLAN": [],
				"MPItem": [],
				"MPLAM": [],
				"MPOBList": [],
				"MPCycle": [],
				"MRBHeader": [],
				"MRBItem": [],
				"MRBSBIT": [],
				"EBHeader": [],
				"EBItem": [],
				"EBSBIT": [],
				"FBHeader": [],
				"FBItem": [],
				"FBSBIT": [],
				"WBHeader": [],
				"WBItem": [],
				"WBSBIT": [],
				"ONetwork": [],
				"ONLAM": [],
				"Workcenter": [],
				"WCCost": [],
				"GTList": [],
				"GTOprs": [],
				"GTComp": [],
				"GTClass": [],
				"GTVal": [],
				"ETList": [],
				"ETOprs": [],
				"ETComp": [],
				"ETClass": [],
				"ETVal": [],
				"FTList": [],
				"FTOprs": [],
				"FTComp": [],
				"FTClass": [],
				"FTVal": [],
				"Olink": [],
				"OLClass": [],
				"OLVal": [],
				"Messages": [],
				"FLDOI": []
			};
			var AIWFLOCModel = sap.ui.getCore().getModel(g.oModelAIWFLOC).getData();
			if (AIWFLOCModel.length > 0) {
				for (var a = 0; a < AIWFLOCModel.length; a++) {
					if (AIWFLOCModel[a].Functionallocation === "" || AIWFLOCModel[a].Functionallocation === undefined) {
						for (var v = 0; v < AIWFLOCModel.length; v++) {
							sap.ui.getCore().getModel("dataOriginMOP").getData().FL[v].key = AIWFLOCModel[v].Functionallocation;
						}
						//break; //return;
					}
					var sFuncLoc = {
						// "Type" : true, 
						"Tplnr": AIWFLOCModel[a].Functionallocation,
						"Txtmi": AIWFLOCModel[a].Flocdescription, // Floc Description
						"TplkzFlc": AIWFLOCModel[a].Strucindicator,
						"Tplxt": AIWFLOCModel[a].StrucIndicatorDesc,
						"EditMask": AIWFLOCModel[a].EditMask,
						"Hierarchy": AIWFLOCModel[a].Hierarchy,
						"Fltyp": AIWFLOCModel[a].Floccategory,
						"Flttx": AIWFLOCModel[a].FlocCategoryDesc,
						"Swerk": AIWFLOCModel[a].Maintplant,
						"Plantname": AIWFLOCModel[a].MaintplantDesc,
						"StorFloc": AIWFLOCModel[a].Location, // Location
						"Locationdesc": AIWFLOCModel[a].Locationdesc, // Location Description
						"Abckzfloc": AIWFLOCModel[a].Abckz,
						"Abctx": AIWFLOCModel[a].Abctx,
						"Bukrsfloc": AIWFLOCModel[a].Bukrs,
						"Butxt": AIWFLOCModel[a].Butxt,
						"City": AIWFLOCModel[a].City,
						"KostFloc": AIWFLOCModel[a].Kostl, // Cost Center
						"KokrFloc": AIWFLOCModel[a].Kokrs, // ccPart1
						"Contareaname": AIWFLOCModel[a].Mctxt, // Name
						"PlntFloc": AIWFLOCModel[a].Werks, // Planning Plant
						"Planningplantdes": AIWFLOCModel[a].Planningplantdes, // Planning Plant Description
						"Ingrp": AIWFLOCModel[a].Ingrp, // Planner Group
						"Plannergrpdesc": AIWFLOCModel[a].Innam, // Planner Group Description
						"Arbplfloc": AIWFLOCModel[a].Arbpl, // Work Center
						"Workcenterdesc": AIWFLOCModel[a].Ktext, // Plant Work Center
						"Wergwfloc": AIWFLOCModel[a].WcWerks, // Name
						"Gewrkfloc": AIWFLOCModel[a].MainArbpl, // Main Work Center
						"MainWcDesc": AIWFLOCModel[a].MainKtext, // Work center Plant
						"MainWcPlant": AIWFLOCModel[a].MainWerks, // Work Center Description
						"Tplma": AIWFLOCModel[a].SupFunctionallocation, // Sup FuncLoc
						"Supflocdesc": AIWFLOCModel[a].SupFlocdescription, // Sup FlocDescription
						"BeberFl": AIWFLOCModel[a].BeberFl, // Plant Section
						"Fing": AIWFLOCModel[a].Fing, // Person responsible
						"Tele": AIWFLOCModel[a].Tele, // Phone
						"Submtiflo": AIWFLOCModel[a].ConstrType, // Construction Type
						"Constdesc": AIWFLOCModel[a].ConstructionDesc, // Construction Description
						"Eqart": AIWFLOCModel[a].TechnicalObjectTyp, // TechnicalObjectTyp
						"Eartx": AIWFLOCModel[a].Description, // TechnicalObjectTyp Description
						"Stattext": AIWFLOCModel[a].Stattext, // System Status
						"StsmFloc": AIWFLOCModel[a].StsmEqui, // Status Profile
						"Statproftxt": AIWFLOCModel[a].StsmEquiDesc, // Status Profile Description
						"UstwFloc": AIWFLOCModel[a].UstwEqui, // Status with Status Number
						"UswoFloc": AIWFLOCModel[a].UswoEqui, // Status without Status Number
						"UstaFloc": AIWFLOCModel[a].UstaEqui, // User Status
						"IsMenu": AIWFLOCModel[a].menuAction,
						Adrnr: AIWFLOCModel[a].Adrnr,
						"Adrnri": AIWFLOCModel[a].Adrnri,
						"Deact": AIWFLOCModel[a].Deact,
						"Alkey": AIWFLOCModel[a].Alkey,
						Modeldesc: AIWFLOCModel[a].Modeldesc,
						Modelref: AIWFLOCModel[a].Modelref,
						Modelrver: AIWFLOCModel[a].Modelrver,
						Modelext: AIWFLOCModel[a].Modelext,
						Modelname: AIWFLOCModel[a].Modelname,
						Modelver: AIWFLOCModel[a].Modelver,
					};

					var aFLDOI = sap.ui.getCore().getModel("dataOriginMOP").getData().FL;
					if (aFLDOI && aFLDOI.length > 0) {
						var aDOIFields = aFLDOI[a].DOI;
						// sFuncLoc.Begrui = aDOIFields[0].instLoc ? "H" : "D";
						sFuncLoc.Swerki = aDOIFields[0].instLoc ? "H" : (aDOIFields[0].maintenance ? "D" : "");
						sFuncLoc.Storti = aDOIFields[1].instLoc ? "H" : (aDOIFields[1].maintenance ? "D" : "");
						// sFuncLoc.Msgrpi = aDOIFields[3].instLoc ? "H" : "D";
						sFuncLoc.Beberi = aDOIFields[2].instLoc ? "H" : (aDOIFields[2].maintenance ? "D" : "");
						sFuncLoc.Ppsidi = aDOIFields[3].instLoc ? "H" : (aDOIFields[3].maintenance ? "D" : "");
						sFuncLoc.Abckzi = aDOIFields[4].instLoc ? "H" : (aDOIFields[4].maintenance ? "D" : "");
						sFuncLoc.Bukrsi = aDOIFields[5].instLoc ? "H" : (aDOIFields[5].maintenance ? "D" : "");
						// sFuncLoc.Gsberi = aDOIFields[8].instLoc ? "H" : "D";
						// sFuncLoc.Anlnri = aDOIFields[9].instLoc ? "H" : "D";
						// sFuncLoc.Anlnri = aDOIFields[10].instLoc ? "H" : "D";
						sFuncLoc.Kostli = aDOIFields[6].instLoc ? "H" : (aDOIFields[6].maintenance ? "D" : "");
						sFuncLoc.Kokrsi = aDOIFields[7].instLoc ? "H" : (aDOIFields[7].maintenance ? "D" : "");
						// sFuncLoc.Proidi = aDOIFields[13].instLoc ? "H" : "D";
						// sFuncLoc.Daufni = aDOIFields[14].instLoc ? "H" : "D";
						// sFuncLoc.Aufnri = aDOIFields[15].instLoc ? "H" : "D";
						sFuncLoc.Iwerki = aDOIFields[8].instLoc ? "H" : (aDOIFields[8].maintenance ? "D" : "");
						sFuncLoc.Ingrpi = aDOIFields[9].instLoc ? "H" : (aDOIFields[9].maintenance ? "D" : "");
						sFuncLoc.Lgwidi = aDOIFields[10].instLoc ? "H" : (aDOIFields[10].maintenance ? "D" : "");
						// sFuncLoc.Swerki = aDOIFields[19].instLoc ? "H" : "D";
						// sFuncLoc.RbnrI = aDOIFields[20].instLoc ? "H" : "D";
						// sFuncLoc.Submti = aDOIFields[21].instLoc ? "H" : "D";
						// sFuncLoc.Einzli = aDOIFields[22].instLoc ? "H" : "D";
						// sFuncLoc.Iequii = aDOIFields[23].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[24].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[25].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[26].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[27].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[28].instLoc ? "H" : "D";
						sFuncLoc.Adrnri = aDOIFields[12].instLoc ? "H" : (aDOIFields[12].maintenance ? "D" : "");
					}

					if (supflag !== undefined && sFuncLoc.Tplnr === pFunctionallocation) {
						sFuncLoc.IsDOI = true;
					} else if (sFuncLoc.Tplnr === pFunctionallocation && pFunctionallocation.indexOf("-") > -1) {
						sFuncLoc.IsDOI = true;
						supflag = "SUP";
						var tempI = pFunctionallocation.lastIndexOf("-");
						var tempSupFL = pFunctionallocation.substring(0, tempI)
						sFuncLoc.Tplma = tempSupFL;
					}

					if (AIWFLOCModel[a].viewParameter === "create") {
						sFuncLoc.Type = true;
					}
					sPayload.FuncLoc.push(sFuncLoc);

					if ((AIWFLOCModel[a].Title !== "" && AIWFLOCModel[a].Title !== undefined) || (AIWFLOCModel[a].TitleCode !== "" && AIWFLOCModel[
								a]
							.TitleCode !== undefined) || (AIWFLOCModel[a].Name1 !== "" && AIWFLOCModel[a].Name1 !== undefined) || (AIWFLOCModel[a].Name2 !==
							"" && AIWFLOCModel[a].Name2 !== undefined) || (AIWFLOCModel[a].Name3 !== "" && AIWFLOCModel[a].Name3 !== undefined) ||
						(AIWFLOCModel[a].Name4 !== "" && AIWFLOCModel[a].Name4 !== undefined) || (AIWFLOCModel[a].Sort1 !== "" && AIWFLOCModel[a].Sort1 !==
							undefined) || (AIWFLOCModel[a].Sort2 !== "" && AIWFLOCModel[a].Sort2 !== undefined) || (AIWFLOCModel[a].NameCo !== "" &&
							AIWFLOCModel[a].NameCo !== undefined) || (AIWFLOCModel[a].PostCod1 !== "" &&
							AIWFLOCModel[a].PostCod1 !== undefined) || (AIWFLOCModel[a].City1 !== "" && AIWFLOCModel[a].City1 !== undefined) ||
						(AIWFLOCModel[a].Building !== "" && AIWFLOCModel[a].Building !== undefined) || (AIWFLOCModel[a].Floor !== "" && AIWFLOCModel[a]
							.Floor !==
							undefined) || (AIWFLOCModel[a].Roomnum !== "" && AIWFLOCModel[a].Roomnum !== undefined) || (AIWFLOCModel[a].AddrLocation !==
							"" &&
							AIWFLOCModel[a].AddrLocation !== undefined) || (AIWFLOCModel[a].Strsuppl1 !== "" && AIWFLOCModel[a].Strsuppl1 !== undefined) ||
						(AIWFLOCModel[a].Strsuppl2 !== "" && AIWFLOCModel[a].Strsuppl2 !== undefined) ||
						(AIWFLOCModel[a].Strsuppl3 !== "" && AIWFLOCModel[a].Strsuppl3 !== undefined) || (AIWFLOCModel[a].TimeZone !== "" &&
							AIWFLOCModel[a].TimeZone !== undefined) || (AIWFLOCModel[a].RefPosta !== "" && AIWFLOCModel[a].RefPosta !== undefined) || (
							AIWFLOCModel[a].Region !== "" && AIWFLOCModel[a]
							.Region !== undefined)) {
						var sFLAddr = {
							"Funcloc": AIWFLOCModel[a].Functionallocation,
							"Title": AIWFLOCModel[a].TitleCode,
							"Name1": AIWFLOCModel[a].Name1,
							"Name2": AIWFLOCModel[a].Name2,
							"Name3": AIWFLOCModel[a].Name3,
							"Name4": AIWFLOCModel[a].Name4,
							"Sort1": AIWFLOCModel[a].Sort1,
							"Sort2": AIWFLOCModel[a].Sort2,
							"NameCo": AIWFLOCModel[a].NameCo,
							"PostCod1": AIWFLOCModel[a].PostCod1,
							"City1": AIWFLOCModel[a].City1,
							"Building": AIWFLOCModel[a].Building,
							"Floor": AIWFLOCModel[a].Floor,
							"Roomnum": AIWFLOCModel[a].Roomnum,
							"Strsuppl1": AIWFLOCModel[a].Strsuppl1,
							"Strsuppl2": AIWFLOCModel[a].Strsuppl2,
							"Strsuppl3": AIWFLOCModel[a].Strsuppl3,
							"Location": AIWFLOCModel[a].AddrLocation,
							"RPostafl": AIWFLOCModel[a].RefPosta,
							"Landx": AIWFLOCModel[a].Landx,
							"TimeZone": AIWFLOCModel[a].TimeZone,
							"RPostFl": AIWFLOCModel[a].Region,
							"Regiotxt": AIWFLOCModel[a].RegionDesc
						};
						sPayload.FLAddr.push(sFLAddr);
					}

					var aIntlAddr = AIWFLOCModel[a].intlAddr;
					if (aIntlAddr.length > 0) {
						for (var z = 0; z < aIntlAddr.length; z++) {
							aIntlAddr[z].Funcloc = AIWFLOCModel[a].Functionallocation;
							sPayload.FLAddrI.push(aIntlAddr[z]);
						}
					}

					if (g.AltLblDerv === "2" && AIWFLOCModel[a].altlbl.length > 0) {
						for (var y = 0; y < AIWFLOCModel[a].altlbl.length; y++) {
							var oAltLbl = {
								"Funcloc": AIWFLOCModel[a].Functionallocation,
								"AltAlkey": AIWFLOCModel[a].altlbl[y].AltAlkey,
								"AltStrno": AIWFLOCModel[a].altlbl[y].AltStrno,
								"AltTplkz": AIWFLOCModel[a].altlbl[y].AltTplkz
							};
							sPayload.FLALTLBEL.push(oAltLbl);
						}
					}

					if (AIWFLOCModel[a].lam) {
						var sFLLAM = {
							"Funcloc": AIWFLOCModel[a].Functionallocation,
							"Lrpid": AIWFLOCModel[a].lam.Lrpid,
							"Strtptatr": AIWFLOCModel[a].lam.Strtptatr,
							"Endptatr": AIWFLOCModel[a].lam.Endptatr,
							"Length": AIWFLOCModel[a].lam.Length,
							"LinUnit": AIWFLOCModel[a].lam.LinUnit,
							"Startmrkr": AIWFLOCModel[a].lam.Startmrkr,
							"Endmrkr": AIWFLOCModel[a].lam.Endmrkr,
							"Mrkdisst": AIWFLOCModel[a].lam.Mrkdisst,
							"Mrkdisend": AIWFLOCModel[a].lam.Mrkdisend,
							"MrkrUnit": AIWFLOCModel[a].lam.MrkrUnit,
							"LamDer": AIWFLOCModel[a].lam.LamDer
						};
						sPayload.FLLAM.push(sFLLAM);
					}

					var sFLClassList = AIWFLOCModel[a].classItems;
					if (sFLClassList) {
						if (sFLClassList.length > 0) {
							for (var b = 0; b < sFLClassList.length; b++) {
								var sFLClass = {
									"Funcloc": AIWFLOCModel[a].Functionallocation,
									"Classtype": sFLClassList[b].Classtype,
									"Class": sFLClassList[b].Class,
									"Clstatus1": sFLClassList[b].Clstatus1,
									"Artxt": sFLClassList[b].ClassTypeDesc
								};
								sPayload.FLClass.push(sFLClass);
							}
						}
					}

					var sFLCharList = AIWFLOCModel[a].characteristics;
					if (sFLCharList) {
						if (sFLCharList.length > 0) {
							for (var c = 0; c < sFLCharList.length; c++) {
								var sFLVal = {
									"Funcloc": AIWFLOCModel[a].Functionallocation,
									"Atnam": sFLCharList[c].Atnam,
									"Textbez": sFLCharList[c].Textbez,
									"Atwrt": sFLCharList[c].Atwrt,
									"Class": sFLCharList[c].Class
								};
								sPayload.FLVal.push(sFLVal);
							}
						}
					}

					var aFLLinChar = AIWFLOCModel[a].linearChar;
					if (aFLLinChar) {
						if (aFLLinChar.length > 0) {
							var alinearChar = $.map(aFLLinChar, function (obj) {
								return $.extend(true, {}, obj);
							});
							for (var c = 0; c < alinearChar.length; c++) {
								delete alinearChar[c].linCharEnable;
								alinearChar[c].Funcloc = AIWFLOCModel[a].Functionallocation;
								sPayload.FLLAMCH.push(alinearChar[c]);
							}
						}
					}

					sap.ui.getCore().getModel("dataOriginMOP").getData().FL[a].key = AIWFLOCModel[a].Functionallocation;
				}
			}

			var fnSuccess = function (r) {
				oMainData.tableBusy = false;
				if (r.Messages.results.length > 0) {
					var oMessageList = [];
					for (var e = 0; e < r.Messages.results.length; e++) {
						oMessageList.push({
							type: formatter.getMessageType(r.Messages.results[e].Type),
							title: r.Messages.results[e].Message
						});
					}
					g.createMessagePopover(oMessageList, false);
					oMainData.tableBusy = false;
					oMainModel.setData(oMainData);
					return;
				}
				if (r.FuncLoc.results.length > 0) {
					if (r.FuncLoc.results.length > 0) {
						for (var i = 0; i < r.FuncLoc.results.length; i++) {
							var h = r.FuncLoc.results[i];
							var sModelData = {
								intlAddr: [],
								altlbl: [],
								classItems: [],
								characteristics: [],
								linearChar: [],
								FunctionallocationVS: "None",
								FunctionallocationVST: "",
								FlocdescriptionVS: "None",
								FlocdescriptionVST: "",
								StrucindicatorVS: "None",
								StrucindicatorVST: "",
								FloccategoryVS: "None",
								FloccategoryVST: "",
								SupFunctionallocationVS: "None",
								SupFunctionallocationVST: "",
								MaintplantVS: "None",
								MaintplantVST: "",
								StsmEquiVS: "None",
								StsmEquiVST: "",
								UstwEquiVS: "None",
								UstwEquiVST: "",
								UswoEquiVS: "None",
								UswoEquiVST: "",
								TechnicalObjectTypVS: "None",
								TechnicalObjectTypVST: "",
								LocationVS: "None",
								LocationVST: "",
								AbckzVS: "None",
								AbckzVST: "",
								MainArbplVS: "None",
								MainArbplVST: "",
								BeberFlVS: "None",
								BeberFlVST: "",
								BukrsVS: "None",
								BukrsVST: "",
								KostlVS: "None",
								KostlVST: "",
								WerksVS: "None",
								WerksVST: "",
								IngrpVS: "None",
								IngrpVST: "",
								ArbplVS: "None",
								ArbplVST: "",
								ConstrTypeVS: "None",
								ConstrTypeVST: "",
								RefPostaVS: "None",
								RefPostaVST: "",
								LangucodeVS: "None",
								LangucodeVST: "",
								TimeZoneVS: "None",
								TimeZoneVST: "",

								TplnrEnabled: true,
								FunctionalLocEnabled: true,
								FlocCatEnabled: true,
								StrucIndEnabled: true,
								MaintplantEnabled: true,
								BukrsEnabled: true,
							};
							sModelData.Functionallocation = h.Tplnr;
							sModelData.Flocdescription = h.Txtmi;
							sModelData.EditMask = h.EditMask;
							sModelData.Hierarchy = h.Hierarchy;
							sModelData.Floccategory = h.Fltyp;
							sModelData.FlocCategoryDesc = h.Flttx;
							sModelData.Strucindicator = h.TplkzFlc;
							sModelData.StrucIndicatorDesc = h.Tplxt;
							sModelData.SupFunctionallocation = h.Tplma; // Sup FuncLoc
							sModelData.SupFlocdescription = h.Supflocdesc; // Sup FlocDescription
							sModelData.Stattext = h.Stattext; // System Status
							sModelData.StsmEqui = h.StsmFloc; // Status Profile
							sModelData.StsmEquiDesc = h.Statproftxt; // Status Profile Description
							sModelData.UstwEqui = h.UstwFloc; // Status with Status Number
							sModelData.UswoEqui = h.UswoFloc; // Status without Status Number
							sModelData.UstaEqui = h.UstaFloc; // User Status
							sModelData.TechnicalObjectTyp = h.Eqart; // TechnicalObjectTyp
							sModelData.Description = h.Eartx; // TechnicalObjectTyp Description
							sModelData.Maintplant = h.Swerk;
							sModelData.MaintplantDesc = h.Plantname;
							sModelData.Location = h.StorFloc; // Location
							sModelData.Locationdesc = h.Locationdesc; // Location Description
							sModelData.BeberFl = h.BeberFl; // Plant Section
							sModelData.Fing = h.Fing; // Person responsible
							sModelData.Tele = h.Tele; // Phone
							sModelData.Arbpl = h.Arbplfloc; // Work Center
							sModelData.Ktext = h.Workcenterdesc; // Work Center Description
							sModelData.WcWerks = h.Wergwfloc; // Work center Plant
							sModelData.MainArbpl = h.Gewrkfloc; // Main Work Center
							sModelData.MainKtext = h.MainWcDesc; // Plant Work Center
							sModelData.MainWerks = h.MainWcPlant; // Name
							sModelData.Abckz = h.Abckzfloc;
							sModelData.Abctx = h.Abctx;
							sModelData.Bukrs = h.Bukrsfloc;
							sModelData.Butxt = h.Butxt;
							sModelData.City = h.City;
							sModelData.Kostl = h.KostFloc; // Cost Center
							sModelData.Kokrs = h.KokrFloc; // ccPart1
							sModelData.Mctxt = h.Contareaname; // Name
							sModelData.Werks = h.PlntFloc; // Planning Plant
							sModelData.Planningplantdes = h.Planningplantdes; // Planning Plant Description
							sModelData.Ingrp = h.Ingrp; // Planner Group
							sModelData.Innam = h.Plannergrpdesc; // Planner Group Description
							sModelData.ConstrType = h.Submtiflo; // Construction Type
							sModelData.ConstructionDesc = h.Constdesc; // Construction Description
							sModelData.menuAction = h.IsMenu;
							sModelData.Adrnr = h.Adrnr;
							sModelData.Adrnri = h.Adrnri;
							sModelData.Deact = h.Deact;
							sModelData.Alkey = h.Alkey;
							sModelData.Altxt = h.Altxt;
							sModelData.Modeldesc = h.Modeldesc;
							sModelData.Modelref = h.Modelref;
							sModelData.Modelrver = h.Modelrver;
							sModelData.Modelext = h.Modelext;
							sModelData.Modelname = h.Modelname;
							sModelData.Modelver = h.Modelver;

							if (h.Type === true) {
								sModelData.viewParameter = "create";
							}
							if (h.Type === false) {
								sModelData.viewParameter = "change";
								if (sModelData.Floccategory === "" || sModelData.Floccategory === undefined) {
									sModelData.FlocCatEnabled = true;
								} else {
									sModelData.FlocCatEnabled = false;
								}
								if (sModelData.Strucindicator === "" || sModelData.Strucindicator === undefined) {
									sModelData.StrucIndEnabled = true;
								} else {
									sModelData.StrucIndEnabled = false;
								}
								sModelData.FunctionalLocEnabled = false;
							}

							if (h.Swerk !== "") {
								// sModelData.MaintplantEnabled = false;
								sModelData.BukrsEnabled = false;
							} else {
								sModelData.MaintplantEnabled = true;
								sModelData.BukrsEnabled = true;
							}

							if (r.FLLAM.results.length > 0) {
								var aFlLam = r.FLLAM.results;
								for (var x = 0; x < aFlLam.length; x++) {
									if (aFlLam[x].Funcloc === sModelData.Functionallocation) {
										var oFLLAM = {
											"Funcloc": aFlLam[x].Funcloc,
											"Lrpid": aFlLam[x].Lrpid,
											"LrpidDesc": aFlLam[x].LrpDescr,
											"Strtptatr": aFlLam[x].Strtptatr,
											"Endptatr": aFlLam[x].Endptatr,
											"Length": aFlLam[x].Length,
											"LinUnit": aFlLam[x].LinUnit,
											"LinUnitDesc": aFlLam[x].Uomtext,
											"Startmrkr": aFlLam[x].Startmrkr,
											"Endmrkr": aFlLam[x].Endmrkr,
											"Mrkdisst": aFlLam[x].Mrkdisst,
											"Mrkdisend": aFlLam[x].Mrkdisend,
											"MrkrUnit": aFlLam[x].MrkrUnit,
											"LamDer": aFlLam[x].LamDer
										};
										sModelData.lam = oFLLAM;
										break;
									}
								}
							}

							if (r.FLAddr) {
								if (r.FLAddr.results) {
									var sAddress = r.FLAddr.results;
									if (sAddress) {
										if (sAddress.length > 0) {
											for (var j = 0; j < sAddress.length; j++) {
												if (sModelData.Functionallocation === sAddress[j].Funcloc) {
													var oAddressModel = sap.ui.getCore().getModel("flocAddressView");
													var oAddressData = oAddressModel.getData();
													var mCountFlag = true;
													var sObj, sMatchIndex;
													if (oAddressData.length > 0) {
														for (var sa = 0; sa < oAddressData.length; sa++) {
															if (sModelData.Functionallocation === oAddressData[sa].Functionallocation) {
																mCountFlag = false;
																sMatchIndex = sa;
																break;
															}
														}
													}
													if (mCountFlag && sModelData.SupFunctionallocation !== "" && sModelData.SupFunctionallocation !== undefined) {
														sObj = {
															Functionallocation: sModelData.Functionallocation,
															IsEditable: sAddress[j].IsEditable
														};
														oAddressData.push(sObj);
														oAddressModel.setData(oAddressData);
													}
													if (!mCountFlag && sModelData.SupFunctionallocation !== "" && sModelData.SupFunctionallocation !== undefined) {
														oAddressData[sMatchIndex].Functionallocation = sModelData.Functionallocation;
														oAddressData[sMatchIndex].IsEditable = sAddress[j].IsEditable; //sModelData.IsEditable;
														oAddressModel.setData(oAddressData);
													}

													sModelData.Title = sAddress[j].Titletxt; // searchTerm1
													sModelData.TitleCode = sAddress[j].Title; // searchTerm1
													sModelData.Name1 = sAddress[j].Name1; // searchTerm1
													sModelData.Name2 = sAddress[j].Name2; // searchTerm1
													sModelData.Name3 = sAddress[j].Name3; // searchTerm1
													sModelData.Name4 = sAddress[j].Name4; // searchTerm1
													sModelData.Sort1 = sAddress[j].Sort1; // searchTerm1
													sModelData.Sort2 = sAddress[j].Sort2; // searchTerm2
													sModelData.NameCo = sAddress[j].NameCo; // Company 
													sModelData.PostCod1 = sAddress[j].PostCod1;
													sModelData.City1 = sAddress[j].City1; // City
													sModelData.Building = sAddress[j].Building;
													sModelData.Floor = sAddress[j].Floor;
													sModelData.Roomnum = sAddress[j].Roomnum;
													sModelData.Street = sAddress[j].Street;
													sModelData.Strsuppl1 = sAddress[j].Strsuppl1;
													sModelData.Strsuppl2 = sAddress[j].Strsuppl2;
													sModelData.Strsuppl3 = sAddress[j].Strsuppl3;
													sModelData.RefPosta = sAddress[j].RPostafl;
													sModelData.Landx = sAddress[j].Landx;
													sModelData.TimeZone = sAddress[j].TimeZone;
													sModelData.AddrLocation = sAddress[j].Location;
													sModelData.Region = sAddress[j].RPostFl;
													sModelData.RegionDesc = sAddress[j].Regiotxt;
												}
											}
										} else {
											sModelData.Title = sModelData.Title ? sModelData.Title : "";
											sModelData.TitleCode = sModelData.TitleCode ? sModelData.TitleCode : "";
											sModelData.Name1 = sModelData.Name1 ? sModelData.Name1 : "";
											sModelData.Name2 = sModelData.Name2 ? sModelData.Name2 : "";
											sModelData.Name3 = sModelData.Name3 ? sModelData.Name3 : "";
											sModelData.Name4 = sModelData.Name4 ? sModelData.Name4 : "";
											sModelData.Sort1 = sModelData.Sort1 ? sModelData.Sort1 : "";
											sModelData.Sort2 = sModelData.Sort2 ? sModelData.Sort2 : "";
											sModelData.NameCo = sModelData.NameCo ? sModelData.NameCo : "";
											sModelData.PostCod1 = sModelData.PostCod1 ? sModelData.PostCod1 : "";
											sModelData.City1 = sModelData.City1 ? sModelData.City1 : "";
											sModelData.Building = sModelData.Building ? sModelData.Building : "";
											sModelData.Floor = sModelData.Floor ? sModelData.Floor : "";
											sModelData.Roomnum = sModelData.Roomnum ? sModelData.Roomnum : "";
											sModelData.Strsuppl1 = sModelData.Strsuppl1 ? sModelData.Strsuppl1 : "";
											sModelData.Strsuppl2 = sModelData.Strsuppl2 ? sModelData.Strsuppl2 : "";
											sModelData.Strsuppl3 = sModelData.Strsuppl3 ? sModelData.Strsuppl3 : "";
											sModelData.AddrLocation = sModelData.AddrLocation ? sModelData.AddrLocation : "";
											sModelData.RefPosta = sModelData.RefPosta ? sModelData.RefPosta : "";
											sModelData.Landx = sModelData.Landx ? sModelData.Landx : "";
											sModelData.TimeZone = sModelData.TimeZone ? sModelData.TimeZone : "";
											sModelData.Region = sModelData.Region ? sModelData.Region : "";
											sModelData.RegionDesc = sModelData.RegionDesc ? sModelData.RegionDesc : "";
										}
									}
								}
							}

							var aIntlAddr = r.FLAddrI.results;
							if (aIntlAddr.length > 0) {
								for (var z = 0; z < aIntlAddr.length; z++) {
									if (aIntlAddr[z].Funcloc === sModelData.Functionallocation) {
										aIntlAddr[z].AdNationEnable = false;
										aIntlAddr[z].City1iVS = "None";
										aIntlAddr[z].StreetiVS = "None";
										sModelData.intlAddr.push(aIntlAddr[z]);
									}
								}
							}

							var aAltLbl = r.FLALTLBEL.results;
							if (aAltLbl.length > 0) {
								for (var y = 0; y < aAltLbl.length; y++) {
									if (aAltLbl[y].Funcloc === sModelData.Functionallocation) {
										var oAltLbl = {
											"Funcloc": aAltLbl[y].Funcloc,
											"AltAlkey": aAltLbl[y].AltAlkey, // Labeling system
											"Altxt": aAltLbl[y].Altxt, // Labeling system descr
											"AltStrno": aAltLbl[y].AltStrno, // Alternative Label
											"AltTplkz": aAltLbl[y].AltTplkz, // Strycture Indicator
											"Tplxt": aAltLbl[y].Tplxt, // Structure Indicator Descr
											"Name1i": aAltLbl[y].Editm, // Edit Mask
											"Actvs": aAltLbl[y].Actvs, // Active
											"AltPrkey": aAltLbl[y].AltPrkey, // Primary
											"AltReuse": aAltLbl[y].AltReuse, // Reusable

											"enableLblSys": false,
											"enableAltLbl": true,
											"enableStrInd": true,

											"LblSysVS": "None",
											"AltLblVS": "None",
											"StrIndVS": "None"
										};
										sModelData.altlbl.push(oAltLbl);
									}
								}
							}

							if (r.FLClass) {
								var sClassList = r.FLClass.results;
								if (sClassList) {
									if (sClassList.length > 0) {
										for (var a = 0; a < sClassList.length; a++) {
											if (sModelData.Functionallocation === sClassList[a].Funcloc) {
												sClassList[a].ctEnable = false;
												sClassList[a].classEnable = false;
												sClassList[a].ClassTypeDesc = sClassList[a].Artxt;
												delete sClassList[a].Artxt;
												sClassList[a].ClassDesc = sClassList[a].Kltxt;
												delete sClassList[a].Kltxt;
												delete sClassList[a].Changerequestid;
												delete sClassList[a].Clint;
												delete sClassList[a].Service;
												// if (sModelData.Functionallocation === "") {
												// 	sClassList[a].sFlag = sClassList[a].Classtype + "-" + sClassList[a].Class + "-" + sClassList[a].Funcloc;
												// }
												sModelData.classItems.push(sClassList[a]);
											}
										}
										if (sModelData.Functionallocation === "") {
											var dups = [];
											sModelData.classItems = sModelData.classItems.filter(function (el) {
												// If it is not a duplicate, return true
												if (dups.indexOf(el.Classtype + el.Class + el.Funcloc) === -1) {
													dups.push(el.Classtype + el.Class + el.Funcloc);
													return true;
												}
												return false;
											});
										}
										sModelData.charNewButton = true;
										if (g.class && g.class.getId().includes("detailFloc") === true) {
											// var itemFragmentId = g.getView().createId("charFrag");
											// var newCharBtn = sap.ui.core.Fragment.byId(itemFragmentId, "newChar");
											// newCharBtn.setEnabled(true);
											g.class.setModel(new JSONModel(sModelData.classItems));
										}
									}
								}
							}

							if (r.FLVal) {
								var sCharList = r.FLVal.results;
								if (sCharList) {
									if (sCharList.length > 0) {
										for (var j = 0; j < sCharList.length; j++) {
											if (sModelData.Functionallocation === sCharList[j].Funcloc) {
												sCharList[j].cNameEnable = false;
												sCharList[j].Textbz = sCharList[j].Atwtb;
												delete sCharList[j].Ataut;
												delete sCharList[j].Ataw1;
												delete sCharList[j].Atawe;
												delete sCharList[j].Atcod;
												delete sCharList[j].Atflb;
												delete sCharList[j].Atflv;
												delete sCharList[j].Atimb;
												delete sCharList[j].Atsrt;
												delete sCharList[j].Atvglart;
												delete sCharList[j].Atzis;
												delete sCharList[j].Changerequestid;
												delete sCharList[j].CharName;
												delete sCharList[j].Charid;
												delete sCharList[j].Classtype;
												delete sCharList[j].Service;
												delete sCharList[j].Valcnt;
												sCharList[j].slNo = j + 1; // ()
												sCharList[j].flag = sCharList[j].Class + "-" + sCharList[j].slNo; // ()
												sModelData.characteristics.push(sCharList[j]);
											}
										}
										if (sModelData.Functionallocation === "") {
											var dups = [];
											sModelData.characteristics = sModelData.characteristics.filter(function (el) {
												// If it is not a duplicate, return true
												if (dups.indexOf(el.Class + el.Atnam + el.Atwrt) === -1) {
													dups.push(el.Class + el.Atnam + el.Atwrt);
													return true;
												}
												return false;
											});
										}
										for (var z = 0; z < sModelData.characteristics.length; z++) {
											var count = 1;
											for (var y = 0; y < sModelData.characteristics.length; y++) {
												if (z === y) {
													continue;
												}
												if (sModelData.characteristics[y].Atnam === sModelData.characteristics[z].Atnam && sModelData.characteristics[y].Class ===
													sModelData.characteristics[z].Class) {
													count++;
												}
											}
											if (count > 1) {
												sModelData.characteristics[z].charDltEnable = true;
											} else {
												sModelData.characteristics[z].charDltEnable = false;
											}

											if (sModelData.characteristics[z].Atein === true) {
												sModelData.characteristics[z].charAddEnable = false;
											}
										}
										if (g.char && g.char.getId().includes("detailFloc") === true) {
											g.char.setModel(new JSONModel(sModelData.characteristics));
										}
									}
								}
							}

							if (r.FLLAMCH) {
								var alinearChar = r.FLLAMCH.results;
								if (alinearChar) {
									if (alinearChar.length > 0) {
										for (var j = 0; j < alinearChar.length; j++) {
											if (sModelData.Functionallocation === alinearChar[j].Funcloc) {
												alinearChar[j].linCharEnable = true;
												sModelData.linearChar.push(alinearChar[j]);
											}
										}
										if (sModelData.Functionallocation === "") {
											var dups = [];
											sModelData.linearChar = sModelData.linearChar.filter(function (el) {
												// If it is not a duplicate, return true
												if (dups.indexOf(el.Charid + el.Atwrt) === -1) {
													dups.push(el.Charid + el.Atwrt);
													return true;
												}
												return false;
											});
										}
										// if (g.char && g.char.getId().includes("detailFloc") === true) {
										// 	g.char.setModel(new JSONModel(sModelData.characteristics));
										// }
									}
								}
							}

							if (sModelData.UstaEqui) {
								oMainData.visible = true;
							} else {
								oMainData.visible = false;
							}
							oMainModel.setData(oMainData);
							sArray.push(sModelData);
						}
						oAIWModel.setData(sArray);
						oGlobalModel.setData(sArray);

						// Sort DOI array - as main table FL is sorted in odata response
						sap.ui.getCore().getModel("dataOriginMOP").getData().FL.sort(function (a, b) {
							var nameA = a.key;
							var nameB = b.key;
							if (nameA < nameB) {
								return -1;
							}
							if (nameA > nameB) {
								return 1;
							}
							return 0;
						})

						for (var leq = 0; leq < oGlobalModel.getData().length; leq++) {
							if (pFunctionallocation === oGlobalModel.getData()[leq].Functionallocation) {
								var oJsonModel = new JSONModel();
								var sCurrentObject = oGlobalModel.getProperty("/" + leq);

								if ((sCurrentObject.Title !== "" && sCurrentObject.Title !== undefined) || (sCurrentObject.TitleCode !== "" &&
										sCurrentObject
										.TitleCode !== undefined) || (sCurrentObject.Name1 !== "" && sCurrentObject.Name1 !== undefined) || (sCurrentObject.Name2 !==
										"" && sCurrentObject.Name2 !== undefined) || (sCurrentObject.Name3 !== "" && sCurrentObject.Name3 !== undefined) ||
									(sCurrentObject.Name4 !== "" && sCurrentObject.Name4 !== undefined) ||
									(sCurrentObject.Sort1 !== "" && sCurrentObject.Sort1 !== undefined) || (sCurrentObject.Sort2 !== "" && sCurrentObject.Sort2 !==
										undefined) || (sCurrentObject.NameCo !== "" && sCurrentObject.NameCo !== undefined) || (sCurrentObject.PostCod1 !== "" &&
										sCurrentObject.PostCod1 !== undefined) || (sCurrentObject.City1 !== "" && sCurrentObject.City1 !== undefined) ||
									(sCurrentObject.Building !== "" && sCurrentObject.Building !== undefined) ||
									(sCurrentObject.Floor !== "" && sCurrentObject.Floor !== undefined) || (sCurrentObject.Roomnum !== "" && sCurrentObject.Roomnum !==
										undefined) || (sCurrentObject.AddrLocation !== "" && sCurrentObject.AddrLocation !== undefined) || (sCurrentObject.Strsuppl1 !==
										"" && sCurrentObject.Strsuppl1 !== undefined) || (sCurrentObject.Strsuppl2 !== "" && sCurrentObject.Strsuppl2 !==
										undefined) ||
									(sCurrentObject.Strsuppl3 !== "" && sCurrentObject.Strsuppl3 !== undefined) || (sCurrentObject.TimeZone !== "" &&
										sCurrentObject.TimeZone !== undefined) || (sCurrentObject.RefPosta !== "" && sCurrentObject.RefPosta !== undefined) || (
										sCurrentObject.Region !== "" && sCurrentObject.Region !== undefined)) {
									sCurrentObject.RefPostaLblReq = true;
								}

								oJsonModel.setData(sCurrentObject);
								var sCopyArray = [oJsonModel.getData()];
								var sSupFlocData = $.map(sCopyArray, function (obj) {
									return $.extend(true, {}, obj);
								});

								var mSupFlocModel = sap.ui.getCore().getModel("SUP_FLOC_DATA");
								var mSupFlocData = mSupFlocModel.getData();
								var mCountFlocFlag = true;
								for (var se = 0; se < mSupFlocData.length; se++) {
									if (sCurrentObject.Functionallocation === mSupFlocData[se].Functionallocation) {
										mCountFlocFlag = false;
									}
								}
								if (mCountFlocFlag && sCurrentObject.SupFunctionallocation !== "" && sCurrentObject.SupFunctionallocation !== undefined) {
									mSupFlocData.push(sSupFlocData[0]);
									mSupFlocModel.setData(mSupFlocData);
								}

								oMainData.tableBusy = false;
								oMainModel.setData(oMainData);

								if (supflag !== undefined) {
									var dData = [];
									sap.ui.getCore().getModel("dataOriginMOP").getData().FL.forEach(function (item) {
										if (item.key === pFunctionallocation) {
											dData = item.DOI;
										}
									});
									var fields = r.FLDOI.results;
									for (var f = 0; f < fields.length; f++) {
										fields[f].instLoc = true;
										if (fields[f].hasOwnProperty("maintenance")) {
											if (!fields[f].maintenance) {
												fields[f].targetVal = fields[f].SupFlVal;
											}
										} else {
											fields[f].maintenance = dData[f].maintenance;
											if (fields[f].maintenance) {
												fields[f].instLoc = false;
											} else {
												fields[f].instLoc = true;
											}

											fields[f].currentVal = dData[f].currentVal;
											// fields[f].currentValDesc = dData[f].currentValDesc;
										}
										if (fields[f].Property === "Maintplant" || fields[f].Property === "PlntFloc") {
											fields[f].locEnable = false;
											fields[f].maintEnable = false;
										} else {
											fields[f].locEnable = true;
											fields[f].maintEnable = true;
										}
										fields[f].targetVal = fields[f].SupFlVal;
									}

									sap.ui.getCore().getModel("dataOriginMOP").getData().FL.forEach(function (item) {
										if (item.key === pFunctionallocation) {
											item.DOI = fields;
										}
									});
								}
								// else {
								// 	g.handleDoiCreate(pFunctionallocation, "FL");
								// }
								// return;
								break;
							}
						}

						var aFLDOIdata = sap.ui.getCore().getModel("dataOriginMOP").getData().FL;
						for (var i = 0; i < r.FuncLoc.results.length; i++) {
							var h = r.FuncLoc.results[i];
							for (var z = 0; z < aFLDOIdata.length; z++) {
								if (h.Tplnr === aFLDOIdata[z].key) {
									var aDOIFields = aFLDOIdata[z].DOI;
									if (h.Swerki === "") {
										aDOIFields[0].maintenance = false;
										aDOIFields[0].instLoc = false;
										aDOIFields[0].SupFlVal = "";
										aDOIFields[0].currentVal = "";
										aDOIFields[0].targetVal = "";
									} else if (h.Swerki === "D") {
										aDOIFields[0].maintenance = true;
										aDOIFields[0].instLoc = false;
										aDOIFields[0].SupFlVal = "";
										aDOIFields[0].currentVal = h.Swerk;
										aDOIFields[0].targetVal = h.Swerk;
									} else {
										aDOIFields[0].maintenance = false;
										aDOIFields[0].instLoc = true;
										aDOIFields[0].SupFlVal = h.Swerk;
										aDOIFields[0].currentVal = "";
										aDOIFields[0].targetVal = h.Swerk;
									}

									if (h.Storti === "") {
										aDOIFields[1].maintenance = false;
										aDOIFields[1].instLoc = false;
										aDOIFields[1].SupFlVal = "";
										aDOIFields[1].currentVal = "";
										aDOIFields[1].targetVal = "";
									} else if (h.Storti === "D") {
										aDOIFields[1].maintenance = true;
										aDOIFields[1].instLoc = false;
										aDOIFields[1].SupFlVal = "";
										aDOIFields[1].currentVal = h.StorFloc;
										aDOIFields[1].targetVal = h.StorFloc;
									} else {
										aDOIFields[1].maintenance = false;
										aDOIFields[1].instLoc = true;
										aDOIFields[1].SupFlVal = h.StorFloc;
										aDOIFields[1].currentVal = "";
										aDOIFields[1].targetVal = h.StorFloc;
									}

									if (h.Beberi === "") {
										aDOIFields[2].maintenance = false;
										aDOIFields[2].instLoc = false;
										aDOIFields[2].SupFlVal = "";
										aDOIFields[2].currentVal = "";
										aDOIFields[2].targetVal = "";
									} else if (h.Beberi === "D") {
										aDOIFields[2].maintenance = true;
										aDOIFields[2].instLoc = false;
										aDOIFields[2].SupFlVal = "";
										aDOIFields[2].currentVal = h.BeberFl;
										aDOIFields[2].targetVal = h.BeberFl;
									} else {
										aDOIFields[2].maintenance = false;
										aDOIFields[2].instLoc = true;
										aDOIFields[2].SupFlVal = h.BeberFl;
										aDOIFields[2].currentVal = "";
										aDOIFields[2].targetVal = h.BeberFl;
									}

									if (h.Ppsidi === "") {
										aDOIFields[3].maintenance = false;
										aDOIFields[3].instLoc = false;
										aDOIFields[3].SupFlVal = "";
										aDOIFields[3].currentVal = "";
										aDOIFields[3].targetVal = "";
									} else if (h.Ppsidi === "D") {
										aDOIFields[3].maintenance = true;
										aDOIFields[3].instLoc = false;
										aDOIFields[3].SupFlVal = "";
										aDOIFields[3].currentVal = h.Arbplfloc;
										aDOIFields[3].targetVal = h.Arbplfloc;
									} else {
										aDOIFields[3].maintenance = false;
										aDOIFields[3].instLoc = true;
										aDOIFields[3].SupFlVal = h.Arbplfloc;
										aDOIFields[3].currentVal = "";
										aDOIFields[3].targetVal = h.Arbplfloc;
									}

									if (h.Abckzi === "") {
										aDOIFields[4].maintenance = false;
										aDOIFields[4].instLoc = false;
										aDOIFields[4].SupFlVal = "";
										aDOIFields[4].currentVal = "";
										aDOIFields[4].targetVal = "";
									} else if (h.Abckzi === "D") {
										aDOIFields[4].maintenance = true;
										aDOIFields[4].instLoc = false;
										aDOIFields[4].SupFlVal = "";
										aDOIFields[4].currentVal = h.Abckzfloc;
										aDOIFields[4].targetVal = h.Abckzfloc;
									} else {
										aDOIFields[4].maintenance = false;
										aDOIFields[4].instLoc = true;
										aDOIFields[4].SupFlVal = h.Abckzfloc;
										aDOIFields[4].currentVal = "";
										aDOIFields[4].targetVal = h.Abckzfloc;
									}

									if (h.Bukrsi === "") {
										aDOIFields[5].maintenance = false;
										aDOIFields[5].instLoc = false;
										aDOIFields[5].SupFlVal = "";
										aDOIFields[5].currentVal = "";
										aDOIFields[5].targetVal = "";
									} else if (h.Bukrsi === "D") {
										aDOIFields[5].maintenance = true;
										aDOIFields[5].instLoc = false;
										aDOIFields[5].SupFlVal = "";
										aDOIFields[5].currentVal = h.Bukrsfloc;
										aDOIFields[5].targetVal = h.Bukrsfloc;
									} else {
										aDOIFields[5].maintenance = false;
										aDOIFields[5].instLoc = true;
										aDOIFields[5].SupFlVal = h.Bukrsfloc;
										aDOIFields[5].currentVal = "";
										aDOIFields[5].targetVal = h.Bukrsfloc;
									}

									if (h.Kostli === "") {
										aDOIFields[6].maintenance = false;
										aDOIFields[6].instLoc = false;
										aDOIFields[6].SupFlVal = "";
										aDOIFields[6].currentVal = "";
										aDOIFields[6].targetVal = "";
									} else if (h.Kostli === "D") {
										aDOIFields[6].maintenance = true;
										aDOIFields[6].instLoc = false;
										aDOIFields[6].SupFlVal = "";
										aDOIFields[6].currentVal = h.KostFloc;
										aDOIFields[6].targetVal = h.KostFloc;
									} else {
										aDOIFields[6].maintenance = false;
										aDOIFields[6].instLoc = true;
										aDOIFields[6].SupFlVal = h.KostFloc;
										aDOIFields[6].currentVal = "";
										aDOIFields[6].targetVal = h.KostFloc;
									}

									if (h.Kokrsi === "") {
										aDOIFields[7].maintenance = false;
										aDOIFields[7].instLoc = false;
										aDOIFields[7].SupFlVal = "";
										aDOIFields[7].currentVal = "";
										aDOIFields[7].targetVal = "";
									} else if (h.Kokrsi === "D") {
										aDOIFields[7].maintenance = true;
										aDOIFields[7].instLoc = false;
										aDOIFields[7].SupFlVal = "";
										aDOIFields[7].currentVal = h.KokrFloc;
										aDOIFields[7].targetVal = h.KokrFloc;
									} else {
										aDOIFields[7].maintenance = false;
										aDOIFields[7].instLoc = true;
										aDOIFields[7].SupFlVal = h.KokrFloc;
										aDOIFields[7].currentVal = "";
										aDOIFields[7].targetVal = h.KokrFloc;
									}

									if (h.Iwerki === "") {
										aDOIFields[8].maintenance = false;
										aDOIFields[8].instLoc = false;
										aDOIFields[8].SupFlVal = "";
										aDOIFields[8].currentVal = "";
										aDOIFields[8].targetVal = "";
									} else if (h.Iwerki === "D") {
										aDOIFields[8].maintenance = true;
										aDOIFields[8].instLoc = false;
										aDOIFields[8].SupFlVal = "";
										aDOIFields[8].currentVal = h.PlntFloc;
										aDOIFields[8].targetVal = h.PlntFloc;
									} else {
										aDOIFields[8].maintenance = false;
										aDOIFields[8].instLoc = true;
										aDOIFields[8].SupFlVal = h.PlntFloc;
										aDOIFields[8].currentVal = "";
										aDOIFields[8].targetVal = h.PlntFloc;
									}

									if (h.Ingrpi === "") {
										aDOIFields[9].maintenance = false;
										aDOIFields[9].instLoc = false;
										aDOIFields[9].SupFlVal = "";
										aDOIFields[9].currentVal = "";
										aDOIFields[9].targetVal = "";
									} else if (h.Ingrpi === "D") {
										aDOIFields[9].maintenance = true;
										aDOIFields[9].instLoc = false;
										aDOIFields[9].SupFlVal = "";
										aDOIFields[9].currentVal = h.Ingrp;
										aDOIFields[9].targetVal = h.Ingrp;
									} else {
										aDOIFields[9].maintenance = false;
										aDOIFields[9].instLoc = true;
										aDOIFields[9].SupFlVal = h.Ingrp;
										aDOIFields[9].currentVal = "";
										aDOIFields[9].targetVal = h.Ingrp;
									}

									if (h.Lgwidi === "") {
										aDOIFields[10].maintenance = false;
										aDOIFields[10].instLoc = false;
										aDOIFields[10].SupFlVal = "";
										aDOIFields[10].currentVal = "";
										aDOIFields[10].targetVal = "";
									} else if (h.Lgwidi === "D") {
										aDOIFields[10].maintenance = true;
										aDOIFields[10].instLoc = false;
										aDOIFields[10].SupFlVal = "";
										aDOIFields[10].currentVal = h.Gewrkfloc;
										aDOIFields[10].targetVal = h.Gewrkfloc;
									} else {
										aDOIFields[10].maintenance = false;
										aDOIFields[10].instLoc = true;
										aDOIFields[10].SupFlVal = h.Gewrkfloc;
										aDOIFields[10].currentVal = "";
										aDOIFields[10].targetVal = h.Gewrkfloc;
									}

									if (h.Adrnri === "") {
										aDOIFields[12].maintenance = false;
										aDOIFields[12].instLoc = false;
										aDOIFields[12].SupFlVal = "";
										aDOIFields[12].currentVal = "";
										aDOIFields[12].targetVal = "";
									} else if (h.Adrnri === "D") {
										aDOIFields[12].maintenance = true;
										aDOIFields[12].instLoc = false;
										aDOIFields[12].SupFlVal = "";
										aDOIFields[12].currentVal = h.Adrnr;
										aDOIFields[12].targetVal = h.Adrnr;
									} else {
										aDOIFields[12].maintenance = false;
										aDOIFields[12].instLoc = true;
										aDOIFields[12].SupFlVal = h.Adrnr;
										aDOIFields[12].currentVal = "";
										aDOIFields[12].targetVal = h.Adrnr;
									}
								}
							}
						}
					}
				}
				oMainModel.setData(oMainData);
			};
			var fnError = function (err) {
				var error = [];
				if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror.errordetails
					.length === 0) {
					error[0] = JSON.parse(err.responseText).error.message.value;
				} else {
					for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
						error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
					}
				}
				var value = error.join("\n");
				oMainData.tableBusy = false;
				oMainModel.setData(oMainData);
				g.invokeMessage(value);
			};

			oMainData.tableBusy = true;
			oMainModel.setData(oMainData);
			if (sPayload.FLAddrI.length > 0) {
				sPayload.FLAddrI = $.map(sPayload.FLAddrI, function (obj) {
					return $.extend(true, {}, obj);
				});
				for (var i = 0; i < sPayload.FLAddrI.length > 0; i++) {
					delete sPayload.FLAddrI[i].AdNationEnable;
					delete sPayload.FLAddrI[i].City1iVS;
					delete sPayload.FLAddrI[i].StreetiVS;
				}
			}
			oModel.create(sPath, sPayload, {
				success: fnSuccess,
				error: fnError
			});
		},
		/*
		 * Function to handle 'change' event of Equipment in BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		equipmentChangeBom: function (oEvent) {
			var g = this;
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var AIWListEqModel = sap.ui.getCore().getModel("AIWListEqModel");
			var Eqdata = AIWListEqModel.getData();
			if (this.action === "createEbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListEqModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "copyEbom" || this.action === "copyMtoEbom") {
				this.sourceId = oEvent.getSource().getId();
				g._copyFragment.setBusy(true);
			}

			if (newValue !== "") {
				if (newValue === undefined)
					return;
				var oModelData = sap.ui.getCore().getModel("AIWEQUI").getData();
				if (oModelData.length > 0) {
					for (var i = 0; i < oModelData.length; i++) {
						if (newValue === oModelData[i].Equnr) {
							if (g.action === "createEbom") {
								Eqdata[g.sindex].Eqnrbom = oModelData[i].Equnr;
								Eqdata[g.sindex].EquiDesc = oModelData[i].Eqktx;
								Eqdata[g.sindex].equipValueState = "None";
								AIWListEqModel.setData(Eqdata);
								if (Eqdata[g.sindex].Werks !== "" && Eqdata[g.sindex].Stlan !== "") {
									g.readBomHdrDetails(Eqdata[g.sindex].Eqnrbom, Eqdata[g.sindex].Werks, Eqdata[g.sindex].Stlan, Eqdata, g.sindex);
								}
							}
							if (g.action === "copyEbom" || g.action === "copyMtoEbom") {
								var copyModel = g._copyFragment.getModel("copyModel");
								var copyData = copyModel.getData();
								var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
								if (binding === "/copyEquipmentSource") {
									copyData.copyEquipmentSource = oModelData[i].Equnr;
									copyData.copyEquipmentSourceDesc = oModelData[i].Eqktx;
								} else if (binding === "/copyEquipmentTarget") {
									copyData.copyEquipmentTarget = oModelData[i].Equnr;
									copyData.copyEquipmentTargetDesc = oModelData[i].Eqktx;
								}
								copyModel.setData(copyData);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");
								g._copyFragment.setBusy(false);
							}
							return;
						}
					}
				}
				var c = newValue.toUpperCase();
				var oFilter = [new sap.ui.model.Filter("Equnr", "EQ", c)];
				//this.BusyDialog.open();
				M.read("/EquipmentNumberSet", {
					filters: oFilter,
					success: function (r) {
						if (r.results.length > 0) {
							if (g.action === "createEbom") {
								Eqdata[g.sindex].Eqnrbom = r.results[0].Equnr;
								Eqdata[g.sindex].EquiDesc = r.results[0].Eqktx;
								Eqdata[g.sindex].equipValueState = "None";
								AIWListEqModel.setData(Eqdata);
								if (Eqdata[g.sindex].Werks !== "" && Eqdata[g.sindex].Stlan !== "") {
									g.readBomHdrDetails(Eqdata[g.sindex].Eqnrbom, Eqdata[g.sindex].Werks, Eqdata[g.sindex].Stlan, Eqdata, g.sindex);
								}
							}
							if (g.action === "copyEbom" || g.action === "copyMtoEbom") {
								/*sap.ui.getCore().byId(g.sourceId).setValue(r.results[0].Equnr);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");*/
								var copyModel = g._copyFragment.getModel("copyModel");
								var copyData = copyModel.getData();
								var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
								if (binding === "/copyEquipmentSource") {
									copyData.copyEquipmentSource = r.results[0].Equnr;
									copyData.copyEquipmentSourceDesc = r.results[0].Eqktx;
								} else if (binding === "/copyEquipmentTarget") {
									copyData.copyEquipmentTarget = r.results[0].Equnr;
									copyData.copyEquipmentTargetDesc = r.results[0].Eqktx;
								}
								copyModel.setData(copyData);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");
								g._copyFragment.setBusy(false);
							}
						} else {
							if (g.action === "createEbom") {
								Eqdata[g.sindex].equipValueState = "Error";
								AIWListEqModel.setData(Eqdata);
							}
							if (g.action === "copyEbom" || g.action === "copyMtoEbom") {
								sap.ui.getCore().byId(g.sourceId).setValueState("Error");
								g._copyFragment.setBusy(false);
							}
						}
						//g.BusyDialog.close();
					},
					error: function (err) {
						if (g.action === "createEbom") {
							Eqdata[g.sindex].equipValueState = "Error";
							AIWListEqModel.setData(Eqdata);
						}
						if (g.action === "copyEbom" || g.action === "copyMtoEbom") {
							sap.ui.getCore().byId(g.sourceId).setValueState("Error");
							g._copyFragment.setBusy(false);
						}
						//g.BusyDialog.close();
					}
				});
			} else {
				if (g.action === "createEbom") {
					Eqdata[g.sindex].equipValueState = "Error";
					AIWListEqModel.setData(Eqdata);
				}
				if (g.action === "copyEbom" || g.action === "copyMtoEbom") {
					sap.ui.getCore().byId(g.sourceId).setValueState("Error");
					g._copyFragment.setBusy(false);
				}
			}

		},

		/** Equipment Fragment **/
		/*
		 * Function to handle 'liveChange' event of Equipment
		 * @param {sap.ui.base.Event} oEvent
		 */
		equipmentChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.Equnr;
			if (sValue === "" || sValue === undefined) {
				oModelData.Equnr = "";
				// oModelData.Eqktx = "";
			}
			oEvent.getSource().setValueState("None");
		},
		/*
		 * Function to handle 'change' event of Equipment
		 * @param {sap.ui.base.Event} oEvent
		 */
		onEquipmentChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.Equnr;
			var sDescription;
			if (sValue === "" || sValue === undefined) {
				oModelData.Equnr = "";
				// oModelData.Eqktx = "";
			} else {
				oModelData.Equnr = sValue.toUpperCase();
				var sExistFlag = 0;
				var oModelData1 = sap.ui.getCore().getModel("AIWEQUI").getData();
				if (oModelData1.length > 0) {
					for (var i = 0; i < oModelData1.length; i++) {
						if (oModelData1[i].Equnr === sValue) {
							sDescription = oModelData1[i].Eqktx;
							sExistFlag++;
							break;
						}
					}
				}
				if (sExistFlag > 1) {
					oModelData[i].EqunrVS = "Error";
					var sMsg = "Key " + sValue + " for Equipment already exists";
					g.createMessagePopover([{
						title: sMsg,
						type: "Error"
					}], false);
					// sap.m.MessageBox.show("Key " + sValue + " for Equipment already exists", {
					// 	title: "Error",
					// 	icon: sap.m.MessageBox.Icon.ERROR,
					// 	onClose: function () {}
					// });
					g.getModel(sModelName).refresh();
					// oEvent.getSource().getModel(sModelName).getData().Eqktx = sDescription;
					// this.fetchData();
				} else {
					this._Equiment(oModelData, sModelName, sIndex);
				}
			}
		},
		_Equiment: function (f, sModelName, sIndex) {
			var g = this;
			var c = f.Equnr;
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var sPath = "/EquipmentNumberSet";
				var oFilters = [new sap.ui.model.Filter("Equnr", "EQ", c)];
				var oModel = this.getView().getModel("valueHelp");
				var fnSuccess = function (d) {
					if (d.results.length <= 0) {
						g.Equnr = a;
						f.Equnr = a;
						f.EqunrVS = "None";
						sap.ui.getCore().getModel("dataOriginMOP").getProperty("/EQ" + sIndex).key = f.Equnr;
						sap.ui.getCore().getModel("equiAddressView").getProperty(sIndex).Equnr = f.Equnr;
						// g.getModel(sModelName).refresh();
						// g.fetchData();
					} else {
						if (sModelName.indexOf("MSPT") > -1) {
							f.Equnr = a;
							f.EqunrVS = "None";
							g.getModel(sModelName).refresh();
							g.fetchData();
							return;
						}
						f.EqunrVS = "Error";
						var sMsg = "Key " + d.results[0].Equnr + " for Equipment already exists";
						g.createMessagePopover([{
							title: sMsg,
							type: "Error"
						}], false);
						// sap.m.MessageBox.show("Key " + d.results[0].Equnr + " for Equipment already exists", {
						// 	title: "Error",
						// 	icon: sap.m.MessageBox.Icon.ERROR,
						// 	onClose: function () {}
						// });
					}
					g.getModel(sModelName).refresh();
					// if (d.results.length > 0) {
					// 	f.Equnr = a;
					// 	g.Equnr = a;
					// 	f.Eqktx = d.results[0].Eqktx;
					// 	g.fetchData();
					// }
					// g.getModel(sModelName).refresh();
				};
				var fnError = function (e) {
					var b = JSON.parse(e.responseText);
					var d = b.error.message.value;
					f.EqunrVS = "Error";
					f.EqunrVST = d;
					g.getModel(sModelName).refresh();
				};
				g._readData(sPath, oModel, fnSuccess, fnError, oFilters);
			} else {
				f.Equnr = g.Equnr;
				g.getModel(sModelName).refresh();
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Equipment
		 * @param {sap.ui.base.Event} oEvent
		 */
		onEquiVH: function (oEvent) {
			var g = this;
			var mpSearchResults;
			if (mpSearchResults === undefined) {
				var sModelName = g.getFragmentModelName(oEvent);
				var oSource = oEvent.getSource();
				var oJsonModel = g.getView().getModel(sModelName);
				var oJsonData;
				var mpSelectDialog = new sap.m.SelectDialog({
					title: g.getView().getModel("i18n").getProperty("EQUIP_TXT"),
					noDataText: g.getView().getModel("i18n").getProperty("LOAD") + "...",
					growingThreshold: 5000,
					items: {
						path: "/EquipmentNumberSet",
						template: new sap.m.StandardListItem({
							title: "{Equnr}",
							description: "{Eqktx}"
						})
					},
					confirm: function (E) {
						var sIndex = oSource.getBindingContext(sModelName).getPath();
						oJsonData = oJsonModel.getProperty(sIndex);
						oSource.setValue(E.getParameters().selectedItem.getProperty("title"));
						oJsonData.Eqktx = E.getParameters().selectedItem.getProperty("description");
						oSource.setValueState("None");
						oSource.setValueStateText("");
						oJsonModel.setProperty(sIndex, oJsonData);
						g.fetchData();
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("Equnr", sap.ui.model.FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("Eqktx", sap.ui.model.FilterOperator.Contains, sValue)
								],
								false)
						]);
					}
				});

				var sPath = "/EquipmentNumberSet";
				var oModel = g.getView().getModel("valueHelp");
				var fnSuccess = function (h) {
					if (h.results.length > 0) {
						if (sModelName === g.oModelAIWMSPT) {
							var oModelData = g.getView().getModel("AIWEQUI").getData();
							if (oModelData.length > 0) {
								for (var i = 0; i < oModelData.length; i++) {
									if (oModelData[i].Equnr) {
										var sObj = {
											Equnr: oModelData[i].Equnr,
											Eqktx: oModelData[i].Eqktx
										};
										h.results.unshift(sObj);
									}
								}
							}
						}
						mpSearchResults = h;
						var I = new sap.m.StandardListItem({
							title: "{Equnr}",
							description: "{Eqktx}",
							active: true
						});
						var e = new sap.ui.model.json.JSONModel();
						e.setData(h);

						mpSelectDialog.setModel(e);
						mpSelectDialog.bindAggregation("items", "/results", I);
					} else {
						mpSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
					}
				};
				var fnError = function () {};
				g._readData(sPath, oModel, fnSuccess, fnError);
			} else {
				var e = new sap.ui.model.json.JSONModel();
				e.setData(mpSearchResults);
				mpSelectDialog.setModel(e);
				var I = mpSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			mpSelectDialog.open();

			// var sModelName = this.getFragmentModelName(oEvent);
			// var oModel = this.getView().getModel("valueHelp");
			// this.sEquiIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			// this._valueHelpDialog = sap.ui.xmlfragment("ugiaiwui.mdg.aiw.ZAIW_UI_03.Fragments.EquipmentVH", this);
			// this.getView().addDependent(this._valueHelpDialog);
			// this._valueHelpDialog.setModel(oModel);
			// this._valueHelpDialog.open();
			// // this.inputId = this._valueHelpDialog.getTitle();
			// if (sModelName === this.oModelAIWEQUI) {
			// 	this.inputId = "EQUI_Equipment";
			// } else if (sModelName === this.oModelAIWMSPT) {
			// 	this.inputId = "MSPT_Equipment";
			// }

		},
		/*
		 * Function to handle 'liveChange' event of Equipment Category
		 * @param {sap.ui.base.Event} oEvent
		 */
		equipCatChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.EquipmentCatogory;

			if (sValue === "" || sValue === undefined) {
				oModelData.EquipmentCatogory = "";
				oModelData.EquipCatgDescription = "";
				// oModelData.EquipmentCatogory = g.EquipmentCatogory;
				// oModelData.EquipCatgDescription = g.EquipCatgDescription;
			}
			oEvent.getSource().setValueState("None");
		},
		/*
		 * Function to handle 'change' event of Equipment Category
		 * @param {sap.ui.base.Event} oEvent
		 */
		onEquipCatChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.EquipmentCatogory;

			if (sValue === "" || sValue === undefined) {
				oModelData.EquipmentCatogory = "";
				oModelData.EquipCatgDescription = "";

				oModelData.UstaEqui = "";
				oModelData.StsmEqui = "";
				oModelData.StsmEquiDesc = "";
				oModelData.UstwEqui = "";
				oModelData.UswoEqui = "";

				// oModelData.EquipmentCatogory = g.EquipmentCatogory;
				// oModelData.EquipCatgDescription = g.EquipCatgDescription;
			} else {
				oModelData.EquipmentCatogory = sValue.toUpperCase();
				this._equipmentCategory(oModelData, sIndex, sModelName);
			}
		},
		_equipmentCategory: function (f, sIndex, sModelName) {
			var g = this;
			var c = f.EquipmentCatogory;
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			var PRTVisibleEnableModel = sap.ui.getCore().getModel("PRTVisibleEnableModel");
			var PRTVisibleEnableData = PRTVisibleEnableModel.getData();
			if (a !== "") {
				var sPath = "/EquipCatgValueHelps";
				var oFilters = [new sap.ui.model.Filter("EquipmentCatogory", "EQ", c)];
				var oModel = g.getView().getModel("valueHelp");
				var fnSuccess = function (d) {
					if (d.results.length > 0) {
						f.EquipmentCatogory = a;
						f.EquipCatgDescription = d.results[0].EquipCatgDescription;
						g.EquipmentCatogory = a;

						if (f.EquipmentCatogory === "L" && f.lam === undefined) {
							f.lam = {
								Lrpid: "",
								LrpidDesc: "",
								Strtptatr: "",
								Endptatr: "",
								Length: "",
								LinUnit: "",
								LinUnitDesc: "",
								Startmrkr: "",
								Endmrkr: "",
								Mrkdisst: "",
								Mrkdisend: "",
								MrkrUnit: "",
								enableLrp: true,
								enableMarker: false,
								LrpidVS: "None",
								StrtptatrVS: "None",
								EndptatrVS: "None",
								LinUnitVS: "None",
								StartmrkrVS: "None",
								EndmrkrVS: "None",
								MrkdisstVS: "None",
								MrkdisendVS: "None",
								MrkrUnitVS: "None"
							};
						}

						g.readStatusProf(c, sIndex, sModelName);

						var prtEnable = d.results[0].Fhmkz;
						if (prtEnable) {
							f.Fhmkz = true;
						} else {
							f.Fhmkz = false;
							f.PlanvPrt = "";
							f.SteufPrt = "";
							f.KtschPrt = "";
							f.Ewformprt = "";
							f.SteufRef = false;
							f.KtschRef = false;
							f.EwformRef = false;
						}
						g.getModel(sModelName).refresh();
					} else {
						f.EquipmentCatogoryVS = "Error";
						f.EquipmentCatogoryVST = "Invaid Entry";
						g.getModel(sModelName).refresh();
					}
				};
				var fnError = function (e) {
					var b = JSON.parse(e.responseText);
					var d = b.error.message.value;
					f.EquipmentCatogoryVS = "Error";
					f.EquipmentCatogoryVST = d;
					g.getModel(sModelName).refresh();
				};
				g._readData(sPath, oModel, fnSuccess, fnError, oFilters);
			} else {
				f.EquipmentCatogory = g.EquipmentCatogory;
				g.getModel(sModelName).refresh();
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Equipment Category
		 * @param {sap.ui.base.Event} oEvent
		 */
		onEquipCatVH: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			this.equipCatVH(oModelData, sIndex, sModelName);
		},
		/*
		 * To display value help dialog of Equipment category
		 * @param {object} p
		 * @param {string} sIndex
		 * @param {string} sModelName
		 */
		equipCatVH: function (p, sIndex, sModelName) {
			var g = this;
			var PRTVisibleEnableModel = sap.ui.getCore().getModel("PRTVisibleEnableModel");
			var PRTVisibleEnableData = PRTVisibleEnableModel.getData();

			var settings = {
				title: this.getView().getModel("i18n").getProperty("xtxt.EQUIP_CAT"),
				noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
				items: {
					path: "/EquipCatgValueHelps",
					template: new sap.m.StandardListItem({
						title: "{EquipmentCatogory}",
						description: "{EquipCatgDescription}"
					})
				},
				confirm: function (E) {
					p.EquipmentCatogoryVS = "None";
					p.EquipmentCatogoryVST = "";
					p.EquipmentCatogory = E.getParameters().selectedItem.getProperty("title");
					p.EquipCatgDescription = E.getParameters().selectedItem.getProperty("description");

					if (p.EquipmentCatogory === "L" && p.lam === undefined) {
						p.lam = {
							Lrpid: "",
							LrpidDesc: "",
							Strtptatr: "",
							Endptatr: "",
							Length: "",
							LinUnit: "",
							LinUnitDesc: "",
							Startmrkr: "",
							Endmrkr: "",
							Mrkdisst: "",
							Mrkdisend: "",
							MrkrUnit: "",
							enableLrp: true,
							enableMarker: false,
							LrpidVS: "None",
							StrtptatrVS: "None",
							EndptatrVS: "None",
							LinUnitVS: "None",
							StartmrkrVS: "None",
							EndmrkrVS: "None",
							MrkdisstVS: "None",
							MrkdisendVS: "None",
							MrkrUnitVS: "None"
						};
					}

					var sPath = E.getParameter("selectedItem").getBindingContext().sPath;
					sPath = sPath + "/Fhmkz";
					var prtEnable = E.getParameter("selectedItem").getModel().getProperty(sPath);
					if (prtEnable) {
						p.Fhmkz = true;
					} else {
						p.Fhmkz = false;
						p.PlanvPrt = "";
						p.SteufPrt = "";
						p.KtschPrt = "";
						p.Ewformprt = "";
						p.SteufRef = false;
						p.KtschRef = false;
						p.EwformRef = false;
					}
					// PRTVisibleEnableModel.setData(PRTVisibleEnableData);
					g.getModel(sModelName).refresh();
					g.readStatusProf(p.EquipmentCatogory, sIndex, sModelName);
				}
			};

			var q = "/EquipCatgValueHelps";
			var M = this.getView().getModel("valueHelp");
			var eqCatSelectDialog = ValueHelpProvider.getSelectDialog(M, q, [], settings, "EquipmentCatogory", "EquipCatgDescription");
			eqCatSelectDialog.open();
		},
		/*
		 * To read Status profile data
		 * @param {string} d - Eqtyp
		 * @param {string} sIndex
		 * @param {string} sModelName
		 */
		readStatusProf: function (d, sIndex, sModelName) {
			var g = this;
			var s = g.getModel(sModelName).getProperty(sIndex);
			var sPath;
			if (sModelName === g.oModelAIWEQUI) {
				sPath = "/DeriveSTProfileSet(Eqtyp='" + d + "',Lvorm=false,Deact=" + s.Deact + ",Fltyp='')";
			}
			if (sModelName === g.oModelAIWFLOC) {
				sPath = "/DeriveSTProfileSet(Eqtyp='',Deact=" + s.Deact + ",Fltyp='" + d + "',Lvorm=false)";
			}
			var oModel = g.getView().getModel();
			var oMainModel = g.getView().getModel("mainView");
			var oMainData = oMainModel.getData();
			oMainData.tableBusy = true;
			oMainModel.setData(oMainData);
			var fnSuccess = function (r) {
				if (r.DescStsma !== "" && (r.Dscstatwithnum !== "" || r.Dscstatwoutnum !== "")) { //SAP Note 2598463 - Manual Correction
					s.UstaEqui = r.JTxt30;
					s.StsmEqui = r.Stsma;
					s.StsmEquiDesc = r.DescStsma;
					s.UstwEqui = r.Dscstatwithnum;
					s.UswoEqui = r.Dscstatwoutnum;

					g.userWithSts = r.Dscstatwithnum;
					g.userWithoutSts = r.Dscstatwoutnum;
					oMainData.visible = true;
				} else {
					s.StsmEqui = "";
					s.StsmEquiDesc = "";
					s.UstwEqui = "";
					s.UswoEqui = "";
					s.UstaEqui = "";
					oMainData.visible = false;
				}
				oMainData.tableBusy = false;
				oMainModel.setData(oMainData);
				g.getModel(sModelName).refresh();
			};
			var fnError = function () {
				oMainData.tableBusy = false;
				oMainModel.setData(oMainData);
			};
			g._readData(sPath, oModel, fnSuccess, fnError);
		},
		/*
		 * Function to handle 'liveChange' event of Maintainence Plant
		 * @param {sap.ui.base.Event} oEvent
		 */
		maintPlantChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.Maintplant;

			if (sValue === "" || sValue === undefined) {
				oModelData.Maintplant = "";
				oModelData.MaintplantDesc = "";
				oModelData.BukrsEnabled = true;
				var dData = [];
				if (sModelName === "AIWEQUI") {
					dData = sap.ui.getCore().getModel("dataOriginMOP").getProperty("/EQ" + sIndex).DOI; //DOI
					var name = oEvent.getSource().getName();
					dData.forEach(function (data) {
						if (data.property === name) {
							data.maintenance = true;
							data.currentVal = "";
						}
						if (data.property === "PplaEeqz") {
							data.maintenance = true;
							data.currentVal = "";
						}
					});
				}
				if (sModelName === "AIWFLOC") {
					sap.ui.getCore().getModel("dataOriginMOP").getData().FL.forEach(function (data) {
						if (data.key = oModelData.Functionallocation) {
							dData = data.DOI;
						}
					});
					var name = oEvent.getSource().getName();
					dData.forEach(function (data) {
						if (data.property === name) {
							data.maintenance = true;
							data.currentVal = "";
						}
						if (data.property === "PlntFloc") {
							data.maintenance = true;
							data.currentVal = "";
						}
					});
				}
			}
			oEvent.getSource().setValueState("None");
		},
		/*
		 * Function to handle 'change' event of Maintainence Plant
		 * @param {sap.ui.base.Event} oEvent
		 */
		onMaintPlantChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.Maintplant;

			if (sValue === "" || sValue === undefined) {
				oModelData.Maintplant = "";
				oModelData.MaintplantDesc = "";
				oModelData.BukrsEnabled = true;
			} else {
				oModelData.Maintplant = sValue.toUpperCase();
				this._maintenancePlant(oModelData, sIndex, sModelName, oEvent.getSource());
			}
		},
		_maintenancePlant: function (f, sIndex, sModelName, oSource) {
			var g = this;
			var c = f.Maintplant;
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			var dData = [];
			if (sModelName === "AIWEQUI") {
				dData = sap.ui.getCore().getModel("dataOriginMOP").getProperty("/EQ" + sIndex).DOI; //DOI
			}
			var name = oSource.getName();
			if (a !== "") {
				var sPath = "/MaintPlantVHSet";
				var oFilters = [new sap.ui.model.Filter("Werks", "EQ", c)];
				var oModel = g.getView().getModel("valueHelp");
				var fnSuccess = function (d) {
					if (d.results.length > 0) {
						f.MaintplantDesc = d.results[0].Name1;
						f.Bukrs = d.results[0].Bukrs;
						f.Butxt = d.results[0].Butxt;
						f.Werks = d.results[0].IWerk;
						f.Planningplantdes = d.results[0].IName1;
						f.Kokrs = a;
						f.BukrsEnabled = false;
						f.Maintplant = a;
						g.Maintplant = a;
						// if (sModelName === g.oModelAIWEQUI) {
						// 	if (f.SuperordinateEquip !== "" || f.Tplnr !== "") {
						// 		g.fetchData("", c, f.SuperordinateEquip, f.Tplnr, "change", sIndex);
						// 	} else {
						// 		g.getModel(sModelName).refresh();
						// 	}
						// }

						if (sModelName === g.oModelAIWFLOC) {
							f.City = d.results[0].City1;
						}
						g.getModel(sModelName).refresh();

						dData.forEach(function (data) {
							if (data.property === name) {
								data.maintenance = true;
								data.currentVal = a;
							}
							if (data.property === "PplaEeqz") {
								data.maintenance = true;
								data.currentVal = f.Werks;
							}
						});
						g.BusyDialog.close();
					} else {
						f.MaintplantVS = "Error";
						f.MaintplantVST = "Invalid Entry";
						f.Maintplant = "";
						f.MaintplantDesc = "";
						g.getModel(sModelName).refresh();
					}
				};
				var fnError = function (e) {
					g.BusyDialog.close();
					var b = JSON.parse(e.responseText);
					var d = b.error.message.value;
					f.MaintplantVS = "Error";
					f.MaintplantVST = d;
					g.getModel(sModelName).refresh();
				};
				g.BusyDialog.open();
				g._readData(sPath, oModel, fnSuccess, fnError, oFilters);
			} else {
				f.Maintplant = g.Maintplant;
				g.getModel(sModelName).refresh();
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Maintainence Plant
		 * @param {sap.ui.base.Event} oEvent
		 */
		onMaintPlantVH: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			this.maintPlantVH(oModelData, sIndex, sModelName, oEvent.getSource());
		},
		/*
		 * To display value help dialog of Equipment category
		 * @param {object} p
		 * @param {string} sIndex
		 * @param {string} sModelName
		 * @param {object} oSource
		 */
		maintPlantVH: function (p, sIndex, sModelName, oSource) {
			var g = this;
			var dData = [];
			if (sModelName === "AIWEQUI") {
				dData = sap.ui.getCore().getModel("dataOriginMOP").getProperty("/EQ" + sIndex).DOI; //DOI
			}
			var name = oSource.getName();
			var settings = {
				title: this.getView().getModel("i18n").getProperty("MAINT_PLANT"),
				noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
				columns: [new sap.m.Column({
						header: [
							new sap.m.Text({
								text: "{i18n>PLANT}"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>SEARCHTERM2}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>SEARCHTERM1}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>POST_CODE}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>CITY}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>Name2}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>Name1}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>ADDR_VERSION}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						visible: false,
						header: [
							new sap.m.Text({
								text: "{i18n>COMPCODE}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						visible: false,
						header: [
							new sap.m.Text({
								text: "{i18n>COMPCODE_DESC}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						visible: false,
						header: [
							new sap.m.Text({
								text: "{i18n>PL_PLANT}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						visible: false,
						header: [
							new sap.m.Text({
								text: "{i18n>PLPLANT_DESC}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						visible: false,
						header: [
							new sap.m.Text({
								text: "{i18n>CC_PLANT}"
							})
						]
					})
				],
				items: {
					path: "/MaintPlantVHSet",
					template: new sap.m.ColumnListItem({
						type: "Active",
						unread: false,
						cells: [
							new sap.m.Text({
								text: "{Werks}"
							}),
							new sap.m.Text({
								text: "{Sort2}"
							}),
							new sap.m.Text({
								text: "{Sort1}"
							}),
							new sap.m.Text({
								text: "{PostCode1}"
							}),
							new sap.m.Text({
								text: "{City1}"
							}),
							new sap.m.Text({
								text: "{Name2}"
							}),
							new sap.m.Text({
								text: "{Name1}"
							}),
							new sap.m.Text({
								text: "{Nation}"
							}),
							new sap.m.Text({
								text: "{Bukrs}"
							}),
							new sap.m.Text({
								text: "{Butxt}"
							}),
							new sap.m.Text({
								text: "{IWerk}"
							}),
							new sap.m.Text({
								text: "{IName1}"
							}),
							new sap.m.Text({
								text: "{Kokrs}"
							})
						]
					})
				},
				confirm: function (E) {
					p.MaintplantVS = "None";
					p.MaintplantVST = "";
					p.Maintplant = E.getParameter("selectedItem").getCells()[0].getText();
					p.MaintplantDesc = E.getParameter("selectedItem").getCells()[6].getText();
					p.Bukrs = E.getParameter("selectedItem").getCells()[8].getText();
					p.Butxt = E.getParameter("selectedItem").getCells()[9].getText();
					p.Werks = E.getParameter("selectedItem").getCells()[10].getText();
					p.Planningplantdes = E.getParameter("selectedItem").getCells()[11].getText();
					p.Kokrs = E.getParameter("selectedItem").getCells()[0].getText();
					p.BukrsEnabled = false;

					// if (sModelName === g.oModelAIWEQUI) {
					// 	if (p.SuperordinateEquip !== "" || p.Tplnr !== "") {
					// 		g.fetchData("", p.Maintplant, p.SuperordinateEquip, p.Tplnr, "change", sIndex);
					// 	} else {
					// 		g.getModel(sModelName).refresh();
					// 	}
					// }
					if (sModelName === g.oModelAIWFLOC) {
						p.City = E.getParameter("selectedItem").getCells()[4].getText();
					}
					g.getModel(sModelName).refresh();

					dData.forEach(function (data) {
						if (data.property === name) {
							data.maintenance = true;
							data.currentVal = a;
						}
						if (data.property === "PplaEeqz") {
							data.maintenance = true;
							data.currentVal = f.Werks;
						}
					});
				}
			};

			var sPath = "/MaintPlantVHSet";
			var oFilter = [];
			var oModel = g.getView().getModel("valueHelp");
			var cells = [
				new sap.m.Text({
					text: "{Werks}"
				}),
				new sap.m.Text({
					text: "{Sort2}"
				}),
				new sap.m.Text({
					text: "{Sort1}"
				}),
				new sap.m.Text({
					text: "{PostCode1}"
				}),
				new sap.m.Text({
					text: "{City1}"
				}),
				new sap.m.Text({
					text: "{Name2}"
				}),
				new sap.m.Text({
					text: "{Name1}"
				}),
				new sap.m.Text({
					text: "{Nation}"
				}),
				new sap.m.Text({
					text: "{Bukrs}"
				}),
				new sap.m.Text({
					text: "{Butxt}"
				}),
				new sap.m.Text({
					text: "{IWerk}"
				}),
				new sap.m.Text({
					text: "{IName1}"
				}),
				new sap.m.Text({
					text: "{Kokrs}"
				})
			];

			var mPlantSelectDialog = ValueHelpProvider.getValueHelp(oModel, sPath, cells, oFilter, settings, "Werks", "Name1");
			mPlantSelectDialog.open();
			mPlantSelectDialog.setModel(this.getView().getModel("i18n"), "i18n");
		},
		/*
		 * Function to handle 'liveChange' event of Functional location
		 * @param {sap.ui.base.Event} oEvent
		 */
		flocChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);

			if (sModelName === this.oModelAIWEQUI) {
				this.EquiTplnr = oModelData.Tplnr;
				oEvent.getSource().setValueState("None");
			}

			if (sModelName === this.oModelAIWMSPT) {
				var sValue = oModelData.Tplnr;
				if (sValue === "" || sValue === undefined) {
					oModelData.Tplnr = "";
					oModelData.Pltxt = "";
				}
				oEvent.getSource().setValueState("None");
			}
		},
		/*
		 * Function to handle 'change' event of Functional location
		 * @param {sap.ui.base.Event} oEvent
		 */
		onFlocChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.Tplnr;
			if (sValue === "" || sValue === undefined) {
				if (sModelName === "AIWEQUI") {
					oModelData.SuperordinateEquip = "";
					oModelData.SuperordinateEquipDesc = "";
					oModelData.SuperordinateEquipEnabled = true;
					oModelData.Stattext = "AVLB";
					oModelData.Location = "";
					oModelData.Locationdesc = "";
					oModelData.Abckz = "";
					oModelData.Abctx = "";
					oModelData.BeberFl = "";
					oModelData.Fing = "";
					oModelData.Tele = "";
					oModelData.Kostl = "";
					oModelData.Kokrs = "";
					oModelData.Ingrp = "";
					oModelData.Innam = "";
					oModelData.MainArbpl = "";
					oModelData.MainWerks = "";
					oModelData.MainKtext = "";
					oModelData.MainKtext = "";
					oModelData.MainKtext = "";
					oModelData.MaintplantEnabled = true;
					oModelData.Tplnr = "";
					oModelData.Pltxt = "";

					var currentDoi = sap.ui.getCore().getModel("dataOriginMOP").getProperty("/EQ" + sIndex).DOI;
					currentDoi.forEach(function (d) {
						if (d.maintenance === false) {
							d.instLoc = false;
							d.SupFlVal = "";
						}
					});
					if (sap.ui.getCore().getModel("SUP_EQUI_DATA")) {
						var mSupEquiModel = sap.ui.getCore().getModel("SUP_EQUI_DATA");
						var mSupEquiData = mSupEquiModel.getData();
						var mSupEquiIndex;
						if (mSupEquiData.length > 0) {
							for (var a = 0; a < mSupEquiData.length; a++) {
								if (this.EquiTplnr === mSupEquiData[a].Tplnr) {
									mSupEquiIndex = a;
									break;
								}
							}
						}
						var sSupEquiData = sap.ui.getCore().getModel("SUP_EQUI_DATA").getData()[mSupEquiIndex];
						if (sSupEquiData) {
							oModelData.BeberFl = oModelData.BeberFl === sSupEquiData.BeberFl ? "" : oModelData.BeberFl;
							oModelData.Fing = oModelData.Fing === sSupEquiData.Fing ? "" : oModelData.Fing;
							oModelData.Tele = oModelData.Tele === sSupEquiData.Tele ? "" : oModelData.Tele;
							oModelData.Location = oModelData.Location === sSupEquiData.Location ? "" : oModelData.Location;
							oModelData.Locationdesc = oModelData.Locationdesc === sSupEquiData.Locationdesc ? "" : oModelData.Locationdesc;
							oModelData.Arbpl = oModelData.Arbpl === sSupEquiData.Arbpl ? "" : oModelData.Arbpl;
							oModelData.Ktext = oModelData.Ktext === sSupEquiData.Ktext ? "" : oModelData.Ktext;
							oModelData.WcWerks = oModelData.WcWerks === sSupEquiData.WcWerks ? "" : oModelData.WcWerks;
							oModelData.Abckz = oModelData.Abckz === sSupEquiData.Abckz ? "" : oModelData.Abckz;
							oModelData.Abctx = oModelData.Abctx === sSupEquiData.Abctx ? "" : oModelData.Abctx;
							oModelData.MainArbpl = oModelData.MainArbpl === sSupEquiData.MainArbpl ? "" : oModelData.MainArbpl;
							oModelData.MainKtext = oModelData.MainKtext === sSupEquiData.MainKtext ? "" : oModelData.MainKtext;
							oModelData.MainWerks = oModelData.MainWerks === sSupEquiData.MainWerks ? "" : oModelData.MainWerks;
							oModelData.Kostl = oModelData.Kostl === sSupEquiData.Kostl ? "" : oModelData.Kostl;
							oModelData.Mctxt = oModelData.Mctxt === sSupEquiData.Mctxt ? "" : oModelData.Mctxt;
							oModelData.Ingrp = oModelData.Ingrp === sSupEquiData.Ingrp ? "" : oModelData.Ingrp;
							oModelData.Innam = oModelData.Innam === sSupEquiData.Innam ? "" : oModelData.Innam;

							if (oModelData.Maintplant !== "") {
								oModelData.SuperordinateEquipEnabled = true;
								oModelData.MaintplantEnabled = true;
								oModelData.BukrsEnabled = false;
								oModelData.Bukrs = oModelData.Bukrs;
								oModelData.Butxt = oModelData.Butxt;
								oModelData.Kokrs = oModelData.Kokrs;
								oModelData.Werks = oModelData.Werks;
								oModelData.Planningplantdes = oModelData.Planningplantdes;
							} else {
								oModelData.BukrsEnabled = true;
								oModelData.Bukrs = oModelData.Bukrs === sSupEquiData.Bukrs ? "" : oModelData.Bukrs;
								oModelData.Butxt = oModelData.Butxt === sSupEquiData.Butxt ? "" : oModelData.Butxt;
								oModelData.Kokrs = oModelData.Kokrs === sSupEquiData.Kokrs ? "" : oModelData.Kokrs;
								oModelData.Werks = oModelData.Werks === sSupEquiData.Werks ? "" : oModelData.Werks;
								oModelData.Planningplantdes = oModelData.Planningplantdes === sSupEquiData.Planningplantdes ? "" : oModelData.Planningplantdes;
							}
							oModelData.Title = "";
							oModelData.TitleCode = "";
							oModelData.Name1 = "";
							oModelData.Name2 = "";
							oModelData.Name3 = "";
							oModelData.Name4 = "";
							oModelData.Sort1 = "";
							oModelData.Sort2 = "";
							oModelData.NameCo = "";
							oModelData.PostCod1 = "";
							oModelData.City1 = "";
							oModelData.Building = "";
							oModelData.Floor = "";
							oModelData.Roomnum = "";
							oModelData.Strsuppl1 = "";
							oModelData.Strsuppl2 = "";
							oModelData.Strsuppl3 = "";
							oModelData.AddrLocation = "";
							oModelData.RefPosta = "";
							oModelData.Landx = "";
							oModelData.TimeZone = "";
							oModelData.Region = "";
							oModelData.RegionDesc = "";
							oModelData.RefPostaLblReq = false;

							var mAddressModel = sap.ui.getCore().getModel("equiAddressView");
							var mAddressData = mAddressModel.getData();
							for (var as = 0; as < mAddressData.length; as++) {
								if (oModelData.Tplnr === mAddressData[as].Tplnr) {
									mAddressData.splice(as, 1);
									mAddressModel.setData(mAddressData);
									break;
								}
							}

							mSupEquiData.splice(mSupEquiIndex, 1);
							mSupEquiModel.setData(mSupEquiData);
						}
					}
				}

				oModelData.Tplnr = "";
				oModelData.Pltxt = "";
				oModelData.Stattext = "AVLB";
			} else {
				oModelData.Tplnr = sValue.toUpperCase();
				var sExistFlag = false;
				var AIWModel = sap.ui.getCore().getModel("AIWFLOC");
				var oAIWData = AIWModel.getData();

				for (var i = 0; i < oAIWData.length; i++) {
					if (oModelData.Tplnr === oAIWData[i].Functionallocation) {
						oModelData.Pltxt = oAIWData[i].Flocdescription;
						sExistFlag = true;
						break;
					}
				}

				if (sExistFlag) {
					sap.ui.getCore().getModel(sModelName).setProperty(sIndex, oModelData);
					this.currentEquipment = oModelData.Equnr;
					this.fetchData(sModelName, sIndex, oModelData);
				} else {
					this._functionalLocation(oModelData, sIndex, sModelName);
				}
			}
		},
		_functionalLocation: function (f, sIndex, sModelName) {
			var g = this;
			var c = f.Tplnr;
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var sPath = "/FunctionLocationSet";
				var oFilters = [new sap.ui.model.Filter("Tplnr", "EQ", c)];
				var oModel = g.getView().getModel("valueHelp");
				g.BusyDialog.open();
				var fnSuccess = function (d) {
					g.BusyDialog.close();
					if (d.results.length > 0) {
						f.Pltxt = d.results[0].Pltxt;
						f.Tplnr = a;
						g.Tplnr = a;
						g.getModel(sModelName).refresh();
						if (sModelName === g.oModelAIWEQUI) {
							g.currentEquipment = f.Equnr;
							g.fetchData(sModelName, sIndex, f);
						}
						if (sModelName === "AIWMSPT") {
							g.fetchData();
						}
					} else {
						f.Pltxt = "";
						f.TplnrVS = "Error";
						f.TplnrVST = "Invalid Entry";
						g.getModel(sModelName).refresh();
					}
				};
				var fnError = function (e) {
					g.BusyDialog.close();
					var b = JSON.parse(e.responseText);
					var d = b.error.message.value;
					f.TplnrVS = "Error";
					f.TplnrVST = d;
					g.getModel(sModelName).refresh();
				};
				g._readData(sPath, oModel, fnSuccess, fnError, oFilters);
			} else {
				f.Tplnr = g.Tplnr;
				g.getModel(sModelName).refresh();
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Functional location
		 * @param {sap.ui.base.Event} oEvent
		 */
		onFlocVH: function (oEvent) {
			var g = this;
			var mpSearchResults;
			if (mpSearchResults === undefined) {
				var sModelName = g.getFragmentModelName(oEvent);
				var oSource = oEvent.getSource();
				var oJsonModel = g.getView().getModel(sModelName);
				var AIWModel = sap.ui.getCore().getModel(sModelName);
				var oJsonData;
				var mpSelectDialog = new sap.m.SelectDialog({
					title: g.getView().getModel("i18n").getProperty("FLOC_TXT"),
					noDataText: g.getView().getModel("i18n").getProperty("LOAD") + "...",
					growingThreshold: 5000,
					items: {
						path: "/FunctionLocationSet",
						template: new sap.m.StandardListItem({
							title: "{Tplnr}",
							description: "{Pltxt}"
						})
					},
					confirm: function (E) {
						var sIndex = oSource.getBindingContext(sModelName).getPath();
						oJsonData = oJsonModel.getProperty(sIndex);
						oSource.setValue(E.getParameters().selectedItem.getProperty("title"));
						oJsonData.Pltxt = E.getParameters().selectedItem.getProperty("description");
						oSource.setValueState("None");
						oSource.setValueStateText("");
						oJsonModel.setProperty(sIndex, oJsonData);
						AIWModel.setProperty(sIndex, oJsonData);
						if (sModelName === "AIWEQUI") {
							g.currentEquipment = oJsonData.Equnr;
							g.fetchData(sModelName, sIndex, oJsonData);
							return;
						}
						g.fetchData();
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("Tplnr", sap.ui.model.FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("Pltxt", sap.ui.model.FilterOperator.Contains, sValue)
								],
								false)
						]);
					}
				});

				var sPath = "/FunctionLocationSet";
				var oModel = g.getView().getModel("valueHelp");
				var fnSuccess = function (h) {
					if (h.results.length > 0) {
						var oModelData = sap.ui.getCore().getModel(g.oModelAIWFLOC).getData();
						if (oModelData.length > 0) {
							for (var i = 0; i < oModelData.length; i++) {
								if (oModelData[i].Functionallocation) {
									var sObj = {
										Tplnr: oModelData[i].Functionallocation,
										Pltxt: oModelData[i].Flocdescription
									};
									h.results.unshift(sObj);
								}
							}
						}
						mpSearchResults = h;
						var I = new sap.m.StandardListItem({
							title: "{Tplnr}",
							description: "{Pltxt}",
							active: true
						});
						var e = new sap.ui.model.json.JSONModel();
						e.setData(h);

						mpSelectDialog.setModel(e);
						mpSelectDialog.bindAggregation("items", "/results", I);
					} else {
						mpSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
					}
				};
				var fnError = function () {};
				g._readData(sPath, oModel, fnSuccess, fnError);
			} else {
				var e = new sap.ui.model.json.JSONModel();
				e.setData(mpSearchResults);
				mpSelectDialog.setModel(e);
				var I = mpSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			mpSelectDialog.open();

			// this.sEquiIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			// var oModel = this.getView().getModel("valueHelp");
			// this.getModel("mainView").getData().viewBusy = true;
			// jQuery.sap.delayedCall(800, this, function() {
			// 	this._valueHelpDialog = sap.ui.xmlfragment("ugiaiwui.mdg.aiw.ZAIW_UI_03.Fragments.FlocVH", this);
			// 	this.getView().addDependent(this._valueHelpDialog);
			// 	this._valueHelpDialog.setModel(oModel);
			// 	this.getModel("mainView").getData().viewBusy = false;
			// 	this._valueHelpDialog.open();
			// 	if (sModelName === this.oModelAIWEQUI) {
			// 		this.inputId = "EQUI_FunctionalLoc";
			// 	} else if (sModelName === this.oModelAIWMSPT) {
			// 		this.inputId = "MSPT_FunctionalLoc";
			// 	}
			// });

		},
		/*
		 * Function to handle 'liveChange' event of Superordinate equipment
		 * @param {sap.ui.base.Event} oEvent
		 */
		superOrdEqChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.SuperordinateEquip;

			if (sValue === "" || sValue === undefined) {
				oModelData.SuperordinateEquip = "";
				oModelData.SuperordinateEquipDesc = "";
				this.readSystemStatus(sIndex, sModelName);
			}
			oEvent.getSource().setValueState("None");
		},
		/*
		 * Function to handle 'change' event of Superordinate equipment
		 * @param {sap.ui.base.Event} oEvent
		 */
		onSuperOrdEqChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.SuperordinateEquip;

			if (sValue === "" || sValue === undefined) {
				if (sap.ui.getCore().getModel("SUP_EQUI_DATA")) {
					var mSupEquiModel = sap.ui.getCore().getModel("SUP_EQUI_DATA");
					var mSupEquiData = mSupEquiModel.getData();
					var mSupEquiIndex;
					if (mSupEquiData.length > 0) {
						for (var a = 0; a < mSupEquiData.length; a++) {
							if (oModelData.Equnr === mSupEquiData[a].Equnr) {
								mSupEquiIndex = a;
								break;
							}
						}
					}
					var sSupEquiData = sap.ui.getCore().getModel("SUP_EQUI_DATA").getData()[mSupEquiIndex];
					if (sSupEquiData) {
						oModelData.Tplnr = oModelData.Tplnr === sSupEquiData.Tplnr ? "" : oModelData.Tplnr;
						oModelData.Pltxt = oModelData.Pltxt === sSupEquiData.Pltxt ? "" : oModelData.Pltxt;
						oModelData.BeberFl = oModelData.BeberFl === sSupEquiData.BeberFl ? "" : oModelData.BeberFl;
						oModelData.Fing = oModelData.Fing === sSupEquiData.Fing ? "" : oModelData.Fing;
						oModelData.Tele = oModelData.Tele === sSupEquiData.Tele ? "" : oModelData.Tele;
						oModelData.Location = oModelData.Location === sSupEquiData.Location ? "" : oModelData.Location;
						oModelData.Locationdesc = oModelData.Locationdesc === sSupEquiData.Locationdesc ? "" : oModelData.Locationdesc;
						oModelData.Arbpl = oModelData.Arbpl === sSupEquiData.Arbpl ? "" : oModelData.Arbpl;
						oModelData.Ktext = oModelData.Ktext === sSupEquiData.Ktext ? "" : oModelData.Ktext;
						oModelData.WcWerks = oModelData.WcWerks === sSupEquiData.WcWerks ? "" : oModelData.WcWerks;
						oModelData.Abckz = oModelData.Abckz === sSupEquiData.Abckz ? "" : oModelData.Abckz;
						oModelData.Abctx = oModelData.Abctx === sSupEquiData.Abctx ? "" : oModelData.Abctx;
						oModelData.MainArbpl = oModelData.MainArbpl === sSupEquiData.MainArbpl ? "" : oModelData.MainArbpl;
						oModelData.MainKtext = oModelData.MainKtext === sSupEquiData.MainKtext ? "" : oModelData.MainKtext;
						oModelData.MainWerks = oModelData.MainWerks === sSupEquiData.MainWerks ? "" : oModelData.MainWerks;
						oModelData.Kostl = oModelData.Kostl === sSupEquiData.Kostl ? "" : oModelData.Kostl;
						oModelData.Mctxt = oModelData.Mctxt === sSupEquiData.Mctxt ? "" : oModelData.Mctxt;
						oModelData.Ingrp = oModelData.Ingrp === sSupEquiData.Ingrp ? "" : oModelData.Ingrp;
						oModelData.Innam = oModelData.Innam === sSupEquiData.Innam ? "" : oModelData.Innam;

						if (oModelData.Maintplant !== "") {
							oModelData.TplnrEnabled = true;
							oModelData.MaintplantEnabled = true;
							oModelData.BukrsEnabled = false;
							oModelData.Bukrs = oModelData.Bukrs;
							oModelData.Butxt = oModelData.Butxt;
							oModelData.Kokrs = oModelData.Kokrs;
							oModelData.Werks = oModelData.Werks;
							oModelData.Planningplantdes = oModelData.Planningplantdes;
						} else {
							oModelData.BukrsEnabled = true;
							oModelData.Bukrs = oModelData.Bukrs === sSupEquiData.Bukrs ? "" : oModelData.Bukrs;
							oModelData.Butxt = oModelData.Butxt === sSupEquiData.Butxt ? "" : oModelData.Butxt;
							oModelData.Kokrs = oModelData.Kokrs === sSupEquiData.Kokrs ? "" : oModelData.Kokrs;
							oModelData.Werks = oModelData.Werks === sSupEquiData.Werks ? "" : oModelData.Werks;
							oModelData.Planningplantdes = oModelData.Planningplantdes === sSupEquiData.Planningplantdes ? "" : oModelData.Planningplantdes;
						}
						oModelData.Title = "";
						oModelData.TitleCode = "";
						oModelData.Name1 = "";
						oModelData.Name2 = "";
						oModelData.Name3 = "";
						oModelData.Name4 = "";
						oModelData.Sort1 = "";
						oModelData.Sort2 = "";
						oModelData.NameCo = "";
						oModelData.PostCod1 = "";
						oModelData.City1 = "";
						oModelData.Building = "";
						oModelData.Floor = "";
						oModelData.Roomnum = "";
						oModelData.Strsuppl1 = "";
						oModelData.Strsuppl2 = "";
						oModelData.Strsuppl3 = "";
						oModelData.AddrLocation = "";
						oModelData.RefPosta = "";
						oModelData.Landx = "";
						oModelData.TimeZone = "";
						oModelData.Region = "";
						oModelData.RegionDesc = "";
						oModelData.RefPostaLblReq = false;

						var mAddressModel = sap.ui.getCore().getModel("equiAddressView");
						var mAddressData = mAddressModel.getData();
						for (var as = 0; as < mAddressData.length; as++) {
							if (oModelData.Equnr === mAddressData[as].Equnr) {
								mAddressData.splice(as, 1);
								mAddressModel.setData(mAddressData);
								break;
							}
						}

						mSupEquiData.splice(mSupEquiIndex, 1);
						mSupEquiModel.setData(mSupEquiData);
					}
				}
				oModelData.SuperordinateEquip = "";
				oModelData.SuperordinateEquipDesc = "";
				oModelData.Stattext = "AVLB";
				oModelData.Location = "";
				oModelData.Locationdesc = "";
				oModelData.Abckz = "";
				oModelData.Abctx = "";
				oModelData.BeberFl = "";
				oModelData.Fing = "";
				oModelData.Tele = "";
				oModelData.Kostl = "";
				oModelData.Kokrs = "";
				oModelData.Ingrp = "";
				oModelData.Innam = "";
				oModelData.MainArbpl = "";
				oModelData.MainWerks = "";
				oModelData.MainKtext = "";
				oModelData.MainKtext = "";
				oModelData.MainKtext = "";
				oModelData.MaintplantEnabled = true;
				oModelData.Tplnr = "";
				oModelData.Pltxt = "";

				var currentDoi = sap.ui.getCore().getModel("dataOriginMOP").getProperty("/EQ" + sIndex).DOI;
				currentDoi.forEach(function (d) {
					if (d.maintenance === false) {
						d.instLoc = false;
						d.SupFlVal = "";
					}
				});
			} else {
				oModelData.SuperordinateEquip = sValue.toUpperCase();
				var sExistFlag = false;
				var AIWModel = sap.ui.getCore().getModel(sModelName);
				var oAIWData = AIWModel.getData();

				for (var i = 0; i < oAIWData.length; i++) {
					if (oModelData.SuperordinateEquip === oAIWData[i].Equnr) {
						oModelData.SuperordinateEquipDesc = oAIWData[i].Eqktx;
						sExistFlag = true;
						break;
					}
				}

				if (sExistFlag) {
					AIWModel.setProperty(sIndex, oModelData);
					this.currentEquipment = oModelData.Equnr;
					this.fetchData(sModelName, sIndex, oModelData);
				} else {
					this._superOrdEqui(oModelData, sIndex, sModelName);
				}
			}
		},
		_superOrdEqui: function (f, sIndex, sModelName) {
			var g = this;
			var c = f.SuperordinateEquip;
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var sPath = "/EquipmentNumberSet";
				var oFilters = [new sap.ui.model.Filter("Equnr", "EQ", c)];
				var oModel = g.getView().getModel("valueHelp");
				g.BusyDialog.open();
				var fnSuccess = function (d) {
					g.BusyDialog.close();
					if (d.results.length > 0) {
						g.currentEquipment = f.Equnr;
						f.SuperordinateEquipDesc = d.results[0].Eqktx;
						f.SuperordinateEquip = a;
						g.SuperordinateEquip = a;
						g.fetchData(sModelName, sIndex, f);
					} else {
						f.SuperordinateEquipDesc = "";
						f.SuperordinateEquipVS = "Error";
						f.SuperordinateEquipVST = "Invalid Entry";
						g.getModel(sModelName).refresh();
					}
				};
				var fnError = function (e) {
					g.BusyDialog.close();
					var b = JSON.parse(e.responseText);
					var d = b.error.message.value;
					f.SuperordinateEquipVS = "Error";
					f.SuperordinateEquipVST = d;
					g.getModel(sModelName).refresh();
				};
				g._readData(sPath, oModel, fnSuccess, fnError, oFilters);
			} else {
				f.SuperordinateEquip = g.SuperordinateEquip;
				g.getModel(sModelName).refresh();
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Superordinate equipment
		 * @param {sap.ui.base.Event} oEvent
		 */
		onSuperOrdEqVH: function (oEvent) {
			var g = this;
			var mpSearchResults;
			if (mpSearchResults === undefined) {
				var sModelName = g.getFragmentModelName(oEvent);
				var oSource = oEvent.getSource();
				var oJsonModel = g.getView().getModel(sModelName);
				var AIWModel = sap.ui.getCore().getModel(sModelName);
				var oJsonData;
				var mpSelectDialog = new sap.m.SelectDialog({
					title: g.getView().getModel("i18n").getProperty("EQUIP_TXT"),
					noDataText: g.getView().getModel("i18n").getProperty("LOAD") + "...",
					growingThreshold: 5000,
					items: {
						path: "/EquipmentNumberSet",
						template: new sap.m.StandardListItem({
							title: "{Equnr}",
							description: "{Eqktx}"
						})
					},
					confirm: function (E) {
						var sIndex = oSource.getBindingContext(sModelName).getPath();
						oJsonData = oJsonModel.getProperty(sIndex);
						oSource.setValue(E.getParameters().selectedItem.getProperty("title"));
						oJsonData.SuperordinateEquipDesc = E.getParameters().selectedItem.getProperty("description");
						oSource.setValueState("None");
						oSource.setValueStateText("");
						oJsonModel.setProperty(sIndex, oJsonData);
						AIWModel.setProperty(sIndex, oJsonData);
						g.currentSuperiorEqui = oJsonData.Equnr;
						g.fetchData();
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("Equnr", sap.ui.model.FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("Eqktx", sap.ui.model.FilterOperator.Contains, sValue)
								],
								false)
						]);
					}
				});

				var sPath = "/EquipmentNumberSet";
				var oModel = g.getView().getModel("valueHelp");
				var fnSuccess = function (h) {
					if (h.results.length > 0) {
						var oModelData = g.getView().getModel("AIWEQUI").getData();
						if (oModelData.length > 0) {
							for (var i = 0; i < oModelData.length; i++) {
								if (oModelData[i].Equnr) {
									var sObj = {
										Equnr: oModelData[i].Equnr,
										Eqktx: oModelData[i].Eqktx
									};
									h.results.unshift(sObj);
								}
							}
						}
						mpSearchResults = h;
						var I = new sap.m.StandardListItem({
							title: "{Equnr}",
							description: "{Eqktx}",
							active: true
						});
						var e = new sap.ui.model.json.JSONModel();
						e.setData(h);

						mpSelectDialog.setModel(e);
						mpSelectDialog.bindAggregation("items", "/results", I);
					} else {
						mpSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
					}
				};
				var fnError = function () {};
				g._readData(sPath, oModel, fnSuccess, fnError);
			} else {
				var e = new sap.ui.model.json.JSONModel();
				e.setData(mpSearchResults);
				mpSelectDialog.setModel(e);
				var I = mpSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			mpSelectDialog.open();

			// var sModelName = this.getFragmentModelName(oEvent);
			// this.sEquiIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			// var oModel = this.getView().getModel("valueHelp");
			// this._valueHelpDialog = sap.ui.xmlfragment("ugiaiwui.mdg.aiw.ZAIW_UI_03.Fragments.EquipmentVH", this);
			// this.getView().addDependent(this._valueHelpDialog);
			// this._valueHelpDialog.setModel(oModel);
			// this._valueHelpDialog.open();
			// // this.inputId = this._valueHelpDialog.getTitle();
			// this.inputId = "SuperordEqui";

		},

		handleClose: function (e) {
			var g = this;
			var f;
			var oSelectedItem = e.getParameter("selectedItem");
			if (oSelectedItem) {
				if (g.inputId.indexOf("EQUI_FunctionalLoc") !== -1) {
					e.getSource().getBinding("items").filter([]);
					f = g.getModel(g.oModelAIWEQUI).getProperty(g.sEquiIndex);
					f.Tplnr = e.getParameter("selectedItem").getProperty("title");
					f.Pltxt = e.getParameter("selectedItem").getProperty("description");
					g.getModel(g.oModelAIWEQUI).refresh();
					g.fetchData();
				}
				if (g.inputId.indexOf("MSPT_FunctionalLoc") !== -1) {
					f = g.getModel(g.oModelAIWMSPT).getProperty(g.sEquiIndex);
					f.Tplnr = e.getParameter("selectedItem").getProperty("title");
					f.Pltxt = e.getParameter("selectedItem").getProperty("description");
					g.getModel(g.oModelAIWMSPT).refresh();
				}
				if (g.inputId.indexOf("SuperiorFloc") !== -1) {
					e.getSource().getBinding("items").filter([]);
					f = g.getModel(g.oModelAIWFLOC).getProperty(g.sFlocIndex);
					f.SupFunctionallocation = e.getParameter("selectedItem").getProperty("title");
					f.SupFlocdescription = e.getParameter("selectedItem").getProperty("description");
					g.getModel(g.oModelAIWFLOC).refresh();
					g.readSupFlocDetails();
				}
				if (g.inputId.indexOf("SuperordEqui") !== -1) {
					f = g.getModel(g.oModelAIWEQUI).getProperty(g.sEquiIndex);
					f.SuperordinateEquipVS = "None";
					f.SuperordinateEquip = e.getParameter("selectedItem").getProperty("title");
					f.SuperordinateEquipDesc = e.getParameter("selectedItem").getProperty("title");
					g.getModel(g.oModelAIWEQUI).refresh();
					g.fetchData();
				}
				if (g.inputId.indexOf("EQUI_Equipment") !== -1) {
					f = g.getModel(g.oModelAIWEQUI).getProperty(g.sEquiIndex);
					f.Equnr = e.getParameter("selectedItem").getProperty("title");
					f.Eqktx = e.getParameter("selectedItem").getProperty("description");
					f.EqunrVS = "None";
					f.EqunrVST = "";
					g.getModel(g.oModelAIWEQUI).refresh();
				}
				if (g.inputId.indexOf("COPY_Equipment") !== -1) {
					f = g._copyFragment.getModel("copyModel").getData();
					f.Equnr = e.getParameter("selectedItem").getProperty("title");
					f.EqunrVS = "None";
					f.EqunrVST = "";
					g._copyFragment.getModel("copyModel").refresh();
				}
				if (g.inputId.indexOf("COPY_FunctionalLoc") !== -1) {
					f = g._copyFragment.getModel("copyModel").getData();
					f.Tplnr = e.getParameter("selectedItem").getProperty("title");
					f.TplnrVS = "None";
					f.TplnrVST = "";
					g._copyFragment.getModel("copyModel").refresh();
				}
				if (g.inputId.indexOf("MSPT_Equipment") !== -1) {
					f = g.getModel(g.oModelAIWMSPT).getProperty(g.sEquiIndex);
					f.Equnr = e.getParameter("selectedItem").getProperty("title");
					f.Eqktx = e.getParameter("selectedItem").getProperty("description");
					f.EqunrVS = "None";
					f.EqunrVST = "";
					g.getModel(g.oModelAIWMSPT).refresh();
				}
			}
		},
		/*
		 * Function to fetch data of EQ, FL, MSPT & MPMI
		 * @param {string} sIndex
		 * @param {string} sModelName
		 * @param {object} oModelData
		 */
		fetchData: function (sModelName, sIndex, oModelData) {
			var g = this;
			var sPath = "/ChangeRequestSet";
			var oModel = g.getView().getModel();
			var sArray = [];
			var sObject = {};
			var sLocalVar = "";
			if (sModelName) {
				if (sModelName === "AIWEQUI") {
					sLocalVar = oModelData.Equnr;
				}
			}
			var sPayload = {
				"ChangeRequestType": "AIWEAM0P",
				"CrDescription": "",
				"Reason": "01",
				"DeriveData": true,
				"FuncLoc": [],
				"FLAddr": [],
				"FLAddrI": [],
				"FLALTLBEL": [],
				"FLLAM": [],
				"FLClass": [],
				"FLVal": [],
				"Equipment": [],
				"EqAddr": [],
				"EqAddrI": [],
				"EqPRT": [],
				"EqLAM": [],
				"EqClass": [],
				"EqVal": [],
				"MSPoint": [],
				"MSLAM": [],
				"MSClass": [],
				"MSVal": [],
				"MPLAN": [],
				"MPItem": [],
				"MPOBList": [],
				"MPCycle": [],
				"MRBHeader": [],
				"MRBItem": [],
				"MRBSBIT": [],
				"EBHeader": [],
				"EBItem": [],
				"EBSBIT": [],
				"FBHeader": [],
				"FBItem": [],
				"FBSBIT": [],
				"WBHeader": [],
				"WBItem": [],
				"WBSBIT": [],
				"ONetwork": [],
				"ONLAM": [],
				"Workcenter": [],
				"WCCost": [],
				"GTList": [],
				"GTOprs": [],
				"GTComp": [],
				"GTClass": [],
				"GTVal": [],
				"ETList": [],
				"ETOprs": [],
				"ETComp": [],
				"ETClass": [],
				"ETVal": [],
				"FTList": [],
				"FTOprs": [],
				"FTComp": [],
				"FTClass": [],
				"FTVal": [],
				"Olink": [],
				"OLClass": [],
				"OLVal": [],
				"Messages": [],
				"Equi_DOI": [],
				"FLDOI": [],
				"EqDFPS": []
			};
			var oAIWFLOCModel = g.getView().getModel(g.oModelAIWFLOC);
			var oAIWEQUIModel = g.getView().getModel(g.oModelAIWEQUI);
			var oAIWMSPTModel = g.getView().getModel(g.oModelAIWMSPT);
			var oAIWMPMIModel = g.getView().getModel(g.oModelAIWMPMI);

			var AIWEQUIModel = sap.ui.getCore().getModel(g.oModelAIWEQUI).getData();
			var AIWFLOCModel = sap.ui.getCore().getModel(g.oModelAIWFLOC).getData();
			var AIWMSPTModel = sap.ui.getCore().getModel(g.oModelAIWMSPT).getData();
			var AIWMPMIModel = sap.ui.getCore().getModel(g.oModelAIWMPMI).getData();

			if (AIWFLOCModel.length > 0) {
				for (var a = 0; a < AIWFLOCModel.length; a++) {
					var sFuncLoc = {
						"Tplnr": AIWFLOCModel[a].Functionallocation,
						"Txtmi": AIWFLOCModel[a].Flocdescription, // Floc Description
						"TplkzFlc": AIWFLOCModel[a].Strucindicator,
						"Tplxt": AIWFLOCModel[a].StrucIndicatorDesc,
						"EditMask": AIWFLOCModel[a].EditMask,
						"Hierarchy": AIWFLOCModel[a].Hierarchy,
						"Fltyp": AIWFLOCModel[a].Floccategory,
						"Flttx": AIWFLOCModel[a].FlocCategoryDesc,
						"Swerk": AIWFLOCModel[a].Maintplant,
						"Plantname": AIWFLOCModel[a].MaintplantDesc,
						"StorFloc": AIWFLOCModel[a].Location, // Location
						"Locationdesc": AIWFLOCModel[a].Locationdesc, // Location Description
						"Abckzfloc": AIWFLOCModel[a].Abckz,
						"Abctx": AIWFLOCModel[a].Abctx,
						"Bukrsfloc": AIWFLOCModel[a].Bukrs,
						"Butxt": AIWFLOCModel[a].Butxt,
						"City": AIWFLOCModel[a].City,
						"KostFloc": AIWFLOCModel[a].Kostl, // Cost Center
						"KokrFloc": AIWFLOCModel[a].Kokrs, // ccPart1
						"Contareaname": AIWFLOCModel[a].Mctxt, // Name
						"PlntFloc": AIWFLOCModel[a].Werks, // Planning Plant
						"Planningplantdes": AIWFLOCModel[a].Planningplantdes, // Planning Plant Description
						"Ingrp": AIWFLOCModel[a].Ingrp, // Planner Group
						"Plannergrpdesc": AIWFLOCModel[a].Innam, // Planner Group Description
						"Arbplfloc": AIWFLOCModel[a].Arbpl, // Work Center
						"Workcenterdesc": AIWFLOCModel[a].Ktext, // Plant Work Center
						"Wergwfloc": AIWFLOCModel[a].WcWerks, // Name
						"Gewrkfloc": AIWFLOCModel[a].MainArbpl, // Main Work Center
						"MainWcDesc": AIWFLOCModel[a].MainKtext, // Work center Plant
						"MainWcPlant": AIWFLOCModel[a].MainWerks, // Work Center Description
						"Tplma": AIWFLOCModel[a].SupFunctionallocation, // Sup FuncLoc
						"Supflocdesc": AIWFLOCModel[a].SupFlocdescription, // Sup FlocDescription
						"BeberFl": AIWFLOCModel[a].BeberFl, // Plant Section
						"Fing": AIWFLOCModel[a].Fing, // Person responsible
						"Tele": AIWFLOCModel[a].Tele, // Phone
						"Submtiflo": AIWFLOCModel[a].ConstrType, // Construction Type
						"Constdesc": AIWFLOCModel[a].ConstructionDesc, // Construction Description
						"Eqart": AIWFLOCModel[a].TechnicalObjectTyp, // TechnicalObjectTyp
						"Eartx": AIWFLOCModel[a].Description, // TechnicalObjectTyp Description
						"Stattext": AIWFLOCModel[a].Stattext, // System Status
						"StsmFloc": AIWFLOCModel[a].StsmEqui, // Status Profile
						"Statproftxt": AIWFLOCModel[a].StsmEquiDesc, // Status Profile Description
						"UstwFloc": AIWFLOCModel[a].UstwEqui, // Status with Status Number
						"UswoFloc": AIWFLOCModel[a].UswoEqui, // Status without Status Number
						"UstaFloc": AIWFLOCModel[a].UstaEqui, // User Status
						"IsMenu": AIWFLOCModel[a].menuAction,
						"Adrnr": AIWFLOCModel[a].Adrnr,
						"Adrnri": AIWFLOCModel[a].Adrnri
					};

					var aFLDOI = sap.ui.getCore().getModel("dataOriginMOP").getData().FL;
					if (aFLDOI && aFLDOI.length > 0) {
						var aDOIFields = aFLDOI[a].DOI;
						// sFuncLoc.Begrui = aDOIFields[0].instLoc ? "H" : "D";
						sFuncLoc.Swerki = aDOIFields[0].instLoc ? "H" : (aDOIFields[0].maintenance ? "D" : "");
						sFuncLoc.Storti = aDOIFields[1].instLoc ? "H" : (aDOIFields[1].maintenance ? "D" : "");
						// sFuncLoc.Msgrpi = aDOIFields[3].instLoc ? "H" : "D";
						sFuncLoc.Beberi = aDOIFields[2].instLoc ? "H" : (aDOIFields[2].maintenance ? "D" : "");
						sFuncLoc.Ppsidi = aDOIFields[3].instLoc ? "H" : (aDOIFields[3].maintenance ? "D" : "");
						sFuncLoc.Abckzi = aDOIFields[4].instLoc ? "H" : (aDOIFields[4].maintenance ? "D" : "");
						sFuncLoc.Bukrsi = aDOIFields[5].instLoc ? "H" : (aDOIFields[5].maintenance ? "D" : "");
						// sFuncLoc.Gsberi = aDOIFields[8].instLoc ? "H" : "D";
						// sFuncLoc.Anlnri = aDOIFields[9].instLoc ? "H" : "D";
						// sFuncLoc.Anlnri = aDOIFields[10].instLoc ? "H" : "D";
						sFuncLoc.Kostli = aDOIFields[6].instLoc ? "H" : (aDOIFields[6].maintenance ? "D" : "");
						sFuncLoc.Kokrsi = aDOIFields[7].instLoc ? "H" : (aDOIFields[7].maintenance ? "D" : "");
						// sFuncLoc.Proidi = aDOIFields[13].instLoc ? "H" : "D";
						// sFuncLoc.Daufni = aDOIFields[14].instLoc ? "H" : "D";
						// sFuncLoc.Aufnri = aDOIFields[15].instLoc ? "H" : "D";
						sFuncLoc.Iwerki = aDOIFields[8].instLoc ? "H" : (aDOIFields[8].maintenance ? "D" : "");
						sFuncLoc.Ingrpi = aDOIFields[9].instLoc ? "H" : (aDOIFields[9].maintenance ? "D" : "");
						sFuncLoc.Lgwidi = aDOIFields[10].instLoc ? "H" : (aDOIFields[10].maintenance ? "D" : "");
						// sFuncLoc.Swerki = aDOIFields[19].instLoc ? "H" : "D";
						// sFuncLoc.RbnrI = aDOIFields[20].instLoc ? "H" : "D";
						// sFuncLoc.Submti = aDOIFields[21].instLoc ? "H" : "D";
						// sFuncLoc.Einzli = aDOIFields[22].instLoc ? "H" : "D";
						// sFuncLoc.Iequii = aDOIFields[23].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[24].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[25].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[26].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[27].instLoc ? "H" : "D";
						// sFuncLoc.Vkorgi = aDOIFields[28].instLoc ? "H" : "D";
						sFuncLoc.Adrnri = aDOIFields[12].instLoc ? "H" : (aDOIFields[12].maintenance ? "D" : "");
					}

					if (AIWFLOCModel[a].viewParameter === "create") {
						sFuncLoc.Type = true;
					}
					sPayload.FuncLoc.push(sFuncLoc);

					if ((AIWFLOCModel[a].Title !== "" && AIWFLOCModel[a].Title !== undefined) || (AIWFLOCModel[a].TitleCode !== "" && AIWFLOCModel[
								a]
							.TitleCode !== undefined) || (AIWFLOCModel[a].Name1 !== "" && AIWFLOCModel[a].Name1 !== undefined) || (AIWFLOCModel[a].Name2 !==
							"" && AIWFLOCModel[a].Name2 !== undefined) || (AIWFLOCModel[a].Name3 !== "" && AIWFLOCModel[a].Name3 !== undefined) ||
						(AIWFLOCModel[a].Name4 !== "" && AIWFLOCModel[a].Name4 !== undefined) ||
						(AIWFLOCModel[a].Sort1 !== "" && AIWFLOCModel[a].Sort1 !== undefined) || (AIWFLOCModel[a].Sort2 !== "" && AIWFLOCModel[a].Sort2 !==
							undefined) || (AIWFLOCModel[a].NameCo !== "" && AIWFLOCModel[a].NameCo !== undefined) || (AIWFLOCModel[a].PostCod1 !== "" &&
							AIWFLOCModel[a].PostCod1 !== undefined) || (AIWFLOCModel[a].City1 !== "" && AIWFLOCModel[a].City1 !== undefined) ||
						(AIWFLOCModel[a].Building !== "" && AIWFLOCModel[a].Building !== undefined) ||
						(AIWFLOCModel[a].Floor !== "" && AIWFLOCModel[a].Floor !== undefined) || (AIWFLOCModel[a].Roomnum !== "" && AIWFLOCModel[a].Roomnum !==
							undefined) || (AIWFLOCModel[a].AddrLocation !== "" && AIWFLOCModel[a].AddrLocation !== undefined) || (AIWFLOCModel[a].Strsuppl1 !==
							"" && AIWFLOCModel[a].Strsuppl1 !== undefined) || (AIWFLOCModel[a].Strsuppl2 !== "" && AIWFLOCModel[a].Strsuppl2 !==
							undefined) ||
						(AIWFLOCModel[a].Strsuppl3 !== "" && AIWFLOCModel[a].Strsuppl3 !== undefined) || (AIWFLOCModel[a].TimeZone !== "" &&
							AIWFLOCModel[a].TimeZone !== undefined) || (AIWFLOCModel[a].RefPosta !== "" && AIWFLOCModel[a].RefPosta !== undefined) || (
							AIWFLOCModel[a].Region !== "" && AIWFLOCModel[a].Region !== undefined)) {
						var sFLAddr = {
							"Funcloc": AIWFLOCModel[a].Functionallocation,
							"Title": AIWFLOCModel[a].TitleCode,
							"Name1": AIWFLOCModel[a].Name1,
							"Name2": AIWFLOCModel[a].Name2,
							"Name3": AIWFLOCModel[a].Name3,
							"Name4": AIWFLOCModel[a].Name4,
							"Sort1": AIWFLOCModel[a].Sort1,
							"Sort2": AIWFLOCModel[a].Sort2,
							"NameCo": AIWFLOCModel[a].NameCo,
							"PostCod1": AIWFLOCModel[a].PostCod1,
							"City1": AIWFLOCModel[a].City1,
							"Building": AIWFLOCModel[a].Building,
							"Floor": AIWFLOCModel[a].Floor,
							"Roomnum": AIWFLOCModel[a].Roomnum,
							"Strsuppl1": AIWFLOCModel[a].Strsuppl1,
							"Strsuppl2": AIWFLOCModel[a].Strsuppl2,
							"Strsuppl3": AIWFLOCModel[a].Strsuppl3,
							"Location": AIWFLOCModel[a].AddrLocation,
							"RPostafl": AIWFLOCModel[a].RefPosta,
							"Landx": AIWFLOCModel[a].Landx,
							"TimeZone": AIWFLOCModel[a].TimeZone,
							"RPostFl": AIWFLOCModel[a].Region,
							"Regiotxt": AIWFLOCModel[a].RegionDesc
						};
						sPayload.FLAddr.push(sFLAddr);
					}

					var aIntlAddr = AIWFLOCModel[a].intlAddr;
					if (aIntlAddr.length > 0) {
						for (var z = 0; z < aIntlAddr.length; z++) {
							sPayload.FLAddrI.push(aIntlAddr[z]);
						}
					}

					if (g.AltLblDerv === "2" && AIWFLOCModel[a].altlbl.length > 0) {
						for (var y = 0; y < AIWFLOCModel[a].altlbl.length; y++) {
							var oAltLbl = {
								"Funcloc": AIWFLOCModel[a].Functionallocation,
								"AltAlkey": AIWFLOCModel[a].altlbl[y].AltAlkey,
								"AltStrno": AIWFLOCModel[a].altlbl[y].AltStrno,
								"AltTplkz": AIWFLOCModel[a].altlbl[y].AltTplkz
							};
							sPayload.FLALTLBEL.push(oAltLbl);
						}
					}

					if (AIWFLOCModel[a].lam) {
						var sFLLAM = {
							"Funcloc": AIWFLOCModel[a].Functionallocation,
							"Lrpid": AIWFLOCModel[a].lam.Lrpid,
							"Strtptatr": AIWFLOCModel[a].lam.Strtptatr,
							"Endptatr": AIWFLOCModel[a].lam.Endptatr,
							"Length": AIWFLOCModel[a].lam.Length,
							"LinUnit": AIWFLOCModel[a].lam.LinUnit,
							"Startmrkr": AIWFLOCModel[a].lam.Startmrkr,
							"Endmrkr": AIWFLOCModel[a].lam.Endmrkr,
							"Mrkdisst": AIWFLOCModel[a].lam.Mrkdisst,
							"Mrkdisend": AIWFLOCModel[a].lam.Mrkdisend,
							"MrkrUnit": AIWFLOCModel[a].lam.MrkrUnit,
							"LamDer": AIWFLOCModel[a].lam.LamDer
						};
						sPayload.FLLAM.push(sFLLAM);
					}

					var sFLClassList = AIWFLOCModel[a].classItems;
					if (sFLClassList) {
						if (sFLClassList.length > 0) {
							for (var b = 0; b < sFLClassList.length; b++) {
								var sFLClass = {
									"Funcloc": AIWFLOCModel[a].Functionallocation,
									"Classtype": sFLClassList[b].Classtype,
									"Class": sFLClassList[b].Class,
									"Clstatus1": sFLClassList[b].Clstatus1,
									"Artxt": sFLClassList[b].ClassTypeDesc
								};
								sPayload.FLClass.push(sFLClass);
							}
						}
					}

					var sFLCharList = AIWFLOCModel[a].characteristics;
					if (sFLCharList) {
						if (sFLCharList.length > 0) {
							for (var c = 0; c < sFLCharList.length; c++) {
								var sFLVal = {
									"Funcloc": AIWFLOCModel[a].Functionallocation,
									"Atnam": sFLCharList[c].Atnam,
									"Textbez": sFLCharList[c].Textbez,
									"Atwrt": sFLCharList[c].Atwrt,
									"Class": sFLCharList[c].Class
								};
								sPayload.FLVal.push(sFLVal);
							}
						}
					}
				}
			}
			if (AIWEQUIModel.length > 0) {
				for (var d = 0; d < AIWEQUIModel.length; d++) {
					var sEquipment = {
						"Herst": AIWEQUIModel[d].Herst, // Manufacturer
						"Equnr": AIWEQUIModel[d].Equnr,
						"Txtmi": AIWEQUIModel[d].Eqktx,
						//"Eqktx" : AIWEQUIModel[d].Eqktx,
						"Swerk": AIWEQUIModel[d].Maintplant,
						"Name1": AIWEQUIModel[d].MaintplantDesc,
						"TplnEilo": AIWEQUIModel[d].Tplnr,
						"Flocdescription": AIWEQUIModel[d].Pltxt,
						"Eqtyp": AIWEQUIModel[d].EquipmentCatogory,
						"Etytx": AIWEQUIModel[d].EquipCatgDescription,
						"Eqart": AIWEQUIModel[d].TechnicalObjectTyp, // TechnicalObjectTyp
						"Eartx": AIWEQUIModel[d].Description, // TechnicalObjectTyp Description
						"Typbz": AIWEQUIModel[d].Typbz, // Model Number
						"SubmEeqz": AIWEQUIModel[d].ConstrType, // Construction Type
						"Constdesc": AIWEQUIModel[d].ConstructionDesc, // Construction Description
						"BukrEilo": AIWEQUIModel[d].Bukrs,
						"Butxt": AIWEQUIModel[d].Butxt,
						"HequEeqz": AIWEQUIModel[d].SuperordinateEquip, // Superord. Equipment
						"SuperordEqDes": AIWEQUIModel[d].SuperordinateEquipDesc, // Superord. Equipment Description
						"TidnEeqz": AIWEQUIModel[d].TechIdNum, // techIndNo
						"KostEilo": AIWEQUIModel[d].Kostl, // Cost Center
						"KokrEilo": AIWEQUIModel[d].Kokrs, // ccPart1
						"Contareaname": AIWEQUIModel[d].Mctxt, // Name
						"StorEilo": AIWEQUIModel[d].Location,
						"Locationdesc": AIWEQUIModel[d].Locationdesc,
						"AbckEilo": AIWEQUIModel[d].Abckz,
						"Abctx": AIWEQUIModel[d].Abctx,
						"PplaEeqz": AIWEQUIModel[d].Werks, // Planning Plant
						"Planningplantdes": AIWEQUIModel[d].Planningplantdes, // Planning Plant Description
						"IngrEeqz": AIWEQUIModel[d].Ingrp, // Planner Group
						"Plannergrpdesc": AIWEQUIModel[d].Innam, // Planner Group Description
						"Serge": AIWEQUIModel[d].Serge, // manfSerNo
						"MapaEeqz": AIWEQUIModel[d].MapaEeqz, // partNum
						"Stattext": AIWEQUIModel[d].Stattext, // System Status
						"StsmEqui": AIWEQUIModel[d].StsmEqui, // Status Profile
						"Statproftxt": AIWEQUIModel[d].StsmEquiDesc, // Status Profile Description
						"UstwEqui": AIWEQUIModel[d].UstwEqui, // Status with Status Number
						"UswoEqui": AIWEQUIModel[d].UswoEqui, // Status without Status Number
						"UstaEqui": AIWEQUIModel[d].UstaEqui, // User Status

						"Answt": AIWEQUIModel[d].Answt,
						"Ansdt": g._formatDate(AIWEQUIModel[d].Ansdt),
						"Waers": AIWEQUIModel[d].Waers, // Currency

						"ArbpEilo": AIWEQUIModel[d].Arbpl, // Work Center
						"Workcenterdesc": AIWEQUIModel[d].Ktext, // Plant Work Center
						"WorkCenterPlant": AIWEQUIModel[d].WcWerks, // Name
						"ArbpEeqz": AIWEQUIModel[d].MainArbpl, // Main Work Center
						"MainWcDesc": AIWEQUIModel[d].MainKtext, // Work Center Description
						"MainWcPlant": AIWEQUIModel[d].MainWerks, // Work center Plant

						"BebeEilo": AIWEQUIModel[d].BeberFl, // Plant Section
						"Fing": AIWEQUIModel[d].Fing, // Plant Section
						"Tele": AIWEQUIModel[d].Tele, // Plant Section
						"HeqnEeqz": AIWEQUIModel[d].EquipPosition, // Position
						"IsMenu": AIWEQUIModel[d].menuAction,
						"Adrnr": AIWEQUIModel[d].Adrnr,
						"Adrnri": AIWEQUIModel[d].Adrnri,

						Fhmkz: AIWEQUIModel[d].Fhmkz, // PRT fields visible
						Funcid: AIWEQUIModel[d].Funcid, //Config control data
						Frcfit: AIWEQUIModel[d].Frcfit,
						Frcrmv: AIWEQUIModel[d].Frcrmv,
					};

					var aEQDOI = sap.ui.getCore().getModel("dataOriginMOP").getData().EQ;
					if (aEQDOI && aEQDOI.length > 0) {
						var aDOIFields = aEQDOI[d].DOI;
						// sEquipment.Begrui = aDOIFields[0].instLoc ? "R" : "D";
						sEquipment.Swerki = aDOIFields[0].instLoc ? "R" : (aDOIFields[0].maintenance ? "D" : "");
						sEquipment.Storti = aDOIFields[1].instLoc ? "R" : (aDOIFields[1].maintenance ? "D" : "");
						// sEquipment.Msgrpi = aDOIFields[3].instLoc ? "R" : "D";
						sEquipment.Beberi = aDOIFields[2].instLoc ? "R" : (aDOIFields[2].maintenance ? "D" : "");
						sEquipment.Ppsidi = aDOIFields[3].instLoc ? "R" : (aDOIFields[3].maintenance ? "D" : "");
						sEquipment.Abckzi = aDOIFields[4].instLoc ? "R" : (aDOIFields[4].maintenance ? "D" : "");
						// sEquipment.Eqfnri = aDOIFields[7].instLoc ? "R" : "D";
						// sEquipment.Gsberi = aDOIFields[8].instLoc ? "R" : "D";
						sEquipment.Kostli = aDOIFields[5].instLoc ? "R" : (aDOIFields[5].maintenance ? "D" : "");
						// sEquipment.Proidi = aDOIFields[10].instLoc ? "R" : "D";
						// sEquipment.Daufni = aDOIFields[11].instLoc ? "R" : "D";
						// sEquipment.Aufnri = aDOIFields[12].instLoc ? "R" : "D";
						// sEquipment.Ppsidi = aDOIFields[13].instLoc ? "R" : "D";
						sEquipment.Iwerki = aDOIFields[6].instLoc ? "R" : (aDOIFields[6].maintenance ? "D" : "");
						sEquipment.Ingrpi = aDOIFields[7].instLoc ? "R" : (aDOIFields[7].maintenance ? "D" : "");
						sEquipment.Gewrki = aDOIFields[8].instLoc ? "R" : (aDOIFields[8].maintenance ? "D" : "");
						// sEquipment.Gewrki = aDOIFields[16].instLoc ? "R" : "D";
						// sEquipment.RbnrI = aDOIFields[17].instLoc ? "R" : "D";
						// sEquipment.Vkorgi = aDOIFields[18].instLoc ? "R" : "D";
						// sEquipment.Vkorgi = aDOIFields[19].instLoc ? "R" : "D";
						// sEquipment.Vkorgi = aDOIFields[20].instLoc ? "R" : "D";
						// sEquipment.Vkorgi = aDOIFields[21].instLoc ? "R" : "D";
						// sEquipment.Vkorgi = aDOIFields[22].instLoc ? "R" : "D";
						sEquipment.Adrnri = aDOIFields[10].instLoc ? "R" : (aDOIFields[10].maintenance ? "D" : "");
					}

					if (sModelName && AIWEQUIModel[d].Equnr === sLocalVar) { // Identify current Equi data for DOI
						sEquipment.IsDOI = true;
						this.tempEquiIndx = d;
					}

					if (AIWEQUIModel[d].viewParameter === "create") {
						sEquipment.Type = true;
					}
					sPayload.Equipment.push(sEquipment);

					if ((AIWEQUIModel[d].Title !== "" && AIWEQUIModel[d].Title !== undefined) || (AIWEQUIModel[d].TitleCode !== "" && AIWEQUIModel[
								d]
							.TitleCode !== undefined) || (AIWEQUIModel[d].Name1 !== "" && AIWEQUIModel[d].Name1 !== undefined) || (AIWEQUIModel[d].Name2 !==
							"" && AIWEQUIModel[d].Name2 !== undefined) || (AIWEQUIModel[d].Name3 !== "" && AIWEQUIModel[d].Name3 !== undefined) ||
						(AIWEQUIModel[d].Name4 !== "" && AIWEQUIModel[d].Name4 !== undefined) ||
						(AIWEQUIModel[d].Sort1 !== "" && AIWEQUIModel[d].Sort1 !== undefined) || (AIWEQUIModel[d].Sort2 !== "" && AIWEQUIModel[d].Sort2 !==
							undefined) || (AIWEQUIModel[d].NameCo !== "" && AIWEQUIModel[d].NameCo !== undefined) || (AIWEQUIModel[d].PostCod1 !== "" &&
							AIWEQUIModel[d].PostCod1 !== undefined) || (AIWEQUIModel[d].City1 !== "" && AIWEQUIModel[d].City1 !== undefined) ||
						(AIWEQUIModel[d].Building !== "" && AIWEQUIModel[d].Building !== undefined) ||
						(AIWEQUIModel[d].Floor !== "" && AIWEQUIModel[d].Floor !== undefined) || (AIWEQUIModel[d].Roomnum !== "" && AIWEQUIModel[d].Roomnum !==
							undefined) || (AIWEQUIModel[d].AddrLocation !== "" && AIWEQUIModel[d].AddrLocation !== undefined) || (AIWEQUIModel[d].Strsuppl1 !==
							"" && AIWEQUIModel[d].Strsuppl1 !== undefined) || (AIWEQUIModel[d].Strsuppl2 !== "" && AIWEQUIModel[d].Strsuppl2 !==
							undefined) ||
						(AIWEQUIModel[d].Strsuppl3 !== "" && AIWEQUIModel[d].Strsuppl3 !== undefined) || (AIWEQUIModel[d].TimeZone !== "" &&
							AIWEQUIModel[d].TimeZone !== undefined) || (AIWEQUIModel[d].RefPosta !== "" && AIWEQUIModel[d].RefPosta !== undefined) || (
							AIWEQUIModel[d].Region !== "" && AIWEQUIModel[d].Region !== undefined)) {
						var sEqAddr = {
							"Equi": AIWEQUIModel[d].Equnr,
							"Title": AIWEQUIModel[d].TitleCode,
							"Name1": AIWEQUIModel[d].Name1,
							"Name2": AIWEQUIModel[d].Name2,
							"Name3": AIWEQUIModel[d].Name3,
							"Name4": AIWEQUIModel[d].Name4,
							"Sort1": AIWEQUIModel[d].Sort1,
							"Sort2": AIWEQUIModel[d].Sort2,
							"NameCo": AIWEQUIModel[d].NameCo,
							"PostCod1": AIWEQUIModel[d].PostCod1,
							"City1": AIWEQUIModel[d].City1,
							"Building": AIWEQUIModel[d].Building,
							"Floor": AIWEQUIModel[d].Floor,
							"Roomnum": AIWEQUIModel[d].Roomnum,
							"Strsuppl1": AIWEQUIModel[d].Strsuppl1,
							"Strsuppl2": AIWEQUIModel[d].Strsuppl2,
							"Strsuppl3": AIWEQUIModel[d].Strsuppl3,
							"Location": AIWEQUIModel[d].AddrLocation,
							"RefPosta": AIWEQUIModel[d].RefPosta,
							"Landx": AIWEQUIModel[d].Landx,
							"TimeZone": AIWEQUIModel[d].TimeZone,
							"RfePost": AIWEQUIModel[d].Region,
							"Regiotxt": AIWEQUIModel[d].RegionDesc
						};
						sPayload.EqAddr.push(sEqAddr);
					}

					var aIntlAddr = AIWEQUIModel[d].intlAddr;
					if (aIntlAddr.length > 0) {
						for (var z = 0; z < aIntlAddr.length; z++) {
							sPayload.EqAddrI.push(aIntlAddr[z]);
						}
					}

					var sEqPRT = {
						"Equi": AIWEQUIModel[d].Equnr,
						"PlanvPrt": AIWEQUIModel[d].PlanvPrt,
						"SteufPrt": AIWEQUIModel[d].SteufPrt,
						"KtschPrt": AIWEQUIModel[d].KtschPrt,
						"Ewformprt": AIWEQUIModel[d].Ewformprt,
						"SteufRef": AIWEQUIModel[d].SteufRef,
						"KtschRef": AIWEQUIModel[d].KtschRef,
						"EwformRef": AIWEQUIModel[d].EwformRef
					};
					sPayload.EqPRT.push(sEqPRT);

					if (AIWEQUIModel[d].lam) {
						var sEqLAM = {
							"Equi": AIWEQUIModel[d].Equnr,
							"Lrpid": AIWEQUIModel[d].lam.Lrpid,
							"Strtptatr": AIWEQUIModel[d].lam.Strtptatr,
							"Endptatr": AIWEQUIModel[d].lam.Endptatr,
							"Length": AIWEQUIModel[d].lam.Length,
							"LinUnit": AIWEQUIModel[d].lam.LinUnit,
							"Startmrkr": AIWEQUIModel[d].lam.Startmrkr,
							"Endmrkr": AIWEQUIModel[d].lam.Endmrkr,
							"Mrkdisst": AIWEQUIModel[d].lam.Mrkdisst,
							"Mrkdisend": AIWEQUIModel[d].lam.Mrkdisend,
							"MrkrUnit": AIWEQUIModel[d].lam.MrkrUnit,
							"LamDer": AIWEQUIModel[d].lam.LamDer
						};
						sPayload.EqLAM.push(sEqLAM);
					}

					if (AIWEQUIModel[d].dfps) {
						var oEqDFPS = {
							Equi: AIWEQUIModel[d].Equnr,
							DeviceId: AIWEQUIModel[d].dfps.Tailno,
							Topsiteid: AIWEQUIModel[d].dfps.Area,
							Topsitede: AIWEQUIModel[d].dfps.AreaDesc,
							AreaPro: AIWEQUIModel[d].dfps.AreaPrfl,
							SiteId: AIWEQUIModel[d].dfps.Site,
							SiteDesc: AIWEQUIModel[d].dfps.SiteDesc,
							SitePro: AIWEQUIModel[d].dfps.SitePrfl,
							MpoId: AIWEQUIModel[d].dfps.MPO,
							MpoDescr: AIWEQUIModel[d].dfps.MPODesc,
							RicId: AIWEQUIModel[d].dfps.RIC,
							RicDescr: AIWEQUIModel[d].dfps.RICDesc,
							ModelId: AIWEQUIModel[d].dfps.ModelId,
							ModelDes: AIWEQUIModel[d].dfps.ModelIdDesc,
							Foreignob: formatter.truetoX(AIWEQUIModel[d].dfps.ForeignEq),
							TecState: AIWEQUIModel[d].dfps.TechSts,
							DepState: AIWEQUIModel[d].dfps.OperSts,
							DfpsRmrk: AIWEQUIModel[d].dfps.Remark
						};
						sPayload.EqDFPS.push(oEqDFPS);
					}

					var sEqClassList = AIWEQUIModel[d].classItems;
					if (sEqClassList) {
						if (sEqClassList.length > 0) {
							for (var e = 0; e < sEqClassList.length; e++) {
								var sEqClass = {
									"Equi": AIWEQUIModel[d].Equnr,
									"Classtype": sEqClassList[e].Classtype,
									"Class": sEqClassList[e].Class,
									"Clstatus1": sEqClassList[e].Clstatus1,
									"Artxt": sEqClassList[e].ClassTypeDesc
								};
								sPayload.EqClass.push(sEqClass);
							}
						}
					}

					var sEqCharList = AIWEQUIModel[d].characteristics;
					if (sEqCharList) {
						if (sEqCharList.length > 0) {
							for (var f = 0; f < sEqCharList.length; f++) {
								var sEqVal = {
									"Equi": AIWEQUIModel[d].Equnr,
									"Atnam": sEqCharList[f].Atnam,
									"Textbez": sEqCharList[f].Textbez,
									"Atwrt": sEqCharList[f].Atwrt,
									"Class": sEqCharList[f].Class
								};
								sPayload.EqVal.push(sEqVal);
							}
						}
					}
				}
			}
			if (AIWMSPTModel.length > 0) {
				for (var j = 0; j < AIWMSPTModel.length; j++) {
					var sMsPoint = {
						"Point": AIWMSPTModel[j].Mspoint,
						"Equnr": AIWMSPTModel[j].Equnr,
						"Eqktx": AIWMSPTModel[j].Eqktx,
						"Tplnr": AIWMSPTModel[j].Tplnr,
						"Floctxt": AIWMSPTModel[j].Pltxt,
						"Mptyp": AIWMSPTModel[j].Mptyp,
						"Mpttx": AIWMSPTModel[j].Mpttx,
						"Codgr": AIWMSPTModel[j].Codgr,
						"Codgrtxt": AIWMSPTModel[j].Codgrtxt,
						"ObtypMs": AIWMSPTModel[j].ObtypMs,
						"Objtypetxt": AIWMSPTModel[j].Txt,
						"AtnamMs": AIWMSPTModel[j].AtnamMs,
						"Atbez": AIWMSPTModel[j].Atbez,
						"Mseh6": AIWMSPTModel[j].Mseh6,
						"Msehl": AIWMSPTModel[j].Msehl,
						"Indct": AIWMSPTModel[j].Indct,
						"Cdsuf": AIWMSPTModel[j].Cdsuf,
						"Cjumc": AIWMSPTModel[j].Cjumc,
						"Desir": AIWMSPTModel[j].Desir,
						"Pyeac": AIWMSPTModel[j].Pyeac,
						"Mrmin": AIWMSPTModel[j].Mrmin,
						"Mrmax": AIWMSPTModel[j].Mrmax,
						"Pttxt": AIWMSPTModel[j].Pttxt,
						"Psort": AIWMSPTModel[j].Psort,
						"Inact": AIWMSPTModel[j].Inact,
						"Decim": AIWMSPTModel[j].Decim.toString(), //parseFloat(AIWMSPTModel[j].Decim),
						"Locas": AIWMSPTModel[j].Locas,
						"Maktx": AIWMSPTModel[j].Maktx,
						"Begru": AIWMSPTModel[j].Begru,
						"Begtx": AIWMSPTModel[j].Begtx,
						"Expon": AIWMSPTModel[j].Expon,
						"Mrngu": AIWMSPTModel[j].Mrngu,
						"Dstxt": AIWMSPTModel[j].Dstxt,
						"Indrv": AIWMSPTModel[j].Indrv,
						"IsMenu": AIWMSPTModel[j].menuAction
					};

					if (AIWMSPTModel[j].viewParameter === "create") {
						sMsPoint.Type = true;
					}
					sPayload.MSPoint.push(sMsPoint);

					if (AIWMSPTModel[j].lam) {
						var sMSLAM = {
							"Mspoint": AIWMSPTModel[j].Mspoint,
							"Lrpid": AIWMSPTModel[j].lam.Lrpid,
							"Strtptatr": AIWMSPTModel[j].lam.Strtptatr,
							"Endptatr": AIWMSPTModel[j].lam.Endptatr,
							"Length": AIWMSPTModel[j].lam.Length,
							"LinUnit": AIWMSPTModel[j].lam.LinUnit,
							"Startmrkr": AIWMSPTModel[j].lam.Startmrkr,
							"Endmrkr": AIWMSPTModel[j].lam.Endmrkr,
							"Mrkdisst": AIWMSPTModel[j].lam.Mrkdisst,
							"Mrkdisend": AIWMSPTModel[j].lam.Mrkdisend,
							"MrkrUnit": AIWMSPTModel[j].lam.MrkrUnit,
							"LamDer": AIWMSPTModel[j].lam.LamDer
						};
						sPayload.MSLAM.push(sMSLAM);
					}

					var sMsClassList = AIWMSPTModel[j].classItems;
					if (sMsClassList) {
						if (sMsClassList.length > 0) {
							for (var h = 0; h < sMsClassList.length; h++) {
								var sMsClass = {
									"Mspoint": AIWMSPTModel[j].Mspoint,
									"Classtype": sMsClassList[h].Classtype,
									"Class": sMsClassList[h].Class,
									"Clstatus1": sMsClassList[h].Clstatus1,
									"Artxt": sMsClassList[h].ClassTypeDesc
								};
								sPayload.MSClass.push(sMsClass);
							}
						}
					}

					var sMsCharList = AIWMSPTModel[j].characteristics;
					if (sMsCharList) {
						if (sMsCharList.length > 0) {
							for (var i = 0; i < sMsCharList.length; i++) {
								var sMsVal = {
									"Mspoint": AIWMSPTModel[j].Mspoint,
									"Atnam": sMsCharList[i].Atnam,
									"Textbez": sMsCharList[i].Textbez,
									"Atwrt": sMsCharList[i].Atwrt,
									"Class": sMsCharList[i].Class
								};
								sPayload.MSVal.push(sMsVal);
							}
						}
					}
				}
			}
			if (AIWMPMIModel.length > 0) {
				for (var k = 0; k < AIWMPMIModel.length; k++) {
					var sMPLAN = {
						"Warpl": AIWMPMIModel[k].Warpl,
						"Abrho": AIWMPMIModel[k].Abrho,
						"Hunit": AIWMPMIModel[k].Hunit,
						"Mptyp": AIWMPMIModel[k].Mptyp,
						"Wptxt": AIWMPMIModel[k].Wptxt,
						"Stich": AIWMPMIModel[k].Stich.toString(),
						"Fabkl": AIWMPMIModel[k].Fabkl,
						"FabklDesc": AIWMPMIModel[k].FabklDesc,
						"Sfakt": AIWMPMIModel[k].Sfakt,
						"Andor": g.parseValue(AIWMPMIModel[k].Andor),
						"Mehrfach": g.parseValue(AIWMPMIModel[k].Mehrfach),
						"Strat": AIWMPMIModel[k].Strat,
						"StratDesc": AIWMPMIModel[k].StratDesc,
						"Wset": AIWMPMIModel[k].Wset,
						"Startdate": g._formatDate(AIWMPMIModel[k].Stadt),
						"Unitc": AIWMPMIModel[k].Unitc,
						"Szaeh": AIWMPMIModel[k].Szaeh,
						"PointStp": AIWMPMIModel[k].Mpcycleno,

						"Vspos": AIWMPMIModel[k].Vspos,
						"Topos": AIWMPMIModel[k].Topos,
						"Vsneg": AIWMPMIModel[k].Vsneg,
						"Toneg": AIWMPMIModel[k].Toneg,
						"Horiz": AIWMPMIModel[k].Horiz,
						"CallConf": AIWMPMIModel[k].CallConf,
						"PlanSort": AIWMPMIModel[k].PlanSort,
						"Begru": AIWMPMIModel[k].Begru,
						"IsMenu": AIWMPMIModel[k].menuAction
					};

					if (AIWMPMIModel[k].viewParameter === "create") {
						sMPLAN.Type = true;
					}
					sPayload.MPLAN.push(sMPLAN);

					var sItem = AIWMPMIModel[k].itemModel;
					if (sItem) {
						for (var l = 0; l < sItem.length; l++) {
							var sMPItem = {
								// "Type": true, 
								"Mplan": AIWMPMIModel[k].Warpl,
								"Qmart": sItem[l].Qmart, // notif type
								"Qmartx": sItem[l].nTypeTxt, // notif type desc
								"PlntMi": sItem[l].Werks, // planning plant
								"Planningplantdes": sItem[l].Planningplantdes, // planning plant desc
								"IngrpMi": sItem[l].Ingrp, // planner grp
								"Plannergrpdesc": sItem[l].Innam, // planner grp desc
								"Pstxt": sItem[l].Pstxt, // maint item desc
								"WergwMi": sItem[l].WergwMi, // main wc desc
								"ArbpMi": sItem[l].ArbpMi, // main wc
								"Auart": sItem[l].Auart, // order type 
								"Ordertypedesc": sItem[l].oTypeTxt, // order type desc
								"Bautl": sItem[l].AsmblyOb, // assembly
								"Cycleseq": sItem[l].Cycleseq,
								"Equnr": sItem[l].Equnr, // equip
								"Equipdesc": sItem[l].Eqktx, // equip desc
								"TplnrMi": sItem[l].Tplnr, // floc
								"Flocdesc": sItem[l].Pltxt, // floc desc
								"Mitemnumb": sItem[l].Mitemnumb, // maint item 
								"PlnnrMi": sItem[l].PlnnrMi,
								"PlntyMi": sItem[l].PlntyMi,
								"PlnalMi": sItem[l].PlnalMi
							};

							if (AIWMPMIModel[k].viewParameter === "create") {
								sMPItem.Type = true;
							}
							sPayload.MPItem.push(sMPItem);

							if (sItem[l].lam) {
								var sMPLAM = {
									"Mplan": AIWMPMIModel[k].Warpl,
									"Mitemnumb": sItem[l].lam.Mitemnumb,
									"Lrpid": sItem[l].lam.Lrpid,
									"Mspoint": sItem[l].Mspoint,
									"Strtptatr": sItem[l].lam.Strtptatr,
									"Endptatr": sItem[l].lam.Endptatr,
									"Length": sItem[l].lam.Length,
									"LinUnit": sItem[l].lam.LinUnit,
									"Startmrkr": sItem[l].lam.Startmrkr,
									"Endmrkr": sItem[l].lam.Endmrkr,
									"Mrkdisst": sItem[l].lam.Mrkdisst,
									"Mrkdisend": sItem[l].lam.Mrkdisend,
									"MrkrUnit": sItem[l].lam.MrkrUnit,
									"LamDer": sItem[l].lam.LamDer
								};
								sPayload.MPLAM.push(sMPLAM);
							}
						}
					}

					var sObjListItem = AIWMPMIModel[k].ObjListItems;
					if (sObjListItem) {
						for (var z = 0; z < sObjListItem.length; z++) {
							var oOLI = {
								"AsmblyOb": sObjListItem[z].AsmblyOb,
								"EquiObj": sObjListItem[z].EquiObj,
								"FlocObj": sObjListItem[z].FlocObj,
								"MatnrObj": sObjListItem[z].MatnrObj,
								"Mitemnumb": sObjListItem[z].Mitemnumb,
								"Mplan": sObjListItem[z].Warpl
							};
							sPayload.MPOBList.push(oOLI);
						}
					}

					var sCycle = AIWMPMIModel[k].cycleModel;
					if (sCycle) {
						for (var m = 0; m < sCycle.length; m++) {
							var sMPCycle = {
								"Mplan": AIWMPMIModel[k].Warpl,
								"Point": sCycle[m].Point,
								"PointTxt": sCycle[m].Psort,
								"Offset": sCycle[m].Offset,
								"Ofsetunit": sCycle[m].Ofsetunit,
								"PakText": sCycle[m].PakText,
								"Zeieh": sCycle[m].Zeieh,
								"Zykl1": sCycle[m].Zykl1,
								"Cycleseqi": sCycle[m].Cycleseqi,
								"Mpcycleno": sCycle[m].Mpcycleno
							};
							sPayload.MPCycle.push(sMPCycle);
						}
					}
				}
			}

			var oMainViewModel = g.getView().getModel("mainView");
			var oMainViewData = oMainViewModel.getData();
			oMainViewData.tableBusy = true;
			oMainViewModel.setData(oMainViewData);
			var fnSuccess = function (r) {
				if (r.Messages.results.length > 0) {
					var oMessageList = [];
					for (var e = 0; e < r.Messages.results.length; e++) {
						oMessageList.push({
							type: formatter.getMessageType(r.Messages.results[e].Type),
							title: r.Messages.results[e].Message
						});
					}
					g.createMessagePopover(oMessageList, false);
					oMainViewData.tableBusy = false;
					oMainViewModel.setData(oMainViewData);

					if (sModelName === "AIWEQUI") {
						if (AIWEQUIModel[g.tempEquiIndx].Maintplant === "") {
							AIWEQUIModel[g.tempEquiIndx].Tplnr = "";
							AIWEQUIModel[g.tempEquiIndx].Pltxt = "";
							AIWEQUIModel[g.tempEquiIndx].SuperordinateEquip = "";
							AIWEQUIModel[g.tempEquiIndx].SuperordinateEquipDesc = "";
							sap.ui.getCore().getModel(g.oModelAIWEQUI).refresh();
							g.getView().getModel(g.oModelAIWEQUI).refresh();
						}
					}
					return;
				}
				if (r.FuncLoc) {
					if (r.FuncLoc.results.length > 0) {
						sArray = [];
						if (r.FuncLoc.results.length > 0) {
							for (var ifl = 0; ifl < r.FuncLoc.results.length; ifl++) {
								var h = r.FuncLoc.results[ifl];
								var sModelData = {
									intlAddr: [],
									altlbl: [],
									classItems: [],
									characteristics: [],
									FunctionallocationVS: "None",
									FunctionallocationVST: "",
									FlocdescriptionVS: "None",
									FlocdescriptionVST: "",
									StrucindicatorVS: "None",
									StrucindicatorVST: "",
									FloccategoryVS: "None",
									FloccategoryVST: "",
									SupFunctionallocationVS: "None",
									SupFunctionallocationVST: "",
									MaintplantVS: "None",
									MaintplantVST: "",
									StsmEquiVS: "None",
									StsmEquiVST: "",
									UstwEquiVS: "None",
									UstwEquiVST: "",
									UswoEquiVS: "None",
									UswoEquiVST: "",
									TechnicalObjectTypVS: "None",
									TechnicalObjectTypVST: "",
									LocationVS: "None",
									LocationVST: "",
									AbckzVS: "None",
									AbckzVST: "",
									MainArbplVS: "None",
									MainArbplVST: "",
									BeberFlVS: "None",
									BeberFlVST: "",
									BukrsVS: "None",
									BukrsVST: "",
									KostlVS: "None",
									KostlVST: "",
									WerksVS: "None",
									WerksVST: "",
									IngrpVS: "None",
									IngrpVST: "",
									ArbplVS: "None",
									ArbplVST: "",
									ConstrTypeVS: "None",
									ConstrTypeVST: "",
									RefPostaVS: "None",
									RefPostaVST: "",
									LangucodeVS: "None",
									LangucodeVST: "",
									TimeZoneVS: "None",
									TimeZoneVST: "",

									TplnrEnabled: true,
									FunctionalLocEnabled: true,
									FlocCatEnabled: true,
									StrucIndEnabled: true,
									MaintplantEnabled: true,
									BukrsEnabled: true
								};
								sModelData.Functionallocation = h.Tplnr;
								sModelData.Flocdescription = h.Txtmi;
								sModelData.EditMask = h.EditMask;
								sModelData.Hierarchy = h.Hierarchy;
								sModelData.Floccategory = h.Fltyp;
								sModelData.FlocCategoryDesc = h.Flttx;
								sModelData.Strucindicator = h.TplkzFlc;
								sModelData.StrucIndicatorDesc = h.Tplxt;
								sModelData.SupFunctionallocation = h.Tplma; // Sup FuncLoc
								sModelData.SupFlocdescription = h.Supflocdesc; // Sup FlocDescription
								sModelData.Stattext = h.Stattext; // System Status
								sModelData.StsmEqui = h.StsmFloc; // Status Profile
								sModelData.StsmEquiDesc = h.Statproftxt; // Status Profile Description
								sModelData.UstwEqui = h.UstwFloc; // Status with Status Number
								sModelData.UswoEqui = h.UswoFloc; // Status without Status Number
								sModelData.UstaEqui = h.UstaFloc; // User Status
								sModelData.TechnicalObjectTyp = h.Eqart; // TechnicalObjectTyp
								sModelData.Description = h.Eartx; // TechnicalObjectTyp Description
								sModelData.Maintplant = h.Swerk;
								sModelData.MaintplantDesc = h.Plantname;
								sModelData.Location = h.StorFloc; // Location
								sModelData.Locationdesc = h.Locationdesc; // Location Description
								sModelData.BeberFl = h.BeberFl; // Plant Section
								sModelData.Fing = h.Fing; // Person responsible
								sModelData.Tele = h.Tele; // Phone
								sModelData.Arbpl = h.Arbplfloc; // Work Center
								sModelData.Ktext = h.Workcenterdesc; // Work Center Description
								sModelData.WcWerks = h.Wergwfloc; // Work center Plant
								sModelData.MainArbpl = h.Gewrkfloc; // Main Work Center
								sModelData.MainKtext = h.MainWcDesc; // Plant Work Center
								sModelData.MainWerks = h.MainWcPlant; // Name
								sModelData.Abckz = h.Abckzfloc;
								sModelData.Abctx = h.Abctx;
								sModelData.Bukrs = h.Bukrsfloc;
								sModelData.Butxt = h.Butxt;
								sModelData.City = h.City;
								sModelData.Kostl = h.KostFloc; // Cost Center
								sModelData.Kokrs = h.KokrFloc; // ccPart1
								sModelData.Mctxt = h.Contareaname; // Name
								sModelData.Werks = h.PlntFloc; // Planning Plant
								sModelData.Planningplantdes = h.Planningplantdes; // Planning Plant Description
								sModelData.Ingrp = h.Ingrp; // Planner Group
								sModelData.Innam = h.Plannergrpdesc; // Planner Group Description
								sModelData.ConstrType = h.Submtiflo; // Construction Type
								sModelData.ConstructionDesc = h.Constdesc; // Construction Description
								sModelData.menuAction = h.IsMenu;
								sModelData.Adrnr = h.Adrnr;
								sModelData.Adrnri = h.Adrnri;

								if (h.Type === true) {
									sModelData.viewParameter = "create";
								}
								if (h.Type === false) {
									sModelData.viewParameter = "change";
									if (sModelData.Floccategory === "" || sModelData.Floccategory === undefined) {
										sModelData.FlocCatEnabled = true;
									} else {
										sModelData.FlocCatEnabled = false;
									}
									if (sModelData.Strucindicator === "" || sModelData.Strucindicator === undefined) {
										sModelData.StrucIndEnabled = true;
									} else {
										sModelData.StrucIndEnabled = false;
									}
									sModelData.FunctionalLocEnabled = false;
								}

								if (h.Swerk !== "") {
									// sModelData.MaintplantEnabled = false;
									sModelData.BukrsEnabled = false;
								} else {
									sModelData.MaintplantEnabled = true;
									sModelData.BukrsEnabled = true;
								}

								if (r.FLLAM.results.length > 0) {
									var aFlLam = r.FLLAM.results;
									for (var x = 0; x < aFlLam.length; x++) {
										if (aFlLam[x].Funcloc === sModelData.Functionallocation) {
											var oFLLAM = {
												"Funcloc": aFlLam[x].Funcloc,
												"Lrpid": aFlLam[x].Lrpid,
												"LrpidDesc": aFlLam[x].LrpDescr,
												"Strtptatr": aFlLam[x].Strtptatr,
												"Endptatr": aFlLam[x].Endptatr,
												"Length": aFlLam[x].Length,
												"LinUnit": aFlLam[x].LinUnit,
												"LinUnitDesc": aFlLam[x].Uomtext,
												"Startmrkr": aFlLam[x].Startmrkr,
												"Endmrkr": aFlLam[x].Endmrkr,
												"Mrkdisst": aFlLam[x].Mrkdisst,
												"Mrkdisend": aFlLam[x].Mrkdisend,
												"MrkrUnit": aFlLam[x].MrkrUnit,
												"LamDer": aFlLam[x].LamDer
											};
											sModelData.lam = oFLLAM;
											break;
										}
									}
								}

								if (r.FLAddr) {
									if (r.FLAddr.results) {
										var sAddress = r.FLAddr.results;
										if (sAddress) {
											if (sAddress.length > 0) {
												for (var jfl = 0; jfl < sAddress.length; jfl++) {
													if (sModelData.Functionallocation === sAddress[jfl].Funcloc) {
														var oAddressModel = sap.ui.getCore().getModel("flocAddressView");
														var oAddressData = oAddressModel.getData();
														var mCountFlag = true;
														var sObj, sMatchIndex;
														if (oAddressData.length > 0) {
															for (var sa = 0; sa < oAddressData.length; sa++) {
																if (sModelData.Functionallocation === oAddressData[sa].Functionallocation) {
																	mCountFlag = false;
																	sMatchIndex = sa;
																	break;
																}
															}
														}
														if (mCountFlag && sModelData.SupFunctionallocation !== "" && sModelData.SupFunctionallocation !== undefined) {
															sObj = {
																Functionallocation: sModelData.Functionallocation,
																IsEditable: sAddress[jfl].IsEditable
															};
															oAddressData.push(sObj);
															oAddressModel.setData(oAddressData);
														}
														if (!mCountFlag && sModelData.SupFunctionallocation !== "" && sModelData.SupFunctionallocation !== undefined) {
															oAddressData[sMatchIndex].Functionallocation = sModelData.Functionallocation;
															oAddressData[sMatchIndex].IsEditable = sModelData.IsEditable;
															oAddressModel.setData(oAddressData);
														}

														sModelData.Title = sAddress[jfl].Titletxt ? sAddress[jfl].Titletxt : "";
														sModelData.TitleCode = sAddress[jfl].Title ? sAddress[jfl].Title : "";
														sModelData.Name1 = sAddress[jfl].Name1 ? sAddress[jfl].Name1 : "";
														sModelData.Name2 = sAddress[jfl].Name2 ? sAddress[jfl].Name2 : "";
														sModelData.Name3 = sAddress[jfl].Name3 ? sAddress[jfl].Name3 : "";
														sModelData.Name4 = sAddress[jfl].Name4 ? sAddress[jfl].Name4 : "";
														sModelData.Sort1 = sAddress[jfl].Sort1 ? sAddress[jfl].Sort1 : "";
														sModelData.Sort2 = sAddress[jfl].Sort2 ? sAddress[jfl].Sort2 : "";
														sModelData.NameCo = sAddress[jfl].NameCo ? sAddress[jfl].NameCo : "";
														sModelData.PostCod1 = sAddress[jfl].PostCod1 ? sAddress[jfl].PostCod1 : "";
														sModelData.City1 = sAddress[jfl].City1 ? sAddress[jfl].City1 : "";
														sModelData.Building = sAddress[jfl].Building ? sAddress[jfl].Building : "";
														sModelData.Floor = sAddress[jfl].Floor ? sAddress[jfl].Floor : "";
														sModelData.Roomnum = sAddress[jfl].Roomnum ? sAddress[jfl].Roomnum : "";
														sModelData.Strsuppl1 = sAddress[jfl].Strsuppl1 ? sAddress[jfl].Strsuppl1 : "";
														sModelData.Strsuppl2 = sAddress[jfl].Strsuppl2 ? sAddress[jfl].Strsuppl2 : "";
														sModelData.Strsuppl3 = sAddress[jfl].Strsuppl3 ? sAddress[jfl].Strsuppl3 : "";
														sModelData.AddrLocation = sAddress[jfl].Location ? sAddress[jfl].Location : "";
														sModelData.RefPosta = sAddress[jfl].RPostafl ? sAddress[jfl].RPostafl : "";
														sModelData.Landx = sAddress[jfl].Landx ? sAddress[jfl].Landx : "";
														sModelData.TimeZone = sAddress[jfl].TimeZone ? sAddress[jfl].TimeZone : "";
														sModelData.Region = sAddress[jfl].RPostFl ? sAddress[jfl].RPostFl : "";
														sModelData.RegionDesc = sAddress[jfl].Regiotxt ? sAddress[jfl].Regiotxt : "";
													}
												}
											} else {
												sModelData.Title = sModelData.Title ? sModelData.Title : "";
												sModelData.TitleCode = sModelData.TitleCode ? sModelData.TitleCode : "";
												sModelData.Name1 = sModelData.Name1 ? sModelData.Name1 : "";
												sModelData.Name2 = sModelData.Name2 ? sModelData.Name2 : "";
												sModelData.Name3 = sModelData.Name3 ? sModelData.Name3 : "";
												sModelData.Name4 = sModelData.Name4 ? sModelData.Name4 : "";
												sModelData.Sort1 = sModelData.Sort1 ? sModelData.Sort1 : "";
												sModelData.Sort2 = sModelData.Sort2 ? sModelData.Sort2 : "";
												sModelData.NameCo = sModelData.NameCo ? sModelData.NameCo : "";
												sModelData.PostCod1 = sModelData.PostCod1 ? sModelData.PostCod1 : "";
												sModelData.City1 = sModelData.City1 ? sModelData.City1 : "";
												sModelData.Building = sModelData.Building ? sModelData.Building : "";
												sModelData.Floor = sModelData.Floor ? sModelData.Floor : "";
												sModelData.Roomnum = sModelData.Roomnum ? sModelData.Roomnum : "";
												sModelData.Strsuppl1 = sModelData.Strsuppl1 ? sModelData.Strsuppl1 : "";
												sModelData.Strsuppl2 = sModelData.Strsuppl2 ? sModelData.Strsuppl2 : "";
												sModelData.Strsuppl3 = sModelData.Strsuppl3 ? sModelData.Strsuppl3 : "";
												sModelData.AddrLocation = sModelData.AddrLocation ? sModelData.AddrLocation : "";
												sModelData.RefPosta = sModelData.RefPosta ? sModelData.RefPosta : "";
												sModelData.Landx = sModelData.Landx ? sModelData.Landx : "";
												sModelData.TimeZone = sModelData.TimeZone ? sModelData.TimeZone : "";
												sModelData.Region = sModelData.Region ? sModelData.Region : "";
												sModelData.RegionDesc = sModelData.RegionDesc ? sModelData.RegionDesc : "";
											}
										}
									}
								}

								var aIntlAddr = r.FLAddrI.results;
								if (aIntlAddr.length > 0) {
									for (var z = 0; z < aIntlAddr.length; z++) {
										if (aIntlAddr[z].Funcloc === sModelData.Functionallocation) {
											aIntlAddr[z].AdNationEnable = false;
											aIntlAddr[z].City1iVS = "None";
											aIntlAddr[z].StreetiVS = "None";
											sModelData.intlAddr.push(aIntlAddr[z]);
										}
									}
								}

								var aAltLbl = r.FLALTLBEL.results;
								if (aAltLbl.length > 0) {
									for (var y = 0; y < aAltLbl.length; y++) {
										if (aAltLbl[y].Funcloc === sModelData.Functionallocation) {
											var oAltLbl = {
												"Funcloc": aAltLbl[y].Funcloc,
												"AltAlkey": aAltLbl[y].AltAlkey, // Labeling system
												"Altxt": aAltLbl[y].Altxt, // Labeling system descr
												"AltStrno": aAltLbl[y].AltStrno, // Alternative Label
												"AltTplkz": aAltLbl[y].AltTplkz, // Strycture Indicator
												"Tplxt": aAltLbl[y].Tplxt, // Structure Indicator Descr
												"Name1i": aAltLbl[y].Editm, // Edit Mask
												"Actvs": aAltLbl[y].Actvs, // Active
												"AltPrkey": aAltLbl[y].AltPrkey, // Primary
												"AltReuse": aAltLbl[y].AltReuse, // Reusable

												"enableLblSys": false,
												"enableAltLbl": true,
												"enableStrInd": true,

												"LblSysVS": "None",
												"AltLblVS": "None",
												"StrIndVS": "None"
											};
											sModelData.altlbl.push(oAltLbl);
										}
									}
								}

								if (r.FLClass) {
									var sClassList = r.FLClass.results;
									if (sClassList) {
										if (sClassList.length > 0) {
											for (var afl = 0; afl < sClassList.length; afl++) {
												if (sModelData.Functionallocation === sClassList[afl].Funcloc) {
													sClassList[afl].ctEnable = false;
													sClassList[afl].classEnable = false;
													sClassList[afl].ClassTypeDesc = sClassList[afl].Artxt;
													delete sClassList[afl].Artxt;
													sClassList[afl].ClassDesc = sClassList[afl].Kltxt;
													delete sClassList[afl].Kltxt;
													delete sClassList[afl].Changerequestid;
													delete sClassList[afl].Clint;
													delete sClassList[afl].Service;
													sModelData.classItems.push(sClassList[afl]);
												}
											}
											sModelData.charNewButton = true;
											if (g.class && g.class.getId().includes("detailFloc") === true) {
												// var itemFragmentId = g.getView().createId("charFrag");
												// var newCharBtn = sap.ui.core.Fragment.byId(itemFragmentId, "newChar");
												// newCharBtn.setEnabled(true);
												g.class.setModel(new JSONModel(sModelData.classItems));
											}
										}
									}
								}

								if (r.FLVal) {
									var sCharList = r.FLVal.results;
									if (sCharList) {
										if (sCharList.length > 0) {
											for (var jfv = 0; jfv < sCharList.length; jfv++) {
												if (sModelData.Functionallocation === sCharList[jfv].Funcloc) {
													sCharList[jfv].cNameEnable = false;
													sCharList[jfv].Textbz = sCharList[jfv].Atwtb;
													delete sCharList[jfv].Ataut;
													delete sCharList[jfv].Ataw1;
													delete sCharList[jfv].Atawe;
													delete sCharList[jfv].Atcod;
													delete sCharList[jfv].Atflb;
													delete sCharList[jfv].Atflv;
													delete sCharList[jfv].Atimb;
													delete sCharList[jfv].Atsrt;
													delete sCharList[jfv].Atvglart;
													delete sCharList[jfv].Atzis;
													delete sCharList[jfv].Changerequestid;
													delete sCharList[jfv].CharName;
													delete sCharList[jfv].Charid;
													delete sCharList[jfv].Classtype;
													delete sCharList[jfv].Service;
													delete sCharList[jfv].Valcnt;
													sCharList[jfv].slNo = jfv + 1; // ()
													sCharList[jfv].flag = sCharList[jfv].Class + "-" + sCharList[jfv].slNo; // ()
													sModelData.characteristics.push(sCharList[jfv]);
												}
											}
											for (var z = 0; z < sModelData.characteristics.length; z++) {
												var count = 1;
												for (var y = 0; y < sModelData.characteristics.length; y++) {
													if (z === y) {
														continue;
													}
													if (sModelData.characteristics[y].Atnam === sModelData.characteristics[z].Atnam && sModelData.characteristics[y].Class ===
														sModelData.characteristics[z].Class) {
														count++;
													}
												}
												if (count > 1) {
													sModelData.characteristics[z].charDltEnable = true;
												} else {
													sModelData.characteristics[z].charDltEnable = false;
												}

												if (sModelData.characteristics[z].Atein === true) {
													sModelData.characteristics[z].charAddEnable = false;
												}
											}
											if (g.char && g.char.getId().includes("detailFloc") === true) {
												g.char.setModel(new JSONModel(sModelData.characteristics));
											}
										}
									}
								}

								if (sModelData.UstaEqui) {
									oMainViewData.visible = true;
								} else {
									oMainViewData.visible = false;
								}
								oMainViewModel.setData(oMainViewModel);
								sArray.push(sModelData);
							}
							oAIWFLOCModel.setData(sArray);
						}
					}
				}
				if (r.Equipment) {
					if (r.Equipment.results.length > 0) {
						sArray = [];
						for (var ieq = 0; ieq < r.Equipment.results.length; ieq++) {
							var sModelData = r.Equipment.results[ieq];
							sObject = {
								intlAddr: [],
								classItems: [],
								characteristics: [],
								charNewButton: false,

								attachmentCount: "0", // Attachment Count
								Guids: "", // Attachment

								EqunrEnabled: true,
								EquipCatEnabled: true,
								MaintplantEnabled: true,
								BukrsEnabled: true,

								EqunrVS: "None",
								EqunrVST: "",
								EqktxVS: "None",
								EqktxVST: "",
								EquipmentCatogoryVS: "None",
								EquipmentCatogoryVST: "",
								MaintplantVS: "None",
								MaintplantVST: "",
								TplnrVS: "None",
								TplnrVST: "",
								SuperordinateEquipVS: "None",
								SuperordinateEquipVST: "",
								StsmEquiVS: "None",
								StsmEquiVST: "",
								UstwEquiVS: "None",
								UstwEquiVST: "",
								UswoEquiVS: "None",
								UswoEquiVST: "",
								TechnicalObjectTypVS: "None",
								TechnicalObjectTypVST: "",
								LocationVS: "None",
								LocationVSTL: "",
								AbckzVS: "None",
								AbckzVST: "",
								ArbplVS: "None",
								ArbplVST: "",
								BukrsVS: "None",
								BukrsVST: "",
								KostlVS: "None",
								KostlVST: "",
								WerksVS: "None",
								WerksVST: "",
								IngrpVS: "None",
								IngrpVST: "",
								ConstrTypeVS: "None",
								ConstrTypeVST: "",
								RefPostaVS: "None",
								RefPostaVST: "",
								MainArbplVS: "None",
								MainArbplVST: "",
								LangucodeVS: "None",
								LangucodeVST: "",
								TimeZoneVS: "None",
								TimeZoneVST: "",

								ConstrTypeMaxL: 0,
								charValueMaxL: 0,

								dfps: {
									Tailno: "",
									TailnoVS: "None",
									Area: "",
									AreaDesc: "",
									AreaPrfl: "",
									Site: "",
									SiteDesc: "",
									SiteVS: "None",
									SitePrfl: "",
									MPO: "",
									MPODesc: "",
									RIC: "",
									RICDesc: "",
									ModelId: "",
									ModelIdDesc: "",
									ModelIdVS: "None",
									ForeignEq: false,
									TechSts: "",
									OperSts: "0001",
									Remark: "",
									dfpsCrtEnabled: true,
									dfpsDltEnabled: false,
									dfpsEnabled: false,
									TailnoReq: false,
								}
							};
							sObject.Equnr = sModelData.Equnr;
							sObject.Eqktx = sModelData.Txtmi;
							// sObject.Eqktx = sModelData.Eqktx;
							sObject.EquipmentCatogory = sModelData.Eqtyp;
							sObject.EquipCatgDescription = sModelData.Etytx;
							sObject.Maintplant = sModelData.Swerk;
							sObject.MaintplantDesc = sModelData.Name1;

							sObject.SuperordinateEquip = sModelData.HequEeqz; // Superord. Equipment
							sObject.SuperordinateEquipDesc = sModelData.SuperordEqDes; // Superord. Equipment Description
							sObject.Bukrs = sModelData.BukrEilo;
							sObject.Butxt = sModelData.Butxt;
							sObject.Location = sModelData.StorEilo; // Location
							sObject.Locationdesc = sModelData.Locationdesc; // Location Description
							sObject.Abckz = sModelData.AbckEilo;
							sObject.Abctx = sModelData.Abctx;
							sObject.Kostl = sModelData.KostEilo; // Cost Center
							sObject.Kokrs = sModelData.KokrEilo; // ccPart1
							sObject.Mctxt = sModelData.Contareaname; // Name
							sObject.Answt = sModelData.Answt;
							sObject.Ansdt = formatter.getDateFormat(sModelData.Ansdt);
							sObject.Waers = sModelData.Waers; // Currency
							sObject.Werks = sModelData.PplaEeqz; // Planning Plant
							sObject.Planningplantdes = sModelData.Planningplantdes; // Planning Plant Description
							sObject.Ingrp = sModelData.IngrEeqz; // Planner Group
							sObject.Innam = sModelData.Plannergrpdesc; // Planner Group Description
							sObject.Arbpl = sModelData.ArbpEilo; // Work Center
							sObject.Ktext = sModelData.Workcenterdesc; // Work Center Description
							sObject.WcWerks = sModelData.WorkCenterPlant; // Work center Plant
							sObject.MainArbpl = sModelData.ArbpEeqz; // Main Work Center
							sObject.MainKtext = sModelData.MainWcDesc; // Plant Work Center
							sObject.MainWerks = sModelData.MainWcPlant; // Name
							sObject.BeberFl = sModelData.BebeEilo; // Plant Section
							sObject.Fing = sModelData.Fing; // Plant Section
							sObject.Tele = sModelData.Tele; // Plant Section
							sObject.Herst = sModelData.Herst; // Manufacturer
							sObject.TechnicalObjectTyp = sModelData.Eqart; // TechnicalObjectTyp
							sObject.Description = sModelData.Eartx; // TechnicalObjectTyp Description
							sObject.Typbz = sModelData.Typbz; // Model Number
							sObject.ConstrType = sModelData.SubmEeqz; // Construction Type
							sObject.ConstructionDesc = sModelData.Constdesc; // Construction Description
							sObject.TechIdNum = sModelData.TidnEeqz; // techIndNo
							sObject.Serge = sModelData.Serge; // manfSerNo
							sObject.MapaEeqz = sModelData.MapaEeqz; // partNum
							sObject.EquipPosition = sModelData.HeqnEeqz; // Position

							sObject.Stattext = sModelData.Stattext; // System Status
							sObject.StsmEqui = sModelData.StsmEqui; // Status Profile
							sObject.StsmEquiDesc = sModelData.Statproftxt; // Status Profile Description
							sObject.UstwEqui = sModelData.UstwEqui; // Status with Status Number
							sObject.UswoEqui = sModelData.UswoEqui; // Status without Status Number
							sObject.UstaEqui = sModelData.UstaEqui; // User Status
							sObject.menuAction = sModelData.IsMenu;
							sObject.Adrnr = sModelData.Adrnr;
							sObject.Adrnri = sModelData.Adrnri;
							// sObject.Fhmkz = AIWEQUIModel[ieq].Fhmkz;
							sObject.Fhmkz = sModelData.Fhmkz; // PRT fields visible
							sObject.Funcid = sModelData.Funcid; //Config control data
							sObject.Frcfit = sModelData.Frcfit;
							sObject.Frcrmv = sModelData.Frcrmv;

							if (r.EqPRT) {
								var sPRT = r.EqPRT.results[ieq];
								if (sPRT) {
									sObject.PlanvPrt = sPRT.PlanvPrt;
									sObject.SteufPrt = sPRT.SteufPrt;
									sObject.KtschPrt = sPRT.KtschPrt;
									sObject.Ewformprt = sPRT.Ewformprt;
									sObject.PlanvPrtText = AIWEQUIModel[ieq].PlanvPrtText;
									sObject.SteufPrtText = AIWEQUIModel[ieq].SteufPrtText;
									sObject.KtschPrtText = AIWEQUIModel[ieq].KtschPrtText;
									sObject.EwformprtText = AIWEQUIModel[ieq].EwformprtText;
									sObject.SteufRef = sPRT.SteufRef;
									sObject.KtschRef = sPRT.KtschRef;
									sObject.EwformRef = sPRT.EwformRef;
								} else {
									sObject.PlanvPrt = "";
									sObject.SteufPrt = "";
									sObject.KtschPrt = "";
									sObject.Ewformprt = "";
									sObject.PlanvPrtText = "";
									sObject.SteufPrtText = "";
									sObject.KtschPrtText = "";
									sObject.EwformprtText = "";
									sObject.SteufRef = false;
									sObject.KtschRef = false;
									sObject.EwformRef = false;
								}
							}

							if (r.EqLAM.results.length > 0) {
								var aEqLAM = r.EqLAM.results;
								for (var x = 0; x < aEqLAM.length; x++) {
									if (aEqLAM[x].Equi === sModelData.Equnr) {
										var oEqLAM = {
											"Equi": aEqLAM[x].Equi,
											"Lrpid": aEqLAM[x].Lrpid,
											"LrpidDesc": aEqLAM[x].LrpDescr,
											"Strtptatr": aEqLAM[x].Strtptatr,
											"Endptatr": aEqLAM[x].Endptatr,
											"Length": aEqLAM[x].Length,
											"LinUnit": aEqLAM[x].LinUnit,
											"LinUnitDesc": aEqLAM[x].Uomtext,
											"Startmrkr": aEqLAM[x].Startmrkr,
											"Endmrkr": aEqLAM[x].Endmrkr,
											"Mrkdisst": aEqLAM[x].Mrkdisst,
											"Mrkdisend": aEqLAM[x].Mrkdisend,
											"MrkrUnit": aEqLAM[x].MrkrUnit,
											"LamDer": aEqLAM[x].LamDer
										};
										sObject.lam = oEqLAM;
										break;
									}
								}
							}

							if (sModelData.Type === true) {
								sObject.viewParameter = "create";
							}
							if (sModelData.Type === false) {
								sObject.viewParameter = "change";
								sObject.EqunrEnabled = false;

								if (sObject.EquipmentCatogory === "" || sObject.EquipmentCatogory === undefined) {
									sObject.EquipCatEnabled = true;
								} else {
									sObject.EquipCatEnabled = false;
								}
								if (sObject.Maintplant === "" || sObject.Maintplant === undefined) {
									sObject.MaintplantEnabled = true;
								} else {
									sObject.MaintplantEnabled = false;
								}
								if (sObject.Tplnr === "" || sObject.Tplnr === undefined) {
									sObject.TplnrEnabled = true;
								} else {
									sObject.TplnrEnabled = false;
								}
							}

							if (sModelData.Swerk !== "") {
								sObject.BukrsEnabled = false;
							} else {
								sObject.BukrsEnabled = true;
							}

							if (sModelData.Eqtyp !== "P") {
								sObject.Tplnr = sModelData.TplnEilo; // Functional Location
								sObject.Pltxt = sModelData.Flocdescription; // Functional Location Description
								sObject.TplnrEnabled = true;
							} else {
								sObject.Tplnr = "";
								sObject.Pltxt = "";
								sObject.TplnrEnabled = false;
							}
							if (sObject.SuperordinateEquip !== "" && sObject.SuperordinateEquip !== undefined) {
								sObject.TplnrEnabled = false;
								sObject.SuperordinateEquipEnabled = true;
							} else if (sObject.Tplnr !== "" && sObject.Tplnr !== undefined) {
								sObject.TplnrEnabled = true;
								sObject.SuperordinateEquipEnabled = false;
							}
							if ((sObject.SuperordinateEquip !== "" && sObject.SuperordinateEquip !== undefined) || (sObject.Tplnr !== "" && sObject.Tplnr !==
									undefined)) {
								sObject.MaintplantEnabled = true; //false;
							} else {
								sObject.MaintplantEnabled = true;
							}

							if (r.EqAddr) {
								if (r.EqAddr.results) {
									var sAddress = r.EqAddr.results;
									if (sAddress) {
										if (sAddress.length > 0) {
											for (var jeq = 0; jeq < sAddress.length; jeq++) {
												if (sObject.Equnr === sAddress[jeq].Equi) {
													var oAddressEquiModel = sap.ui.getCore().getModel("equiAddressView");
													var oAddressEquiData = oAddressEquiModel.getData();
													var mCountEquiFlag = true;
													var sEquiObj, sEquiMatchIndex;
													if (oAddressEquiData.length > 0) {
														for (var sfa = 0; sfa < oAddressEquiData.length; sfa++) {
															if (sModelData.Equnr === oAddressEquiData[sfa].Equnr) {
																mCountEquiFlag = false;
																sEquiMatchIndex = sfa;
																break;
															}
														}
													}
													if (mCountEquiFlag === true) {
														if ((sObject.SuperordinateEquip !== "" && sObject.SuperordinateEquip !== undefined) ||
															(sObject.Tplnr !== "" && sObject.Tplnr !== undefined)) {
															sEquiObj = {
																Equnr: sModelData.Equnr,
																Tplnr: sObject.Tplnr,
																IsEditable: sAddress[jeq].IsEditable
															};
															oAddressEquiData.push(sEquiObj);
															oAddressEquiModel.setData(oAddressEquiData);
														}
													}
													if (mCountEquiFlag === false) {
														if ((sObject.SuperordinateEquip !== "" && sObject.SuperordinateEquip !== undefined) ||
															(sObject.Tplnr !== "" && sObject.Tplnr !== undefined)) {
															oAddressEquiData[sEquiMatchIndex].Equnr = sModelData.Equnr;
															oAddressEquiData[sEquiMatchIndex].Tplnr = sModelData.Tplnr;
															oAddressEquiData[sEquiMatchIndex].IsEditable = sModelData.IsEditable;
															oAddressEquiModel.setData(oAddressEquiData);
														}
													}

													sObject.Title = sAddress[jeq].Titletxt ? sAddress[jeq].Titletxt : "";
													sObject.TitleCode = sAddress[jeq].Title ? sAddress[jeq].Title : "";
													sObject.Name1 = sAddress[jeq].Name1 ? sAddress[jeq].Name1 : "";
													sObject.Name2 = sAddress[jeq].Name2 ? sAddress[jeq].Name2 : "";
													sObject.Name3 = sAddress[jeq].Name3 ? sAddress[jeq].Name3 : "";
													sObject.Name4 = sAddress[jeq].Name4 ? sAddress[jeq].Name4 : "";
													sObject.Sort1 = sAddress[jeq].Sort1 ? sAddress[jeq].Sort1 : "";
													sObject.Sort2 = sAddress[jeq].Sort2 ? sAddress[jeq].Sort2 : "";
													sObject.NameCo = sAddress[jeq].NameCo ? sAddress[jeq].NameCo : "";
													sObject.PostCod1 = sAddress[jeq].PostCod1 ? sAddress[jeq].PostCod1 : "";
													sObject.City1 = sAddress[jeq].City1 ? sAddress[jeq].City1 : "";
													sObject.Building = sAddress[jeq].Building ? sAddress[jeq].Building : "";
													sObject.Floor = sAddress[jeq].Floor ? sAddress[jeq].Floor : "";
													sObject.Roomnum = sAddress[jeq].Roomnum ? sAddress[jeq].Roomnum : "";
													sObject.AddrLocation = sAddress[jeq].Location ? sAddress[jeq].Location : "";
													sObject.Strsuppl1 = sAddress[jeq].Strsuppl1 ? sAddress[jeq].Strsuppl1 : "";
													sObject.Strsuppl2 = sAddress[jeq].Strsuppl2 ? sAddress[jeq].Strsuppl2 : "";
													sObject.Strsuppl3 = sAddress[jeq].Strsuppl3 ? sAddress[jeq].Strsuppl3 : "";
													sObject.RefPosta = sAddress[jeq].RefPosta ? sAddress[jeq].RefPosta : "";
													sObject.Landx = sAddress[jeq].Landx ? sAddress[jeq].Landx : "";
													sObject.TimeZone = sAddress[jeq].TimeZone ? sAddress[jeq].TimeZone : "";
													sObject.Region = sAddress[jeq].RfePost ? sAddress[jeq].RfePost : "";
													sObject.RegionDesc = sAddress[jeq].Regiotxt ? sAddress[jeq].Regiotxt : "";
												}
											}
										} else {
											sObject.Title = sObject.Title ? sObject.Title : "";
											sObject.TitleCode = sObject.TitleCode ? sObject.TitleCode : "";
											sObject.Name1 = sObject.Name1 ? sObject.Name1 : "";
											sObject.Name2 = sObject.Name2 ? sObject.Name2 : "";
											sObject.Name3 = sObject.Name3 ? sObject.Name3 : "";
											sObject.Name4 = sObject.Name4 ? sObject.Name4 : "";
											sObject.Sort1 = sObject.Sort1 ? sObject.Sort1 : "";
											sObject.Sort2 = sObject.Sort2 ? sObject.Sort2 : "";
											sObject.NameCo = sObject.NameCo ? sObject.NameCo : "";
											sObject.PostCod1 = sObject.PostCod1 ? sObject.PostCod1 : "";
											sObject.City1 = sObject.City1 ? sObject.City1 : "";
											sObject.Building = sObject.Building ? sObject.Building : "";
											sObject.Floor = sObject.Floor ? sObject.Floor : "";
											sObject.Roomnum = sObject.Roomnum ? sObject.Roomnum : "";
											sObject.Strsuppl1 = sObject.Strsuppl1 ? sObject.Strsuppl1 : "";
											sObject.Strsuppl2 = sObject.Strsuppl2 ? sObject.Strsuppl2 : "";
											sObject.Strsuppl3 = sObject.Strsuppl3 ? sObject.Strsuppl3 : "";
											sObject.AddrLocation = sObject.AddrLocation ? sObject.AddrLocation : "";
											sObject.RefPosta = sObject.RefPosta ? sObject.RefPosta : "";
											sObject.Landx = sObject.Landx ? sObject.Landx : "";
											sObject.TimeZone = sObject.TimeZone ? sObject.TimeZone : "";
											sObject.Region = sObject.Region ? sObject.Region : "";
											sObject.RegionDesc = sObject.RegionDesc ? sObject.RegionDesc : "";
										}
									}
								}
							}

							var aIntlAddr = r.EqAddrI.results;
							if (aIntlAddr.length > 0) {
								for (var z = 0; z < aIntlAddr.length; z++) {
									if (aIntlAddr[z].Equi === sModelData.Equnr) {
										aIntlAddr[z].AdNationEnable = false;
										aIntlAddr[z].City1iVS = "None";
										aIntlAddr[z].StreetiVS = "None";
										sObject.intlAddr.push(aIntlAddr[z]);
									}
								}
							}

							if (r.EqDFPS) {
								if (r.EqDFPS.results) {
									var sDpfs = r.EqDFPS.results;
									if (sDpfs) {
										if (sDpfs.length > 0) {
											for (var ud = 0; ud < sDpfs.length; ud++) {
												if (sObject.Equnr === sDpfs[ud].Equi) {
													sObject.dfps.Equnr = sDpfs[ud].Equi;
													sObject.dfps.MeOwner = sDpfs[ud].MeOwner;
													sObject.dfps.MeUser = sDpfs[ud].MeUser;
													sObject.dfps.Tailno = sDpfs[ud].DeviceId;
													sObject.dfps.Area = sDpfs[ud].Topsiteid;
													sObject.dfps.AreaDesc = sDpfs[ud].Topsitede;
													sObject.dfps.AreaPrfl = sDpfs[ud].AreaPro;
													sObject.dfps.Site = sDpfs[ud].SiteId;
													sObject.dfps.SiteDesc = sDpfs[ud].SiteDesc;
													sObject.dfps.SitePrfl = sDpfs[ud].SitePro;
													sObject.dfps.MPO = sDpfs[ud].MpoId;
													sObject.dfps.MPODesc = sDpfs[ud].MpoDescr;
													sObject.dfps.RIC = sDpfs[ud].RicId;
													sObject.dfps.RICDesc = sDpfs[ud].RicDescr;
													sObject.dfps.ModelId = sDpfs[ud].ModelId;
													sObject.dfps.ModelIdDesc = sDpfs[ud].ModelDes;
													sObject.dfps.ForeignEq = formatter.XtoTrue(sDpfs[ud].Foreignob);
													sObject.dfps.TechSts = sDpfs[ud].TecState;
													sObject.dfps.OperSts = sDpfs[ud].DepState;
													sObject.dfps.Remark = sDpfs[ud].DfpsRmrk;
													if (sDpfs[ud].DeviceId !== "") {
														sObject.dfps.dfpsCrtEnabled = false;
														sObject.dfps.dfpsDltEnabled = true;
														sObject.dfps.dfpsEnabled = true;
														sObject.dfps.TailnoReq = true;
													}
												}
											}
										}
									}
								}
							}

							if (r.EqClass) {
								var sClassList = r.EqClass.results;
								if (sClassList) {
									if (sClassList.length > 0) {
										for (var aeq = 0; aeq < sClassList.length; aeq++) {
											if (sObject.Equnr === sClassList[aeq].Equi) {
												sClassList[aeq].ctEnable = false;
												sClassList[aeq].classEnable = false;
												sClassList[aeq].ClassTypeDesc = sClassList[aeq].Artxt;
												delete sClassList[aeq].Artxt;
												sClassList[aeq].ClassDesc = sClassList[aeq].Kltxt;
												delete sClassList[aeq].Kltxt;
												delete sClassList[aeq].Changerequestid;
												delete sClassList[aeq].Clint;
												delete sClassList[aeq].Service;
												sObject.classItems.push(sClassList[aeq]);
											}
										}
										sObject.charNewButton = true;
										if (g.class && g.class.getId().includes("detailEqui") === true) {
											// var itemFragmentId = g.getView().createId("charFrag");
											// var newCharBtn = sap.ui.core.Fragment.byId(itemFragmentId, "newChar");
											// newCharBtn.setEnabled(true);
											g.class.setModel(new JSONModel(sObject.classItems));
										}
									}
								}
							}

							if (r.EqVal) {
								var sCharList = r.EqVal.results;
								if (sCharList) {
									if (sCharList.length > 0) {
										for (var jev = 0; jev < sCharList.length; jev++) {
											if (sObject.Equnr === sCharList[jev].Equi) {
												sCharList[jev].cNameEnable = false;
												sCharList[jev].Textbz = sCharList[jev].Atwtb;
												delete sCharList[jev].Ataut;
												delete sCharList[jev].Ataw1;
												delete sCharList[jev].Atawe;
												delete sCharList[jev].Atcod;
												delete sCharList[jev].Atflb;
												delete sCharList[jev].Atflv;
												delete sCharList[jev].Atimb;
												delete sCharList[jev].Atsrt;
												delete sCharList[jev].Atvglart;
												delete sCharList[jev].Atzis;
												delete sCharList[jev].Changerequestid;
												delete sCharList[jev].CharName;
												delete sCharList[jev].Charid;
												delete sCharList[jev].Classtype;
												delete sCharList[jev].Service;
												delete sCharList[jev].Valcnt;
												sCharList[jev].slNo = jev + 1; // ()
												sCharList[jev].flag = sCharList[jev].Class + "-" + sCharList[jev].slNo; // ()
												sObject.characteristics.push(sCharList[jev]);
											}
										}
										for (var z = 0; z < sObject.characteristics.length; z++) {
											var count = 1;
											for (var y = 0; y < sObject.characteristics.length; y++) {
												if (z === y) {
													continue;
												}
												if (sObject.characteristics[y].Atnam === sObject.characteristics[z].Atnam && sObject.characteristics[y].Class ===
													sObject.characteristics[z].Class) {
													count++;
												}
											}
											if (count > 1) {
												sObject.characteristics[z].charDltEnable = true;
											} else {
												sObject.characteristics[z].charDltEnable = false;
											}

											if (sObject.characteristics[z].Atein === true) {
												sObject.characteristics[z].charAddEnable = false;
											}
										}
										if (g.char && g.char.getId().includes("detailEqui") === true) {
											g.char.setModel(new JSONModel(sObject.characteristics));
										}
									}
								}
							}

							if (sObject.UstaEqui) {
								oMainViewData.visible = true;
							} else {
								oMainViewData.visible = false;
							}
							oMainViewModel.setData(oMainViewData);
							sArray.push(sObject);
						}
						oAIWEQUIModel.setData(sArray);

						for (var leq = 0; leq < oAIWEQUIModel.getData().length; leq++) {
							if (g.currentEquipment === oAIWEQUIModel.getData()[leq].Equnr) {
								g.rowIndex = "/" + leq;
								var oJsonModel = new JSONModel();
								var sCurrentObject = oAIWEQUIModel.getProperty(g.rowIndex);

								if ((sCurrentObject.Title !== "" && sCurrentObject.Title !== undefined) || (sCurrentObject.TitleCode !== "" &&
										sCurrentObject
										.TitleCode !== undefined) || (sCurrentObject.Name1 !== "" && sCurrentObject.Name1 !== undefined) || (sCurrentObject.Name2 !==
										"" && sCurrentObject.Name2 !== undefined) || (sCurrentObject.Name3 !== "" && sCurrentObject.Name3 !== undefined) ||
									(sCurrentObject.Name4 !== "" && sCurrentObject.Name4 !== undefined) || (sCurrentObject.Sort1 !== "" && sCurrentObject.Sort1 !==
										undefined) || (sCurrentObject.Sort2 !== "" && sCurrentObject.Sort2 !== undefined) || (sCurrentObject.NameCo !== "" &&
										sCurrentObject.NameCo !== undefined) || (sCurrentObject.PostCod1 !== "" && sCurrentObject.PostCod1 !== undefined) || (
										sCurrentObject.City1 !== "" && sCurrentObject.City1 !== undefined) || (sCurrentObject.Building !== "" && sCurrentObject.Building !==
										undefined) || (sCurrentObject.Floor !== "" && sCurrentObject.Floor !== undefined) || (sCurrentObject.Roomnum !== "" &&
										sCurrentObject.Roomnum !== undefined) || (sCurrentObject.AddrLocation !== "" && sCurrentObject.AddrLocation !== undefined) ||
									(sCurrentObject.Strsuppl1 !== "" && sCurrentObject.Strsuppl1 !== undefined) || (sCurrentObject.Strsuppl2 !== "" &&
										sCurrentObject.Strsuppl2 !== undefined) || (sCurrentObject.Strsuppl3 !== "" && sCurrentObject.Strsuppl3 !== undefined) ||
									(
										sCurrentObject.TimeZone !== "" && sCurrentObject.TimeZone !== undefined) || (sCurrentObject.RefPosta !== "" &&
										sCurrentObject.RefPosta !== undefined) || (sCurrentObject.Region !== "" && sCurrentObject.Region !== undefined)) {
									sCurrentObject.RefPostaLblReq = true;
								}
								oJsonModel.setData(sCurrentObject);

								var sCopyArray = [oJsonModel.getData()];
								var sSupEquiData = $.map(sCopyArray, function (obj) {
									return $.extend(true, {}, obj);
								});
								var sSupEquiModel = new JSONModel();
								sSupEquiModel.setData(sSupEquiData);

								var mSupEquiModel = sap.ui.getCore().getModel("SUP_EQUI_DATA");
								var mSupEquiData = mSupEquiModel.getData();
								var mCountCEquiFlag = true;
								for (var se = 0; se < mSupEquiData.length; se++) {
									if (sCurrentObject.Equnr === mSupEquiData[se].Equnr) {
										mCountCEquiFlag = false;
									}
								}
								if (mCountCEquiFlag === true) {
									if ((sCurrentObject.SuperordinateEquip !== "" && sCurrentObject.SuperordinateEquip !== undefined) ||
										(sCurrentObject.Tplnr !== "" && sCurrentObject.Tplnr !== undefined)) {
										mSupEquiData.push(sSupEquiData[0]);
										mSupEquiModel.setData(mSupEquiData);
									}
								}

								oMainViewData.tableBusy = false;
								oMainViewModel.setData(oMainViewData);
								if (sModelName) {
									if (sModelName === "AIWEQUI") {
										var dData = sap.ui.getCore().getModel("dataOriginMOP").getProperty("/EQ" + sIndex).DOI
										var fields = r.Equi_DOI.results;
										for (var f = 0; f < fields.length; f++) {
											fields[f].instLoc = true;
											if (fields[f].hasOwnProperty("maintenance")) {
												if (!fields[f].maintenance) {
													fields[f].targetVal = fields[f].SupFlVal;
												}
											} else {
												fields[f].maintenance = dData[f].maintenance;
												if (fields[f].maintenance) {
													fields[f].instLoc = false;
												} else {
													fields[f].instLoc = true;
												}

												fields[f].currentVal = dData[f].currentVal;
												// fields[f].currentValDesc = dData[f].currentValDesc;
											}
											if (fields[f].Property === "Maintplant" || fields[f].Property === "PplaEeqz") {
												fields[f].locEnable = false;
												fields[f].maintEnable = false;
											} else {
												fields[f].locEnable = true;
												fields[f].maintEnable = true;
											}
											fields[f].targetVal = fields[f].SupFlVal;
										}

										sap.ui.getCore().getModel("dataOriginMOP").getProperty("/EQ" + sIndex).DOI = fields;
									}
								}
								return;
							}
						}

						var aEQDOIdata = sap.ui.getCore().getModel("dataOriginMOP").getData().EQ;
						for (var i = 0; i < r.Equipment.results.length; i++) {
							var h = r.Equipment.results[i];
							for (var z = 0; z < aEQDOIdata.length; z++) {
								if (h.Equnr === aEQDOIdata[z].key) {
									var aDOIFields = aEQDOIdata[z].DOI;
									if (h.Swerki === "") {
										aDOIFields[0].maintenance = false;
										aDOIFields[0].instLoc = false;
										aDOIFields[0].SupFlVal = "";
										aDOIFields[0].currentVal = "";
										aDOIFields[0].targetVal = "";
									} else if (h.Swerki === "D") {
										aDOIFields[0].maintenance = true;
										aDOIFields[0].instLoc = false;
										aDOIFields[0].SupFlVal = "";
										aDOIFields[0].currentVal = h.Swerk;
										aDOIFields[0].targetVal = h.Swerk;
									} else {
										aDOIFields[0].maintenance = false;
										aDOIFields[0].instLoc = true;
										aDOIFields[0].SupFlVal = h.Swerk;
										aDOIFields[0].currentVal = "";
										aDOIFields[0].targetVal = h.Swerk;
									}

									if (h.Storti === "") {
										aDOIFields[1].maintenance = false;
										aDOIFields[1].instLoc = false;
										aDOIFields[1].SupFlVal = "";
										aDOIFields[1].currentVal = "";
										aDOIFields[1].targetVal = "";
									} else if (h.Storti === "D") {
										aDOIFields[1].maintenance = true;
										aDOIFields[1].instLoc = false;
										aDOIFields[1].SupFlVal = "";
										aDOIFields[1].currentVal = h.StorEilo;
										aDOIFields[1].targetVal = h.StorEilo;
									} else {
										aDOIFields[1].maintenance = false;
										aDOIFields[1].instLoc = true;
										aDOIFields[1].SupFlVal = h.StorEilo;
										aDOIFields[1].currentVal = "";
										aDOIFields[1].targetVal = h.StorEilo;
									}

									if (h.Beberi === "") {
										aDOIFields[2].maintenance = false;
										aDOIFields[2].instLoc = false;
										aDOIFields[2].SupFlVal = "";
										aDOIFields[2].currentVal = "";
										aDOIFields[2].targetVal = "";
									} else if (h.Beberi === "D") {
										aDOIFields[2].maintenance = true;
										aDOIFields[2].instLoc = false;
										aDOIFields[2].SupFlVal = "";
										aDOIFields[2].currentVal = h.BebeEilo;
										aDOIFields[2].targetVal = h.BebeEilo;
									} else {
										aDOIFields[2].maintenance = false;
										aDOIFields[2].instLoc = true;
										aDOIFields[2].SupFlVal = h.BebeEilo;
										aDOIFields[2].currentVal = "";
										aDOIFields[2].targetVal = h.BebeEilo;
									}

									if (h.Ppsidi === "") {
										aDOIFields[3].maintenance = false;
										aDOIFields[3].instLoc = false;
										aDOIFields[3].SupFlVal = "";
										aDOIFields[3].currentVal = "";
										aDOIFields[3].targetVal = "";
									} else if (h.Ppsidi === "D") {
										aDOIFields[3].maintenance = true;
										aDOIFields[3].instLoc = false;
										aDOIFields[3].SupFlVal = "";
										aDOIFields[3].currentVal = h.ArbpEilo;
										aDOIFields[3].targetVal = h.ArbpEilo;
									} else {
										aDOIFields[3].maintenance = false;
										aDOIFields[3].instLoc = true;
										aDOIFields[3].SupFlVal = h.ArbpEilo;
										aDOIFields[3].currentVal = "";
										aDOIFields[3].targetVal = h.ArbpEilo;
									}

									if (h.Abckzi === "") {
										aDOIFields[4].maintenance = false;
										aDOIFields[4].instLoc = false;
										aDOIFields[4].SupFlVal = "";
										aDOIFields[4].currentVal = "";
										aDOIFields[4].targetVal = "";
									} else if (h.Abckzi === "D") {
										aDOIFields[4].maintenance = true;
										aDOIFields[4].instLoc = false;
										aDOIFields[4].SupFlVal = "";
										aDOIFields[4].currentVal = h.AbckEilo;
										aDOIFields[4].targetVal = h.AbckEilo;
									} else {
										aDOIFields[4].maintenance = false;
										aDOIFields[4].instLoc = true;
										aDOIFields[4].SupFlVal = h.AbckEilo;
										aDOIFields[4].currentVal = "";
										aDOIFields[4].targetVal = h.AbckEilo;
									}

									if (h.Kostli === "") {
										aDOIFields[5].maintenance = false;
										aDOIFields[5].instLoc = false;
										aDOIFields[5].SupFlVal = "";
										aDOIFields[5].currentVal = "";
										aDOIFields[5].targetVal = "";
									} else if (h.Kostli === "D") {
										aDOIFields[5].maintenance = true;
										aDOIFields[5].instLoc = false;
										aDOIFields[5].SupFlVal = "";
										aDOIFields[5].currentVal = h.KostEilo;
										aDOIFields[5].targetVal = h.KostEilo;
									} else {
										aDOIFields[5].maintenance = false;
										aDOIFields[5].instLoc = true;
										aDOIFields[5].SupFlVal = h.KostEilo;
										aDOIFields[5].currentVal = "";
										aDOIFields[5].targetVal = h.KostEilo;
									}

									if (h.Iwerki === "") {
										aDOIFields[6].maintenance = false;
										aDOIFields[6].instLoc = false;
										aDOIFields[6].SupFlVal = "";
										aDOIFields[6].currentVal = "";
										aDOIFields[6].targetVal = "";
									} else if (h.Iwerki === "D") {
										aDOIFields[6].maintenance = true;
										aDOIFields[6].instLoc = false;
										aDOIFields[6].SupFlVal = "";
										aDOIFields[6].currentVal = h.PplaEeqz;
										aDOIFields[6].targetVal = h.PplaEeqz;
									} else {
										aDOIFields[6].maintenance = false;
										aDOIFields[6].instLoc = true;
										aDOIFields[6].SupFlVal = h.PplaEeqz;
										aDOIFields[6].currentVal = "";
										aDOIFields[6].targetVal = h.PplaEeqz;
									}

									if (h.Ingrpi === "") {
										aDOIFields[7].maintenance = false;
										aDOIFields[7].instLoc = false;
										aDOIFields[7].SupFlVal = "";
										aDOIFields[7].currentVal = "";
										aDOIFields[7].targetVal = "";
									} else if (h.Ingrpi === "D") {
										aDOIFields[7].maintenance = true;
										aDOIFields[7].instLoc = false;
										aDOIFields[7].SupFlVal = "";
										aDOIFields[7].currentVal = h.IngrEeqz;
										aDOIFields[7].targetVal = h.IngrEeqz;
									} else {
										aDOIFields[7].maintenance = false;
										aDOIFields[7].instLoc = true;
										aDOIFields[7].SupFlVal = h.IngrEeqz;
										aDOIFields[7].currentVal = "";
										aDOIFields[7].targetVal = h.IngrEeqz;
									}

									if (h.Gewrki === "") {
										aDOIFields[8].maintenance = false;
										aDOIFields[8].instLoc = false;
										aDOIFields[8].SupFlVal = "";
										aDOIFields[8].currentVal = "";
										aDOIFields[8].targetVal = "";
									} else if (h.Gewrki === "D") {
										aDOIFields[8].maintenance = true;
										aDOIFields[8].instLoc = false;
										aDOIFields[8].SupFlVal = "";
										aDOIFields[8].currentVal = h.ArbpEeqz;
										aDOIFields[8].targetVal = h.ArbpEeqz;
									} else {
										aDOIFields[8].maintenance = false;
										aDOIFields[8].instLoc = true;
										aDOIFields[8].SupFlVal = h.ArbpEeqz;
										aDOIFields[8].currentVal = "";
										aDOIFields[8].targetVal = h.ArbpEeqz;
									}

									if (h.Adrnri === "") {
										aDOIFields[10].maintenance = false;
										aDOIFields[10].instLoc = false;
										aDOIFields[10].SupFlVal = "";
										aDOIFields[10].currentVal = "";
										aDOIFields[10].targetVal = "";
									} else if (h.Adrnri === "D") {
										aDOIFields[10].maintenance = true;
										aDOIFields[10].instLoc = false;
										aDOIFields[10].SupFlVal = "";
										aDOIFields[10].currentVal = h.Adrnr;
										aDOIFields[10].targetVal = h.Adrnr;
									} else {
										aDOIFields[10].maintenance = false;
										aDOIFields[10].instLoc = true;
										aDOIFields[10].SupFlVal = h.Adrnr;
										aDOIFields[10].currentVal = "";
										aDOIFields[10].targetVal = h.Adrnr;
									}
								}
							}
						}
					}
				}
				if (r.MSPoint) {
					sArray = [];
					var sMsPoint = r.MSPoint.results;
					if (sMsPoint) {
						if (sMsPoint.length > 0) {
							for (var ims = 0; ims < sMsPoint.length; ims++) {
								sObject = {
									classItems: [],
									characteristics: [],
									charNewButton: false,
									attachmentCount: "0", // Attachment Count
									Guids: "", // Attachment

									PttxtVS: "None",
									PttxtVST: "",
									ObtypMsVS: "None",
									ObtypMsVST: "",
									MptypVS: "None",
									MptypVST: "",
									AtnamMsVS: "None",
									AtnamMsVST: "",
									EqunrVS: "None",
									EqunrVST: "",
									TplnrVS: "None",
									TplnrVST: "",
									CodgrVS: "None",
									CodgrVST: "",

									MspointEnabled: true,
									ObtypMsEnabled: true,
									EqunrEnabled: true,
									TplnrEnabled: true,
									MptypEnabled: true,
									AtnamMsEnabled: true,

									// Visibility
									valCodeStuffSel: false
								};
								sObject.Mspoint = sMsPoint[ims].Point;
								sObject.Psort = sMsPoint[ims].Psort;
								sObject.Pttxt = sMsPoint[ims].Pttxt;
								sObject.ObtypMs = sMsPoint[ims].ObtypMs;
								sObject.Txt = sMsPoint[ims].Objtypetxt;
								sObject.Equnr = sMsPoint[ims].Equnr;
								sObject.Eqktx = sMsPoint[ims].Eqktx;
								sObject.Tplnr = sMsPoint[ims].Tplnr;
								sObject.Pltxt = sMsPoint[ims].Floctxt;
								sObject.Mptyp = sMsPoint[ims].Mptyp;
								sObject.Mpttx = sMsPoint[ims].Mpttx;
								sObject.Inact = sMsPoint[ims].Inact;
								sObject.AtnamMs = sMsPoint[ims].AtnamMs;
								sObject.Atbez = sMsPoint[ims].Atbez;
								sObject.Mseh6 = sMsPoint[ims].Mseh6;
								sObject.Msehl = sMsPoint[ims].Msehl;
								sObject.Decim = sMsPoint[ims].Decim.toString();
								sObject.Codgr = sMsPoint[ims].Codgr;
								sObject.Codgrtxt = sMsPoint[ims].Codgrtxt;
								sObject.Locas = sMsPoint[ims].Locas;
								sObject.Maktx = sMsPoint[ims].Maktx;
								sObject.Begru = sMsPoint[ims].Begru;
								sObject.Begtx = sMsPoint[ims].Begtx;
								sObject.Indct = sMsPoint[ims].Indct;
								sObject.Expon = sMsPoint[ims].Expon;
								sObject.Cdsuf = sMsPoint[ims].Cdsuf;
								sObject.Cjumc = sMsPoint[ims].Cjumc;
								sObject.Pyeac = sMsPoint[ims].Pyeac;
								sObject.Desir = sMsPoint[ims].Desir;
								sObject.Mrngu = sMsPoint[ims].Mrngu;
								sObject.Dstxt = sMsPoint[ims].Dstxt;
								sObject.Indrv = sMsPoint[ims].Indrv;
								sObject.Mrmax = sMsPoint[ims].Mrmax;
								sObject.Mrmin = sMsPoint[ims].Mrmin;
								sObject.menuAction = sMsPoint[ims].IsMenu;

								sObject.valCodeStuffSel = false;

								if (sMsPoint[ims].Type === true) {
									sObject.viewParameter = "create";
								}
								if (sMsPoint[ims].Type === false) {
									sObject.viewParameter = "change";
									sObject.MspointEnabled = false;
									if (sObject.ObtypMs === "" || sObject.ObtypMs === undefined) {
										sObject.ObtypMsEnabled = true;
									} else {
										sObject.ObtypMsEnabled = false;
									}

									if (sObject.ObtypMs === "IEQ") {
										sObject.TplnrEnabled = false;
										if ((sObject.Equnr === "" || sObject.Equnr === undefined)) {
											sObject.EqunrEnabled = true;
										} else {
											sObject.EqunrEnabled = false;
										}
									}

									if (sObject.ObtypMs === "IFL") {
										sObject.EqunrEnabled = false;
										if ((sObject.Tplnr === "" || sObject.Tplnr === undefined)) {
											sObject.TplnrEnabled = true;
										} else {
											sObject.TplnrEnabled = false;
										}
									}

									if (sObject.Mptyp === "" || sObject.Mptyp === undefined) {
										sObject.MptypEnabled = true;
									} else {
										sObject.MptypEnabled = false;
									}
									if (sObject.AtnamMs === "" || sObject.AtnamMs === undefined) {
										sObject.AtnamMsEnabled = true;
									} else {
										sObject.AtnamMsEnabled = false;
									}
								}

								if (sMsPoint[ims].Indct) {
									sObject.countEnable = true;
									sObject.tEnable = false;
								} else {
									sObject.countEnable = false;
									sObject.tEnable = true;
								}
								if (sMsPoint[ims].Equnr !== "") {
									sObject.EqunrEnabled = true;
									sObject.EqunrLblVis = true;
									sObject.EqunrInpVis = true;
									sObject.EqktxInpVis = true;
									sObject.TplnrEnabled = false;
									sObject.TplnrLblVis = false;
									sObject.TplnrInpVis = false;
									sObject.PltxtInpVis = false;
								} else {
									sObject.EqunrEnabled = false;
									sObject.EqunrLblVis = false;
									sObject.EqunrInpVis = false;
									sObject.EqktxInpVis = false;
									sObject.TplnrEnabled = true;
									sObject.TplnrLblVis = true;
									sObject.TplnrInpVis = true;
									sObject.PltxtInpVis = true;
								}

								if (r.MSLAM.results.length > 0) {
									var aMSLAM = r.MSLAM.results;
									for (var x = 0; x < aMSLAM.length; x++) {
										if (aMSLAM[x].Mspoint === sMsPoint[ims].Point) {
											var oMSLAM = {
												"Mspoint": aMSLAM[x].Mspoint,
												"Lrpid": aMSLAM[x].Lrpid,
												"LrpidDesc": aMSLAM[x].LrpDescr,
												"Strtptatr": aMSLAM[x].Strtptatr,
												"Endptatr": aMSLAM[x].Endptatr,
												"Length": aMSLAM[x].Length,
												"LinUnit": aMSLAM[x].LinUnit,
												"LinUnitDesc": aMSLAM[x].Uomtext,
												"Startmrkr": aMSLAM[x].Startmrkr,
												"Endmrkr": aMSLAM[x].Endmrkr,
												"Mrkdisst": aMSLAM[x].Mrkdisst,
												"Mrkdisend": aMSLAM[x].Mrkdisend,
												"MrkrUnit": aMSLAM[x].MrkrUnit,
												"LamDer": aMSLAM[x].LamDer
											};
											sObject.lam = oMSLAM;
											break;
										}
									}
								}

								if (r.MSClass) {
									var sClassList = r.MSClass.results;
									if (sClassList) {
										if (sClassList.length > 0) {
											for (var ams = 0; ams < sClassList.length; ams++) {
												if (sObject.Mspoint === sClassList[ams].Mspoint) {
													sClassList[ams].ctEnable = false;
													sClassList[ams].classEnable = false;
													sClassList[ams].ClassTypeDesc = sClassList[ams].Artxt;
													delete sClassList[ams].Artxt;
													sClassList[ams].ClassDesc = sClassList[ams].Kltxt;
													delete sClassList[ams].Kltxt;
													delete sClassList[ams].Changerequestid;
													delete sClassList[ams].Clint;
													delete sClassList[ams].Service;
													sObject.classItems.push(sClassList[ams]);
												}
											}
											sObject.charNewButton = true;
											if (g.class && g.class.getId().includes("detailMspt") === true) {
												// var itemFragmentId = g.getView().createId("charFrag");
												// var newCharBtn = sap.ui.core.Fragment.byId(itemFragmentId, "newChar");
												// newCharBtn.setEnabled(true);
												g.class.setModel(new JSONModel(sObject.classItems));
											}
										}
									}
								}

								if (r.MSVal) {
									var sCharList = r.MSVal.results;
									if (sCharList) {
										if (sCharList.length > 0) {
											for (var jmv = 0; jmv < sCharList.length; jmv++) {
												if (sObject.Mspoint === sCharList[jmv].Mspoint) {
													sCharList[jmv].cNameEnable = false;
													sCharList[jmv].Textbz = sCharList[jmv].Atwtb;
													delete sCharList[jmv].Ataut;
													delete sCharList[jmv].Ataw1;
													delete sCharList[jmv].Atawe;
													delete sCharList[jmv].Atcod;
													delete sCharList[jmv].Atflb;
													delete sCharList[jmv].Atflv;
													delete sCharList[jmv].Atimb;
													delete sCharList[jmv].Atsrt;
													delete sCharList[jmv].Atvglart;
													delete sCharList[jmv].Atzis;
													delete sCharList[jmv].Changerequestid;
													delete sCharList[jmv].CharName;
													delete sCharList[jmv].Charid;
													delete sCharList[jmv].Classtype;
													delete sCharList[jmv].Service;
													delete sCharList[jmv].Valcnt;
													sCharList[jmv].slNo = jmv + 1; // ()
													sCharList[jmv].flag = sCharList[jmv].Class + "-" + sCharList[jmv].slNo; // ()
													sObject.characteristics.push(sCharList[jmv]);
												}
											}
											for (var z = 0; z < sObject.characteristics.length; z++) {
												var count = 1;
												for (var y = 0; y < sObject.characteristics.length; y++) {
													if (z === y) {
														continue;
													}
													if (sObject.characteristics[y].Atnam === sObject.characteristics[z].Atnam && sObject.characteristics[y].Class ===
														sObject.characteristics[z].Class) {
														count++;
													}
												}
												if (count > 1) {
													sObject.characteristics[z].charDltEnable = true;
												} else {
													sObject.characteristics[z].charDltEnable = false;
												}

												if (sObject.characteristics[z].Atein === true) {
													sObject.characteristics[z].charAddEnable = false;
												}
											}
											if (g.char && g.char.getId().includes("detailMspt") === true) {
												g.char.setModel(new JSONModel(sObject.characteristics));
											}
										}
									}
								}

								sArray.push(sObject);
							}
							oAIWMSPTModel.setData(sArray);
						}
					}
				}
				if (r.MPLAN) {
					sArray = [];
					var sMaintenance = r.MPLAN.results;
					if (sMaintenance) {
						for (var ih = 0; ih < sMaintenance.length; ih++) {
							sObject = {
								cycleIndSingle: false, // RBSC
								cycleIndStrategy: false, // RBST
								cycleIndMultCntr: false, // RBMC

								// Fields Enability
								WarplEnabled: true,
								StratEnabled: true,
								MehrfachEnabled: true,
								WsetEnabled: true,
								MptypEnabled: true,
								cycleIndSingleEnabled: true,
								cycleIndStrategyEnabled: true,
								cycleIndMultCntrEnabled: true,
								FabklLBLReq: false,
								ButtonNewItemEnabled: true,
								ButtonAssignItemEnabled: true,

								// Label Visibility
								OPText: false,
								OPTitle: false,
								OPLBL: false,
								MpcyclenoLBL: false,
								FabklLBL: true,
								AbrhoLBL: true,
								MehrfachLBL: false, // Multiple counter Label
								ScheIndText: true,
								ScheIndTitle: true,
								ScheIndLBL: true,
								StratLBL: false,
								StratDescLBL: false,
								WsetLBL: false,
								SzaehLBL: false,
								StadtLBL: true,

								// Fields Visibility
								HorizVisible: false,
								cycleSetSeqColVis: false,
								OROPVis: false,
								AndOPvis: false,
								ScheIndRbTimeVis: true,
								ScheIndRbTimeKeyDateVis: true,
								ScheIndRbTimeFactCalVis: true,
								ScheIndRbPerformanceVis: true,
								MpcyclenoVis: false,
								HunitVis: true,
								AbrhoVis: true,
								MehrfachVis: false,
								StratVis: false, // Strategy Visibility
								StratDescVis: false,
								WsetVis: false,
								KtextVis: false,
								SzaehVis: false,
								UnitcVis: false,
								StadtVis: true,

								attachmentCount: "0", // Attachment Count
								Guids: "", // Attachment
								MaintenanceItemMode: "Delete",
								cycleModel: [],

								// Fields ValueState
								WarplVS: "None",
								WarplVST: "",
								WptxtVS: "None",
								WptxtVST: "",
								StratVS: "None",
								StratVST: "",
								WsetVS: "None",
								WsetVST: "",
								StadtVS: "None",
								StadtVST: "",
								StichVS: "None",
								StichVST: "",
								HunitVS: "None",
								HunitVST: ""
							};
							sObject.Warpl = sMaintenance[ih].Warpl;
							sObject.Wptxt = sMaintenance[ih].Wptxt;
							sObject.Mptyp = sMaintenance[ih].Mptyp;
							sObject.Strat = sMaintenance[ih].Strat;
							sObject.StratDesc = sMaintenance[ih].StratDesc;
							sObject.menuAction = sMaintenance[ih].IsMenu;

							if (sMaintenance[ih].Type === true) {
								sObject.viewParameter = "create";
							}
							if (sMaintenance[ih].Mehrfach === "X" || sMaintenance[ih].Stich === "4") {
								sObject.cycleSetSeqColVis = true;
								sObject.CycleSetSeqVis = true;
								sObject.ScheIndText = false;
								sObject.ScheIndTitle = false;
								sObject.ScheIndLBL = false;
								sObject.ScheIndRbTimeVis = false;
								sObject.ScheIndRbTimeKeyDateVis = false;
								sObject.ScheIndRbTimeFactCalVis = false;
								sObject.ScheIndRbPerformanceVis = false;
								sObject.ScheIndRbTimeEnabled = false;
								sObject.ScheIndRbTimeKeyDateEnabled = false;
								sObject.ScheIndRbTimeFactCalEnabled = false;
								sObject.ScheIndRbPerformanceEnabled = false;
								sObject.AbrhoLBL = false;
								sObject.AbrhoVis = false;
								sObject.HunitVis = false;
								sObject.FabklLBL = false;
								sObject.FabklVis = false;
								sObject.FabklDescVis = false;
								sObject.Fabkl = "";
								sObject.FabklDesc = "";
								sObject.ButtonNewCycleEnabled = true;
								sObject.OPText = true;
								sObject.OPTitle = true;
								sObject.OPLBL = true;
								sObject.OROPVis = true;
								sObject.AndOPvis = true;
								sObject.WsetLBL = true;
								sObject.WsetVis = true;
								sObject.KtextVis = true;
								sObject.StratLBL = true;
								sObject.StratVis = true;
								sObject.StratDescVis = true;
								sObject.MehrfachLBL = true;
								sObject.MehrfachVis = true;
								sObject.Mehrfach = true;
								sObject.StadtLBL = true;
								sObject.StadtVis = true;
								sObject.Stadt = formatter.getDateFormat(sMaintenance[ih].Startdate);
								sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_STDATE");
								sObject.SzaehLBL = false;
								sObject.SzaehVis = false;
								sObject.UnitcVis = false;
								sObject.Unitc = " ";
								sObject.MpcyclenoLBL = false;
								sObject.MpcyclenoVis = false;
								sObject.MaintenanceCycleMode = "Delete";
								sObject.cycleIndMultCntr = true;
								sObject.cycleType = 2;
							} else if (sMaintenance[ih].Strat === "" && (sMaintenance[ih].Stich === " " || sMaintenance[ih].Stich === "1" ||
									sMaintenance[
										ih].Stich === "2")) {
								sObject.cycleSetSeqColVis = false;
								sObject.CycleSetSeqVis = false;
								sObject.ScheIndText = true;
								sObject.ScheIndTitle = true;
								sObject.ScheIndLBL = true;
								sObject.ScheIndRbTimeEnabled = true;
								sObject.ScheIndRbTimeKeyDateEnabled = true;
								sObject.ScheIndRbTimeFactCalEnabled = true;
								sObject.ScheIndRbPerformanceEnabled = true;
								sObject.AbrhoLBL = true;
								sObject.AbrhoVis = true;
								sObject.HunitVis = true;
								sObject.FabklLBL = true;
								sObject.FabklVis = true;
								sObject.FabklDescVis = true;
								sObject.Fabkl = "";
								sObject.FabklDesc = "";
								sObject.StadtLBL = true;
								sObject.StadtVis = true;
								sObject.Stadt = formatter.getDateFormat(sMaintenance[ih].Startdate);
								sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
								sObject.SzaehLBL = false;
								sObject.SzaehVis = false;
								sObject.UnitcVis = false;
								sObject.Unitc = " ";
								sObject.MpcyclenoLBL = false;
								sObject.MpcyclenoVis = false;
								sObject.MaintenanceCycleMode = "Delete";
								sObject.cycleIndSingle = true;
								sObject.cycleType = 0;
							} else if (sMaintenance[ih].Strat !== "" && sMaintenance[ih].Stich === "3") {
								sObject.cycleSetSeqColVis = false;
								sObject.CycleSetSeqVis = false;
								sObject.ScheIndText = false;
								sObject.ScheIndTitle = false;
								sObject.ScheIndLBL = false;
								sObject.ScheIndRbTimeVis = false;
								sObject.ScheIndRbTimeKeyDateVis = false;
								sObject.ScheIndRbTimeFactCalVis = false;
								sObject.ScheIndRbPerformanceVis = false;
								sObject.ScheIndRbTimeEnabled = false;
								sObject.ScheIndRbTimeKeyDateEnabled = false;
								sObject.ScheIndRbTimeFactCalEnabled = false;
								sObject.ScheIndRbPerformance = true;
								sObject.AbrhoLBL = false;
								sObject.AbrhoVis = false;
								sObject.HunitVis = false;
								sObject.FabklLBL = false;
								sObject.FabklVis = false;
								sObject.FabklDescVis = false;
								sObject.Fabkl = "";
								sObject.FabklDesc = "";
								sObject.StratLBL = true;
								sObject.StratVis = true;
								sObject.StratDescVis = true;
								sObject.Strat = sMaintenance[ih].Strat;
								g.readScheduling(sMaintenance[ih], sMaintenance[ih].Strat, "AIWMPMI");
								sObject.StadtLBL = false;
								sObject.StadtVis = false;
								sObject.Stadt = formatter.getDateFormat(sMaintenance[ih].Startdate);
								sObject.SzaehLBL = true;
								sObject.SzaehVis = true;
								sObject.UnitcVis = true;
								sObject.MpcyclenoLBL = true;
								sObject.MpcyclenoVis = true;
								sObject.MaintenanceCycleMode = "None";
								sObject.cycleIndStrateg = true;
								sObject.cycleType = 1;
							} else if (sMaintenance[ih].Strat.indexOf("TIME") > -1 && sMaintenance[ih].Mehrfach === "" && sMaintenance[ih].Stich !== "3") {
								sObject.ScheIndText = true;
								sObject.ScheIndTitle = true;
								sObject.ScheIndLBL = true;
								sObject.ScheIndRbTimeVis = true;
								sObject.ScheIndRbTimeKeyDateVis = true;
								sObject.ScheIndRbTimeFactCalVis = true;
								sObject.ScheIndRbPerformanceVis = true;
								sObject.AbrhoLBL = true;
								sObject.AbrhoVis = true;
								sObject.HunitVis = true;
								sObject.FabklLBL = true;
								sObject.FabklVis = true;
								sObject.FabklDescVis = true;
								sObject.Fabkl = "";
								sObject.FabklDesc = "";
								sObject.StratLBL = true;
								sObject.StratVis = true;
								sObject.StratDescVis = true;
								sObject.Strat = sMaintenance[ih].Strat;
								sObject.StadtLBL = true;
								sObject.StadtVis = true;
								sObject.Stadt = formatter.getDateFormat(sMaintenance[ih].Startdate);
								sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
								g.readScheduling(sMaintenance[ih], sMaintenance[ih].Strat, "AIWMPMI");
								sObject.SzaehLBL = false;
								sObject.SzaehVis = false;
								sObject.UnitcVis = false;
								sObject.Unitc = sMaintenance[ih].Unitc;
								sObject.MpcyclenoLBL = false;
								sObject.MpcyclenoVis = false;
								sObject.MaintenanceCycleMode = "Delete";
								sObject.cycleIndStrateg = true;
								sObject.cycleType = 1;
							} else if (sMaintenance[ih].Strat === "" && sMaintenance[ih].Stich === "3" && sMaintenance[ih].Mehrfach === "") {
								sObject.cycleIndSingle = true;
								sObject.cycleType = 0;
								sObject.ScheIndText = true;
								sObject.ScheIndTitle = true;
								sObject.ScheIndLBL = true;
								sObject.ScheIndRbTimeVis = true;
								sObject.ScheIndRbTimeKeyDateVis = true;
								sObject.ScheIndRbTimeFactCalVis = true;
								sObject.ScheIndRbPerformanceVis = true;
								sObject.ScheIndRbTimeEnabled = false;
								sObject.ScheIndRbTimeKeyDateEnabled = false;
								sObject.ScheIndRbTimeFactCalEnabled = false;
								// sObject.AbrhoLBL = false;
								// sObject.AbrhoVis = false;
								// sObject.HunitVis = false;
								sObject.FabklLBL = true;
								sObject.FabklVis = true;
								sObject.FabklDescVis = true;
								sObject.Fabkl = "";
								sObject.FabklDesc = "";
								sObject.StratLBL = false;
								sObject.StratVis = false;
								sObject.StratDescVis = false;
								sObject.Strat = sMaintenance[ih].Strat;
								sObject.StadtLBL = false;
								sObject.StadtVis = false;
								sObject.Stadt = formatter.getDateFormat(sMaintenance[ih].Startdate);
								sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
								sObject.SzaehLBL = true;
								sObject.SzaehVis = true;
								sObject.UnitcVis = true;
								sObject.Unitc = " ";
								// sObject.MpcyclenoLBL = true;
								// sObject.MpcyclenoVis = true;
								sObject.MaintenanceCycleMode = "Delete";
							}

							if (sMaintenance[ih].Stich === "1") {
								sObject.ScheIndRbTimeKeyDate = true;
								sObject.FabklEnabled = true;
								sObject.Fabkl = sMaintenance[ih].Fabkl;
								sObject.FabklDesc = sMaintenance[ih].FabklDesc;
							} else if (sMaintenance[ih].Stich === "2") {
								sObject.ScheIndRbTimeFactCal = true;
								sObject.FabklEnabled = true;
								sObject.Fabkl = sMaintenance[ih].Fabkl;
								sObject.FabklDesc = sMaintenance[ih].FabklDesc;
							} else if (sMaintenance[ih].Stich === "3") {
								sObject.ScheIndRbPerformance = true;
								sObject.FabklEnabled = false;
							} else if (sMaintenance[ih].Stich === "" || sMaintenance[ih].Stich === " ") {
								sObject.ScheIndRbTime = true;
								sObject.FabklEnabled = false;
								sObject.Fabkl = sMaintenance[ih].Fabkl;
								sObject.FabklDesc = sMaintenance[ih].FabklDesc;
							}

							if (sMaintenance[ih].Stich) {
								sObject.Stich = parseInt(sMaintenance[ih].Stich);
							} else {
								sObject.Stich = 0;
							}
							sObject.Wset = sMaintenance[ih].Wset;
							sObject.Ktext = sMaintenance[ih].Ktext;
							sObject.Sfakt = sMaintenance[ih].Sfakt;
							sObject.Abrho = sMaintenance[ih].Abrho;
							sObject.Hunit = sMaintenance[ih].Hunit;
							sObject.StratDesc = sMaintenance[ih].StratDesc;
							sObject.Szaeh = sMaintenance[ih].Szaeh;
							sObject.Mpcycleno = sMaintenance[ih].PointStp;
							sObject.Andor = sMaintenance[ih].Andor;

							if (sMaintenance[ih].PointStp !== "") {
								sObject.Unitc = sMaintenance[ih].Unitc;
								// g.readCounterData(sMaintenance[ih], sMaintenance[ih].PointStp, "counterUnit");
							}
							if (sMaintenance[ih].Andor === "X") {
								sObject.AndOP = true;
							} else {
								sObject.OROP = true;
							}

							sObject.Vspos = sMaintenance[ih].Vspos;
							sObject.Topos = sMaintenance[ih].Topos;
							sObject.Vsneg = sMaintenance[ih].Vsneg;
							sObject.Toneg = sMaintenance[ih].Toneg;

							sObject.Horiz = sMaintenance[ih].Horiz;
							sObject.CallConf = sMaintenance[ih].CallConf;

							sObject.PlanSort = sMaintenance[ih].PlanSort;
							sObject.Begru = sMaintenance[ih].Begru;

							sObject.cycleIndSingle = false;
							sObject.cycleIndStrategy = false;
							sObject.cycleIndMultCntr = false;
							switch (sObject.cycleType) {
							case 0:
								sObject.cycleType = 0;
								sObject.cycleIndSingle = true;
								sObject.cycleIndStrategyEnabled = false;
								sObject.cycleIndMultCntrEnabled = false;
								sObject.Strat = " ";
								sObject.StratDesc = " ";
								sObject.StratLBL = false;
								sObject.StratVis = false;
								sObject.StratDescVis = false;
								sObject.Wset = " ";
								sObject.Ktext = " ";
								sObject.WsetLBL = false;
								sObject.WsetVis = false;
								sObject.KtextVis = false;
								sObject.Mehrfach = false;
								sObject.MehrfachLBL = false;
								sObject.MehrfachVis = false;
								sObject.ButtonNewCycleEnabled = true;

								if (sObject.ScheIndRbPerformance === true) {
									sObject.SzaehLBL = true;
									sObject.SzaehVis = true;
									sObject.UnitcVis = true;
									sObject.StadtLBL = false;
									sObject.StadtVis = false;
								}
								break;
							case 1:
								sObject.cycleType = 1;
								sObject.cycleIndStrategy = true;
								sObject.cycleIndSingleEnabled = false;
								sObject.cycleIndMultCntrEnabled = false;
								sObject.StratLBL = true;
								sObject.StratVis = true;
								sObject.StratDescVis = true;
								sObject.StratEnabled = true;
								sObject.Mehrfach = false;
								sObject.MehrfachLBL = false;
								sObject.MehrfachVis = false;
								sObject.Wset = " ";
								sObject.Ktext = " ";
								sObject.WsetLBL = false;
								sObject.WsetVis = false;
								sObject.KtextVis = false;
								sObject.ButtonNewCycleEnabled = false;
								break;
							case 2:
								sObject.cycleType = 2;
								sObject.cycleIndMultCntr = true;
								sObject.cycleIndStrategyEnabled = false;
								sObject.cycleIndSingleEnabled = false;
								sObject.Strat = " ";
								sObject.StratDesc = " ";
								sObject.StratLBL = false;
								sObject.StratVis = false;
								sObject.StratDescVis = false;
								sObject.MehrfachLBL = true;
								sObject.MehrfachVis = true;
								sObject.MehrfachEnabled = true;
								sObject.WsetLBL = true;
								sObject.WsetVis = true;
								sObject.WsetEnabled = true;
								sObject.KtextVis = true;
								sObject.ButtonNewCycleEnabled = true;
								sObject.cycleSetSeqColVis = true;
								break;
							}

							if (sObject.menuAction === "copy" || sObject.menuAction === "change") {
								if (sObject.Mptyp === "" || sObject.Mptyp === undefined || sObject.Mptyp === " ") {
									sObject.MptypEnabled = true;
								} else {
									sObject.MptypEnabled = false;
								}
								if (sObject.cycleType === 1 && (sObject.Strat === "" || sObject.Strat === undefined || sObject.Strat === " ")) {
									sObject.StratEnabled = true;
								} else {
									sObject.StratEnabled = false;
								}
								if (sObject.cycleType === 2 && (sObject.Mehrfach === false || sObject.Mehrfach === "" || sObject.Mehrfach === undefined ||
										sObject.Mehrfach === " ")) {
									sObject.MehrfachEnabled = true;
								} else {
									sObject.MehrfachEnabled = false;
								}
								if (sObject.cycleType === 2 && (sObject.Wset === "" || sObject.Wset === undefined || sObject.Wset === " ")) {
									sObject.WsetEnabled = true;
								} else {
									sObject.WsetEnabled = false;
								}
							}

							if (sMaintenance[ih].Type === false) {
								sObject.viewParameter = "change";
								sObject.WarplEnabled = false;

								if (sObject.Mptyp === "" || sObject.Mptyp === undefined || sObject.Mptyp === " ") {
									sObject.MptypEnabled = true;
								} else {
									sObject.MptypEnabled = false;
								}
								if (sObject.cycleType === 1 && (sObject.Strat === "" || sObject.Strat === undefined || sObject.Strat === " ")) {
									sObject.StratEnabled = true;
								} else {
									sObject.StratEnabled = false;
								}
								if (sObject.cycleType === 2 && (sObject.Mehrfach === false || sObject.Mehrfach === "" || sObject.Mehrfach === undefined ||
										sObject.Mehrfach === " ")) {
									sObject.MehrfachEnabled = true;
								} else {
									sObject.MehrfachEnabled = false;
								}
								if (sObject.cycleType === 2 && (sObject.Wset === "" || sObject.Wset === undefined || sObject.Wset === " ")) {
									sObject.WsetEnabled = true;
								} else {
									sObject.WsetEnabled = false;
								}
							}

							if (r.MPCycle) {
								var sMPFCycle = r.MPCycle.results;
								if (sMPFCycle) {
									for (var cf = 0; cf < sMPFCycle.length; cf++) {
										if (sObject.Warpl === sMPFCycle[cf].Mplan) {
											sMPFCycle[cf].Psort = sMPFCycle[cf].PointTxt;
											sObject.cycleModel.push(sMPFCycle[cf]);
										}
									}
								}
							}

							if (sObject.cycleModel) {
								var sLength = sObject.cycleModel.length;
								for (var cl = 0; cl < sLength; cl++) {
									if (sObject.menuAction === "copy" || sObject.menuAction === "change") {
										sObject.cycleModel[cl].Zykl1Enabled = false;
										sObject.cycleModel[cl].ZeiehEnabled = false;
										sObject.cycleModel[cl].PakTextEnabled = false;
										sObject.cycleModel[cl].OffsetEnabled = false;
										sObject.cycleModel[cl].PointEnabled = false;
										sObject.cycleModel[cl].CycleseqiEnabled = false;
									} else {
										sObject.cycleModel[cl].Zykl1Enabled = true;
										sObject.cycleModel[cl].ZeiehEnabled = true;
										sObject.cycleModel[cl].PakTextEnabled = true;
										sObject.cycleModel[cl].OffsetEnabled = true;
										sObject.cycleModel[cl].PointEnabled = true;
										sObject.cycleModel[cl].CycleseqiEnabled = true;
									}
								}
							}

							if (r.MPItem) {
								var items = r.MPItem.results;
								if (items) {
									var iModel = new JSONModel();
									var temp = [];
									for (var im = 0; im < items.length; im++) {
										if (sObject.Warpl === items[im].Mplan) {
											var obj = {};
											obj.Mitemnumb = items[im].Mitemnumb; // maint item 
											obj.Pstxt = items[im].Pstxt; // maint item desc
											obj.Cycleseq = items[im].Cycleseq;
											obj.Tplnr = items[im].TplnrMi; // floc
											obj.Pltxt = items[im].Flocdesc; // floc desc
											obj.Equnr = items[im].Equnr; // equip
											obj.Eqktx = items[im].Equipdesc; // equip desc
											obj.AsmblyOb = items[im].Bautl; // assembly
											obj.Werks = items[im].PlntMi; // planning plant
											obj.Planningplantdes = items[im].Planningplantdes; // planning plant desc
											obj.Auart = items[im].Auart; // order type 
											obj.oTypeTxt = items[im].Ordertypedesc; // order type desc
											obj.Qmart = items[im].Qmart; // notif type
											obj.nTypeTxt = items[im].Qmartx; // notif type desc
											obj.ArbpMi = items[im].ArbpMi; // main wc
											obj.WergwMi = items[im].WergwMi; // main wc desc
											obj.Ingrp = items[im].IngrpMi; // planner grp
											obj.Innam = items[im].Plannergrpdesc; // planner grp desc

											// Approve Fields
											obj.Zeieh = items[im].Zeieh;
											obj.Priok = items[im].Priok;
											obj.ItmPriotxt = items[im].GsberMi;
											obj.GsberMi = items[im].GsberMi;
											obj.Gtext = items[im].Gtext;
											obj.TaskDet = items[im].TaskDet;
											obj.Ilart = items[im].Ilart;
											obj.Ilatx = items[im].Ilatx;
											obj.PlntyMi = items[im].PlntyMi;
											obj.ApfktMi = items[im].ApfktMi;
											obj.PlnnrMi = items[im].PlnnrMi;
											obj.PlnalMi = items[im].PlnalMi;
											obj.Gpcounterdesc = items[im].Gpcounterdesc;
											obj.AnlzuMi = items[im].AnlzuMi;
											obj.Anlzux = items[im].Anlzux;
											obj.SwerkMil = items[im].SwerkMil;
											obj.Name1 = items[im].Name1;
											obj.StortMil = items[im].StortMil;
											obj.Locationdesc = items[im].Locationdesc;
											obj.MsgrpIl = items[im].MsgrpIl;
											obj.BeberMil = items[im].BeberMil;
											obj.Fing = items[im].Fing;
											obj.Tele = items[im].Tele;
											obj.ArbplIl = items[im].ArbplIl;
											obj.Workcenterdesc = items[im].Workcenterdesc;
											obj.AbckzIl = items[im].AbckzIl;
											obj.Abctx = items[im].Abctx;
											obj.EqfnrIl = items[im].EqfnrIl;
											obj.BukrsMil = items[im].BukrsMil;
											obj.Butxt = items[im].Butxt;
											obj.City = items[im].City;
											obj.Anln1Mil = items[im].Anln1Mil;
											obj.Anln2Mil = items[im].Anln2Mil;
											obj.Txt50 = items[im].Txt50;
											obj.GsberIl = items[im].GsberIl;
											obj.KostlMil = items[im].KostlMil;
											obj.Contareaname = items[im].Contareaname;
											obj.KokrsMil = items[im].KokrsMil;
											obj.Posid = items[im].Posid;
											obj.Post1 = items[im].Post1;
											obj.AufnrIl = items[im].AufnrIl;
											obj.SettleOrdDesc = items[im].SettleOrdDesc;
											obj.PlnnrMi = items[im].PlnnrMi;
											obj.PlntyMi = items[im].PlntyMi;
											obj.PlnalMi = items[im].PlnalMi;

											obj.QmartLBL = true;
											obj.QmartVis = true;
											obj.nTypetxtVis = true;
											obj.AuartLBL = true;
											obj.AuartVis = true;
											obj.oTypeTxtVis = true;
											obj.CycleseqLBL = false;
											obj.CycleseqVis = false;

											obj.AsmblyObMaxLength = 0;
											obj.maintItemE = false;
											obj.cycleSetE = false;
											obj.TplnrEnabled = false;
											obj.equiE = false;
											obj.assemblyE = false;

											obj.CycleseqVS = "None";
											obj.CycleseqVST = "";
											obj.TplnrVS = "None";
											obj.TplnrVST = "";
											obj.EqunrVS = "None";
											obj.EqunrVST = "";
											obj.AsmblyObVS = "None";
											obj.AsmblyObVST = "";
											obj.WerksVS = "None";
											obj.WerksVST = "";
											obj.AuartVS = "None";
											obj.AuartVST = "";
											obj.QmartVS = "None";
											obj.QmartVST = "";
											obj.ArbpMiVS = "None";
											obj.ArbpMiVST = "";
											obj.WergwMiVS = "None";
											obj.WergwMiVST = "";
											obj.IngrpVS = "None";
											obj.IngrpVST = "";

											if (sObject.Mptyp === "NO") {
												obj.AuartLBL = false;
												obj.AuartVis = false;
												obj.oTypeTxtVis = false;
											}
											if (sObject.Mptyp === "PM") {
												obj.QmartLBL = false;
												obj.QmartVis = false;
												obj.nTypetxtVis = false;
											}

											if (r.MPLAM.results.length > 0) {
												var aMPLAM = r.MPLAM.results;
												for (var z = 0; z < aMPLAM.length; z++) {
													if (aMPLAM[z].Mplan === items[im].Mplan && aMPLAM[z].Mitemnumb === items[im].Mitemnumb) {
														var oMPLAM = {
															Mplan: items[im].Mplan,
															Mitemnumb: items[im].Mitemnumb,
															Lrpid: aMPLAM[z].Lrpid,
															LrpidDesc: aMPLAM[z].LrpDescr,
															Strtptatr: aMPLAM[z].Strtptatr,
															Endptatr: aMPLAM[z].Endptatr,
															Length: aMPLAM[z].Length,
															LinUnit: aMPLAM[z].LinUnit,
															LinUnitDesc: aMPLAM[z].Uomtext,
															Startmrkr: aMPLAM[z].Startmrkr,
															Endmrkr: aMPLAM[z].Endmrkr,
															Mrkdisst: aMPLAM[z].Mrkdisst,
															Mrkdisend: aMPLAM[z].Mrkdisend,
															MrkrUnit: aMPLAM[z].MrkrUnit,
															LamDer: aMPLAM[z].LamDer
														};
														obj.lam = oMPLAM;
														break;
													}
												}
											}

											temp.push(obj);
										}
									}
									iModel.setData(temp);
									sObject.itemModel = temp;
								}
							}

							if (r.MPOBList) {
								var aObjListItems = r.MPOBList.results;
								if (aObjListItems) {
									var temp2 = [];
									for (var i = 0; i < aObjListItems.length; i++) {
										if (sObject.Warpl === aObjListItems[i].Mplan) {
											var obj = {};
											obj.Warpl = aObjListItems[i].Mplan;
											obj.Mitemnumb = aObjListItems[i].Mitemnumb;
											obj.MatnrObj = aObjListItems[i].MatnrObj;
											obj.FlocObj = aObjListItems[i].FlocObj;
											obj.EquiObj = aObjListItems[i].EquiObj;
											obj.AsmblyOb = aObjListItems[i].AsmblyOb;
											obj.Matnrtxt = aObjListItems[i].Matnrtxt;
											obj.Equnrtxt = aObjListItems[i].Equnrtxt;
											obj.Tplnrtxt = aObjListItems[i].Tplnrtxt;
											obj.Bautltxt = aObjListItems[i].Bautltxt;
											obj.Enable = false;
											temp2.push(obj);
										}
									}
									sObject.ObjListItems = temp2;
								}
							}

							sArray.push(sObject);
						}
						oAIWMPMIModel.setData(sArray);
					}
				}
				oMainViewData.tableBusy = false;
				oMainViewModel.setData(oMainViewData);
			};
			var fnError = function (err) {
				oMainViewData.tableBusy = false;
				oMainViewModel.setData(oMainViewData);
				var error = [];
				if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror.errordetails
					.length === 0) {
					error[0] = JSON.parse(err.responseText).error.message.value;
				} else {
					for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
						error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
					}
				}
				var value = error.join("\n");
				g.invokeMessage(value);
			};

			if (sPayload.FLAddrI.length > 0) {
				sPayload.FLAddrI = $.map(sPayload.FLAddrI, function (obj) {
					return $.extend(true, {}, obj);
				});
				for (var i = 0; i < sPayload.FLAddrI.length > 0; i++) {
					delete sPayload.FLAddrI[i].AdNationEnable;
					delete sPayload.FLAddrI[i].City1iVS;
					delete sPayload.FLAddrI[i].StreetiVS;
				}
			}
			if (sPayload.EqAddrI.length > 0) {
				sPayload.EqAddrI = $.map(sPayload.EqAddrI, function (obj) {
					return $.extend(true, {}, obj);
				});
				for (var i = 0; i < sPayload.EqAddrI.length > 0; i++) {
					delete sPayload.EqAddrI[i].AdNationEnable;
					delete sPayload.EqAddrI[i].City1iVS;
					delete sPayload.EqAddrI[i].StreetiVS;
				}
			}
			oMainViewData.tableBusy = true;
			oMainViewModel.setData(oMainViewData);
			oModel.create(sPath, sPayload, {
				success: fnSuccess,
				error: fnError
			});
		},
		/*
		 * Function to read System Status
		 * @param {string} sIndex
		 * @param {string} sModelName
		 */
		readSystemStatus: function (sIndex, sModelName) {
			var g = this;
			var oModel = g.getView().getModel("valueHelp");
			var sPath = "/SystemStatValueHelpSet(STSMA='',ObjTyp='IEQ')";
			var fnSuccess = function (r) {
				if (sModelName === "AIWEQUI" && (sData.Tplnr === "" || sData.Tplnr === undefined) && (sData.SuperordinateEquip === "" || sData.SuperordinateEquip ===
						undefined)) {
					sData.Stattext = r.TXT04;
				}
				if (sModelName === "AIWFLOC") {
					sData.Stattext = r.TXT04;
				}

				// g.getModel(sModelName).getProperty(sIndex).Stattext = r.TXT04;

				g.getModel(sModelName).refresh();
			};
			var fnError = function () {};
			g._readData(sPath, oModel, fnSuccess, fnError);
		},

		/** Measuring Point Fragment **/
		/*
		 * Function to handle 'liveChange' event of Measuring Point
		 * @param {sap.ui.base.Event} oEvent
		 */
		measPointObjChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.ObtypMs;

			if (sValue === "" || sValue === undefined) {
				oModelData.ObtypMs = "";
				oModelData.Txt = "";
			}
			oEvent.getSource().setValueState("None");
		},
		/*
		 * Function to handle 'change' event of Measuring Point
		 * @param {sap.ui.base.Event} oEvent
		 */
		onMeasPointObjChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.ObtypMs;

			if (sValue === "" || sValue === undefined) {
				oModelData.ObtypMs = "";
				oModelData.Txt = "";
			} else {
				oModelData.ObtypMs = sValue.toUpperCase();
				this._measPointObject(oModelData, sModelName);
			}
		},
		_measPointObject: function (f, sModelName) {
			var g = this;
			var c = f.ObtypMs;
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var sPath = "/MSPObjTypeSet";
				var oFilters = [new sap.ui.model.Filter("Obtyp", "EQ", c)];
				var oModel = g.getView().getModel("valueHelp");
				var fnSuccess = function (d) {
					if (d.results.length > 0) {
						f.ObtypMs = a;
						f.Txt = d.results[0].Txt;
					} else {
						f.ObtypMs = "";
						f.Txt = "";
						f.ObtypMsVS = "Error";
						f.ObtypMsVST = "Invalid Entry";
					}
					g.getModel(sModelName).refresh();
				};
				var fnError = function (e) {
					var b = JSON.parse(e.response.body);
					var d = b.error.message.value;
					f.ObtypMsVS = "Error";
					f.ObtypMsVST = d;
					g.getModel(sModelName).refresh();
				};
				g._readData(sPath, oModel, fnSuccess, fnError, oFilters);
				f.EqunrVS = "None";
				f.TplnrVS = "None";
				f.Equnr = "";
				f.Eqktx = "";
				f.Tplnr = "";
				f.Pltxt = "";
				if (a === "IEQ") {
					f.EqunrInpVis = true;
					f.EqunrLblVis = true;
					f.EqktxInpVis = true;
					f.EqunrEnabled = true;
					f.TplnrInpVis = false;
					f.TplnrLblVis = false;
					f.PltxtInpVis = false;
					f.TplnrEnabled = false;
				}
				if (a === "IFL") {
					f.EqunrInpVis = false;
					f.EqunrLblVis = false;
					f.EqktxInpVis = false;
					f.EqunrEnabled = false;
					f.TplnrInpVis = true;
					f.TplnrLblVis = true;
					f.PltxtInpVis = true;
					f.TplnrEnabled = true;
				}
				g.getModel(sModelName).refresh();
			} else {
				f.ObtypMs = a;
				g.getModel(sModelName).refresh();
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Measuring Point
		 * @param {sap.ui.base.Event} oEvent
		 */
		onMeasPointObjVH: function (c) {
			var sModelName = this.getFragmentModelName(c);
			var sIndex = c.getSource().getBindingContext(sModelName).getPath();
			this.msptObjVH(c.getSource().getBindingContext(sModelName).getProperty(sIndex), sModelName);
		},
		/*
		 * To display value help dialog of Measuring Point
		 * @param {object} p
		 * @param {string} sIndex
		 * @param {string} sModelName
		 * @param {object} oSource
		 */
		msptObjVH: function (p, sModelName) {
			var g = this;

			var settings = {
				title: this.getView().getModel("i18n").getProperty("MEASPOINT_OBJ_TXT"),
				noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
				items: {
					path: "/MSPObjTypeSet",
					template: new sap.m.StandardListItem({
						title: "{Obtyp}",
						description: "{Txt}"
					})
				},
				confirm: function (E) {
					p.ObtypMs = E.getParameters().selectedItem.getProperty("title");
					p.Txt = E.getParameters().selectedItem.getProperty("description");
					p.ObtypMsVS = "None";
					p.ObtypMsVST = "";
					p.EqunrVS = "None";
					p.TplnrVS = "None";
					p.Equnr = "";
					p.Eqktx = "";
					p.Tplnr = "";
					p.Pltxt = "";

					if (p.ObtypMs === "IEQ") {
						p.EqunrInpVis = true;
						p.EqunrLblVis = true;
						p.EqktxInpVis = true;
						p.EqunrEnabled = true;
						p.TplnrInpVis = false;
						p.TplnrLblVis = false;
						p.PltxtInpVis = false;
						p.TplnrEnabled = false;
					}
					if (p.ObtypMs === "IFL") {
						p.EqunrInpVis = false;
						p.EqunrLblVis = false;
						p.EqktxInpVis = false;
						p.EqunrEnabled = false;
						p.TplnrInpVis = true;
						p.TplnrLblVis = true;
						p.PltxtInpVis = true;
						p.TplnrEnabled = true;
					}
					g.getModel(sModelName).refresh();
				}
			};

			var q = "/MSPObjTypeSet";
			var M = this.getView().getModel("valueHelp");
			var objSelectDialog = ValueHelpProvider.getSelectDialog(M, q, [], settings, "Obtyp", "Txt");
			objSelectDialog.open();
		},
		/*
		 * Function to handle 'liveChange' event of Measuring Point Category
		 * @param {sap.ui.base.Event} oEvent
		 */
		measPontCatChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.Mptyp;

			if (sValue === "" || sValue === undefined) {
				oModelData.Mptyp = "";
				oModelData.Mpttx = "";
			}
			oEvent.getSource().setValueState("None");
		},
		/*
		 * Function to handle 'change' event of Measuring Point Category
		 * @param {sap.ui.base.Event} oEvent
		 */
		onmeasPointCatChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.Mptyp;

			if (sValue === "" || sValue === undefined) {
				oModelData.Mptyp = "";
				oModelData.Mpttx = "";
			} else {
				oModelData.Mptyp = sValue.toUpperCase();
				this._measPointCategory(oModelData, sModelName);
			}
		},
		_measPointCategory: function (f, sModelName) {
			var g = this;
			var c = f.Mptyp;
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var sPath = "/MSPTypeSet";
				var oFilters = [new sap.ui.model.Filter("Mptyp", "EQ", c)];
				var oModel = g.getView().getModel("valueHelp");
				var fnSuccess = function (d) {
					if (d.results.length > 0) {
						f.Mptyp = a;
						f.Mpttx = d.results[0].Mpttx;

						if (f.Mptyp === "L" && f.lam === undefined) {
							f.lam = {
								Lrpid: "",
								LrpidDesc: "",
								Strtptatr: "",
								Endptatr: "",
								Length: "",
								LinUnit: "",
								LinUnitDesc: "",
								Startmrkr: "",
								Endmrkr: "",
								Mrkdisst: "",
								Mrkdisend: "",
								MrkrUnit: "",
								enableLrp: true,
								enableMarker: false,
								LrpidVS: "None",
								StrtptatrVS: "None",
								EndptatrVS: "None",
								LinUnitVS: "None",
								StartmrkrVS: "None",
								EndmrkrVS: "None",
								MrkdisstVS: "None",
								MrkdisendVS: "None",
								MrkrUnitVS: "None"
							};
						}
					} else {
						f.Mptyp = "";
						f.Mpttx = "";
						f.MptypVS = "Error";
						f.MptypVST = "Invalid Entry";
					}
					g.getModel(sModelName).refresh();
				};
				var fnError = function (e) {
					var b = JSON.parse(e.response.body);
					var d = b.error.message.value;
					f.MptypVS = "Error";
					f.MptypVST = d;
					g.getModel(sModelName).refresh();
				};
				g._readData(sPath, oModel, fnSuccess, fnError, oFilters);
			} else {
				f.Mptyp = a;
				g.getModel(sModelName).refresh();
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Measuring Point Category
		 * @param {sap.ui.base.Event} oEvent
		 */
		onMsptCatVH: function (c) {
			var sModelName = this.getFragmentModelName(c);
			var sIndex = c.getSource().getBindingContext(sModelName).getPath();
			this.msptCatVH(c.getSource().getBindingContext(sModelName).getProperty(sIndex), sModelName);
		},
		/*
		 * To display value help dialog of Measuring Point Category
		 * @param {object} p
		 * @param {string} sModelName
		 */
		msptCatVH: function (p, sModelName) {
			var g = this;

			var settings = {
				title: this.getView().getModel("i18n").getProperty("MP_CAT_TXT"),
				noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
				items: {
					path: "/MSPTypeSet",
					template: new sap.m.StandardListItem({
						title: "{Mptyp}",
						description: "{Mpttx}"
					})
				},
				confirm: function (E) {
					p.MptypVS = "None";
					p.MptypVST = "";
					p.Mptyp = E.getParameters().selectedItem.getProperty("title");
					p.Mpttx = E.getParameters().selectedItem.getProperty("description");

					if (p.Mptyp === "L" && p.lam === undefined) {
						p.lam = {
							Lrpid: "",
							LrpidDesc: "",
							Strtptatr: "",
							Endptatr: "",
							Length: "",
							LinUnit: "",
							LinUnitDesc: "",
							Startmrkr: "",
							Endmrkr: "",
							Mrkdisst: "",
							Mrkdisend: "",
							MrkrUnit: "",
							enableLrp: true,
							enableMarker: false,
							LrpidVS: "None",
							StrtptatrVS: "None",
							EndptatrVS: "None",
							LinUnitVS: "None",
							StartmrkrVS: "None",
							EndmrkrVS: "None",
							MrkdisstVS: "None",
							MrkdisendVS: "None",
							MrkrUnitVS: "None"
						};
					}
					g.getModel(sModelName).refresh();
				}
			};

			var q = "/MSPTypeSet";
			var M = this.getView().getModel("valueHelp");
			var msTypSelectDialog = ValueHelpProvider.getSelectDialog(M, q, [], settings, "Mptyp", "Mpttx");
			msTypSelectDialog.open();
		},
		/*
		 * Function to handle 'liveChange' event of Characteristic Name
		 * @param {sap.ui.base.Event} oEvent
		 */
		charNameChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.AtnamMs;

			if (sValue === "" || sValue === undefined) {
				oModelData.AtnamMs = "";
				oModelData.Atbez = "";
			}
			oEvent.getSource().setValueState("None");
		},
		/*
		 * Function to handle 'change' event of Characteristic Name
		 * @param {sap.ui.base.Event} oEvent
		 */
		onCharNameChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.AtnamMs;

			if (sValue === "" || sValue === undefined) {
				oModelData.AtnamMs = "";
				oModelData.Atbez = "";
			} else {
				oModelData.AtnamMs = sValue.toUpperCase();
				this._characteristicName(oModelData, sModelName);
			}
		},
		_characteristicName: function (f, sModelName) {
			var g = this;
			var c = f.AtnamMs;
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var sPath = "/CharNameSet";
				var oFilters = [new sap.ui.model.Filter("Atnam", "EQ", c)];
				var oModel = g.getView().getModel("valueHelp");
				g.BusyDialog.open();
				var fnSuccess = function (d) {
					g.BusyDialog.close();
					if (d.results.length > 0) {
						f.AtnamMs = a;
						f.Atbez = d.results[0].Atbez;
						f.AtnamMsVS = "None";
						g.readCharUnit(f, g, a);
					} else {
						f.AtnamMs = "";
						f.Atbez = "";
						f.AtnamMsVS = "Error";
						f.AtnamMsVST = "Invalid Entry";
					}
					g.getModel(sModelName).refresh();
				};
				var fnError = function (e) {
					g.BusyDialog.close();
					var b = JSON.parse(e.response.body);
					var d = b.error.message.value;
					f.AtnamMsVS = "Error";
					f.AtnamMsVST = d;
					g.getModel(sModelName).refresh();
				};
				g._readData(sPath, oModel, fnSuccess, fnError, oFilters);
			} else {
				f.AtnamMs = a;
				g.getModel(sModelName).refresh();
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Characteristic Name
		 * @param {sap.ui.base.Event} c
		 */
		onCharVH: function (c) {
			var sModelName = this.getFragmentModelName(c);
			var sIndex = c.getSource().getBindingContext(sModelName).getPath();
			this.charVH(c.getSource().getBindingContext(sModelName).getProperty(sIndex), sModelName);
		},
		/*
		 * To display value help dialog of Characteristic Name
		 * @param {object} p
		 * @param {string} sModelName
		 */
		charVH: function (p, sModelName) {
			var g = this;
			var settings = {
				title: g.getView().getModel("i18n").getProperty("CHAR_NAME_TXT"),
				noDataText: g.getView().getModel("i18n").getProperty("LOAD") + "...",
				columns: [new sap.m.Column({
						header: [
							new sap.m.Text({
								text: "{i18n>CHARACTERISTIC}"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>DESCRIPTION}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>VALID_FRM}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>CHARS_GRP}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>FORMAT}"
							})
						]
					})
				],
				items: {
					path: "/CharNameSet",
					template: new sap.m.ColumnListItem({
						type: "Active",
						unread: false,
						cells: [
							new sap.m.Text({
								text: "{Atnam}"
							}),
							new sap.m.Text({
								text: "{Atbez}"
							}),
							new sap.m.Text({
								text: "{Datuv}"
							}),
							new sap.m.Text({
								text: "{Atkla}"
							}),
							new sap.m.Text({
								text: "{Atfor}"
							})
						]
					})
				},
				confirm: function (E) {
					p.AtnamMs = E.getParameter("selectedItem").getCells()[0].getText();
					p.Atbez = E.getParameter("selectedItem").getCells()[1].getText();
					p.AtnamMsVS = "None";
					p.AtnamMsVSt = "";
					g.getModel(sModelName).refresh();
					E.getSource().getBinding("items").filter([]);
					g.readCharUnit(p, g, p.AtnamMs);
				}
			};
			var sPath = "/CharNameSet";
			var oFilter = [];
			var oModel = g.getView().getModel("valueHelp");
			var cells = [
				new sap.m.Text({
					text: "{Atnam}"
				}),
				new sap.m.Text({
					text: "{Atbez}"
				}),
				new sap.m.Text({
					text: "{Datuv}"
				}),
				new sap.m.Text({
					text: "{Atkla}"
				}),
				new sap.m.Text({
					text: "{Atfor}"
				})
			];

			var cSelectDialog = ValueHelpProvider.getValueHelp(oModel, sPath, cells, oFilter, settings, "Atnam", "Atbez");
			cSelectDialog.open();
			cSelectDialog.setModel(this.getView().getModel("i18n"), "i18n");
		},
		/*
		 * Function to handle 'select' event of Measuring point is counter
		 * @param {sap.ui.base.Event} e
		 */
		onCounterSelect: function (e) {
			var sModelName = this.getFragmentModelName(e);
			var sIndex = e.getSource().getBindingContext(sModelName).getPath();
			var select = e.getParameters().selected;
			e.getSource().getBindingContext(sModelName).getProperty(sIndex).AtnamMsVS = "None";
			e.getSource().getBindingContext(sModelName).getProperty(sIndex).CodgrVS = "None";
			e.getSource().getBindingContext(sModelName).getProperty(sIndex).Desir = "";
			e.getSource().getBindingContext(sModelName).getProperty(sIndex).Cjumc = "";
			e.getSource().getBindingContext(sModelName).getProperty(sIndex).Pyeac = "";

			if (select) {
				e.getSource().getBindingContext(sModelName).getProperty(sIndex).Indct = true;
				e.getSource().getBindingContext(sModelName).getProperty(sIndex).countEnable = true;
				e.getSource().getBindingContext(sModelName).getProperty(sIndex).tEnable = false;
				e.getSource().getBindingContext(sModelName).getProperty(sIndex).Cdsuf = false;
			} else {
				e.getSource().getBindingContext(sModelName).getProperty(sIndex).Indct = false;
				e.getSource().getBindingContext(sModelName).getProperty(sIndex).countEnable = false;
				e.getSource().getBindingContext(sModelName).getProperty(sIndex).tEnable = true;
			}
		},

		/** Maintenance Plan **/
		/*
		 * Function to handle 'change' event of Maintenance Plan
		 * @param {sap.ui.base.Event} oEvent
		 */
		onMaintPlanChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.Warpl;

			if (sValue === "" || sValue === undefined) {
				oModelData.Warpl = "";
				// oModelData.Wptxt = "";
			} else {
				oModelData.Warpl = sValue.toUpperCase();
				this._maintenancePlan(oModelData, sModelName);
			}
		},
		_maintenancePlan: function (f, sModelName) {
			var g = this;
			var c = f.Warpl;
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var sPath = "/MPlanVHSet";
				var oFilters = [new sap.ui.model.Filter("Warpl", "EQ", c)];
				var oModel = g.getView().getModel("valueHelp");
				var fnSuccess = function (d) {
					if (d.results.length > 0) {
						f.Warpl = a;
						f.Wptxt = d.results[0].Wptxt;
						g.readMplanData(f, sModelName);
					} else {
						f.WarplVs = "Error";
						f.WarplVST = "Invalid Entry";
						g.getModel(sModelName).refresh();
					}
				};
				var fnError = function (e) {
					var b = JSON.parse(e.response.body);
					var d = b.error.message.value;
					f.WarplVs = "Error";
					f.WarplVST = d;
					g.getModel(sModelName).refresh();
				};
				g._readData(sPath, oModel, fnSuccess, fnError, oFilters);
			} else {
				f.Warpl = a;
				g.getModel(sModelName).refresh();
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Maintenance Plan
		 * @param {sap.ui.base.Event} c
		 */
		onMaintPlanVH: function (c) {
			var sModelName = this.getFragmentModelName(c);
			var sIndex = c.getSource().getBindingContext(sModelName).getPath();
			this.maintPlanVH(c.getSource().getBindingContext(sModelName).getProperty(sIndex), sModelName);
		},
		/*
		 * To display value help dialog of Maintenance Plan
		 * @param {object} p
		 * @param {string} sModelName
		 */
		maintPlanVH: function (p, sModelName) {
			var g = this;

			var settings = {
				title: this.getView().getModel("i18n").getProperty("MAINTPLAN_TXT"),
				noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
				items: {
					path: "/MPlanVHSet",
					template: new sap.m.StandardListItem({
						title: "{Warpl}",
						description: "{Wptxt}"
					})
				},
				confirm: function (E) {
					p.WarplVS = "None";
					p.WarplVST = "";
					p.Warpl = E.getParameters().selectedItem.getProperty("title");
					p.Wptxt = E.getParameters().selectedItem.getProperty("description");
					g.getModel(sModelName).refresh();
				}
			};

			var q = "/MPlanVHSet";
			var M = this.getView().getModel("valueHelp");
			var maintPlanSelectDialog = ValueHelpProvider.getSelectDialog(M, q, [], settings, "Warpl", "Wptxt");
			maintPlanSelectDialog.open();
		},
		/*
		 * Function to read Maintainence plan category
		 * @param {sap.ui.base.Event} c
		 */
		readMaintPlanCat: function () {
			var g = this;
			var sPath = "/MPLANItemCatgSet";
			var oModel = g.getView().getModel("valueHelp");
			var fnSuccess = function (d) {
				if (d.results.length > 0) {
					var sArray = [];
					for (var i = 0; i < d.results.length; i++) {
						sArray.push(d.results[i]);
					}
					var oJson = new JSONModel([]);
					oJson.setData(sArray);
					g.getView().setModel(oJson, "MainPlanCatModel");
				}
			};
			var fnError = function () {};
			g._readData(sPath, oModel, fnSuccess, fnError);
		},
		/*
		 * Function to handle 'liveChange' event of Maintainence Plan Category
		 * @param {sap.ui.base.Event} oEvent
		 */
		onMaintPlanCatChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.Mptyp;

			if (sValue === "" || sValue === undefined) {
				oEvent.getSource().setValueState("None");
			}
			oModelData.Txt = oEvent.getSource().getSelectedItem().getText(); //oEvent.getSource().getProperty("value");
			oModelData.Mptyp = oEvent.getSource().getProperty("selectedKey");
		},
		/*
		 * Function to handle 'liveChange' event of Strategy
		 * @param {sap.ui.base.Event} oEvent
		 */
		strategyChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.Strat;

			if (sValue === "" || sValue === undefined) {
				oModelData.Strat = "";
				oModelData.StratDesc = "";
			}
			oEvent.getSource().setValueState("None");
		},
		/*
		 * Function to handle 'change' event of Strategy
		 * @param {sap.ui.base.Event} oEvent
		 */
		onStrategyChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.Strat;

			if (sValue === "" || sValue === undefined) {
				oModelData.Strat = "";
				oModelData.StratDesc = "";
			} else {
				oModelData.Strat = sValue.toUpperCase();
				oModelData.cycleType = 1;
				oModelData.StratEnabled = true;
				oModelData.MehrfachEnabled = false;
				oModelData.WsetEnabled = false;
				this.cycleIndicatorSelected(sIndex);
				this._changeStrategy(oModelData, sModelName);
			}
		},
		_changeStrategy: function (f, sModelName) {
			var g = this;
			var c = f.Strat;
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var sPath = "/StrategySet";
				var oModel = g.getView().getModel("valueHelp");
				var oFilters = [new sap.ui.model.Filter("Strat", "EQ", c)];
				var fnSuccess = function (d) {
					if (d.results.length > 0) {
						f.StratDesc = d.results[0].Ktext;
						f.ButtonNewCycleEnabled = false;
						var ind = d.results[0].Termk;
						if (ind === "3") {
							f.AbrhoLBL = false;
							f.AbrhoVis = false;
							f.HunitVis = false;
							f.FabklLBL = false;
							f.Fabkl = "";
							f.FabklVis = false;
							f.FabklDesc = "";
							f.FabklDescVis = false;
							f.Unitc = d.results[0].Zeieh;
							f.UnitcVis = true;
							f.SzaehLBL = true;
							f.SzaehVis = true;
							f.Szaeh = "";
							f.MpcyclenoLBL = true;
							f.MpcyclenoVis = true;
							f.StadtVis = false;
							f.StadtLBL = false;
						} else {
							f.AbrhoLBL = true;
							f.AbrhoVis = true;
							f.HunitVis = true;
							f.FabklLBL = true;
							f.Fabkl = "";
							f.FabklVis = true;
							f.FabklDesc = "";
							f.FabklDescVis = true;
							f.SzaehLBL = false;
							f.SzaehVis = false;
							f.Szaeh = "";
							f.MpcyclenoLBL = false;
							f.MpcyclenoVis = false;
							f.Unitc = "";
							f.UnitcVis = false;
							f.StadtVis = true;
							f.StadtLBL = true;
							f.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
						}
						f.Strat = a;
						g.getModel(sModelName).refresh();
						g.readScheduling(f, c, sModelName);
					} else {
						f.Strat = "";
						f.StratDesc = "";
						f.StratVS = "Error";
						f.StratVST = "Invalid Entry";
						g.getModel(sModelName).refresh();
					}
				};
				var fnError = function (e) {
					var b = JSON.parse(e.responseText);
					var d = b.error.message.value;
					f.StratVS = "Error";
					f.StratVST = d;
					g.getModel(sModelName).refresh();
				};
				g._readData(sPath, oModel, fnSuccess, fnError, oFilters);
			} else {
				f.Strat = a;
				g.getModel(sModelName).refresh();
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Strategy
		 * @param {sap.ui.base.Event} c
		 */
		onStrategyVH: function (c) {
			var sModelName = this.getFragmentModelName(c);
			var sIndex = c.getSource().getBindingContext(sModelName).getPath();
			this.strategyVH(c.getSource().getBindingContext(sModelName).getProperty(sIndex), sModelName, sIndex);
		},
		/*
		 * To display value help dialog of Strategy
		 * @param {object} p
		 * @param {string} sModelName
		 * @param {string} sIndex
		 */
		strategyVH: function (p, sModelName, sIndex) {
			var g = this;
			var settings = {
				title: g.getView().getModel("i18n").getProperty("MAINT_STR"),
				noDataText: g.getView().getModel("i18n").getProperty("LOAD") + "...",
				columns: [new sap.m.Column({
						header: [
							new sap.m.Text({
								text: "{i18n>STRATEGY}"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>DESCRIPTION}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>SCHE_IND_TXT}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>UNIT}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>FACT_CAL}"
							})
						]
					})
				],
				items: {
					path: "/StrategySet",
					template: new sap.m.ColumnListItem({
						type: "Active",
						unread: false,
						cells: [
							new sap.m.Text({
								text: "{Strat}"
							}),
							new sap.m.Text({
								text: "{Ktext}"
							}),
							new sap.m.Text({
								text: "{Termk}"
							}),
							new sap.m.Text({
								text: "{Zeieh}"
							}),
							new sap.m.Text({
								text: "{Fabkl}"
							})
						]
					})
				},
				confirm: function (E) {
					p.cycleType = 1;
					p.StratEnabled = true;
					p.MehrfachEnabled = false;
					p.WsetEnabled = false;
					p.StratVS = "None";
					p.StratVST = "";
					p.Strat = E.getParameter("selectedItem").getCells()[0].getText();
					p.StratDesc = E.getParameter("selectedItem").getCells()[1].getText();

					var value = E.getParameter("selectedItem").getCells()[0].getText();
					var ind = E.getParameter("selectedItem").getCells()[2].getText();
					g.cycleIndicatorSelected(sIndex);

					p.ButtonNewCycleEnabled = false;
					if (ind === "3") {
						p.ScheIndRbPerformance = false;
						p.AbrhoLBL = false;
						p.AbrhoVis = false;
						p.HunitVis = false;
						p.FabklLBL = false;
						p.Fabkl = "";
						p.FabklVis = false;
						p.FabklDesc = "";
						p.FabklDescVis = false;
						g.stratUnit = E.getParameter("selectedItem").getCells()[3].getText();
						p.SzaehLBL = true;
						p.SzaehVis = true;
						p.Szaeh = "";
						p.Unitc = g.stratUnit;
						p.UnitcVis = true;
						p.StadtVis = false;
						p.StadtLBL = false;
						p.MpcyclenoLBL = true;
						p.MpcyclenoVis = true;
					} else {
						p.AbrhoLBL = true;
						p.AbrhoVis = true;
						p.HunitVis = true;
						p.FabklLBL = true;
						p.Fabkl = "";
						p.FabklVis = true;
						p.FabklDesc = "";
						p.FabklDescVis = true;
						p.SzaehLBL = false;
						p.SzaehVis = false;
						p.Szaeh = "";
						p.Unitc = "";
						p.UnitcVis = false;
						p.StadtVis = true;
						p.StadtLBL = true;
						p.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
						p.MpcyclenoLBL = false;
						p.MpcyclenoVis = false;
					}
					g.readScheduling(p, value, sModelName);
				}
			};

			var sPath = "/StrategySet";
			var oFilter = [];
			var oModel = g.getView().getModel("valueHelp");
			var cells = [
				new sap.m.Text({
					text: "{Strat}"
				}),
				new sap.m.Text({
					text: "{Ktext}"
				}),
				new sap.m.Text({
					text: "{Termk}"
				}),
				new sap.m.Text({
					text: "{Zeieh}"
				}),
				new sap.m.Text({
					text: "{Fabkl}"
				})
			];

			var strSelectDialog = ValueHelpProvider.getValueHelp(oModel, sPath, cells, oFilter, settings, "Strat", "Ktext");
			strSelectDialog.open();
			strSelectDialog.setModel(this.getView().getModel("i18n"), "i18n");
		},
		/*
		 * Function to read Scheduling data
		 * @param {object} f
		 * @param {string} sModelName
		 * @param {string} str
		 */
		readScheduling: function (f, str, sModelName) {
			var g = this;
			var sPath = "/MPSHDParamSet('" + str + "')";
			var oModel = g.getView().getModel();
			var fnSuccess = function (r) {
				f.Fabkl = r.Fabkl;
				f.FabklDesc = r.FabklDesc;
				f.Abrho = r.Abrho;
				var ind = r.Termk;
				if (ind === "1") {
					f.Stich = 1;
					f.ScheIndRbTimeKeyDate = true;
					f.ScheIndRbTimeKeyDateEnabled = true;
					f.ScheIndRbTimeEnabled = true;
					f.ScheIndRbTimeFactCalEnabled = true;
					f.ScheIndRbPerformanceEnabled = false;
				} else if (ind === "2") {
					f.Stich = 2;
					f.ScheIndRbTimeEnabled = true;
					f.ScheIndRbTimeKeyDateEnabled = true;
					f.ScheIndRbPerformanceEnabled = false;
					f.ScheIndRbTimeFactCal = true;
					f.ScheIndRbTimeFactCalEnabled = true;
				} else if (ind === "3") {
					f.Stich = 3;
					f.ScheIndRbTimeEnabled = false;
					f.ScheIndRbTimeKeyDateEnabled = false;
					f.ScheIndRbTimeFactCalEnabled = false;
					f.ScheIndRbPerformance = true;
					f.ScheIndRbPerformanceEnabled = true;
					g.stratUnit = r.Zeieh;
				} else if (ind === "") {
					f.Stich = 0;
					f.ScheIndRbTime = true;
					f.ScheIndRbTimeKeyDateEnabled = true;
					f.ScheIndRbTimeEnabled = true;
					f.ScheIndRbTimeFactCalEnabled = true;
					f.ScheIndRbPerformanceEnabled = false;
				}
				g.getView().getModel(sModelName).refresh();
			};
			var fnError = function () {};
			g._readData(sPath, oModel, fnSuccess, fnError);
		},
		/*
		 * Function to handle 'select' event of Multiple Counter
		 * @param {sap.ui.base.Event} oEvent
		 */
		onMultiCounterSelect: function (oEvent) {
			var g = this;
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var sModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			sModelData.cycleType = 2;
			sModelData.StratEnabled = false;
			sModelData.MehrfachEnabled = true;
			sModelData.WsetEnabled = true;

			if (sModelData.Mehrfach) {
				sModelData.ScheIndText = false;
				sModelData.ScheIndTitle = false;
				sModelData.ScheIndLBL = false;
				sModelData.ScheIndRbTimeVis = false;
				sModelData.ScheIndRbTimeKeyDateVis = false;
				sModelData.ScheIndRbTimeFactCalVis = false;
				sModelData.ScheIndRbPerformanceVis = false;
				sModelData.AbrhoLBL = false;
				sModelData.AbrhoVis = false;
				sModelData.HunitVis = false;
				sModelData.FabklLBL = false;
				sModelData.Fabkl = "";
				sModelData.FabklVis = false;
				sModelData.FabklDesc = "";
				sModelData.FabklDescVis = false;
				sModelData.ButtonNewCycleEnabled = true;
				sModelData.CycleSetSeqVis = true;
				sModelData.OPText = true;
				sModelData.OPTitle = true;
				sModelData.OPLBL = true;
				sModelData.OROPVis = true;
				sModelData.AndOPvis = true;
				sModelData.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_STDATE");
			} else {
				sModelData.StratEnabled = true;
				sModelData.ScheIndText = true;
				sModelData.ScheIndTitle = true;
				sModelData.ScheIndLBL = true;
				sModelData.ScheIndRbTimeVis = true;
				sModelData.ScheIndRbTimeKeyDateVis = true;
				sModelData.ScheIndRbTimeFactCalVis = true;
				sModelData.ScheIndRbPerformanceVis = true;
				sModelData.AbrhoLBL = true;
				sModelData.AbrhoVis = true;
				sModelData.HunitVis = true;
				sModelData.FabklLBL = true;
				sModelData.Fabkl = "";
				sModelData.FabklVis = true;
				sModelData.FabklDesc = "";
				sModelData.FabklDescVis = true;
				sModelData.OPText = false;
				sModelData.OPTitle = false;
				sModelData.OPLBL = false;
				sModelData.OROPVis = false;
				sModelData.AndOPvis = false;
				sModelData.CycleSetSeqVis = false;
			}

			g.cycleIndicatorSelected(sIndex);
			if ((sModelData.cycleIndMultCntr === true && sModelData.Mehrfach === true) || (sModelData.cycleIndMultCntr === true &&
					sModelData.Wset !== "")) {
				sModelData.ButtonNewCycleEnabled = true;
				sModelData.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_STDATE");
			} else {
				sModelData.ButtonNewCycleEnabled = false;
				sModelData.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
			}
			g.getView().getModel(sModelName).refresh();
		},
		/*
		 * Function to handle 'liveChange' event of Cycle Set
		 * @param {sap.ui.base.Event} oEvent
		 */
		cycleSetChange: function (oEvent) {
			var sModelName = this.getFragmentModelName(oEvent);
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.Wset;
			if (sValue === "" || sValue === undefined) {
				oModelData.Wset = "";
				oModelData.Ktext = "";
			}
			oEvent.getSource().setValueState("None");
		},
		/*
		 * Function to handle 'change' event of Cycle Set
		 * @param {sap.ui.base.Event} oEvent
		 */
		onCycleSetChange: function (oEvent) {
			var sModelName = this.oModelAIWMPMI;
			var sIndex = oEvent.getSource().getBindingContext(sModelName).getPath();
			var oModelData = oEvent.getSource().getBindingContext(sModelName).getProperty(sIndex);
			var sValue = oModelData.Wset;

			if (sValue === "" || sValue === undefined) {
				oModelData.Wset = "";
				oModelData.Ktext = "";
			} else {
				oModelData.cycleType = 2;
				oModelData.StratEnabled = false;
				oModelData.MehrfachEnabled = true;
				oModelData.WsetEnabled = true;
				oModelData.Wset = sValue.toUpperCase();
				this.cycleIndicatorSelected(sIndex);
				this._changeCycleSet(oModelData, sModelName, sIndex);
			}
		},
		_changeCycleSet: function (f, sModelName, sIndex) {
			var g = this;
			var c = f.Wset;
			var a = c.replace(/^[ ]+|[ ]+$/g, '');
			if (a !== "") {
				var sPath = "/CyclesetSet";
				var oModel = g.getView().getModel("valueHelp");
				var oFilters = [new sap.ui.model.Filter("Strat", "EQ", c)];
				var fnSuccess = function (d) {
					if (d.results.length > 0) {
						f.Wset = a;
						f.Ktext = d.results[0].Ktext;
						f.ScheIndText = false;
						f.ScheIndTitle = false;
						f.ScheIndLBL = false;
						f.ScheIndRbTimeVis = false;
						f.ScheIndRbTimeKeyDateVis = false;
						f.ScheIndRbTimeFactCalVis = false;
						f.ScheIndRbPerformanceVis = false;
						f.AbrhoLBL = false;
						f.AbrhoVis = false;
						f.HunitVis = false;
						f.FabklLBL = false;
						f.Fabkl = "";
						f.FabklVis = false;
						f.FabklDesc = "";
						f.FabklDescVis = false;
						f.ButtonNewCycleEnabled = true;
						f.OPText = true;
						f.OPTitle = true;
						f.OPLBL = true;
						f.OROPVis = true;
						f.AndOPvis = true;
						g.getModel(sModelName).refresh();
						g.readCycleDetails(c, sModelName, sIndex);
					} else {
						f.WsetVs = "Error";
						f.WsetVST = "Invalid Entry";
						f.Wset = "";
						f.Ktext = "";
						g.getModel(sModelName).refresh();
					}
				};
				var fnError = function (e) {
					var b = JSON.parse(e.response.body);
					var d = b.error.message.value;
					f.WsetVs = "Error";
					f.WsetVST = d;
					g.getModel(sModelName).refresh();
				};
				g._readData(sPath, oModel, fnSuccess, fnError, oFilters);
			} else {
				f.Wset = a;
				g.getModel(sModelName).refresh();
			}
		},
		/*
		 * To read Cycle Set details
		 * @param {string} c - cycleset
		 * @param {string} sModelName
		 * @param {string} sIndex
		 */
		readCycleDetails: function (c, sModelName, sIndex) {
			var g = this;
			if (c !== "") {
				var sPath = "/CyclesetSet('" + c + "')/CyclesetToMPCycle";
				var oModel = this.getView().getModel();
				var fnSuccess = function (r) {
					var oCycleData = g.getView().getModel(sModelName).getProperty(sIndex + "/cycleModel");
					oCycleData = [];
					for (var i = 0; i < r.results.length; i++) {
						oCycleData.push(r.results[i]);
					}
					g.getView().getModel(sModelName).setProperty(sIndex + "/cycleModel", oCycleData);
				};
				var fnError = function () {};
				g._readData(sPath, oModel, fnSuccess, fnError);
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Cycle Set
		 * @param {sap.ui.base.Event} c
		 */
		onCycleSetVH: function (c) {
			var sModelName = this.oModelAIWMPMI;
			var sIndex = c.getSource().getBindingContext(sModelName).getPath();
			this.cycleSetVH(c.getSource().getBindingContext(sModelName).getProperty(sIndex), sModelName, sIndex);
		},
		/*
		 * To display value help dialog of Cycle Set
		 * @param {object} p
		 * @param {string} sModelName
		 * @param {string} sIndex
		 */
		cycleSetVH: function (p, sModelName, sIndex) {
			var g = this;
			var settings = {
				title: g.getView().getModel("i18n").getProperty("CYC_SET"),
				noDataText: g.getView().getModel("i18n").getProperty("LOAD") + "...",
				columns: [new sap.m.Column({
						header: [
							new sap.m.Text({
								text: "{i18n>STRATEGY}"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>DESCRIPTION}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>SCHE_IND_TXT}"
							})
						]
					})
				],
				items: {
					path: "/CyclesetSet",
					template: new sap.m.ColumnListItem({
						type: "Active",
						unread: false,
						cells: [
							new sap.m.Text({
								text: "{Strat}"
							}),
							new sap.m.Text({
								text: "{Ktext}"
							}),
							new sap.m.Text({
								text: "{Termk}"
							}),
							new sap.m.Text({
								text: "{Zeieh}"
							}),
							new sap.m.Text({
								text: "{Fabkl}"
							})
						]
					})

				},
				confirm: function (E) {
					p.cycleType = 2;
					p.StratEnabled = false;
					p.MehrfachEnabled = true;
					p.WsetEnabled = true;
					p.WsetVS = "None";
					p.WsetVST = "";
					p.Wset = E.getParameter("selectedItem").getCells()[0].getText();
					p.Ktext = E.getParameter("selectedItem").getCells()[1].getText();
					p.ScheIndText = false;
					p.ScheIndTitle = false;
					p.ScheIndLBL = false;
					p.ScheIndRbTimeVis = false;
					p.ScheIndRbTimeKeyDateVis = false;
					p.ScheIndRbTimeFactCalVis = false;
					p.ScheIndRbPerformanceVis = false;
					p.AbrhoLBL = false;
					p.AbrhoVis = false;
					p.HunitVis = false;
					p.FabklLBL = false;
					p.Fabkl = "";
					p.FabklVis = false;
					p.FabklDesc = "";
					p.FabklDescVis = false;
					p.ButtonNewCycleEnabled = true;
					p.OPText = true;
					p.OPTitle = true;
					p.OPLBL = true;
					p.OROPVis = true;
					p.AndOPvis = true;
					g.getModel(sModelName).refresh();
					g.cycleIndicatorSelected(sIndex);
					g.readCycleDetails(p.Wset, sModelName, sIndex);
				}
			};

			var sPath = "/CyclesetSet";
			var oFilter = [];
			var oModel = g.getView().getModel("valueHelp");
			var cells = [
				new sap.m.Text({
					text: "{Strat}"
				}),
				new sap.m.Text({
					text: "{Ktext}"
				}),
				new sap.m.Text({
					text: "{Termk}"
				}),
				new sap.m.Text({
					text: "{Zeieh}"
				}),
				new sap.m.Text({
					text: "{Fabkl}"
				})
			];

			var csSelectDialog = ValueHelpProvider.getValueHelp(oModel, sPath, cells, oFilter, settings, "Strat", "Ktext");
			csSelectDialog.open();
			csSelectDialog.setModel(this.getView().getModel("i18n"), "i18n");
		},
		/*************************************** End of EQUI/FLOC/MSPT/MPMI******************************************************************************
				/************************************ BOM and Object Network Code ****************************************/
		/*
		 * Function to handle validations of BOM & ON
		 * @param {array} AIWListMatData
		 * @param {array} AIWListEqData
		 * @param {array} AIWListFLData
		 * @param {array} AIWListWBSData
		 * @param {array} AIWListONData
		 */
		handleBOMONValidation: function (AIWListMatData, AIWListEqData, AIWListFLData, AIWListWBSData, AIWListONData) {
			var g = this;
			var msg = "";
			//var MessageList = [];
			//var submitFlag = true;

			if (AIWListMatData.length > 0 || AIWListEqData.length > 0 || AIWListFLData.length > 0 || AIWListWBSData.length > 0 ||
				AIWListONData
				.length > 0) {
				for (var a = 0; a < AIWListMatData.length; a++) {
					if (AIWListMatData[a].Matnr === "" || AIWListMatData[a].matValueState === "Error") {
						g.errorFlag = false; //submitFlag = false;
						AIWListMatData[a].matValueState = "Error";
						msg = this.getResourceBundle().getText("incompleteSubmitMbom");
					}
					if (AIWListMatData[a].Werks === "" || AIWListMatData[a].plantValueState === "Error") {
						g.errorFlag = false; //submitFlag = false;
						AIWListMatData[a].plantValueState = "Error";
						msg = this.getResourceBundle().getText("incompleteSubmitMbom");
					}
					if (AIWListMatData[a].Stlan === "" || AIWListMatData[a].usageValueState === "Error") {
						g.errorFlag = false; //submitFlag = false;
						AIWListMatData[a].usageValueState = "Error";
						msg = this.getResourceBundle().getText("incompleteSubmitMbom");
					}
					if (AIWListMatData[a].Stalt === "" || AIWListMatData[a].altbomValueState === "Error") {
						g.errorFlag = false; //submitFlag = false;
						AIWListMatData[a].altbomValueState = "Error";
						msg = this.getResourceBundle().getText("incompleteSubmitMbom");
					}
				}
				if (msg !== "") {
					g.MessageList.push({
						type: "Error",
						title: msg
					});
					msg = "";
				}
				for (var a = 0; a < AIWListEqData.length; a++) {
					if (AIWListEqData[a].Eqnrbom === "" || AIWListEqData[a].equipValueState === "Error") {
						g.errorFlag = false; //submitFlag = false;
						AIWListEqData[a].equipValueState = "Error";
						msg = this.getResourceBundle().getText("incompleteSubmitEbom");
					}
					if (AIWListEqData[a].Werks === "" || AIWListEqData[a].plantValueState === "Error") {
						g.errorFlag = false; //submitFlag = false;
						AIWListEqData[a].plantValueState = "Error";
						msg = this.getResourceBundle().getText("incompleteSubmitEbom");
					}
					if (AIWListEqData[a].Stlan === "" || AIWListEqData[a].usageValueState === "Error") {
						g.errorFlag = false; //submitFlag = false;
						AIWListEqData[a].usageValueState = "Error";
						msg = this.getResourceBundle().getText("incompleteSubmitEbom");
					}
				}
				if (msg !== "") {
					g.MessageList.push({
						type: "Error",
						title: msg
					});
					msg = "";
				}
				for (var a = 0; a < AIWListFLData.length; a++) {
					if (AIWListFLData[a].Tplnrbom === "" || AIWListFLData[a].FLValueState === "Error") {
						g.errorFlag = false; //submitFlag = false;
						AIWListFLData[a].FLValueState = "Error";
						msg = this.getResourceBundle().getText("incompleteSubmitFlbom");
					}
					if (AIWListFLData[a].Werks === "" || AIWListFLData[a].equipValueState === "Error") {
						g.errorFlag = false; //submitFlag = false;
						AIWListFLData[a].plantValueState = "Error";
						msg = this.getResourceBundle().getText("incompleteSubmitFlbom");
					}
					if (AIWListFLData[a].Stlan === "" || AIWListFLData[a].equipValueState === "Error") {
						g.errorFlag = false; //submitFlag = false;
						AIWListFLData[a].usageValueState = "Error";
						msg = this.getResourceBundle().getText("incompleteSubmitFlbom");
					}
				}
				if (msg !== "") {
					g.MessageList.push({
						type: "Error",
						title: msg
					});
					msg = "";
				}
				for (var a = 0; a < AIWListWBSData.length; a++) {
					if (AIWListWBSData[a].WbsExt === "" || AIWListWBSData[a].wbsValueState === "Error") {
						g.errorFlag = false; //submitFlag = false;
						AIWListWBSData[a].wbsValueState = "Error";
						msg = this.getResourceBundle().getText("incompleteSubmitWbsbom");
					}
					if (AIWListWBSData[a].Matnr === "" || AIWListWBSData[a].matValueState === "Error") {
						g.errorFlag = false; //submitFlag = false;
						AIWListWBSData[a].matValueState = "Error";
						msg = this.getResourceBundle().getText("incompleteSubmitWbsbom");
					}
					if (AIWListWBSData[a].Werks === "" || AIWListWBSData[a].plantValueState === "Error") {
						g.errorFlag = false; //submitFlag = false;
						AIWListWBSData[a].plantValueState = "Error";
						msg = this.getResourceBundle().getText("incompleteSubmitWbsbom");
					}
					if (AIWListWBSData[a].Stlan === "" || AIWListWBSData[a].usageValueState === "Error") {
						g.errorFlag = false; //submitFlag = false;
						AIWListWBSData[a].usageValueState = "Error";
						msg = this.getResourceBundle().getText("incompleteSubmitWbsbom");
					}
				}
				if (msg !== "") {
					g.MessageList.push({
						type: "Error",
						title: msg
					});
					msg = "";
				}
				for (var a = 0; a < AIWListONData.length; a++) {
					if (AIWListONData[a].Objnetwrk === "" || AIWListONData[a].NetIDValueState === "Error") {
						g.errorFlag = false; //submitFlag = false;
						AIWListONData[a].NetIDValueState = "Error";
						msg = this.getResourceBundle().getText("incompleteSubmitON");
					}
					if (AIWListONData[a].Netxt === "") {
						g.errorFlag = false; //submitFlag = false;
						msg = this.getResourceBundle().getText("incompleteSubmitON");
					}
				}
				if (msg !== "") {
					g.MessageList.push({
						type: "Error",
						title: msg
					});
					msg = "";
				}
			}
			/*else {
				g.errorFlag = false;//submitFlag = false;
				msg = this.getResourceBundle().getText("emptySave");
				g.MessageList.push({
					type: "Error",
					title: msg
				});
			}*/

			if (!g.errorFlag) { //submitFlag) {
				//this.createMessagePopover(MessageList);
				sap.ui.getCore().getModel("AIWListMatModel").refresh();
				sap.ui.getCore().getModel("AIWListEqModel").refresh();
				sap.ui.getCore().getModel("AIWListFLModel").refresh();
				sap.ui.getCore().getModel("AIWListWBSModel").refresh();
				sap.ui.getCore().getModel("AIWListONModel").refresh();
				//return;
			}
		},
		/*
		 * Function to update Count on load of all objects
		 */
		updateCountOnLoad: function () {
			var g = this;
			var sPath = "/ChangeRequestSet";
			var oModel = g.getView().getModel("ApprovalModel");
			var oFilters = [new Filter("ChangeRequestId", FilterOperator.EQ, g.cReqNo),
				new Filter("Count", FilterOperator.EQ, "X"),
				new Filter("OTC", FilterOperator.EQ, "183"),
				new Filter("OTC", FilterOperator.EQ, "237"),
				new Filter("OTC", FilterOperator.EQ, "185"),
				new Filter("OTC", FilterOperator.EQ, "1230"),
				new Filter("OTC", FilterOperator.EQ, "1223"),
				new Filter("OTC", FilterOperator.EQ, "493"),
				new Filter("OTC", FilterOperator.EQ, "/UGI/TLFL"),
				new Filter("OTC", FilterOperator.EQ, "/UGI/TLEQ"),
				new Filter("OTC", FilterOperator.EQ, "/UGI/TL"),
				new Filter("OTC", FilterOperator.EQ, "DRF_0038"),
				new Filter("OTC", FilterOperator.EQ, "DRF_0039"),
				new Filter("OTC", FilterOperator.EQ, "1345"),
				new Filter("OTC", FilterOperator.EQ, "DRF_0013"),
				new Filter("OTC", FilterOperator.EQ, "/UGI/WBSBM")
			];
			var mainData = g.getView().getModel("mainView").getData();
			var fnSuccess = function (r) {
				var results = r.results;
				var equiCount = results[0].EquiCount === "" ? "0" : results[0].EquiCount;
				var flocCount = results[0].FlocCount === "" ? "0" : results[0].FlocCount;
				var msptCount = results[0].MsptCount === "" ? "0" : results[0].MsptCount;
				var mpmiCount = results[0].MpmiCount === "" ? "0" : results[0].MpmiCount;

				if (msptCount !== "" && msptCount !== "0") {
					g.getView().getModel('EnableModel').setProperty("/Measuring Point", true);
				} else {
					g.getView().getModel('EnableModel').setProperty("/Measuring Point", false);
				}
				if (mpmiCount !== "" && mpmiCount !== "0") {
					g.getView().getModel("EnableModel").setProperty("/Maintenance Plan", true);
				} else {
					g.getView().getModel("EnableModel").setProperty("/Maintenance Plan", false);
				}

				mainData.functionalLocationMain = flocCount; //g.getResourceBundle().getText("functionalLocationMain", [flocCount]);
				mainData.equipmentMain = equiCount; //g.getResourceBundle().getText("equipmentMain", [equiCount]);
				mainData.measuringPointMain = msptCount; //g.getResourceBundle().getText("measuringPointMain", [msptCount]);
				mainData.maintenancePlanMain = mpmiCount; //g.getResourceBundle().getText("maintenancePlanMain", [mpmiCount]);
				g.getView().getModel("mainView").setData(mainData);

				// BOM ON
				var mbomCount = results[0].MbomCount === "" ? "0" : results[0].MbomCount;
				var ebomCount = results[0].EbomCount === "" ? "0" : results[0].EbomCount;
				var flbomCount = results[0].FbomCount === "" ? "0" : results[0].FbomCount;
				var wbsbomCount = results[0].WbomCount === "" ? "0" : results[0].WbomCount;
				var onCount = results[0].ObjnCount === "" ? "0" : results[0].ObjnCount;
				var totalBOMCount = parseInt(mbomCount) + parseInt(ebomCount) + parseInt(flbomCount) + parseInt(wbsbomCount);
				if (onCount !== "" && onCount !== "0") {
					g.getView().getModel("EnableModel").setProperty("/Object Network", true);
				} else {
					g.getView().getModel("EnableModel").setProperty("/Object Network", false);
				}
				//g.handleApprovalLoad(g);

				// TL WC
				var WcCount = results[0].WcCount === "" ? "0" : results[0].WcCount;
				var GntlCount = results[0].GntlCount === "" ? "0" : results[0].GntlCount;
				var EqtlCount = results[0].EqtlCount === "" ? "0" : results[0].EqtlCount;
				var FltlCount = results[0].FltlCount === "" ? "0" : results[0].FltlCount;
				var ObjlCount = results[0].ObjlCount === "" ? "0" : results[0].ObjlCount;
				var TotalTLCount = (parseInt(GntlCount) + parseInt(EqtlCount) + parseInt(FltlCount)).toString();

				if (WcCount !== "" && WcCount !== "0") {
					g.getView().getModel('EnableModel').setProperty("/Work Center", true);
				} else {
					g.getView().getModel('EnableModel').setProperty("/Work Center", false);
				}
				if (TotalTLCount !== "" && TotalTLCount !== "0") {
					g.getView().getModel('EnableModel').setProperty("/Task List", true);
				} else {
					g.getView().getModel('EnableModel').setProperty("/Task List", false);
				}
				if (ObjlCount !== "" && ObjlCount !== "0") {
					g.getView().getModel('EnableModel').setProperty("/Object Link", true);
				} else {
					g.getView().getModel('EnableModel').setProperty("/Object Link", false);
				}

				var CountData = {
					"MatBomCount": mbomCount, //g.getResourceBundle().getText("mbom", [mbomCount]),
					"EqBomCount": ebomCount, //g.getResourceBundle().getText("ebom", [ebomCount]),
					"FLBomCount": flbomCount, //g.getResourceBundle().getText("flbom", [flbomCount]),
					"WbsBomCount": wbsbomCount, //g.getResourceBundle().getText("wbsbom", [wbsbomCount]),
					"TotalBomCount": totalBOMCount.toString(), //g.getResourceBundle().getText("billOfMaterials", [totalBOMCount.toString()]),
					"ONCount": onCount, //g.getResourceBundle().getText("objNet", [onCount]),
					"WCCount": WcCount, //g.getResourceBundle().getText("detailWCIconTabFilterMaster", [WcCount]),
					"GTLCount": GntlCount, //g.getResourceBundle().getText("GTLHeader", [GntlCount]),
					"ETLCount": EqtlCount, //g.getResourceBundle().getText("ETLHeader", [EqtlCount]),
					"FTLCount": FltlCount, //g.getResourceBundle().getText("FTLHeader", [FltlCount]),
					"TotalTLCount": TotalTLCount.toString(), //g.getResourceBundle().getText("TLHeaderTitle", [TotalTLCount.toString()]),
					"OLCount": ObjlCount, //g.getResourceBundle().getText("detailOLIconTabFilterMaster", [ObjlCount])
				};
				var CountModel = new JSONModel(CountData);
				g.getView().setModel(CountModel, "CountModel");
				g.CountObj = {
					mbomCount: parseInt(mbomCount),
					ebomCount: parseInt(ebomCount),
					flbomCount: parseInt(flbomCount),
					wbsbomCount: parseInt(wbsbomCount),
					onCount: parseInt(onCount),
					WCCount: parseInt(WcCount),
					GTLCount: parseInt(GntlCount),
					ETLCount: parseInt(EqtlCount),
					FTLCount: parseInt(FltlCount),
					OLCount: parseInt(ObjlCount)
				};

				g.handleApprovalLoad();
			};

			var fnError = function () {

			};
			// sap.ui.getCore().setModel(new JSONModel([]), "AIWAPPROVE");
			sap.ui.getCore().setModel(new JSONModel([]), this.oModelAIWFLOC);
			sap.ui.getCore().setModel(new JSONModel([]), this.oModelAIWEQUI);
			sap.ui.getCore().setModel(new JSONModel([]), this.oModelAIWMSPT);
			sap.ui.getCore().setModel(new JSONModel([]), this.oModelAIWMPMI);
			this.getView().setModel(new JSONModel([]), this.oModelAIWFLOC);
			this.getView().setModel(new JSONModel([]), this.oModelAIWEQUI);
			this.getView().setModel(new JSONModel([]), this.oModelAIWMSPT);
			this.getView().setModel(new JSONModel([]), this.oModelAIWMPMI);
			g._readData(sPath, oModel, fnSuccess, fnError, oFilters);

		},
		/*
		 * Function to validate mandatory fields value
		 * @param {string} sType
		 * @param {array} data
		 */
		mandateFillCheck: function (sType, data) {
			var msg;
			var sFilled = true;
			var len = data.length;
			var index = len - 1;
			if (len <= 0) {
				return sFilled;
			}

			if (sType === "CreateMaterialBom") {
				if (data[index].Matnr === "" || data[index].matValueState === "Error") {
					data[index].matValueState = "Error";
					sFilled = false;
				}
				if (data[index].Werks === "" || data[index].plantValueState === "Error") {
					data[index].plantValueState = "Error";
					sFilled = false;
				}
				if (data[index].Stlan === "" || data[index].usageValueState === "Error") {
					data[index].usageValueState = "Error";
					sFilled = false;
				}
				msg = this.getResourceBundle().getText("incmpltKeyMbom");
				sap.ui.getCore().getModel("AIWListMatModel").setData(data);
				this.getView().getModel("AIWListMatModel").refresh();
			}
			if (sType === "CreateEquipmentBom") {
				if (data[index].Eqnrbom === "" || data[index].equipValueState === "Error") {
					data[index].equipValueState = "Error";
					sFilled = false;
				}
				if (data[index].Werks === "" || data[index].plantValueState === "Error") {
					data[index].plantValueState = "Error";
					sFilled = false;
				}
				if (data[index].Stlan === "" || data[index].usageValueState === "Error") {
					data[index].usageValueState = "Error";
					sFilled = false;
				}
				msg = this.getResourceBundle().getText("incmpltKeyEbom");
				sap.ui.getCore().getModel("AIWListEqModel").setData(data);
				this.getView().getModel("AIWListEqModel").refresh();
			}
			if (sType === "CreateFLBom") {
				if (data[index].Tplnrbom === "" || data[index].FLValueState === "Error") {
					data[index].FLValueState = "Error";
					sFilled = false;
				}
				if (data[index].Werks === "" || data[index].plantValueState === "Error") {
					data[index].plantValueState = "Error";
					sFilled = false;
				}
				if (data[index].Stlan === "" || data[index].usageValueState === "Error") {
					data[index].usageValueState = "Error";
					sFilled = false;
				}
				msg = this.getResourceBundle().getText("incmpltKeyFlbom");
				sap.ui.getCore().getModel("AIWListFLModel").setData(data);
				this.getView().getModel("AIWListFLModel").refresh();
			}
			if (sType === "createWbsbom") {
				if (data[index].WbsExt === "" || data[index].wbsValueState === "Error") {
					data[index].wbsValueState = "Error";
					sFilled = false;
				}
				if (data[index].Matnr === "" || data[index].matValueState === "Error") {
					data[index].matValueState = "Error";
					sFilled = false;
				}
				if (data[index].Werks === "" || data[index].plantValueState === "Error") {
					data[index].plantValueState = "Error";
					sFilled = false;
				}
				if (data[index].Stlan === "" || data[index].usageValueState === "Error") {
					data[index].usageValueState = "Error";
					sFilled = false;
				}
				msg = this.getResourceBundle().getText("incmpltKeyWbsbom");
				sap.ui.getCore().getModel("AIWListWBSModel").setData(data);
				this.getView().getModel("AIWListWBSModel").refresh();
			}
			if (sType === "createObjNet") {
				if (data[index].Objnetwrk === "" || data[index].NetIDValueState === "Error") {
					data[index].NetIDValueState = "Error";
					sFilled = false;
				}
				msg = this.getResourceBundle().getText("incmpltKeyON");
				sap.ui.getCore().getModel("AIWListONModel").setData(data);
				this.getView().getModel("AIWListONModel").refresh();
			}
			if (!sFilled) {
				this.createMessagePopover([{
					type: "Error",
					title: msg
				}]);
			}
			return sFilled;
		},

		/**
		 * Called to invoke the MessagePopover
		 * @function
		 * @private
		 */
		_getMessagePopover: function () {
			// create popover lazily (singleton)
			if (!this._oMessagePopover) {
				this._oMessagePopover = sap.ui.xmlfragment("ugieamui.mdg.eam.lib.popover.MessagePopover", this);
				this.getView().addDependent(this._oMessagePopover);
			}
			return this._oMessagePopover;
		},

		/*
		 * This function is invoked when 'MeassagePopOver' is pressed
		 * @param {sap.ui.base.Event} oEvent
		 */
		handleMessagePopoverPress: function (oEvent) {
			// this.oMessagePopover.toggle(oEvent.getSource());
			this._getMessagePopover().openBy(oEvent.getSource());
		},

		/*
		 * Function to set MessagePopOver
		 * @param {array} oMessageList
		 * @param {string} errorFlag
		 */
		createMessagePopover: function (oMessageList, errorFlag) {
			var oMessage, oMsgPopover = this._getMessagePopover();

			if (errorFlag) {
				oMessageList.push({
					type: "Success",
					title: "No errors found"
				});
			}

			sap.ui.getCore().getMessageManager().removeAllMessages();
			for (var i = 0; i < oMessageList.length; i++) {
				oMessageList[i].message = oMessageList[i].title;

				oMessage = new Message({
					message: oMessageList[i].message,
					type: oMessageList[i].type, //MessageType.Error,
					target: "/Dummy",
					processor: this.getView().getModel()
				});
				sap.ui.getCore().getMessageManager().addMessages(oMessage);
			}

			// var sJsonModel = new JSONModel();
			// sJsonModel.setData(oMessageList);
			// this.oMessagePopover.setModel(sJsonModel, "message");
			// this.oMessagePopover.toggle(this.getView().byId("idMessagePopover"));
			// sap.ui.getCore().byId("idMsgPopover").setModel(sJsonModel, "message");

			// var msg = this.getView().getModel("i18n").getProperty("MANDMSG");
			// oMessage = new Message({
			// 	message: msg,
			// 	type: MessageType.Error,
			// 	target: "/Dummy",
			// 	processor: this.getView().getModel()
			// });
			// sap.ui.getCore().getMessageManager().addMessages(oMessage);
			// g.getView().byId("idMessagePopover").setEnabled(true);
			oMsgPopover.toggle(this.getView().byId("idMessagePopover"));

			this.getView().byId("idMessagePopover").setEnabled(true);
			this.getView().byId("idMessagePopover").setText(oMessageList.length + "");
		},
		/*
		 * Function to handle error messages and error input highlight.
		 * @param {string} sParameter
		 * @param {string} sParameterVS
		 * @param {object} sModelData
		 * @param {string} sErrorMsg
		 */
		handleSubmitValueState: function (sParameter, sParameterVS, sModelData, sErrorMsg) {
			var sValue = sModelData[sParameter];
			if (sValue === "" || sValue === undefined) {
				sModelData[sParameterVS] = "Error";
				this.errorFlag = false;
				this.MessageList.push({
					type: "Error",
					title: sErrorMsg
				});
			}
		},
		/*
		 * Function to read system type (HANA/ECC). Accordingly maximum length for Material and Component inputs are set.
		 */
		readSystem: function () {
			var m = this.getView().getModel("valueHelp");
			var g = this;
			var maxLengthModel = new JSONModel();
			var obj;
			m.read("/SystemTypeSet", {
				success: function (r) {
					if (r.results[0].System === true) {
						obj = {
							maxlengthMat: 40,
							maxlengthComp: 40
						};
					} else {
						obj = {
							maxlengthMat: 18,
							maxlengthComp: 10
						};
					}
					maxLengthModel.setData(obj);
					g.getView().setModel(maxLengthModel, "maxLengthModel");
				}
			});
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Work center in Task list
		 * @param {sap.ui.base.Event} oEvent
		 */
		onTLWcVH: function (oEvent) {
			var g = this;
			var sPath, gtlData, etlData, ftlData, GTLHeaderModel, ETLHeaderModel, FTLHeaderModel;
			if (this.action === "createGTL") {
				sPath = oEvent.getSource().getBindingContext("GTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				/*gtlData = oEvent.getSource().getBindingContext("GTLHeaderModel").getModel().getData();
				GTLHeaderModel = this.getView().getModel("GTLHeaderModel");*/
			} else if (this.action === "createETL") {
				sPath = oEvent.getSource().getBindingContext("ETLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				/*etlData = oEvent.getSource().getBindingContext("ETLHeaderModel").getModel().getData();
				ETLHeaderModel = this.getView().getModel("ETLHeaderModel");*/
			} else if (this.action === "createFTL") {
				sPath = oEvent.getSource().getBindingContext("FTLHeaderModel").getPath();
				g.sindex = parseInt(sPath.split("/")[2]);
				/*ftlData = oEvent.getSource().getBindingContext("FTLHeaderModel").getModel().getData();
				FTLHeaderModel = this.getView().getModel("FTLHeaderModel");*/
			}
			var tlwcSearchResults;
			if (tlwcSearchResults === undefined) {
				var tlwcSelectDialog = new sap.m.TableSelectDialog({
					title: this.getView().getModel("i18n").getProperty("WORK_CENTER"),
					noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
					columns: [new sap.m.Column({
						header: [
							new sap.m.Text({
								text: "Work Center Category"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "Plant"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "Work Center"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "Description"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "Language"
							})
						]
					})],
					items: {
						path: "/WorkCenterVHSet",
						template: new sap.m.ColumnListItem({
							type: "Active",
							unread: false,
							cells: [
								new sap.m.Text({
									text: "{Verwe}"
								}),
								new sap.m.Text({
									text: "{Werks}"
								}),
								new sap.m.Text({
									text: "{Arbpl}"
								}),
								new sap.m.Text({
									text: "{Ktext}"
								}),
								new sap.m.Text({
									text: "{Spras}"
								})
							]
						})

					},
					confirm: function (E) {
						if (g.action === "createGTL" || g.action === "changeGTL") {
							GTLHeaderModel = g.getView().getModel("GTLHeaderModel");
							gtlData = GTLHeaderModel.getData();
							gtlData[0][g.sindex].wcValueState = "None";
							gtlData[0][g.sindex].wcValueStateTxt = "";
							// m.setValue(E.getParameter("selectedItem").getCells()[2].getText());
							gtlData[0][g.sindex].wc = E.getParameter("selectedItem").getCells()[2].getText();
							gtlData[0][g.sindex].wcDesc = E.getParameter("selectedItem").getCells()[3].getText();
							gtlData[0][g.sindex].plant = E.getParameter("selectedItem").getCells()[1].getText();
							GTLHeaderModel.setData(gtlData);
							g.WCPPCheck();
						} else if (g.action === "createETL" || g.action === "changeETL") {
							ETLHeaderModel = g.getView().getModel("ETLHeaderModel");
							etlData = ETLHeaderModel.getData();
							etlData[0][g.sindex].wcValueState = "None";
							etlData[0][g.sindex].wcValueStateTxt = "";
							// m.setValue(E.getParameter("selectedItem").getCells()[2].getText());
							etlData[0][g.sindex].wc = E.getParameter("selectedItem").getCells()[2].getText();
							etlData[0][g.sindex].wcDesc = E.getParameter("selectedItem").getCells()[3].getText();
							etlData[0][g.sindex].plant = E.getParameter("selectedItem").getCells()[1].getText();
							ETLHeaderModel.setData(etlData);
							g.WCPPCheck();
						} else if (g.action === "createFTL" || g.action === "changeFTL") {
							FTLHeaderModel = g.getView().getModel("FTLHeaderModel");
							ftlData = FTLHeaderModel.getData();
							ftlData[0][g.sindex].wcValueState = "None";
							ftlData[0][g.sindex].wcValueStateTxt = "";
							// m.setValue(E.getParameter("selectedItem").getCells()[2].getText());
							ftlData[0][g.sindex].wc = E.getParameter("selectedItem").getCells()[2].getText();
							ftlData[0][g.sindex].wcDesc = E.getParameter("selectedItem").getCells()[3].getText();
							ftlData[0][g.sindex].plant = E.getParameter("selectedItem").getCells()[1].getText();
							FTLHeaderModel.setData(ftlData);
							g.WCPPCheck();
						}
					},
					search: function (E) {
						var sValue = E.getParameter("value");
						E.getSource().getBinding("items").filter(!sValue ? [] : [
							new sap.ui.model.Filter(
								[
									new sap.ui.model.Filter("Arbpl", sap.ui.model.FilterOperator.Contains, sValue),
									new sap.ui.model.Filter("Ktext", sap.ui.model.FilterOperator.Contains, sValue)
								],
								true)
						]);
					}
				});
				var q = "/WorkCenterVHSet";
				var M = this.getView().getModel("valueHelp");
				M.read(q, {
					success: function (h) {
						if (h.results.length > 0) {
							var oModelData = sap.ui.getCore().getModel("AIWListWCModel").getData();
							if (oModelData.length > 0) {
								for (var i = 0; i < oModelData.length; i++) {
									if (oModelData[i].wc) {
										var sObj = {
											Verwe: oModelData[i].wcCat,
											Werks: oModelData[i].plant,
											Arbpl: oModelData[i].wc,
											Ktext: oModelData[i].wcDesc,
											Spras: h.results[0].Spras
										};
										h.results.unshift(sObj);
									}
								}
							}
							tlwcSearchResults = h;
							var I = new sap.m.ColumnListItem({
								type: "Active",
								unread: false,
								cells: [
									new sap.m.Text({
										text: "{Verwe}"
									}),
									new sap.m.Text({
										text: "{Werks}"
									}),
									new sap.m.Text({
										text: "{Arbpl}"
									}),
									new sap.m.Text({
										text: "{Ktext}"
									}),
									new sap.m.Text({
										text: "{Spras}"
									})
								]
							});
							var e = new sap.ui.model.json.JSONModel();
							e.setData(h);
							tlwcSelectDialog.setModel(e);
							// tlwcSelectDialog.setGrowingThreshold(h.results.length);
							tlwcSelectDialog.bindAggregation("items", "/results", I);
						} else {
							tlwcSelectDialog.setNoDataText(g.getView().getModel("i18n").getProperty("NO_DATA"));
						}
					}
				});
			} else {
				var template = new sap.m.ColumnListItem({
					type: "Active",
					unread: false,
					cells: [
						new sap.m.Text({
							text: "{Verwe}"
						}),
						new sap.m.Text({
							text: "{Werks}"
						}),
						new sap.m.Text({
							text: "{Arbpl}"
						}),
						new sap.m.Text({
							text: "{Ktext}"
						}),
						new sap.m.Text({
							text: "{Spras}"
						})
					]
				});

				var e = new sap.ui.model.json.JSONModel();
				e.setData(tlwcSearchResults);
				tlwcSelectDialog.setModel(e);
				tlwcSelectDialog.setGrowingThreshold(tlwcSearchResults.results.length);
				tlwcSelectDialog.bindAggregation("items", "/results", template);
				var I = tlwcSelectDialog.getItems();
				for (var i = 0; i < I.length; i++) {
					I[i].setVisible(true);
				}
			}
			tlwcSelectDialog.open();
		},
		/*
		 * To validate the Work center plan
		 */
		WCPPCheck: function () {
			var g = this;
			var q;
			var M = this.getView().getModel();
			if (this.action.indexOf("GTL") > -1) {
				var GTLHeaderModel = g.getView().getModel("GTLHeaderModel");
				var gtlData = GTLHeaderModel.getData();
				q = "/WorkcentrePlantValSet(Werks='" + gtlData[0][g.sindex].Iwerk + "',Tarbpl='" + gtlData[0][g.sindex].wc + "',Wcplant='" +
					gtlData[0][g.sindex].plant + "')";
			} else if (this.action.indexOf("ETL") > -1) {
				var ETLHeaderModel = g.getView().getModel("ETLHeaderModel");
				var etlData = ETLHeaderModel.getData();
				q = "/WorkcentrePlantValSet(Werks='" + etlData[0][g.sindex].Iwerk + "',Tarbpl='" + etlData[0][g.sindex].wc + "',Wcplant='" +
					etlData[0][g.sindex].plant + "')";
			} else if (this.action.indexOf("FTL") > -1) {
				var FTLHeaderModel = g.getView().getModel("FTLHeaderModel");
				var ftlData = FTLHeaderModel.getData();
				q = "/WorkcentrePlantValSet(Werks='" + ftlData[0][g.sindex].Iwerk + "',Tarbpl='" + ftlData[0][g.sindex].wc + "',Wcplant='" +
					ftlData[0][g.sindex].plant + "')";
			}
			M.read(q, {
				success: function (h) {
					if (g.action.indexOf("GTL") > -1) {
						gtlData[0][g.sindex].wcValueState = "None";
						GTLHeaderModel.setData(gtlData);
						GTLHeaderModel.refresh();
					} else if (g.action.indexOf("ETL") > -1) {
						etlData[0][g.sindex].wcValueState = "None";
						ETLHeaderModel.setData(etlData);
						ETLHeaderModel.refresh();
					} else if (g.action.indexOf("FTL") > -1) {
						ftlData[0][g.sindex].wcValueState = "None";
						FTLHeaderModel.setData(ftlData);
						FTLHeaderModel.refresh();
					}
				},
				error: function (err) {
					var error = [];
					if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
						.errordetails
						.length === 0) {
						error[0] = JSON.parse(err.responseText).error.message.value;
					} else {
						for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
							error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
						}
					}

					var oMessageList = [];
					for (var e = 0; e < error.length; e++) {
						oMessageList.push({
							type: "Error",
							title: error[e]
						});
					}

					g.createMessagePopover(oMessageList, false);

					// var value = error.join("\n");
					// sap.m.MessageBox.show(value, {
					// 	title: "Error",
					// 	icon: sap.m.MessageBox.Icon.ERROR,
					// 	onClose: function () {

					// 	}
					// });

					if (g.action.indexOf("GTL") > -1) {
						gtlData[0][g.sindex].wcValueState = "Error";
						GTLHeaderModel.setData(gtlData);
						GTLHeaderModel.refresh();
					} else if (g.action.indexOf("ETL") > -1) {
						etlData[0][g.sindex].wcValueState = "Error";
						ETLHeaderModel.setData(etlData);
						ETLHeaderModel.refresh();
					} else if (g.action.indexOf("FTL") > -1) {
						ftlData[0][g.sindex].wcValueState = "Error";
						FTLHeaderModel.setData(ftlData);
						FTLHeaderModel.refresh();
					}
				}
			});
		},
		/*
		 * To handle main view's Icon tab select
		 * @param {sap.ui.base.Event} oEvent
		 */
		handleTabSelect: function (oEvent) {
			var g = this;
			var key = oEvent.getParameter("key");

			var selectedItem = oEvent.getParameter("item").getKey();
			var selectedSubItem = oEvent.getParameter("item").getAggregation("content");
			/*var itemProperties = selectedSubItem[0].mProperties;
			if (itemProperties.hasOwnProperty("selectedKey")) {
				var selectedSubItemKey = selectedSubItem[0].getSelectedKey();
			}*/
			var selectedSubItemKey = "";
			var g = this;
			var key = oEvent.getParameter("key");

			var selectedItem = oEvent.getParameter("item").getKey();
			var selectedSubItem = oEvent.getParameter("item").getAggregation("content");
			/*var itemProperties = selectedSubItem[0].mProperties;
			if (itemProperties.hasOwnProperty("selectedKey")) {
				var selectedSubItemKey = selectedSubItem[0].getSelectedKey();
			}*/
			var selectedSubItemKey = "";
			if (this.mode === "display") {
				switch (selectedItem) {
				case "WCTab":
					this.readApprovalData("WCTab");
					break;
				case "TLTab":
					var TLFragmentId = this.getView().createId("tlMain");
					if (this.CountObj.GTLCount > 0) {
						this.readApprovalData("GTLTab");
					}
					if (this.CountObj.ETLCount > 0) {
						this.readApprovalData("EqTLTab");
					}
					if (this.CountObj.FTLCount > 0) {
						this.readApprovalData("FLOCTLTab");
					}

					var TLKey = sap.ui.core.Fragment.byId(TLFragmentId, "_iconTabBarTL").getSelectedKey();
					if (TLKey && !selectedSubItemKey) {
						selectedSubItemKey = selectedSubItem[0].getSelectedKey();
					}
					if (selectedSubItemKey === "GTLTab") {
						this.action = "ApproveGTL";
					} else if (selectedSubItemKey === "EqTLTab") {
						this.action = "ApproveETL";
					} else if (selectedSubItemKey === "FLOCTLTab") {
						this.action = "ApproveFTL";
					}
					break;
				case "OLTab":
					this.readApprovalData("OLTab");
					break;
				}
			} else {
				switch (selectedItem) {
				case "WCTab":
					this.action = "createWC";
					break;
				case "TLTab":
					selectedSubItemKey = selectedSubItem[0].getSelectedKey();
					if (selectedSubItemKey === "GTLTab") {
						this.action = "createGTL";
					} else if (selectedSubItemKey === "EqTLTab") {
						this.action = "createETL";
					} else if (selectedSubItemKey === "FLOCTLTab") {
						this.action = "createFTL";
					}
					break;
				case "OLTab":
					this.action = "createOL";
					this.readObjCat();
					this.readLinkCat();
					break;
				}
			}

			if (key === "BOM" && this.mode === "display") {
				if (this.CountObj.mbomCount > 0) {
					this.readApprovalData("MBOMTab");
				}
				if (this.CountObj.ebomCount > 0) {
					this.readApprovalData("EBOMTab");
				}
				if (this.CountObj.flbomCount > 0) {
					this.readApprovalData("FLBOMTab");
				}
				if (this.CountObj.wbsbomCount > 0) {
					this.readApprovalData("WBSBOMTab");
				}
			}
			//handle REQUEST scenario - BOM
			if (key.indexOf("BOM") > -1 && this.mode === "request") {
				var BomFragmentId = this.getView().createId("bomMain");
				key = sap.ui.core.Fragment.byId(BomFragmentId, "_iconTabBarBom").getSelectedKey();
				if (key === "MBOMTab") {
					this.action = "createMbom";
				}
				if (key === "EBOMTab") {
					this.action = "createEbom";
				}
				if (key === "FLBOMTab") {
					this.action = "createFlbom";
				}
				if (key === "WBSBOMTab") {
					this.action = "createWbsbom";
				}

				this.getBomUsageItemStatusFlags();
			}

			if (key === "ON") {
				// var M = this.getView().getModel("valueHelp");
				// var objTypModel = new JSONModel([]);
				// var objTypModel2 = g.getView().getModel("objTypModel"); //06.08
				// if (objTypModel2 === undefined || objTypModel2.getData().length < 1) { //06.08
				// 	M.read("/NWobjtypeSet", {
				// 		success: function(r) {
				// 			var arr = [{
				// 				Net_to_type: "",
				// 				nwtyp_txt: ""
				// 			}];
				// 			for (var i = 0; i < r.results.length; i++) {
				// 				arr.push(r.results[i]);
				// 			}
				// 			objTypModel.setData(arr);
				// 			g.getView().setModel(objTypModel, "objTypModel");
				// 		},
				// 		error: function(err) {}
				// 	});
				// }

				this.action = "createOn";

				if (this.CountObj && this.CountObj.onCount > 0 && this.mode === "display") {
					this.readApprovalData("ON");
				}
			}

			if (key === "FLOCTab") {
				if (this.getMode() === "display") {
					this.readApprovalData(key);
				}
			}
			if (key === "EQUITab") {
				if (this.getMode() === "display") {
					this.readApprovalData(key);
				}
			}
			if (key === "MSPTTab") {
				if (this.getMode() === "display") {
					this.readApprovalData(key);
				}
			}
			if (key === "MPMITab") {
				if (this.getMode() === "display") {
					this.readApprovalData(key);
				}
				this.readMaintPlanCat();
			}
			if (key === "onDraft") {
				var user = sap.ushell.Container.getService("userInfo").getId();
				this.getView().byId("idUser").setText(user);

			}
		},
		/*
		 * To read approval data of EQ, FL, MSPT & MPMI
		 * @param {string} sSelectedTab
		 */
		readFirstApprovalData: function (sSelectedTab) {
			var g = this;
			var sPath = "/ChangeRequestSet";
			var oModel = g.getView().getModel("ApprovalModel");
			var oExpand, oFilters = [new Filter("ChangeRequestId", "EQ", g.cReqNo)];
			var sObject = {};

			if (sSelectedTab === "FLOCTab") {
				var AIWFLOCModel = sap.ui.getCore().getModel(g.oModelAIWFLOC).getData();
				if (AIWFLOCModel.length > 0) {
					return;
				}
				oExpand = ["FLAddr", "FLClass", "FLEmail", "FLFax", "FLLAM", "FLLAMCH", "FLMltxt", "FLPermit", "FLPrtnr", "FLTele", "FLUrl",
					"FLVal", "FuncLoc", "CrAttachments", "Notes"
				];
			}
			if (sSelectedTab === "EQUITab") {
				var AIWEQUIModel = sap.ui.getCore().getModel(g.oModelAIWEQUI).getData();
				if (AIWEQUIModel.length > 0) {
					return;
				}
				oExpand = ["EqClass", "EqAddr", "EqEmail", "EqFax", "EqMltxt", "EqPermt", "Equipment", "EqLAM", "EqLAMCH", "EqPRT", "EqPRTNR",
					"EqStock", "EqTel", "EqUrl", "EqVal", "CrAttachments", "Notes"
				];
			}
			if (sSelectedTab === "MSPTTab") {
				var AIWMSPTModel = sap.ui.getCore().getModel(g.oModelAIWMSPT).getData();
				if (AIWMSPTModel.length > 0) {
					return;
				}
				oExpand = ["MSClass", "MSLAM", "MSPoint", "MSVal", "CrAttachments", "Notes"];
			}
			if (sSelectedTab === "MPMITab") {
				var AIWMPMIModel = sap.ui.getCore().getModel(g.oModelAIWMPMI).getData();
				if (AIWMPMIModel.length > 0) {
					return;
				}
				oExpand = ["MPCycle", "MPItem", "MPLAM", "MPLAN", "MPOBList", "CrAttachments", "Notes"];
			}

			var urlParameters = {
				"$expand": oExpand
			};

			var oMainModel = g.getView().getModel("mainView");
			var oMainData = oMainModel.getData();
			oMainData.tableBusy = true;
			oMainModel.setData(oMainData);

			var fnSuccess = function (data) {
				var results = data.results[0];
				var pApproveObject = {};

				if (results) {
					g.ChangeRequestType = results.ChangeRequestType;
					g.CreatedBy = results.CreatedBy;
					g.ChangedAt = results.ChangedAt;
					g.CrDescription = results.CrDescription;

					if (sSelectedTab === "FLOCTab") {
						if (results.FuncLoc) {
							var sFunctionalLoc = results.FuncLoc.results;
							if (sFunctionalLoc) {
								for (var a = 0; a < sFunctionalLoc.length; a++) {
									pApproveObject = {
										classItems: [],
										characteristics: [],
										emailAddress: [],
										urlAddress: [],
										telephoneData: [],
										faxData: []
									};
									sObject = {
										Partners: [], // Partners
										Permits: [], // Permit
										attachmentCount: "0", // Attachment Count
										Guids: "", // Attachment
										TplnrEnabled: true,
										MaintplantEnabled: false,
										BukrsEnabled: false
									};
									sObject.Functionallocation = sFunctionalLoc[a].Functionallocation;
									sObject.Flocdescription = sFunctionalLoc[a].Pltxt; // Floc Description
									sObject.EditMask = sFunctionalLoc[a].EditMask;
									sObject.Hierarchy = sFunctionalLoc[a].Hierarchy;
									sObject.Floccategory = sFunctionalLoc[a].Fltyp;
									sObject.FlocCategoryDesc = sFunctionalLoc[a].Flttx;
									sObject.Strucindicator = sFunctionalLoc[a].TplkzFlc;
									sObject.StrucIndicatorDesc = sFunctionalLoc[a].Tplxt;
									sObject.Lvorm = sFunctionalLoc[a].Lvorm;
									sObject.Deact = sFunctionalLoc[a].Deact;
									sObject.Trpnr = sFunctionalLoc[a].Trpnr;
									sObject.Refflocdesc = sFunctionalLoc[a].Refflocdesc;
									sObject.SupFunctionallocation = sFunctionalLoc[a].Tplma; // Sup FuncLoc
									sObject.SupFlocdescription = sFunctionalLoc[a].Supflocdesc; // Sup FlocDescription
									sObject.Stattext = sFunctionalLoc[a].Stattext; // System Status
									sObject.UstaEqui = sFunctionalLoc[a].UstaFloc; // User Status
									sObject.StsmEqui = sFunctionalLoc[a].StsmEqui; // Status Profile
									sObject.StsmEquiDesc = sFunctionalLoc[a].Statproftxt; // Status Profile Description
									sObject.UstwEqui = sFunctionalLoc[a].UstwFloc; // Status with Status Number
									sObject.UswoEqui = sFunctionalLoc[a].UswoFloc; // Status without Status Number
									sObject.TechnicalObjectTyp = sFunctionalLoc[a].Eqart; // TechnicalObjectTyp
									sObject.Description = sFunctionalLoc[a].Eartx; // TechnicalObjectTyp Description
									sObject.Begru = sFunctionalLoc[a].Begru;
									sObject.Begtx = sFunctionalLoc[a].Begtx;
									sObject.Brgew = sFunctionalLoc[a].Brgew;
									sObject.Gewei = sFunctionalLoc[a].Gewei;
									sObject.Invnr = sFunctionalLoc[a].Invnr;
									sObject.Groes = sFunctionalLoc[a].Groes;
									sObject.Inbdt = sFunctionalLoc[a].Inbdt;
									sObject.Answt = sFunctionalLoc[a].Answt;
									sObject.Waers = sFunctionalLoc[a].Waers;
									sObject.Ansdt = sFunctionalLoc[a].Ansdt;
									sObject.Herst = sFunctionalLoc[a].Herst;
									sObject.Typbz = sFunctionalLoc[a].Typbz;
									sObject.Mapar = sFunctionalLoc[a].Mapar;
									sObject.Serge = sFunctionalLoc[a].Serge;
									sObject.Herld = sFunctionalLoc[a].Herld;
									sObject.Baujj = sFunctionalLoc[a].Baujj;
									sObject.Baumm = sFunctionalLoc[a].Baumm;
									sObject.MonthName = sFunctionalLoc[a].MonthName;
									sObject.Maintplant = sFunctionalLoc[a].Swerk;
									sObject.MaintplantDesc = sFunctionalLoc[a].Plantname;
									sObject.Location = sFunctionalLoc[a].StorFloc; // Location
									sObject.Locationdesc = sFunctionalLoc[a].Locationdesc; // Location Description
									sObject.Msgrp = sFunctionalLoc[a].Msgrp;
									sObject.BeberFl = sFunctionalLoc[a].BeberFl; // Plant Section
									sObject.Fing = sFunctionalLoc[a].Fing; // Person responsible
									sObject.Tele = sFunctionalLoc[a].Tele; // Phone
									sObject.Arbpl = sFunctionalLoc[a].Arbplfloc; // Work Center
									sObject.Ktext = sFunctionalLoc[a].MainWcDesc; // Work Center Description
									sObject.WcWerks = sFunctionalLoc[a].MainWcPlant; // Work center Plant
									sObject.Eqfnr = sFunctionalLoc[a].Eqfnr;
									sObject.Abckz = sFunctionalLoc[a].Abckzfloc;
									sObject.Abctx = sFunctionalLoc[a].Abctx;
									sObject.Bukrs = sFunctionalLoc[a].Bukrsfloc;
									sObject.Butxt = sFunctionalLoc[a].Butxt;
									sObject.City = sFunctionalLoc[a].City;
									sObject.GsbeFloc = sFunctionalLoc[a].GsbeFloc;
									sObject.Gtext = sFunctionalLoc[a].Gtext;
									sObject.Anln1Fl = sFunctionalLoc[a].Anln1Fl;
									sObject.AnlaFl = sFunctionalLoc[a].AnlaFl;
									sObject.Txt50 = sFunctionalLoc[a].Txt50;
									sObject.Kostl = sFunctionalLoc[a].KostFloc; // Cost Center
									sObject.Kokrs = sFunctionalLoc[a].KokrFloc; // ccPart1
									sObject.Mctxt = sFunctionalLoc[a].Contareaname; // Name
									sObject.Posid = sFunctionalLoc[a].Posid;
									sObject.Post1 = sFunctionalLoc[a].Post1;
									sObject.DaufFloc = sFunctionalLoc[a].DaufFloc;
									sObject.Standorderdesc = sFunctionalLoc[a].Standorderdesc;
									sObject.AufnFloc = sFunctionalLoc[a].AufnFloc;
									sObject.SettleOrdDesc = sFunctionalLoc[a].SettleOrdDesc;
									sObject.Werks = sFunctionalLoc[a].PlntFloc; // Planning Plant
									sObject.Planningplantdes = sFunctionalLoc[a].Planningplantdes; // Planning Plant Description
									sObject.Ingrp = sFunctionalLoc[a].Ingrp; // Planner Group
									sObject.Innam = sFunctionalLoc[a].Plannergrpdesc; // Planner Group Description
									sObject.MainArbpl = sFunctionalLoc[a].Gewrkfloc; // Main Work Center
									sObject.MainKtext = sFunctionalLoc[a].Wergwfloc; // Plant Work Center
									sObject.MainWerks = sFunctionalLoc[a].Workcenterdesc; // Name
									sObject.RbnrFloc = sFunctionalLoc[a].RbnrFloc;
									sObject.Rbnrx = sFunctionalLoc[a].Rbnrx;
									sObject.Tplma = sFunctionalLoc[a].Tplma;
									sObject.Supflocdesc = sFunctionalLoc[a].Supflocdesc;
									sObject.Posnr = sFunctionalLoc[a].Posnr;
									sObject.Trpnr = sFunctionalLoc[a].Trpnr;
									sObject.Refflocdesc = sFunctionalLoc[a].Refflocdesc;
									sObject.Iequi = sFunctionalLoc[a].Iequi;
									sObject.Einzl = sFunctionalLoc[a].Einzl;
									sObject.ConstrType = sFunctionalLoc[a].Submtiflo; // Construction Type
									sObject.ConstructionDesc = sFunctionalLoc[a].Constdesc; // Construction Description
									sObject.CgwldtFl = sFunctionalLoc[a].CgwldtFl;
									sObject.CgwlenFl = sFunctionalLoc[a].CgwlenFl;
									sObject.CmganrFl = sFunctionalLoc[a].CmganrFl;
									sObject.CwagetFl = sFunctionalLoc[a].CwagetFl;
									sObject.CgaerbFl = sFunctionalLoc[a].CgaerbFl;
									sObject.VgwldtFl = sFunctionalLoc[a].VgwldtFl;
									sObject.VgwlenFl = sFunctionalLoc[a].VgwlenFl;
									sObject.VmganrFl = sFunctionalLoc[a].VmganrFl;
									sObject.VwagetFl = sFunctionalLoc[a].VwagetFl;
									sObject.VgaerbFl = sFunctionalLoc[a].VgaerbFl;
									sObject.Vkorg = sFunctionalLoc[a].Vkorg;
									sObject.Vkorgtxt = sFunctionalLoc[a].Vkorgtxt;
									sObject.Vtweg = sFunctionalLoc[a].Vtweg;
									sObject.Vtwegtxt = sFunctionalLoc[a].Vtwegtxt;
									sObject.Spart = sFunctionalLoc[a].Spart;
									sObject.Sparttxt = sFunctionalLoc[a].Sparttxt;
									sObject.Vkbur = sFunctionalLoc[a].Vkbur;
									sObject.Vkburtxt = sFunctionalLoc[a].Vkburtxt;
									sObject.Vkgrp = sFunctionalLoc[a].Vkgrp;
									sObject.Vkgrptxt = sFunctionalLoc[a].Vkgrptxt;

									if (results.FLClass) {
										var sClassFloc = results.FLClass.results;
										if (sClassFloc) {
											if (sClassFloc.length > 0) {
												for (var b = 0; b < sClassFloc.length; b++) {
													if (sObject.Tplnr === sClassFloc[b].Funcloc) {
														sClassFloc[b].ctEnable = false;
														sClassFloc[b].classEnable = false;
														sClassFloc[b].ClassTypeDesc = sClassFloc[b].Artxt;
														delete sClassFloc[b].Artxt;
														sClassFloc[b].ClassDesc = sClassFloc[b].Kltxt;
														delete sClassFloc[b].Kltxt;
														delete sClassFloc[b].Changerequestid;
														delete sClassFloc[b].Clint;
														delete sClassFloc[b].Service;
														pApproveObject.classItems.push(sClassFloc[b]);
													}
												}
											}
										}
									}

									if (results.FLVal) {
										var sCharFLOC = results.FLVal.results;
										if (sCharFLOC) {
											if (sCharFLOC.length > 0) {
												for (var c = 0; c < sCharFLOC.length; c++) {
													if (sObject.Tplnr === sCharFLOC[c].Funcloc) {
														sCharFLOC[c].cNameEnable = false;
														sCharFLOC[c].Textbz = sCharFLOC[c].Atwtb;
														delete sCharFLOC[c].Ataut;
														delete sCharFLOC[c].Ataw1;
														delete sCharFLOC[c].Atawe;
														delete sCharFLOC[c].Atcod;
														delete sCharFLOC[c].Atflb;
														delete sCharFLOC[c].Atflv;
														delete sCharFLOC[c].Atimb;
														delete sCharFLOC[c].Atsrt;
														delete sCharFLOC[c].Atvglart;
														delete sCharFLOC[c].Atzis;
														delete sCharFLOC[c].Changerequestid;
														delete sCharFLOC[c].CharName;
														delete sCharFLOC[c].Charid;
														delete sCharFLOC[c].Classtype;
														delete sCharFLOC[c].Service;
														delete sCharFLOC[c].Valcnt;
														sCharFLOC[c].slNo = c + 1; // ()
														sCharFLOC[c].flag = sCharFLOC[c].Class + "-" + sCharFLOC[c].slNo; // ()
														pApproveObject.characteristics.push(sCharFLOC[c]);
													}
												}
											}
										}
									}

									if (results.FLPrtnr) {
										var sPartnerObj = {};
										var sPartnerData = results.FLPrtnr.results;
										if (sPartnerData) {
											if (sPartnerData.length > 0) {
												for (var d = 0; d < sPartnerData.length; d++) {
													if (sObject.Tplnr === sPartnerData[d].Funcloc) {
														sPartnerObj.Partnerfn = sPartnerData[d].Partnerfn;
														sPartnerObj.Partner = sPartnerData[d].Partner;
														sPartnerObj.Namedisp = sPartnerData[d].Namedisp;
														sPartnerObj.Addressfl = sPartnerData[d].Addressfl;
														sPartnerObj.Address = sPartnerData[d].Address;
														sPartnerObj.Partnrfuntxt = sPartnerData[d].Partnrfuntxt;
														sObject.Partners.push(sPartnerObj);
													}
												}
											}
										}
									}

									if (results.FLPermit) {
										var sPermitObj = {};
										var sPermitData = results.FLPermit.results;
										if (sPermitData) {
											if (sPermitData.length > 0) {
												for (var e = 0; e < sPermitData.length; e++) {
													if (sObject.Tplnr === sPermitData[e].Funcloc) {
														sPermitObj.Permit = sPermitData[e].Permit;
														sPermitObj.Permittxt = sPermitData[e].Permittxt;
														sPermitObj.Permitcat = sPermitData[e].Permitcat;
														sPermitObj.Ordercomp = sPermitData[e].Ordercomp;
														sPermitObj.Orderrel = sPermitData[e].Orderrel;
														sPermitObj.Printper = sPermitData[e].Printper;
														sPermitObj.Proposper = sPermitData[e].Proposper;
														sPermitObj.Ltxtper = sPermitData[e].Ltxtper;
														sPermitObj.Chbltyper = sPermitData[e].Chbltyper;
														sObject.Permits.push(sPermitObj);
													}
												}
												sObject.PermitLt = sPermitData.PermitLt;
											}
										}
									}

									if (data.FLAddr) {
										if (data.FLAddr.results) {
											var sAddressFloc = data.FLAddr.results;
											if (sAddressFloc) {
												if (sAddressFloc.length > 0) {
													for (var f = 0; f < sAddressFloc.length; f++) {
														if (sObject.Tplnr === sAddressFloc[f].Funcloc) {
															pApproveObject.Title = sAddressFloc[f].Title;
															pApproveObject.Name1 = sAddressFloc[f].Name1;
															pApproveObject.Name2 = sAddressFloc[f].Name2;
															pApproveObject.Name3 = sAddressFloc[f].Name3;
															pApproveObject.Name4 = sAddressFloc[f].Name4;
															pApproveObject.Sort1 = sAddressFloc[f].Sort1; // searchTerm1
															pApproveObject.Sort2 = sAddressFloc[f].Sort2; // searchTerm2
															pApproveObject.NameCo = sAddressFloc[f].NameCo; // Company&nbsp;
															pApproveObject.Building = sAddressFloc[f].Building;
															pApproveObject.Floor = sAddressFloc[f].Floor;
															pApproveObject.Roomnum = sAddressFloc[f].Roomnum;
															pApproveObject.Street = sAddressFloc[f].Street;
															pApproveObject.HouseNr1 = sAddressFloc[f].HouseNr1;
															pApproveObject.HouseNr2 = sAddressFloc[f].HouseNr2;
															pApproveObject.Strsuppl1 = sAddressFloc[f].Strsuppl1;
															pApproveObject.Strsuppl2 = sAddressFloc[f].Strsuppl2;
															pApproveObject.Strsuppl3 = sAddressFloc[f].Strsuppl3;
															pApproveObject.Location = sAddressFloc[f].Location;
															pApproveObject.District = sAddressFloc[f].District;
															pApproveObject.PostCod1 = sAddressFloc[f].PostCod1;
															pApproveObject.City1 = sAddressFloc[f].City1; // City
															pApproveObject.RefPosta = sAddressFloc[f].RefPosta;
															pApproveObject.Landx = sAddressFloc[f].Landx;
															pApproveObject.RfePost = sAddressFloc[f].RfePost;
															pApproveObject.Regiotxt = sAddressFloc[f].Regiotxt;
															pApproveObject.HomeCity = sAddressFloc[f].HomeCity;
															pApproveObject.TimeZone = sAddressFloc[f].TimeZone;
															pApproveObject.Taxjurcod = sAddressFloc[f].Taxjurcod;
															pApproveObject.Regiogrou = sAddressFloc[f].Regiogrou;
															pApproveObject.RfePostl = sAddressFloc[f].RfePostl;
															pApproveObject.Dontusestxt = sAddressFloc[f].Dontusestxt;
															pApproveObject.PoBox = sAddressFloc[f].PoBox;
															pApproveObject.PoboxNum = sAddressFloc[f].PoboxNum;
															pApproveObject.DlvsrvTy = sAddressFloc[f].DlvsrvTy;
															pApproveObject.DlvsrvNr = sAddressFloc[f].DlvsrvNr;
															pApproveObject.PostCod2 = sAddressFloc[f].PostCod2;
															pApproveObject.PoboxLoc = sAddressFloc[f].PoboxLoc;
															pApproveObject.PoboxLby = sAddressFloc[f].PoboxLby;
															pApproveObject.PoboxCty = sAddressFloc[f].PoboxCty;
															pApproveObject.RfePstal = sAddressFloc[f].RfePstal;
															pApproveObject.Dontuseptxt = sAddressFloc[f].Dontuseptxt;
															pApproveObject.PostCod3 = sAddressFloc[f].PostCod3;
															pApproveObject.Remark = sAddressFloc[f].Remark;
														}
													}
												}
											}
										}
									}

									if (data.FLEmail) {
										if (data.FLEmail.results) {
											var sEmailObj = {};
											var sEmailData = data.FLEmail.results;
											if (sEmailData) {
												if (sEmailData.length > 0) {
													for (var h = 0; h < sEmailData.length; h++) {
														if (sObject.Tplnr === sEmailData[h].Funcloc) {
															sEmailObj.EAddress = sEmailData[h].EAddress;
															sEmailObj.EFlgdeft = sEmailData[h].EFlgdeft;
															sEmailObj.EFlgnous = sEmailData[h].EFlgnous;
															pApproveObject.emailAddress.push(sEmailObj);
														}
													}
												}
											}
										}
									}

									if (data.FLUrl) {
										if (data.FLUrl.results) {
											var sUrlObj = {};
											var sUrlData = data.FLUrl.results;
											if (sUrlData) {
												if (sUrlData.length > 0) {
													for (var l = 0; l < sUrlData.length; l++) {
														if (sObject.Tplnr === sUrlData[l].Funcloc) {
															sUrlObj.Uritypetxt = sUrlData[l].Uritypetxt;
															sUrlObj.UAddress = sUrlData[l].UAddress;
															sUrlObj.UFlgdeft = sUrlData[l].UFlgdeft;
															sUrlObj.UFlgnous = sUrlData[l].UFlgnous;
															pApproveObject.urlAddress.push(sUrlObj);
														}
													}
												}
											}
										}
									}

									if (data.FLTele) {
										if (data.FLTele.results) {
											var sTelObj = {};
											var sTelData = data.FLTele.results;
											if (sTelData) {
												if (sTelData.length > 0) {
													for (var m = 0; m < sTelData.length; m++) {
														if (sObject.Tplnr === sTelData[m].Funcloc) {
															sTelObj.Teltype = sTelData[m].Teltype;
															sTelObj.TCountry = sTelData[m].TCountry;
															sTelObj.Telefto = sTelData[m].Telefto;
															sTelObj.TNumber = sTelData[m].TNumber;
															sTelObj.TExtens = sTelData[m].TExtens;
															sTelObj.TFlgsms = sTelData[m].TFlgsms;
															sTelObj.TFlgdeft = sTelData[m].TFlgdeft;
															sTelObj.TFlgnous = sTelData[m].TFlgnous;
															pApproveObject.telephoneData.push(sTelObj);
														}
													}
												}
											}
										}
									}

									if (data.FLFax) {
										if (data.FLFax.results) {
											var sFaxObj = {};
											var sFaxData = data.FLFax.results;
											if (sFaxData) {
												if (sFaxData.length > 0) {
													for (var n = 0; n < sFaxData.length; n++) {
														if (sObject.Tplnr === sFaxData[n].Funcloc) {
															sFaxObj.FCountry = sFaxData[n].FCountry;
															sFaxObj.Telefto = sFaxData[n].Telefto;
															sFaxObj.FNumber = sFaxData[n].FNumber;
															sFaxObj.FExtens = sFaxData[n].FExtens;
															sFaxObj.FFlgdeft = sFaxData[n].FFlgdeft;
															sFaxObj.FFlgnous = sFaxData[n].FFlgnous;
															pApproveObject.faxData.push(sFaxObj);
														}
													}
												}
											}
										}
									}

									g.setCommonApprovalData(pApproveObject, true);
									g.handleCreatePress(g, sObject, g.oModelAIWFLOC);
								}
							}
						}
					}

					if (sSelectedTab === "EQUITab") {
						if (results.Equipment) {
							var sEquipment = results.Equipment.results;
							if (sEquipment) {
								for (var o = 0; o < sEquipment.length; o++) {
									pApproveObject = {
										classItems: [],
										characteristics: [],
										emailAddress: [],
										urlAddress: [],
										telephoneData: [],
										faxData: []
									};
									sObject = {
										PRTInfo: {},
										DFPS: {},
										Stock: {},
										Partners: [], // Partners
										Permits: [], // Permit
										attachmentCount: "0", // Attachment Count
										Guids: "", // Attachment
										ConstrTypeMaxLL: 0,
										charValueMaxL: 0,
										BukrsEnabled: false,
										TplnrEnabled: false
									};

									sObject.Equnr = sEquipment[o].Equnr;
									sObject.Eqktx = sEquipment[o].Txtmi;
									// sObject.Eqktx = sEquipment[o].Eqktx;
									sObject.EquipmentCatogory = sEquipment[o].Eqtyp;
									sObject.EquipCatgDescription = sEquipment[o].Etytx;
									sObject.ValidFrom = sEquipment[o].ValidFrom;
									sObject.DatbEeqz = sEquipment[o].DatbEeqz;
									sObject.LvormEqi = sEquipment[o].LvormEqi;
									sObject.Deact = sEquipment[o].Deact;
									sObject.Stattext = sEquipment[o].Stattext; // System Status
									sObject.UstaEqui = sEquipment[o].UstaEqui; // User Status
									sObject.StsmEqui = sEquipment[o].StsmEqui; // Status Profile
									sObject.StsmEquiDesc = sEquipment[o].Statproftxt; // Status Profile Description
									sObject.UstwEqui = sEquipment[o].UstwEqui; // Status with Status Number
									sObject.UswoEqui = sEquipment[o].UswoEqui; // Status without Status Number
									sObject.TechnicalObjectTyp = sEquipment[o].Eqart; // TechnicalObjectTyp
									sObject.Description = sEquipment[o].Eartx; // TechnicalObjectTyp Description
									sObject.AuthorizGroup = sEquipment[o].AuthorizGroup;
									sObject.Begtx = sEquipment[o].Begtx;
									sObject.GrossWt = sEquipment[o].GrossWt;
									sObject.Gewei = sEquipment[o].Gewei;
									sObject.Invnr = sEquipment[o].Invnr;
									sObject.GroesEqu = sEquipment[o].GroesEqu;
									sObject.Inbdt = sEquipment[o].Inbdt;
									sObject.Answt = sEquipment[o].Answt;
									sObject.Waers = sEquipment[o].Waers; // Currency
									sObject.Ansdt = sEquipment[o].Ansdt;
									sObject.Herst = sEquipment[o].Herst; // Manufacturer
									sObject.Typbz = sEquipment[o].Typbz; // Model Number
									sObject.MapaEeqz = sEquipment[o].MapaEeqz; // partNum
									sObject.Serge = sEquipment[o].Serge; // manfSerNo
									sObject.Herld = sEquipment[o].Herld;
									sObject.CountryName = sEquipment[o].CountryName;
									sObject.ConstructYear = sEquipment[o].ConstructYear;
									sObject.ConstructMth = sEquipment[o].ConstructMth;
									sObject.MonthName = sEquipment[o].MonthName;
									sObject.Maintplant = sEquipment[o].Swerk;
									sObject.MaintplantDesc = sEquipment[o].Name1;
									sObject.Location = sEquipment[o].Location; // Location
									sObject.Locationdesc = sEquipment[o].Locationdesc; // Location Description
									sObject.MsgrEilo = sEquipment[o].MsgrEilo;
									sObject.Abckz = sEquipment[o].Abckzi;
									sObject.Abctx = sEquipment[o].Abctx;
									sObject.BeberFl = sEquipment[o].BebeEilo; // Plant Section
									sObject.Fing = sEquipment[o].Fing; // Plant Section
									sObject.Tele = sEquipment[o].Tele; // Plant Section
									sObject.Arbpl = sEquipment[o].ArbpEilo; // Work Center
									sObject.Ktext = sEquipment[o].MainWcDesc; // Work Center Description
									sObject.WcWerks = sEquipment[o].MainWcPlant; // Work center Plant
									sObject.EqfnEilo = sEquipment[o].EqfnEilo;
									sObject.Bukrs = sEquipment[o].Bukrs;
									sObject.Butxt = sEquipment[o].Butxt;
									sObject.GsbeEilo = sEquipment[o].GsbeEilo;
									sObject.Gtext = sEquipment[o].Gtext;
									sObject.Anl1Eilo = sEquipment[o].Anl1Eilo;
									sObject.Anl2Eilo = sEquipment[o].Anl2Eilo;
									sObject.AssesmentDesc = sEquipment[o].AssesmentDesc;
									sObject.Kostl = sEquipment[o].KostEilo; // Cost Center
									sObject.Kokrs = sEquipment[o].KokrEilo; // ccPart1
									sObject.Mctxt = sEquipment[o].Contareaname; // Name
									sObject.Posid = sEquipment[o].Posid;
									sObject.Post1 = sEquipment[o].Post1;
									sObject.DaufEilo = sEquipment[o].DaufEilo;
									sObject.Standorderdesc = sEquipment[o].Standorderdesc;
									sObject.Settlement = sEquipment[o].Settlement;
									sObject.SettleOrdDesc = sEquipment[o].SettleOrdDesc;
									sObject.Werks = sEquipment[o].PplaEeqz; // Planning Plant
									sObject.Planningplantdes = sEquipment[o].Planningplantdes; // Planning Plant Description
									sObject.Ingrp = sEquipment[o].IngrEeqz; // Planner Group
									sObject.Innam = sEquipment[o].Plannergrpdesc; // Planner Group Description
									sObject.MainArbpl = sEquipment[o].ArbpEeqz; // Main Work Center
									sObject.MainKtext = sEquipment[o].WorkCenterPlant; // Plant Work Center
									sObject.MainWerks = sEquipment[o].Workcenterdesc; // Name
									sObject.RbnrEeqz = sEquipment[o].RbnrEeqz;
									sObject.CatalogProfDesc = sEquipment[o].CatalogProfDesc;
									sObject.SuperordinateEquip = sEquipment[o].HequEeqz; // Superord. Equipment
									sObject.SuperordinateEquipDesc = sEquipment[o].SuperordEqDes; // Superord. Equipment Description
									sObject.EquipPosition = sEquipment[o].HeqnEeqz; // Position

									sObject.TechIdNum = sEquipment[o].TidnEeqz; // techIndNo
									sObject.ConstrType = sEquipment[o].SubmEeqz; // Construction Type
									sObject.ConstructionDesc = sEquipment[o].Constdesc; // Construction Description

									if (sEquipment[o].Eqtyp !== "P") {
										sObject.Tplnr = sEquipment[o].TplnEilo; // Functional Location
										sObject.Pltxt = sEquipment[o].Flocdescription; // Functional Location Description
									} else {
										sObject.Tplnr = "";
										sObject.Pltxt = "";
									}

									// Serialization Data
									sObject.MatEqu = sEquipment[o].MatEqu;
									sObject.Materialdesc = sEquipment[o].Materialdesc;
									sObject.Sernr = sEquipment[o].Sernr;
									sObject.Lsernr = sEquipment[o].Lsernr;

									// Configuration Data
									sObject.Kmatn = sEquipment[o].Kmatn;

									// Sales and Distribution
									sObject.Vkorg = sEquipment[o].Vkorg;
									sObject.Vkorgtxt = sEquipment[o].Vkorgtxt;
									sObject.Vtweg = sEquipment[o].Vtweg;
									sObject.Vtwegtxt = sEquipment[o].Vtwegtxt;
									sObject.Spart = sEquipment[o].Spart;
									sObject.Sparttxt = sEquipment[o].Sparttxt;
									sObject.Vkbur = sEquipment[o].Vkbur;
									sObject.Vkburtxt = sEquipment[o].Vkburtxt;
									sObject.Vkgrp = sEquipment[o].Vkgrp;
									sObject.Vkgrptxt = sEquipment[o].Vkgrptxt;

									// Customer Warranty
									sObject.CgwldtEq = sEquipment[o].CgwldtEq;
									sObject.CgwlenEq = sEquipment[o].CgwlenEq;
									sObject.CmganrEq = sEquipment[o].CmganrEq;
									sObject.CwagetEq = sEquipment[o].CwagetEq;
									sObject.CgaerbEq = sEquipment[o].CgaerbEq;

									// Vendor/Manufacturer Warranty
									sObject.VgwldtEq = sEquipment[o].VgwldtEq;
									sObject.VgwlenEq = sEquipment[o].VgwlenEq;
									sObject.VmganrEq = sEquipment[o].VmganrEq;
									sObject.VwagetEq = sEquipment[o].VwagetEq;
									sObject.VgaerbEq = sEquipment[o].VgaerbEq;

									// Customer Vendor Information
									sObject.EliefEqi = sEquipment[o].EliefEqi;
									sObject.Kun1Eeqz = sEquipment[o].Kun1Eeqz;
									sObject.Pstlz1 = sEquipment[o].Pstlz1;
									sObject.City1 = sEquipment[o].City1;
									sObject.Kun2Eeqz = sEquipment[o].Kun2Eeqz;
									sObject.Pstlz2 = sEquipment[o].Pstlz2;
									sObject.City2 = sEquipment[o].City2;
									sObject.Kun3Eeqz = sEquipment[o].Kun3Eeqz;
									sObject.Pstlz3 = sEquipment[o].Pstlz3;
									sObject.City3 = sEquipment[o].City3;
									sObject.AuldtEqi = sEquipment[o].AuldtEqi;

									if (results.EqClass) {
										var sClassEqui = results.EqClass.results;
										if (sClassEqui) {
											if (sClassEqui.length > 0) {
												for (var p = 0; p < sClassEqui.length; p++) {
													if (sObject.Equnr === sClassEqui[p].Equi) {
														sClassEqui[p].ctEnable = false;
														sClassEqui[p].classEnable = false;
														sClassEqui[p].ClassTypeDesc = sClassEqui[p].Artxt;
														delete sClassEqui[p].Artxt;
														sClassEqui[p].ClassDesc = sClassEqui[p].Kltxt;
														delete sClassEqui[p].Kltxt;
														delete sClassEqui[p].Changerequestid;
														delete sClassEqui[p].Clint;
														delete sClassEqui[p].Service;
														pApproveObject.classItems.push(sClassEqui[p]);
													}
												}
											}
										}
									}

									if (results.EqVal) {
										var sCharEQUI = results.EqVal.results;
										if (sCharEQUI) {
											if (sCharEQUI.length > 0) {
												for (var q = 0; q < sCharEQUI.length; q++) {
													if (sObject.Equnr === sCharEQUI[q].Equi) {
														sCharEQUI[q].cNameEnable = false;
														sCharEQUI[q].Textbz = sCharEQUI[q].Atwtb;
														delete sCharEQUI[q].Ataut;
														delete sCharEQUI[q].Ataw1;
														delete sCharEQUI[q].Atawe;
														delete sCharEQUI[q].Atcod;
														delete sCharEQUI[q].Atflb;
														delete sCharEQUI[q].Atflv;
														delete sCharEQUI[q].Atimb;
														delete sCharEQUI[q].Atsrt;
														delete sCharEQUI[q].Atvglart;
														delete sCharEQUI[q].Atzis;
														delete sCharEQUI[q].Changerequestid;
														delete sCharEQUI[q].CharName;
														delete sCharEQUI[q].Charid;
														delete sCharEQUI[q].Classtype;
														delete sCharEQUI[q].Service;
														delete sCharEQUI[q].Valcnt;
														sCharEQUI[q].slNo = c + 1; // ()
														sCharEQUI[q].flag = sCharEQUI[q].Class + "-" + sCharEQUI[q].slNo; // ()
														pApproveObject.characteristics.push(sCharEQUI[q]);
													}
												}
											}
										}
									}

									if (results.EqPRTNR) {
										var sPartnerEqObj = {};
										var sPartnerEqData = results.EqPRTNR.results;
										if (sPartnerEqData) {
											if (sPartnerEqData.length > 0) {
												for (var r = 0; r < sPartnerEqData.length; r++) {
													if (sObject.Equnr === sPartnerEqData[r].Equi) {
														var sPartnerEqObj = {};
														sPartnerEqObj.Partnrfun = sPartnerEqData[r].Partnrfun;
														sPartnerEqObj.Partnereq = sPartnerEqData[r].Partnereq;
														sPartnerEqObj.NameList = sPartnerEqData[r].NameList;
														sPartnerEqObj.Aadind = sPartnerEqData[r].Aadind;
														sPartnerEqObj.Address = sPartnerEqData[r].Address;
														sPartnerEqObj.Partnrfuntxt = sPartnerEqData[r].Partnrfuntxt;
														sObject.Partners.push(sPartnerEqObj);
													}
												}
											}
										}
									}

									if (results.EqPermt) {
										var sPermitEqObj = {};
										var sPermitEqData = results.EqPermt.results;
										if (sPermitEqData) {
											if (sPermitEqData.length > 0) {
												for (var s = 0; s < sPermitEqData.length; s++) {
													if (sObject.Equnr === sPermitEqData[s].Equi) {
														sPermitEqObj.Countereq = sPermitEqData[s].Countereq;
														sPermitEqObj.Pmsog = sPermitEqData[s].Pmsog;
														sPermitEqObj.KAa = sPermitEqData[s].KAa;
														sPermitEqObj.KDruck = sPermitEqData[s].KDruck;
														sPermitEqObj.KPro = sPermitEqData[s].KPro;
														sObject.Permits.push(sPermitEqObj);
													}
												}
												sObject.PmtLtext = sPermitEqData[0].PmtLtext;
											}
										}
									}

									if (results.EqPRT) {
										if (results.EqPRT.results) {
											var sPrtData = results.EqPRT.results;
											if (sPrtData) {
												if (sPrtData.length > 0) {
													for (var t = 0; t < sPrtData.length; t++) {
														if (sObject.Equnr === sPrtData[t].Equi) {
															sObject.PRTInfo.PlanvPrt = sPrtData[t].PlanvPrt;
															sObject.PRTInfo.Fgru1 = sPrtData[t].Fgru1;
															sObject.PRTInfo.Fgru2 = sPrtData[t].Fgru2;
															sObject.PRTInfo.Kzkbl = sPrtData[t].Kzkbl;
															sObject.PRTInfo.SteufPrt = sPrtData[t].SteufPrt;
															sObject.PRTInfo.SteufRef = sPrtData[t].SteufRef;
															sObject.PRTInfo.KtschPrt = sPrtData[t].KtschPrt;
															sObject.PRTInfo.Ktschref = sPrtData[t].Ktschref;
															sObject.PRTInfo.Ewformprt = sPrtData[t].Ewformprt;
															sObject.PRTInfo.Ewformref = sPrtData[t].Ewformref;
															sObject.PRTInfo.Bzoffbprt = sPrtData[t].Bzoffbprt;
															sObject.PRTInfo.Bzoffbref = sPrtData[t].Bzoffbref;
															sObject.PRTInfo.Offstb = sPrtData[t].Offstb;
															sObject.PRTInfo.Ehoffbprt = sPrtData[t].Ehoffbprt;
															sObject.PRTInfo.Offstbref = sPrtData[t].Offstbref;
															sObject.PRTInfo.Bzoffeprt = sPrtData[t].Bzoffeprt;
															sObject.PRTInfo.Offsteref = sPrtData[t].Offsteref;
															sObject.PRTInfo.Offste = sPrtData[t].Offste;
															sObject.PRTInfo.Ehoffeprt = sPrtData[t].Ehoffeprt;
															sObject.PRTInfo.Offsteref = sPrtData[t].Offsteref;
															sObject.PRTInfo.Warpl = sPrtData[t].Warpl;
															sObject.PRTInfo.PointEq = sPrtData[t].PointEq;
														}
													}
												}
											}
										}
									}

									if (results.EqStock) {
										if (results.EqStock.results) {
											var sStock = results.EqStock.results[0];
											if (sStock) {
												if (sStock.length > 0) {
													for (var u = 0; u < sStock.length; u++) {
														if (sObject.Equnr === sStock[u].Equi) {
															sObject.Stock.Equilbbsa = sStock[u].Equilbbsa;
															sObject.Stock.BWerk = sStock[u].BWerk;
															sObject.Stock.BukrrsSk = sStock[u].BukrrsSk;
															sObject.Stock.Sloc2equi = sStock[u].Sloc2equi;
															sObject.Stock.Chrg2stk = sStock[u].Chrg2stk;
															sObject.Stock.Sobk2stk = sStock[u].Sobk2stk;
															sObject.Stock.Datlwb = formatter.getDateFormat(sStock[u].Datlwb);
															sObject.Stock.Kunnr = sStock[u].Kunnr;
															sObject.Stock.LifnrStc = sStock[u].LifnrStc;
															sObject.Stock.Kdauf = sStock[u].Kdauf;
															sObject.Stock.Kdpos = sStock[u].Kdpos;
															sObject.Stock.PsPspPn = sStock[u].PsPspPn;
														}
													}
												}
											}
										}
									}

									if (data.EqAddr) {
										if (data.EqAddr.results) {
											var sAddressEqui = data.EqAddr.results;
											if (sAddressEqui) {
												if (sAddressEqui.length > 0) {
													for (var v = 0; v < sAddressEqui.length; v++) {
														if (sObject.Equnr === sAddressEqui[v].Equi) {
															pApproveObject.Title = sAddressEqui[v].Title;
															pApproveObject.Name1 = sAddressEqui[v].Name1;
															pApproveObject.Name2 = sAddressEqui[v].Name2;
															pApproveObject.Name3 = sAddressEqui[v].Name3;
															pApproveObject.Name4 = sAddressEqui[v].Name4;
															pApproveObject.Sort1 = sAddressEqui[v].Sort1; // searchTerm1
															pApproveObject.Sort2 = sAddressEqui[v].Sort2; // searchTerm2
															pApproveObject.NameCo = sAddressEqui[v].NameCo; // Company&nbsp;
															pApproveObject.Building = sAddressEqui[v].Building;
															pApproveObject.Floor = sAddressEqui[v].Floor;
															pApproveObject.Roomnum = sAddressEqui[v].Roomnum;
															pApproveObject.Street = sAddressEqui[v].Street;
															pApproveObject.HouseNr1 = sAddressEqui[v].HouseNr1;
															pApproveObject.HouseNr2 = sAddressEqui[v].HouseNr2;
															pApproveObject.Strsuppl1 = sAddressEqui[v].Strsuppl1;
															pApproveObject.Strsuppl2 = sAddressEqui[v].Strsuppl2;
															pApproveObject.Strsuppl3 = sAddressEqui[v].Strsuppl3;
															pApproveObject.Location = sAddressEqui[v].Location;
															pApproveObject.District = sAddressEqui[v].District;
															pApproveObject.PostCod1 = sAddressEqui[v].PostCod1;
															pApproveObject.City1 = sAddressEqui[v].City1; // City
															pApproveObject.RefPosta = sAddressEqui[v].RefPosta;
															pApproveObject.Landx = sAddressEqui[v].Landx;
															pApproveObject.RfePost = sAddressEqui[v].RfePost;
															pApproveObject.Regiotxt = sAddressEqui[v].Regiotxt;
															pApproveObject.HomeCity = sAddressEqui[v].HomeCity;
															pApproveObject.TimeZone = sAddressEqui[v].TimeZone;
															pApproveObject.Taxjurcod = sAddressEqui[v].Taxjurcod;
															pApproveObject.Regiogrou = sAddressEqui[v].Regiogrou;
															pApproveObject.RfePostl = sAddressEqui[v].RfePostl;
															pApproveObject.Dontusestxt = sAddressEqui[v].Dontusestxt;
															pApproveObject.PoBox = sAddressEqui[v].PoBox;
															pApproveObject.PoboxNum = sAddressEqui[v].PoboxNum;
															pApproveObject.DlvsrvTy = sAddressEqui[v].DlvsrvTy;
															pApproveObject.DlvsrvNr = sAddressEqui[v].DlvsrvNr;
															pApproveObject.PostCod2 = sAddressEqui[v].PostCod2;
															pApproveObject.PoboxLoc = sAddressEqui[v].PoboxLoc;
															pApproveObject.PoboxLby = sAddressEqui[v].PoboxLby;
															pApproveObject.PoboxCty = sAddressEqui[v].PoboxCty;
															pApproveObject.RfePstal = sAddressEqui[v].RfePstal;
															pApproveObject.Dontuseptxt = sAddressEqui[v].Dontuseptxt;
															pApproveObject.PostCod3 = sAddressEqui[v].PostCod3;
															pApproveObject.Remark = sAddressEqui[v].Remark;
														}
													}
												}
											}
										}
									}

									if (data.EqEmail) {
										if (data.EqEmail.results) {
											var sEmailEqObj = {};
											var sEmailEqData = data.EqEmail.results;
											if (sEmailEqData) {
												if (sEmailEqData.length > 0) {
													for (var w = 0; w < sEmailEqData.length; w++) {
														if (sObject.Equnr === sEmailEqData[w].Equi) {
															sEmailEqObj.EAddress = sEmailEqData[w].EAddress;
															sEmailEqObj.EFlgdeft = sEmailEqData[w].EFlgdeft;
															sEmailEqObj.EFlgnous = sEmailEqData[w].EFlgnous;
															pApproveObject.emailAddress.push(sEmailEqObj);
														}
													}
												}
											}
										}
									}

									if (data.EqUrl) {
										if (data.EqUrl.results) {
											var sUrlEqObj = {};
											var sUrlEqData = data.EqUrl.results;
											if (sUrlEqData) {
												if (sUrlEqData.length > 0) {
													for (var x = 0; x < sUrlEqData.length; x++) {
														if (sObject.Equnr === sUrlEqData[x].Equi) {
															sUrlEqObj.Uritypetxt = sUrlEqData[x].Uritypetxt;
															sUrlEqObj.UAddress = sUrlEqData[x].UAddress;
															sUrlEqObj.UFlgdeft = sUrlEqData[x].UFlgdeft;
															sUrlEqObj.UFlgnous = sUrlEqData[x].UFlgnous;
															pApproveObject.urlAddress.push(sUrlEqObj);
														}
													}
												}
											}
										}
									}

									if (data.EqTel) {
										if (data.EqTel.results) {
											var sTelEqObj = {};
											var sTelEqData = data.EqTel.results;
											if (sTelEqData) {
												if (sTelEqData.length > 0) {
													for (var y = 0; y < sTelEqData.length; y++) {
														if (sObject.Equnr === sTelEqData[y].Equi) {
															sTelEqObj.Teltype = sTelData[y].Teltype;
															sTelEqObj.TCountry = sTelEqData[y].TCountry;
															sTelEqObj.Telefto = sTelEqData[y].Telefto;
															sTelEqObj.TNumber = sTelEqData[y].TNumber;
															sTelEqObj.TExtens = sTelEqData[y].TExtens;
															sTelEqObj.TFlgsms = sTelEqData[y].TFlgsms;
															sTelEqObj.TFlgdeft = sTelEqData[y].TFlgdeft;
															sTelEqObj.TFlgnous = sTelEqData[y].TFlgnous;
															pApproveObject.telephoneData.push(sTelEqObj);
														}
													}
												}
											}
										}
									}

									if (data.EqFax) {
										if (data.EqFax.results) {
											var sFaxEqObj = {};
											var sFaxEqData = data.EqFax.results;
											if (sFaxEqData) {
												if (sFaxEqData.length > 0) {
													for (var z = 0; z < sFaxEqData.length; z++) {
														if (sFaxEqObj.Equnr === sFaxEqData[z].Equi) {
															sFaxEqObj.FCountry = sFaxEqData[z].FCountry;
															sFaxEqObj.Telefto = sFaxEqData[z].Telefto;
															sFaxEqObj.FNumber = sFaxEqData[z].FNumber;
															sFaxEqObj.FExtens = sFaxEqData[z].FExtens;
															sFaxEqObj.FFlgdeft = sFaxEqData[z].FFlgdeft;
															sFaxEqObj.FFlgnous = sFaxEqData[z].FFlgnous;
															pApproveObject.faxData.push(sFaxEqObj);
														}
													}
												}
											}
										}
									}

									g.setCommonApprovalData(pApproveObject, true);
									g.handleCreatePress(g, sObject, g.oModelAIWEQUI);
								}
							}
						}
					}

					if (sSelectedTab === "MSPTTab") {
						if (results.MSPoint) {
							var sMsPoint = results.MSPoint.results;
							if (sMsPoint) {
								for (var i = 0; i < sMsPoint.length; i++) {
									pApproveObject = {
										classItems: [],
										characteristics: []
									};
									sObject = {
										attachmentCount: "0", // Attachment Count
										Guids: "", // Attachment
										EqunrEnabled: false,
										TplnrEnabled: false,
										countEnable: true,
										tEnable: false,
										valCodeStuffSel: false
									};
									sObject.Mspoint = sMsPoint[i].Point;
									sObject.Psort = sMsPoint[i].Psort;
									sObject.Pttxt = sMsPoint[i].Pttxt;
									sObject.ObtypMs = sMsPoint[i].ObtypMs;
									sObject.Txt = sMsPoint[i].Objtypetxt;
									sObject.Equnr = sMsPoint[i].Equnr;
									sObject.Eqktx = sMsPoint[i].Eqktx;
									sObject.Tplnr = sMsPoint[i].Tplnr;
									sObject.Pltxt = sMsPoint[i].Floctxt;
									sObject.Mptyp = sMsPoint[i].Mptyp;
									sObject.Mpttx = sMsPoint[i].Mpttx;
									sObject.Inact = sMsPoint[i].Inact;
									sObject.AtnamMs = sMsPoint[i].AtnamMs;
									sObject.Atbez = sMsPoint[i].Atbez;
									sObject.Mseh6 = sMsPoint[i].Mseh6;
									sObject.Msehl = sMsPoint[i].Msehl;
									sObject.Decim = sMsPoint[i].Decim.toString();
									sObject.Codgr = sMsPoint[i].Codgr;
									sObject.Codgrtxt = sMsPoint[i].Codgrtxt;
									sObject.Locas = sMsPoint[i].Locas;
									sObject.Maktx = sMsPoint[i].Maktx;
									sObject.Begru = sMsPoint[i].Begru;
									sObject.Begtx = sMsPoint[i].Begtx;
									sObject.Indct = sMsPoint[i].Indct;
									sObject.Expon = sMsPoint[i].Expon;
									sObject.Cdsuf = sMsPoint[i].Cdsuf;
									sObject.Cjumc = sMsPoint[i].Cjumc;
									sObject.Pyeac = sMsPoint[i].Pyeac;
									sObject.Desir = sMsPoint[i].Desir;
									sObject.Mrngu = sMsPoint[i].Mrngu;
									sObject.Dstxt = sMsPoint[i].Dstxt;
									sObject.Indrv = sMsPoint[i].Indrv;
									sObject.Mrmax = sMsPoint[i].Mrmax;
									sObject.Mrmin = sMsPoint[i].Mrmin;

									if (sMsPoint[i].Equnr !== "") {
										sObject.EqunrLblVis = true;
										sObject.EqunrInpVis = true;
										sObject.EqktxInpVis = true;
										sObject.TplnrLblVis = false;
										sObject.TplnrInpVis = false;
										sObject.PltxtInpVis = false;
									} else {
										sObject.EqunrLblVis = false;
										sObject.EqunrInpVis = false;
										sObject.EqktxInpVis = false;
										sObject.TplnrLblVis = true;
										sObject.TplnrInpVis = true;
										sObject.PltxtInpVis = true;
									}

									if (results.MSClass) {
										var sClassList = results.MSClass.results;
										if (sClassList) {
											if (sClassList.length > 0) {
												for (var j = 0; j < sClassList.length; j++) {
													if (sObject.Mspoint === sClassList[j].Mspoint) {
														sClassList[j].ctEnable = false;
														sClassList[j].classEnable = false;
														sClassList[j].ClassTypeDesc = sClassList[j].Artxt;
														delete sClassList[j].Artxt;
														sClassList[j].ClassDesc = sClassList[j].Kltxt;
														delete sClassList[j].Kltxt;
														delete sClassList[j].Changerequestid;
														delete sClassList[j].Clint;
														delete sClassList[j].Service;
														pApproveObject.classItems.push(sClassList[j]);
													}
												}
											}
										}
									}

									if (results.MSVal) {
										var sCharList = results.MSVal.results;
										if (sCharList) {
											if (sCharList.length > 0) {
												for (var k = 0; k < sCharList.length; k++) {
													if (sObject.Mspoint === sCharList[k].Mspoint) {
														sCharList[k].cNameEnable = false;
														sCharList[k].Textbz = sCharList[k].Atwtb;
														delete sCharList[k].Ataut;
														delete sCharList[k].Ataw1;
														delete sCharList[k].Atawe;
														delete sCharList[k].Atcod;
														delete sCharList[k].Atflb;
														delete sCharList[k].Atflv;
														delete sCharList[k].Atimb;
														delete sCharList[k].Atsrt;
														delete sCharList[k].Atvglart;
														delete sCharList[k].Atzis;
														delete sCharList[k].Changerequestid;
														delete sCharList[k].CharName;
														delete sCharList[k].Charid;
														delete sCharList[k].Classtype;
														delete sCharList[k].Service;
														delete sCharList[k].Valcnt;
														sCharList[k].slNo = k + 1; // ()
														sCharList[k].flag = sCharList[k].Class + "-" + sCharList[k].slNo; // ()
														pApproveObject.characteristics.push(sCharList[k]);
													}
												}
											}
										}
									}

									g.setCommonApprovalData(pApproveObject);
									g.handleCreatePress(g, sObject, g.oModelAIWMSPT);
								}
							}
						}
					}

					if (sSelectedTab === "MPMITab") {
						if (results.MPLAN) {
							var sMaintenance = results.MPLAN.results;
							if (sMaintenance) {
								for (var i = 0; i < sMaintenance.length; i++) {
									sObject = {
										// MPMIpmentsDetail
										attachmentCount: "0", // Attachment Count
										Guids: "", // Attachment
										cycleModel: [],
										itemModel: [],
										cycleIndSingle: false, // RBSC
										cycleIndStrategy: false, // RBST
										cycleIndMultCntr: false, // RBMC

										// Fields Enability
										ScheIndRbTimeEnabled: false,
										ScheIndRbTimeKeyDateEnabled: false,
										ScheIndRbTimeFactCalEnabled: false,
										ScheIndRbPerformanceEnabled: false,
										MptypEnabled: false,
										cycleIndSingleEnabled: false,
										cycleIndStrategyEnabled: false,
										cycleIndMultCntrEnabled: false,
										FabklLBLReq: false,
										ButtonNewCycleEnabled: false,
										FabklEnabled: false,

										// Label Visibility
										OPText: false,
										OPTitle: false,
										OPLBL: false,
										MpcyclenoLBL: false,
										FabklLBL: true,
										AbrhoLBL: true,
										MehrfachLBL: false, // Multiple counter Label
										ScheIndText: true,
										ScheIndTitle: true,
										ScheIndLBL: true,
										StratLBL: false,
										StratDescLBL: false,
										WsetLBL: false,
										SzaehLBL: false,
										StadtLBL: true,

										// Fields Visibility
										cycleSetSeqColVis: false,
										OROPVis: false,
										AndOPvis: false,
										ScheIndRbTimeVis: true,
										ScheIndRbTimeKeyDateVis: true,
										ScheIndRbTimeFactCalVis: true,
										ScheIndRbPerformanceVis: true,
										MpcyclenoVis: false,
										HunitVis: true,
										AbrhoVis: true,
										MehrfachVis: false,
										StratVis: false, // Strategy Visibility
										StratDescVis: false,
										WsetVis: false,
										KtextVis: false,
										SzaehVis: false,
										UnitcVis: false,
										StadtVis: true,

										MaintenanceCycleMode: "None"
									};

									if (sMaintenance[i].Stich !== "" || sMaintenance[i].Stich === undefined) {
										sObject.Stich = parseInt(sMaintenance[i].Stich);
									}
									sObject.Warpl = sMaintenance[i].Warpl;
									sObject.Wptxt = sMaintenance[i].Txtmi;
									sObject.Mptyp = sMaintenance[i].Mptyp;
									sObject.Strat = sMaintenance[i].Strat;
									sObject.StratDesc = sMaintenance[i].StratDesc;
									sObject.Puffp = sMaintenance[i].Puffp;

									if (sMaintenance[i].Mehrfach === "X" || sMaintenance[i].Stich === "4") {
										sObject.cycleSetSeqColVis = true;
										sObject.CycleSetSeqVis = true;
										sObject.ScheIndText = false;
										sObject.ScheIndTitle = false;
										sObject.ScheIndLBL = false;
										sObject.AbrhoLBL = false;
										sObject.AbrhoVis = false;
										sObject.HunitVis = false;
										sObject.FabklLBL = false;
										sObject.FabklVis = false;
										sObject.FabklDescVis = false;
										sObject.Fabkl = "";
										sObject.FabklDesc = "";
										sObject.OPText = true;
										sObject.OPTitle = true;
										sObject.OPLBL = true;
										sObject.OROPVis = true;
										sObject.AndOPvis = true;
										sObject.WsetLBL = true;
										sObject.WsetVis = true;
										sObject.KtextVis = true;
										sObject.StratLBL = true;
										sObject.StratVis = true;
										sObject.StratDescVis = true;
										sObject.MehrfachLBL = true;
										sObject.MehrfachVis = true;
										sObject.Mehrfach = true;
										sObject.StadtLBL = true;
										sObject.StadtVis = true;
										sObject.Stadt = formatter.getDateFormat(sMaintenance[i].Startdate);
										sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_STDATE");
										sObject.SzaehLBL = false;
										sObject.SzaehVis = false;
										sObject.UnitcVis = false;
										sObject.Unitc = " ";
										sObject.MpcyclenoLBL = false;
										sObject.MpcyclenoVis = false;
										sObject.cycleIndMultCntr = true;
									} else if (sMaintenance[i].Strat === "" && (sMaintenance[i].Stich === "" || sMaintenance[i].Stich === "1" ||
											sMaintenance[
												i]
											.Stich ===
											"2")) {
										sObject.cycleSetSeqColVis = false;
										sObject.CycleSetSeqVis = false;
										sObject.ScheIndText = true;
										sObject.ScheIndTitle = true;
										sObject.ScheIndLBL = true;
										sObject.AbrhoLBL = true;
										sObject.AbrhoVis = true;
										sObject.HunitVis = true;
										sObject.FabklLBL = true;
										sObject.FabklVis = true;
										sObject.FabklDescVis = true;
										sObject.Fabkl = "";
										sObject.FabklDesc = "";
										sObject.StadtLBL = true;
										sObject.StadtVis = true;
										sObject.Stadt = formatter.getDateFormat(sMaintenance[i].Startdate);
										sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
										sObject.SzaehLBL = false;
										sObject.SzaehVis = false;
										sObject.UnitcVis = false;
										sObject.Unitc = " ";
										sObject.MpcyclenoLBL = false;
										sObject.MpcyclenoVis = false;
										sObject.cycleIndSingle = true;
									} else if (sMaintenance[i].Strat !== "" && sMaintenance[i].Stich === "3") {
										sObject.cycleSetSeqColVis = false;
										sObject.CycleSetSeqVis = false;
										sObject.ScheIndText = false;
										sObject.ScheIndTitle = false;
										sObject.ScheIndLBL = false;
										sObject.AbrhoLBL = false;
										sObject.AbrhoVis = false;
										sObject.HunitVis = false;
										sObject.FabklLBL = false;
										sObject.FabklVis = false;
										sObject.FabklDescVis = false;
										sObject.Fabkl = "";
										sObject.FabklDesc = "";
										sObject.StratLBL = true;
										sObject.StratVis = true;
										sObject.StratDescVis = true;
										sObject.Strat = sMaintenance[i].Strat;
										sObject.StadtLBL = false;
										sObject.StadtVis = false;
										sObject.Stadt = formatter.getDateFormat(sMaintenance[i].Startdate);
										sObject.SzaehLBL = true;
										sObject.SzaehVis = true;
										sObject.UnitcVis = true;
										sObject.MpcyclenoLBL = true;
										sObject.MpcyclenoVis = true;
										sObject.cycleIndStrateg = true;
										g.readScheduling(sMaintenance[i].Strat);
									} else if (sMaintenance[i].Strat.indexOf("TIME") > -1 && sMaintenance[i].Mehrfach === "" && sMaintenance[i].Stich !==
										"3") {
										sObject.ScheIndText = true;
										sObject.ScheIndTitle = true;
										sObject.ScheIndLBL = true;
										sObject.ScheIndRbTimeVis = true;
										sObject.ScheIndRbTimeKeyDateVis = true;
										sObject.ScheIndRbTimeFactCalVis = true;
										sObject.ScheIndRbPerformanceVis = true;
										sObject.AbrhoLBL = true;
										sObject.AbrhoVis = true;
										sObject.HunitVis = true;
										sObject.FabklLBL = true;
										sObject.FabklVis = true;
										sObject.FabklDescVis = true;
										sObject.Fabkl = "";
										sObject.FabklDesc = "";
										sObject.StratLBL = true;
										sObject.StratVis = true;
										sObject.StratDescVis = true;
										sObject.Strat = sMaintenance[i].Strat;
										sObject.StadtLBL = true;
										sObject.StadtVis = true;
										sObject.Stadt = formatter.getDateFormat(sMaintenance[i].Startdate);
										sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
										sObject.SzaehLBL = false;
										sObject.SzaehVis = false;
										sObject.UnitcVis = false;
										sObject.Unitc = sMaintenance[i].Unitc;
										sObject.MpcyclenoLBL = false;
										sObject.MpcyclenoVis = false;
										sObject.cycleIndStrateg = true;
										g.readScheduling(sMaintenance[i].Strat);
									} else if (sMaintenance[i].Strat === "" && sMaintenance[i].Stich === "3" && sMaintenance[i].Mehrfach === "") {
										sObject.ScheIndText = true;
										sObject.ScheIndTitle = true;
										sObject.ScheIndLBL = true;
										sObject.ScheIndRbTimeVis = true;
										sObject.ScheIndRbTimeKeyDateVis = true;
										sObject.ScheIndRbTimeFactCalVis = true;
										sObject.ScheIndRbPerformanceVis = true;
										sObject.AbrhoLBL = false;
										sObject.AbrhoVis = false;
										sObject.HunitVis = false;
										sObject.FabklLBL = true;
										sObject.FabklVis = true;
										sObject.FabklDescVis = true;
										sObject.Fabkl = "";
										sObject.FabklDesc = "";
										sObject.StratLBL = false;
										sObject.StratVis = false;
										sObject.StratDescVis = false;
										sObject.Strat = sMaintenance[i].Strat;
										sObject.StadtLBL = false;
										sObject.StadtVis = false;
										sObject.Stadt = formatter.getDateFormat(sMaintenance[i].Startdate);
										sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
										sObject.SzaehLBL = true;
										sObject.SzaehVis = true;
										sObject.UnitcVis = true;
										sObject.Unitc = " ";
										sObject.MpcyclenoLBL = true;
										sObject.MpcyclenoVis = true;
									}

									if (sMaintenance[i].Stich === "1") {
										sObject.ScheIndRbTimeKeyDate = true;
										sObject.Fabkl = sMaintenance[i].Fabkl;
										sObject.FabklDesc = sMaintenance[i].FabklDesc;
									} else if (sMaintenance[i].Stich === "2") {
										sObject.ScheIndRbTimeFactCal = true;
										sObject.Fabkl = sMaintenance[i].Fabkl;
										sObject.FabklDesc = sMaintenance[i].FabklDesc;
									} else if (sMaintenance[i].Stich === "3") {
										sObject.ScheIndRbPerformance = true;
									} else if (sMaintenance[i].Stich === "4") {
										sObject.ScheIndRbTime = true;
										sObject.Fabkl = sMaintenance[i].Fabkl;
										sObject.FabklDesc = sMaintenance[i].FabklDesc;
									}

									sObject.Wset = sMaintenance[i].Wset;
									sObject.Ktext = sMaintenance[i].Ktext;
									sObject.Sfakt = sMaintenance[i].Sfakt;
									sObject.Abrho = sMaintenance[i].Abrho;
									sObject.Hunit = sMaintenance[i].Hunit;
									sObject.StratDesc = sMaintenance[i].StratDesc;
									sObject.Szaeh = sMaintenance[i].Szaeh;
									sObject.Mpcycleno = sMaintenance[i].PointStp;
									sObject.Andor = sMaintenance[i].Andor;

									if (sMaintenance[i].PointStp !== "") {
										g.readCounterData(sMaintenance[i], sMaintenance[i].PointStp, "counterUnit");
									}
									if (sMaintenance[i].Andor === "X") {
										sObject.AndOP = true;
									} else {
										sObject.OROP = true;
									}

									sObject.Vspos = sMaintenance[i].Vspos;
									sObject.Topos = sMaintenance[i].Topos;
									sObject.Vsneg = sMaintenance[i].Vsneg;
									sObject.Toneg = sMaintenance[i].Toneg;
									sObject.Horiz = sMaintenance[i].Horiz;
									sObject.CallConf = sMaintenance[i].CallConf;
									sObject.PlanSort = sMaintenance[i].PlanSort;
									sObject.Begru = sMaintenance[i].Begru;

									if (results.MPCycle) {
										var sCycle = results.MPCycle.results;
										if (sCycle) {
											for (var c = 0; c < sCycle.length; c++) {
												if (sObject.Warpl === sCycle[c].Mplan) {
													sCycle[c].Psort = sCycle[c].PointTxt;
												}
											}
											sObject.cycleModel = sCycle;
										}
									}

									if (results.MPItem) {
										var items = results.MPItem.results;
										if (items) {
											var temp = [];
											for (var i = 0; i < items.length; i++) {
												if (sObject.Warpl === items[i].Mplan) {
													var obj = {};
													obj.Mitemnumb = items[i].Mitemnumb; // maint item&nbsp;
													obj.Pstxt = items[i].Pstxt; // maint item desc
													obj.Cycleseq = items[i].Cycleseq;
													obj.Tplnr = items[i].TplnrMi; // floc
													obj.Pltxt = items[i].Flocdesc; // floc desc
													obj.Equnr = items[i].Equnr; // equip
													obj.Eqktx = items[i].Equipdesc; // equip desc
													obj.AsmblyOb = items[i].Bautl; // assembly
													obj.Werks = items[i].PlntMi; // planning plant
													obj.Planningplantdes = items[i].Planningplantdes; // planning plant desc
													obj.Auart = items[i].Auart; // order type&nbsp;
													obj.oTypeTxt = items[i].Ordertypedesc; // order type desc
													obj.Qmart = items[i].Qmart; // notif type
													obj.nTypeTxt = items[i].Qmartx; // notif type desc
													obj.ArbpMi = items[i].ArbpMi; // main wc
													obj.WergwMi = items[i].WergwMi; // main wc desc
													obj.Ingrp = items[i].IngrpMi; // planner grp
													obj.Innam = items[i].Plannergrpdesc; // planner grp desc

													// Approve Fields
													obj.Zeieh = items[i].Zeieh;
													obj.Priok = items[i].Priok;
													obj.ItmPriotxt = items[i].GsberMi;
													obj.GsberMi = items[i].GsberMi;
													obj.Gtext = items[i].Gtext;
													obj.TaskDet = items[i].TaskDet;
													obj.Ilart = items[i].Ilart;
													obj.Ilatx = items[i].Ilatx;
													obj.PlntyMi = items[i].PlntyMi;
													obj.ApfktMi = items[i].ApfktMi;
													obj.PlnnrMi = items[i].PlnnrMi;
													obj.PlnalMi = items[i].PlnalMi;
													obj.Gpcounterdesc = items[i].Gpcounterdesc;
													obj.AnlzuMi = items[i].AnlzuMi;
													obj.Anlzux = items[i].Anlzux;
													obj.SwerkMil = items[i].SwerkMil;
													obj.Name1 = items[i].Name1;
													obj.StortMil = items[i].StortMil;
													obj.Locationdesc = items[i].Locationdesc;
													obj.MsgrpIl = items[i].MsgrpIl;
													obj.BeberMil = items[i].BeberMil;
													obj.Fing = items[i].Fing;
													obj.Tele = items[i].Tele;
													obj.ArbplIl = items[i].ArbplIl;
													obj.Workcenterdesc = items[i].Workcenterdesc;
													obj.AbckzIl = items[i].AbckzIl;
													obj.Abctx = items[i].Abctx;
													obj.EqfnrIl = items[i].EqfnrIl;
													obj.BukrsMil = items[i].BukrsMil;
													obj.Butxt = items[i].Butxt;
													obj.City = items[i].City;
													obj.Anln1Mil = items[i].Anln1Mil;
													obj.Anln2Mil = items[i].Anln2Mil;
													obj.Txt50 = items[i].Txt50;
													obj.GsberIl = items[i].GsberIl;
													obj.KostlMil = items[i].KostlMil;
													obj.Contareaname = items[i].Contareaname;
													obj.KokrsMil = items[i].KokrsMil;
													obj.Posid = items[i].Posid;
													obj.Post1 = items[i].Post1;
													obj.AufnrIl = items[i].AufnrIl;
													obj.SettleOrdDesc = items[i].SettleOrdDesc;

													obj.QmartLBL = true;
													obj.QmartVis = true;
													obj.nTypetxtVis = true;
													obj.AuartLBL = true;
													obj.AuartVis = true;
													obj.oTypeTxtVis = true;
													obj.CycleseqLBL = false;
													obj.CycleseqVis = false;

													obj.AsmblyObMaxLength = 0;
													obj.maintItemE = false;
													obj.cycleSetE = false;
													obj.TplnrEnabled = false;
													obj.equiE = false;
													obj.assemblyE = false;

													obj.CycleseqVS = "None";
													obj.CycleseqVST = "";
													obj.TplnrVS = "None";
													obj.TplnrVST = "";
													obj.EqunrVS = "None";
													obj.EqunrVST = "";
													obj.AsmblyObVS = "None";
													obj.AsmblyObVST = "";
													obj.WerksVS = "None";
													obj.WerksVST = "";
													obj.AuartVS = "None";
													obj.AuartVST = "";
													obj.QmartVS = "None";
													obj.QmartVST = "";
													obj.ArbpMiVS = "None";
													obj.ArbpMiVST = "";
													obj.WergwMiVS = "None";
													obj.WergwMiVST = "";
													obj.IngrpVS = "None";
													obj.IngrpVST = "";
													temp.push(obj);
												}
											}
											sObject.itemModel = temp;
										}
									}

									g.handleCreatePress(g, sObject, g.oModelAIWMPMI);
								}
							}
						}
					}
				}

				oMainData.tableBusy = false;
				oMainModel.setData(oMainData);
			};
			var fnError = function (err) {
				var error = [];
				oMainData.tableBusy = false;
				oMainModel.setData(oMainData);
				if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
					.errordetails
					.length === 0) {
					error[0] = JSON.parse(err.responseText).error.message.value;
				} else {
					for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
						error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
					}
				}
				var value = error.join("\n");
				g.invokeMessage(value);
			};
			g._readData(sPath, oModel, fnSuccess, fnError, oFilters, urlParameters);
		},
		/*
		 * To handle cancel button press of Copy BOM dialog 
		 */
		onCopyBOMclose: function () {
			this._copyFragment.close();
			if (this.action === "copyMbom") {
				this.action = "createMbom";
			} else if (this.action === "copyEbom" || this.action === "copyMtoEbom") {
				this.action = "createEbom";
			} else if (this.action === "copyFlbom" || this.action === "copyMtoFlbom") {
				this.action = "createFlbom";
			} else if (this.action === "copyWbsbom" || this.action === "copyMtoWbsbom") {
				this.action = "createWbsbom";
			}
		},
		/*
		 * To handle COPY button press of Copy BOM dialog 
		 */
		onCopyBOMpress: function () {
			var g = this;
			var M = this.getView().getModel();
			var copyFlag = true;
			var copyModel = this._copyFragment.getModel("copyModel");
			var copyData = copyModel.getData();
			if (this.action === "copyMbom") {
				if (copyData.copyMaterialSource === "") {
					copyFlag = false;
					copyData.srcMatValueState = "Error";
				}
				if (copyData.copyMaterialTarget === "") {
					copyFlag = false;
					copyData.tarMatValueState = "Error";
				}
				if (copyData.copyAltBomSource === "") {
					copyFlag = false;
					copyData.srcAltBomValueState = "Error";
				}
				if (copyData.copyAltBomTarget === "") {
					copyFlag = false;
					copyData.tarAltBomValueState = "Error";
				}
			}
			if (this.action === "copyEbom") {
				if (copyData.copyEquipmentSource === "") {
					copyFlag = false;
					copyData.srcEquiValueState = "Error";
				}
				if (copyData.copyEquipmentTarget === "") {
					copyFlag = false;
					copyData.tarEquiValueState = "Error";
				}
			}
			if (this.action === "copyMtoEbom") {
				if (copyData.copyMaterialSource === "") {
					copyFlag = false;
					copyData.srcMatValueState = "Error";
				}
				if (copyData.copyEquipmentTarget === "") {
					copyFlag = false;
					copyData.tarEquiValueState = "Error";
				}
				if (copyData.copyAltBomSource === "") {
					copyFlag = false;
					copyData.srcAltBomValueState = "Error";
				}
			}
			if (this.action === "copyFlbom") {
				if (copyData.copyFlocSource === "") {
					copyFlag = false;
					copyData.srcFlocValueState = "Error";
				}
				if (copyData.copyFlocTarget === "") {
					copyFlag = false;
					copyData.tarFlocValueState = "Error";
				}
			}
			if (this.action === "copyMtoFlbom") {
				if (copyData.copyMaterialSource === "") {
					copyFlag = false;
					copyData.srcMatValueState = "Error";
				}
				if (copyData.copyFlocTarget === "") {
					copyFlag = false;
					copyData.tarFlocValueState = "Error";
				}
				if (copyData.copyAltBomSource === "") {
					copyFlag = false;
					copyData.srcAltBomValueState = "Error";
				}
			}
			if (this.action === "copyWbsbom") {
				if (copyData.copyWBSSource === "") {
					copyFlag = false;
					copyData.srcWBSValueState = "Error";
				}
				if (copyData.copyMaterialSource === "") {
					copyFlag = false;
					copyData.srcMatValueState = "Error";
				}
				if (copyData.copyWBSTarget === "") {
					copyFlag = false;
					copyData.tarWBSValueState = "Error";
				}
				if (copyData.copyMaterialTarget === "") {
					copyFlag = false;
					copyData.tarMatValueState = "Error";
				}
			}
			if (this.action === "copyMtoWbsbom") {
				if (copyData.copyMaterialSource === "") {
					copyFlag = false;
					copyData.srcMatValueState = "Error";
				}
				if (copyData.copyWBSTarget === "") {
					copyFlag = false;
					copyData.tarWBSValueState = "Error";
				}
				if (copyData.copyMaterialTarget === "") {
					copyFlag = false;
					copyData.tarMatValueState = "Error";
				}
				if (copyData.copyAltBomSource === "") {
					copyFlag = false;
					copyData.srcAltBomValueState = "Error";
				}
			}
			if (copyData.copyPlantSource === "") {
				copyFlag = false;
				copyData.srcPlantValueState = "Error";
			}
			if (copyData.copyUsageSource === "") {
				copyFlag = false;
				copyData.srcUsageValueState = "Error";
			}
			if (copyData.copyPlantTarget === "") {
				copyFlag = false;
				copyData.tarPlantValueState = "Error";
			}
			if (copyData.copyUsageTarget === "") {
				copyFlag = false;
				copyData.tarUsageValueState = "Error";
			}

			if (!copyFlag) {
				copyModel.setData(copyData);
				return;
			}

			var updateItemStatus = function (Item, selUsgItemStatus) {
				var sArray = $.map(Item, function (obj) {
					return $.extend(true, {}, obj);
				});
				for (var y = 0; y < Item.length; y++) {
					sArray[y].Pmper = selUsgItemStatus.Pmper;
					sArray[y].Pmpka = selUsgItemStatus.Pmpka;
					sArray[y].Pmprv = selUsgItemStatus.Pmprv;
					sArray[y].Pmpfe = selUsgItemStatus.Pmpfe;
					sArray[y].Pmpin = selUsgItemStatus.Pmpin;
					sArray[y].Pmpko = selUsgItemStatus.Pmpko;

					if (sArray[y].Pmpfe === "+")
						sArray[y].Sanfe = true;
					else
						sArray[y].Sanfe = false;

					if (sArray[y].Pmpin === "+")
						sArray[y].Sanin = true;
					else
						sArray[y].Sanin = false;

					if (sArray[y].Pmpko === "+")
						sArray[y].Sanko = true;
					else
						sArray[y].Sanko = false;
				}
				return sArray;
			};

			var TargetExistInStagingFlag = false;
			var SourceExistInStagingFlag = false;
			var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");
			var AIWListMatData = AIWListMatModel.getData();
			var AIWListEqModel = sap.ui.getCore().getModel("AIWListEqModel");
			var AIWListEqData = AIWListEqModel.getData();
			var AIWListFLModel = sap.ui.getCore().getModel("AIWListFLModel");
			var AIWListFLData = AIWListFLModel.getData();
			var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
			var AIWListWBSData = AIWListWBSModel.getData();

			var selUsgItemStatus = {};
			var itemStatusModel = sap.ui.getCore().getModel("itemStatusModel");
			var itemStatusData = itemStatusModel.getData();
			for (var z = 0; z < itemStatusData.length; z++) {
				if (copyData.copyUsageTarget === itemStatusData[z].Stlan) {
					selUsgItemStatus = itemStatusData[z];
				}
			}

			if (this.action === "copyMbom") {
				if (AIWListMatData.length > 0) {
					for (var j = 0; j < AIWListMatData.length; j++) {
						if (AIWListMatData[j].Matnr === copyData.copyMaterialTarget && AIWListMatData[j].Werks === copyData.copyPlantTarget &&
							AIWListMatData[j].Stlan === copyData.copyUsageTarget && AIWListMatData[j].Stalt === copyData.copyAltBomTarget) {
							var msg = g.getResourceBundle().getText("matBomErr") + copyData.copyMaterialTarget + "/" + copyData.copyPlantTarget + "/" +
								copyData.copyUsageTarget + "/" + copyData.copyAltBomTarget + " " + g.getResourceBundle().getText("locked");
							sap.m.MessageToast.show(msg, {
								duration: 5000,
								animationDuration: 5000
							});
							TargetExistInStagingFlag = true;
							break;
						}
					}
				}
				if (!TargetExistInStagingFlag) {
					if (AIWListMatData.length > 0) {
						for (var j = 0; j < AIWListMatData.length; j++) {
							if (AIWListMatData[j].Matnr === copyData.copyMaterialSource && AIWListMatData[j].Werks === copyData.copyPlantSource &&
								AIWListMatData[j].Stlan === copyData.copyUsageSource && AIWListMatData[j].Stalt === copyData.copyAltBomSource) {
								SourceExistInStagingFlag = true;
								var mObj = {
									Matnr: copyData.copyMaterialTarget,
									Werks: copyData.copyPlantTarget,
									Stlan: copyData.copyUsageTarget,
									Stalt: copyData.copyAltBomTarget,
									Bomstatus: AIWListMatData[j].Bomstatus,
									Lngtxt: AIWListMatData[j].Lngtxt,
									Stktx: AIWListMatData[j].Stktx,
									Validfrom: g.getDateFormat(AIWListMatData[j].Validfrom),
									BaseQty: AIWListMatData[j].BaseQty,
									BaseUom: AIWListMatData[j].BaseUom,
									Validtoda: g.getDateFormat(AIWListMatData[j].Validtoda),

									MatDesc: copyData.copyMaterialTargetDesc,
									WerksDesc: copyData.copyPlantTargetDesc,
									StlanDesc: copyData.copyUsageTargetDesc,
									BomstatusText: AIWListMatData[j].BomstatusText,
									matEnable: false,
									plantEnable: false,
									usageEnable: false,
									altbomEnable: false,

									bomType: "Create",
									modeFlag: "Delete",

									matItem: AIWListMatData[j].matItem,
									matSubItem: AIWListMatData[j].matSubItem
								};

								mObj.matItem = updateItemStatus(mObj.matItem, selUsgItemStatus);

								AIWListMatData.push(mObj);
								AIWListMatModel.setData(AIWListMatData);
								g.getView().setModel(AIWListMatModel, "AIWListMatModel");
								g.updateCount("MaterialBom", AIWListMatModel.getData());
								g.onCopyBOMclose();
								break;
							}
						}
					}

					if (!SourceExistInStagingFlag) {
						this.checkMaterialConfigurability(copyData);
						//g.readCopyDetails(copyData.copyMaterialSource, copyData.copyPlantSource, copyData.copyUsageSource, copyData, "", "");
					}
				}
			}
			if (this.action === "copyEbom") {
				if (AIWListEqData.length > 0) {
					for (var j = 0; j < AIWListEqData.length; j++) {
						if (AIWListEqData[j].Eqnrbom === copyData.copyEquipmentTarget && AIWListEqData[j].Werks === copyData.copyPlantTarget &&
							AIWListEqData[j].Stlan === copyData.copyUsageTarget) {
							var msg = g.getResourceBundle().getText("equiBomErr") + copyData.copyEquipmentTarget + "/" + copyData.copyPlantTarget +
								"/" + copyData.copyUsageTarget + " " + g.getResourceBundle().getText("locked");
							sap.m.MessageToast.show(msg, {
								duration: 5000,
								animationDuration: 5000
							});
							TargetExistInStagingFlag = true;
							break;
						}
					}
				}
				if (!TargetExistInStagingFlag) {
					if (AIWListEqData.length > 0) {
						for (var j = 0; j < AIWListEqData.length; j++) {
							if (AIWListEqData[j].Eqnrbom === copyData.copyEquipmentSource && AIWListEqData[j].Werks === copyData.copyPlantSource &&
								AIWListEqData[j].Stlan === copyData.copyUsageSource) {
								SourceExistInStagingFlag = true;
								var eObj = {
									Eqnrbom: copyData.copyEquipmentTarget,
									Werks: copyData.copyPlantTarget,
									Stlan: copyData.copyUsageTarget,
									Bomstatus: AIWListEqData[j].Bomstatus,
									Lngtxt: AIWListEqData[j].Lngtxt,
									Validfrom: g.getDateFormat(AIWListEqData[j].Validfrom),
									BaseQty: AIWListEqData[j].BaseQty,
									BaseUom: AIWListEqData[j].BaseUom,
									Validtoda: g.getDateFormat(AIWListEqData[j].Validtoda),

									EquiDesc: copyData.copyEquipmentTargetDesc,
									WerksDesc: copyData.copyPlantTargetDesc,
									StlanDesc: copyData.copyUsageTargetDesc,
									BomstatusText: AIWListEqData[j].BomstatusText,
									equipEnable: false,
									plantEnable: false,
									usageEnable: false,

									bomType: "Create",
									modeFlag: "Delete",

									eqItem: AIWListEqData[j].eqItem,
									eqSubItem: AIWListEqData[j].eqSubItem
								};

								eObj.eqItem = updateItemStatus(eObj.eqItem, selUsgItemStatus);

								AIWListEqData.push(eObj);
								AIWListEqModel.setData(AIWListEqData);
								g.getView().setModel(AIWListEqModel, "AIWListEqModel");
								g.updateCount("EquipmentBom", AIWListEqModel.getData());
								g.onCopyBOMclose();
								break;
							}
						}
					}

					if (!SourceExistInStagingFlag) {
						g.checkTargetBOMExist(copyData);
						//g.readCopyDetails(copyData.copyEquipmentSource, copyData.copyPlantSource, copyData.copyUsageSource, copyData, "", "");
					}
				}
			}
			if (this.action === "copyFlbom") {
				if (AIWListFLData.length > 0) {
					for (var j = 0; j < AIWListFLData.length; j++) {
						if (AIWListFLData[j].Tplnrbom === copyData.copyFlocTarget && AIWListFLData[j].Werks === copyData.copyPlantTarget &&
							AIWListFLData[j].Stlan === copyData.copyUsageTarget) {
							var msg = g.getResourceBundle().getText("flocBomErr") + copyData.copyFlocTarget + "/" + copyData.copyPlantTarget + "/" +
								copyData.copyUsageTarget + " " + g.getResourceBundle().getText("locked");
							sap.m.MessageToast.show(msg, {
								duration: 5000,
								animationDuration: 5000
							});
							TargetExistInStagingFlag = true;
							break;
						}
					}
				}
				if (!TargetExistInStagingFlag) {
					if (AIWListFLData.length > 0) {
						for (var j = 0; j < AIWListFLData.length; j++) {
							if (AIWListFLData[j].Tplnrbom === copyData.copyFlocSource && AIWListFLData[j].Werks === copyData.copyPlantSource &&
								AIWListFLData[j].Stlan === copyData.copyUsageSource) {
								SourceExistInStagingFlag = true;
								var flObj = {
									Tplnrbom: copyData.copyFlocTarget,
									Werks: copyData.copyPlantTarget,
									Stlan: copyData.copyUsageTarget,
									Bomstatus: AIWListFLData[j].Bomstatus,
									Lngtxt: AIWListFLData[j].Lngtxt,
									Validfrom: g.getDateFormat(AIWListFLData[j].Validfrom),
									BaseQty: AIWListFLData[j].BaseQty,
									BaseUom: AIWListFLData[j].BaseUom,
									Validtoda: g.getDateFormat(AIWListFLData[j].Validtoda),

									FLDesc: copyData.copyFlocTargetDesc,
									WerksDesc: copyData.copyPlantTargetDesc,
									StlanDesc: copyData.copyUsageTargetDesc,
									BomstatusText: AIWListFLData[j].BomstatusText,
									FLEnable: false,
									plantEnable: false,
									usageEnable: false,

									bomType: "Create",
									modeFlag: "Delete",

									flItem: AIWListFLData[j].flItem,
									flSubItem: AIWListFLData[j].flSubItem
								};

								flObj.flItem = updateItemStatus(flObj.flItem, selUsgItemStatus);

								AIWListFLData.push(flObj);
								AIWListFLModel.setData(AIWListFLData);
								g.getView().setModel(AIWListFLModel, "AIWListFLModel");
								g.updateCount("FLBom", AIWListFLModel.getData());
								g.onCopyBOMclose();
								break;
							}
						}
					}

					if (!SourceExistInStagingFlag) {
						g.checkTargetBOMExist(copyData);
						//g.readCopyDetails(copyData.copyFlocSource, copyData.copyPlantSource, copyData.copyUsageSource, copyData, "", "");
					}
				}
			}
			if (this.action === "copyWbsbom") {
				if (AIWListWBSData.length > 0) {
					for (var j = 0; j < AIWListWBSData.length; j++) {
						if (AIWListWBSData[j].WbsExt === copyData.copyWBSTarget && AIWListWBSData[j].Matnr === copyData.copyMaterialTarget &&
							AIWListWBSData[j].Werks === copyData.copyPlantTarget &&
							AIWListWBSData[j].Stlan === copyData.copyUsageTarget) {
							var msg = g.getResourceBundle().getText("wbsBomErr") + copyData.copyWBSTarget + "/" + copyData.copyMaterialTarget + "/" +
								copyData.copyPlantTarget + "/" + copyData.copyUsageTarget + " " + g.getResourceBundle().getText("locked");
							sap.m.MessageToast.show(msg, {
								duration: 5000,
								animationDuration: 5000
							});
							TargetExistInStagingFlag = true;
							break;
						}
					}
				}
				if (!TargetExistInStagingFlag) {
					if (AIWListWBSData.length > 0) {
						for (var j = 0; j < AIWListWBSData.length; j++) {
							if (AIWListWBSData[j].WbsExt === copyData.copyWBSSource && AIWListWBSData[j].Matnr === copyData.copyMaterialSource &&
								AIWListWBSData[j].Werks === copyData.copyPlantSource && AIWListWBSData[j].Stlan === copyData.copyUsageSource) {
								SourceExistInStagingFlag = true;
								var wbsObj = {
									WbsExt: copyData.copyWBSTarget,
									Matnr: copyData.copyMaterialTarget,
									Werks: copyData.copyPlantTarget,
									Stlan: copyData.copyUsageTarget,
									Bomstatus: AIWListWBSData[j].Bomstatus,
									Lngtxt: AIWListWBSData[j].Lngtxt,
									Validfrom: g.getDateFormat(AIWListWBSData[j].Validfrom),
									BaseQty: AIWListWBSData[j].BaseQty,
									BaseUom: AIWListWBSData[j].BaseUom,
									Validtoda: g.getDateFormat(AIWListWBSData[j].Validtoda),

									WbsDesc: copyData.copyWBSTargetDesc,
									MatDesc: copyData.copyMaterialTargetDesc,
									WerksDesc: copyData.copyPlantTargetDesc,
									StlanDesc: copyData.copyUsageTargetDesc,
									BomstatusText: AIWListWBSData[j].BomstatusText,
									wbsEnable: false,
									matEnable: false,
									plantEnable: false,
									usageEnable: false,

									bomType: "Create",
									modeFlag: "Delete",

									wbsItem: AIWListWBSData[j].wbsItem,
									wbsSubItem: AIWListWBSData[j].wbsSubItem
								};

								wbsObj.wbsItem = updateItemStatus(wbsObj.wbsItem, selUsgItemStatus);

								AIWListWBSData.push(wbsObj);
								AIWListWBSModel.setData(AIWListWBSData);
								g.getView().setModel(AIWListWBSModel, "AIWListWBSModel");
								g.updateCount("WbsBom", AIWListWBSModel.getData());
								g.onCopyBOMclose();
								break;
							}
						}
					}

					if (!SourceExistInStagingFlag) {
						g.checkTargetBOMExist(copyData);
						//g.readCopyDetails(copyData.copyMaterialSource, copyData.copyPlantSource, copyData.copyUsageSource, copyData, "", copyData.copyWBSSource);
					}
				}
			}
			if (this.action === "copyMtoEbom" || this.action === "copyMtoFlbom" || this.action === "copyMtoWbsbom") {
				if (this.action === "copyMtoEbom") {
					if (AIWListEqData.length > 0) {
						for (var j = 0; j < AIWListEqData.length; j++) {
							if (AIWListEqData[j].Eqnrbom === copyData.copyEquipmentTarget && AIWListEqData[j].Werks === copyData.copyPlantTarget &&
								AIWListEqData[j].Stlan === copyData.copyUsageTarget) {
								var msg = g.getResourceBundle().getText("equiBomErr") + copyData.copyEquipmentTarget + "/" + copyData.copyPlantTarget +
									"/" +
									copyData.copyUsageTarget + " " + g.getResourceBundle().getText("locked");
								sap.m.MessageToast.show(msg, {
									duration: 5000,
									animationDuration: 5000
								});
								TargetExistInStagingFlag = true;
								break;
							}
						}
					}
				}
				if (this.action === "copyMtoFlbom") {
					if (AIWListFLData.length > 0) {
						for (var j = 0; j < AIWListFLData.length; j++) {
							if (AIWListFLData[j].Tplnrbom === copyData.copyFlocTarget && AIWListFLData[j].Werks === copyData.copyPlantTarget &&
								AIWListFLData[j].Stlan === copyData.copyUsageTarget) {
								var msg = g.getResourceBundle().getText("flocBomErr") + copyData.copyFlocTarget + "/" + copyData.copyPlantTarget + "/" +
									copyData.copyUsageTarget + " " + g.getResourceBundle().getText("locked");
								sap.m.MessageToast.show(msg, {
									duration: 5000,
									animationDuration: 5000
								});
								TargetExistInStagingFlag = true;
								break;
							}
						}
					}
				}
				if (this.action === "copyMtoWbsbom") {
					if (AIWListWBSData.length > 0) {
						for (var j = 0; j < AIWListWBSData.length; j++) {
							if (AIWListWBSData[j].WbsExt === copyData.copyWBSTarget && AIWListWBSData[j].Matnr === copyData.copyMaterialTarget &&
								AIWListWBSData[j].Werks === copyData.copyPlantTarget &&
								AIWListWBSData[j].Stlan === copyData.copyUsageTarget) {
								var msg = g.getResourceBundle().getText("wbsBomErr") + copyData.copyWBSTarget + "/" + copyData.copyMaterialTarget + "/" +
									copyData.copyPlantTarget + "/" + copyData.copyUsageTarget + " " + g.getResourceBundle().getText("locked");
								sap.m.MessageToast.show(msg, {
									duration: 5000,
									animationDuration: 5000
								});
								TargetExistInStagingFlag = true;
								break;
							}
						}
					}
				}

				if (!TargetExistInStagingFlag) {
					for (var j = 0; j < AIWListMatData.length; j++) {
						if (AIWListMatData[j].Matnr === copyData.copyMaterialSource && AIWListMatData[j].Werks === copyData.copyPlantSource &&
							AIWListMatData[j].Stlan === copyData.copyUsageSource && AIWListMatData[j].Stalt === copyData.copyAltBomSource) {
							SourceExistInStagingFlag = true;
							switch (this.action) {
							case "copyMtoEbom":
								var eObj = {
									Eqnrbom: copyData.copyEquipmentTarget,
									Werks: copyData.copyPlantTarget,
									Stlan: copyData.copyUsageTarget,
									Bomstatus: AIWListMatData[j].Bomstatus,
									Lngtxt: AIWListMatData[j].Lngtxt,
									Validfrom: g.getDateFormat(AIWListMatData[j].Validfrom),
									BaseQty: AIWListMatData[j].BaseQty,
									BaseUom: AIWListMatData[j].BaseUom,
									Validtoda: g.getDateFormat(AIWListMatData[j].Validtoda),

									EquiDesc: copyData.copyEquipmentTargetDesc,
									WerksDesc: copyData.copyPlantTargetDesc,
									StlanDesc: copyData.copyUsageTargetDesc,
									BomstatusText: AIWListMatData[j].BomstatusText,
									equipEnable: false,
									plantEnable: false,
									usageEnable: false,

									bomType: "Create",
									modeFlag: "Delete",

									eqItem: AIWListMatData[j].matItem,
									eqSubItem: AIWListMatData[j].matSubItem
								};

								eObj.eqItem = updateItemStatus(eObj.eqItem, selUsgItemStatus);

								AIWListEqData.push(eObj);
								AIWListEqModel.setData(AIWListEqData);
								g.getView().setModel(AIWListEqModel, "AIWListEqModel");
								g.updateCount("EquipmentBom", AIWListEqModel.getData());
								break;
							case "copyMtoFlbom":
								var flObj = {
									Tplnrbom: copyData.copyFlocTarget,
									Werks: copyData.copyPlantTarget,
									Stlan: copyData.copyUsageTarget,
									Bomstatus: AIWListMatData[j].Bomstatus,
									Lngtxt: AIWListMatData[j].Lngtxt,
									Validfrom: g.getDateFormat(AIWListMatData[j].Validfrom),
									BaseQty: AIWListMatData[j].BaseQty,
									BaseUom: AIWListMatData[j].BaseUom,
									Validtoda: g.getDateFormat(AIWListMatData[j].Validtoda),

									FLDesc: copyData.copyFlocTargetDesc,
									WerksDesc: copyData.copyPlantTargetDesc,
									StlanDesc: copyData.copyUsageTargetDesc,
									BomstatusText: AIWListMatData[j].BomstatusText,
									FLEnable: false,
									plantEnable: false,
									usageEnable: false,

									bomType: "Create",
									modeFlag: "Delete",

									flItem: AIWListMatData[j].matItem,
									flSubItem: AIWListMatData[j].matSubItem
								};

								flObj.flItem = updateItemStatus(flObj.flItem, selUsgItemStatus);

								AIWListFLData.push(flObj);
								AIWListFLModel.setData(AIWListFLData);
								g.getView().setModel(AIWListFLModel, "AIWListFLModel");
								g.updateCount("FLBom", AIWListFLModel.getData());
								break;
							case "copyMtoWbsbom":
								var wbsObj = {
									WbsExt: copyData.copyWBSTarget,
									Matnr: copyData.copyMaterialTarget,
									Werks: copyData.copyPlantTarget,
									Stlan: copyData.copyUsageTarget,
									Bomstatus: AIWListMatData[j].Bomstatus,
									Lngtxt: AIWListMatData[j].Lngtxt,
									Validfrom: g.getDateFormat(AIWListMatData[j].Validfrom),
									BaseQty: AIWListMatData[j].BaseQty,
									BaseUom: AIWListMatData[j].BaseUom,
									Validtoda: g.getDateFormat(AIWListMatData[j].Validtoda),

									WbsDesc: copyData.copyWBSTargetDesc,
									MatDesc: copyData.copyMaterialTargetDesc,
									WerksDesc: copyData.copyPlantTargetDesc,
									StlanDesc: copyData.copyUsageTargetDesc,
									BomstatusText: AIWListMatData[j].BomstatusText,
									wbsEnable: false,
									matEnable: false,
									plantEnable: false,
									usageEnable: false,

									bomType: "Create",
									modeFlag: "Delete",

									wbsItem: AIWListMatData[j].matItem,
									wbsSubItem: AIWListMatData[j].matSubItem
								};

								wbsObj.wbsItem = updateItemStatus(wbsObj.wbsItem, selUsgItemStatus);

								AIWListWBSData.push(wbsObj);
								AIWListWBSModel.setData(AIWListWBSData);
								g.getView().setModel(AIWListWBSModel, "AIWListWBSModel");
								g.updateCount("WbsBom", AIWListWBSModel.getData());
								break;
							}
							g.onCopyBOMclose();
							break;
						}
					}

					if (!SourceExistInStagingFlag) {
						g.checkTargetBOMExist(copyData);
						//this.readCopyDetails(copyData.copyMaterialSource, copyData.copyPlantSource, copyData.copyUsageSource, copyData, "", "");
					}
				}
			}
		},
		/*
		 * To Bom usage item status flags 
		 */
		getBomUsageItemStatusFlags: function () {
			var m = this.getView().getModel("valueHelp");
			var g = this;
			var itemStatusModel = new JSONModel();
			m.read("/BOMUsageHelpSet", {
				success: function (r) {
					if (r.results.length > 0) {
						itemStatusModel.setData(r.results);
						sap.ui.getCore().setModel(itemStatusModel, "itemStatusModel");
					}
				}
			});
		},
		/*
		 * To check Material configurability while copying a staging BOM.
		 * @param {object} copyData
		 */
		checkMaterialConfigurability: function (copyData) {
			var g = this;
			var M = this.getView().getModel("valueHelp");
			var sUrl = "/ConfigmatvalSet(MatFrom='" + copyData.copyMaterialSource + "',MatTo='" + copyData.copyMaterialTarget + "')";
			// this.BusyDialog.open();
			g._copyFragment.setBusy(true);
			M.read(sUrl, {
				success: function (r) {
					// g.BusyDialog.close();
					g._copyFragment.setBusy(false);
					g.checkTargetBOMExist(copyData);
					//g.readCopyDetails(copyData.copyMaterialSource, copyData.copyPlantSource, copyData.copyUsageSource, copyData, "", "");
				},
				error: function (err) {
					var error = [];
					if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
						.errordetails
						.length === 0) {
						error[0] = JSON.parse(err.responseText).error.message.value;
					} else {
						for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
							error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
						}
					}

					var oMessageList = [];
					for (var e = 0; e < error.length; e++) {
						oMessageList.push({
							type: "Error",
							title: error[e]
						});
					}

					g.createMessagePopover(oMessageList, false);

					// var value = error.join("\n");
					// sap.m.MessageBox.show(value, {
					// 	title: "Error",
					// 	icon: sap.m.MessageBox.Icon.ERROR,
					// 	onClose: function (oAction) {}
					// });
				}
			});
		},
		/*
		 * To check if the target BOM exists already.
		 * @param {object} copyData
		 */
		checkTargetBOMExist: function (copyData) {
			var g = this;
			var M = this.getView().getModel();
			if (this.action === "copyMbom") {
				var q = "/DeriveBOMHDRSet(Material='" + copyData.copyMaterialTarget + "',Werks='" + copyData.copyPlantTarget + "',Stlan='" +
					copyData.copyUsageTarget + "',Stlal='" + copyData.copyAltBomTarget + "',Tplnr='',Equnr='',Proid='')";
			} else if (this.action === "copyEbom" || this.action === "copyMtoEbom") {
				var q = "/DeriveBOMHDRSet(Material='',Werks='" + copyData.copyPlantTarget + "',Stlan='" +
					copyData.copyUsageTarget + "',Stlal='',Tplnr='',Equnr='" + copyData.copyEquipmentTarget + "',Proid='')";
			} else if (this.action === "copyFlbom" || this.action === "copyMtoFlbom") {
				var q = "/DeriveBOMHDRSet(Material='',Werks='" + copyData.copyPlantTarget + "',Stlan='" +
					copyData.copyUsageTarget + "',Tplnr='" + copyData.copyFlocTarget + "',Stlal='',Equnr='',Proid='')";
			} else if (this.action === "copyWbsbom" || this.action === "copyMtoWbsbom") {
				var q = "/DeriveBOMHDRSet(Material='" + copyData.copyMaterialTarget + "',Werks='" + copyData.copyPlantTarget + "',Stlan='" +
					copyData.copyUsageTarget + "',Stlal='',Tplnr='',Equnr='',Proid='" + copyData.copyWBSTarget + "')";
			}

			M.read(q, {
				success: function (r) {
					if (r.Message !== "") {
						sap.m.MessageToast.show(r.Message, {
							duration: 15000,
							animationDuration: 15000
						});
					} else {
						if (g.action === "copyMbom" || g.action === "copyMtoEbom" || g.action === "copyMtoFlbom" || g.action === "copyMtoWbsbom") {
							g.readCopyDetails(copyData.copyMaterialSource, copyData.copyPlantSource, copyData.copyUsageSource, copyData, "", "");
						} else if (g.action === "copyEbom") {
							g.readCopyDetails(copyData.copyEquipmentSource, copyData.copyPlantSource, copyData.copyUsageSource, copyData, "", "");
						} else if (g.action === "copyFlbom") {
							g.readCopyDetails(copyData.copyFlocSource, copyData.copyPlantSource, copyData.copyUsageSource, copyData, "", "");
						} else if (g.action === "copyWbsbom") {
							g.readCopyDetails(copyData.copyMaterialSource, copyData.copyPlantSource, copyData.copyUsageSource, copyData, "",
								copyData.copyWBSSource);
						}
					}
				},
				error: function (err) {
					var error = [];
					if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
						.errordetails
						.length === 0) {
						error[0] = JSON.parse(err.responseText).error.message.value;
					} else {
						for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
							error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
						}
					}

					var oMessageList = [];
					for (var e = 0; e < error.length; e++) {
						oMessageList.push({
							type: "Error",
							title: error[e]
						});
					}

					g.createMessagePopover(oMessageList, false);

					// var value = error.join("\n");
					// sap.m.MessageBox.show(value, {
					// 	title: "Error",
					// 	icon: sap.m.MessageBox.Icon.ERROR,
					// 	onClose: function (oAction) {}
					// });
				}
			});
		},
		/*
		 * Function to Copy Bom
		 * @param {string} m - Material
		 * @param {string} p - Plant
		 * @param {string} u - Usage
		 * @param {object} Eqdata
		 * @param {string} index
		 * @param {string} w - WBS
		 */
		readCopyDetails: function (m, p, u, Eqdata, index, w) {
			var g = this;
			var M = this.getView().getModel();
			var q;
			var oFilter;
			var oExpand;
			var BusyData = this.getView().getModel("BusyModel").getData();
			var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");
			var AIWListEqModel = sap.ui.getCore().getModel("AIWListEqModel");
			var AIWListFLModel = sap.ui.getCore().getModel("AIWListFLModel");
			var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
			if (this.action === "copyMbom" || this.action === "copyMtoEbom" || this.action === "copyMtoFlbom" || this.action ===
				"copyMtoWbsbom") {
				q = "/ChangeRequestSet";
				oFilter = [new sap.ui.model.Filter("Stalt", "EQ", Eqdata.copyAltBomSource),
					new sap.ui.model.Filter("Matnr", "EQ", m),
					new sap.ui.model.Filter("Werks", "EQ", p),
					new sap.ui.model.Filter("Stlan", "EQ", u),
					new sap.ui.model.Filter("CopyCreate", "EQ", true)
				];
				oExpand = ["MRBHeader", "MRBItem", "MRBSBIT"];
			}
			if (this.action === "copyEbom") {
				q = "/ChangeRequestSet";
				oFilter = [new sap.ui.model.Filter("Stalt", "EQ", ''),
					new sap.ui.model.Filter("Eqnrbom", "EQ", m),
					new sap.ui.model.Filter("Werks", "EQ", p),
					new sap.ui.model.Filter("Stlan", "EQ", u),
					new sap.ui.model.Filter("CopyCreate", "EQ", true)
				];
				oExpand = ["EBHeader", "EBItem", "EBSBIT"];
			}
			if (this.action === "copyFlbom") {
				q = "/ChangeRequestSet";
				oFilter = [new sap.ui.model.Filter("Stalt", "EQ", ''),
					new sap.ui.model.Filter("Tplnrbom", "EQ", m),
					new sap.ui.model.Filter("Werks", "EQ", p),
					new sap.ui.model.Filter("Stlan", "EQ", u),
					new sap.ui.model.Filter("CopyCreate", "EQ", true)
				];
				oExpand = ["FBHeader", "FBItem", "FBSBIT"];
			}
			if (this.action === "copyWbsbom") {
				q = "/ChangeRequestSet";
				oFilter = [new sap.ui.model.Filter("Stalt", "EQ", ''),
					new sap.ui.model.Filter("Proid", "EQ", w),
					new sap.ui.model.Filter("Matnr", "EQ", m),
					new sap.ui.model.Filter("Werks", "EQ", p),
					new sap.ui.model.Filter("Stlan", "EQ", u),
					new sap.ui.model.Filter("CopyCreate", "EQ", true)
				];
				oExpand = ["WBHeader", "WBSBIT", "WBItem"];
			}

			BusyData.AiwTblBusy = true;
			this.getView().getModel("BusyModel").setData(BusyData);
			this._copyFragment.setBusy(true);
			M.read(q, {
				filters: oFilter,
				urlParameters: {
					"$expand": oExpand
				},
				success: function (r) {
					BusyData.AiwTblBusy = false;
					g.getView().getModel("BusyModel").setData(BusyData);
					g._copyFragment.setBusy(false);
					if (r.results.length > 0) {
						if (r.results[0].Message !== "" && r.results[0].Message.indexOf("locked") === -1) {
							sap.m.MessageToast.show(r.results[0].Message, {
								duration: 5000,
								animationDuration: 5000
							});
							return;
						}
						var res = {};
						var sItem = [];
						var sSubItem = [];
						var i;
						if (g.action === "copyMbom") {
							res = r.results[0].MRBHeader.results[0];
							sItem = r.results[0].MRBItem.results;
							for (i = 0; i < sItem.length; i++) {
								sItem[i].itmCatEnable = false;
							}
							sSubItem = r.results[0].MRBSBIT.results;
							if (res !== undefined) {
								var AIWListMatData = AIWListMatModel.getData();
								var mObj = {
									Matnr: Eqdata.copyMaterialTarget,
									Werks: Eqdata.copyPlantTarget,
									Stlan: Eqdata.copyUsageTarget,
									Stalt: Eqdata.copyAltBomTarget,
									Bomstatus: res.Bomstatus,
									Lngtxt: res.Txtmi,
									Stktx: res.Stktx,
									Validfrom: g.getDateFormat(res.Validfrom),
									BaseQty: res.Baseqty,
									BaseUom: res.Baseuom,
									Validtoda: g.getDateFormat(res.Validtoda),

									MatDesc: Eqdata.copyMaterialTargetDesc,
									WerksDesc: Eqdata.copyPlantTargetDesc,
									StlanDesc: Eqdata.copyUsageTargetDesc,
									BomstatusText: res.Bomstatustxt,
									matEnable: false,
									plantEnable: false,
									usageEnable: false,
									altbomEnable: false,

									bomType: "Create",
									modeFlag: "Delete",

									matItem: sItem,
									matSubItem: sSubItem
								};
								mObj.matItem = g.updateItemStatusActive(Eqdata, mObj.matItem);
								AIWListMatData.push(mObj);
								AIWListMatModel.setData(AIWListMatData);
								AIWListMatModel.setSizeLimit(AIWListMatData.length);
								g.getView().setModel(AIWListMatModel, "AIWListMatModel");
								g.updateCount("MaterialBom", AIWListMatModel.getData());
							}
							// g._copyFragment.setBusy(false);
							g.onCopyBOMclose();
						}
						if (g.action === "copyEbom" || g.action === "copyMtoEbom") {
							if (g.action === "copyEbom") {
								res = r.results[0].EBHeader.results[0];
								sItem = r.results[0].EBItem.results;
								sSubItem = r.results[0].EBSBIT.results;
							} else if (g.action === "copyMtoEbom") {
								res = r.results[0].MRBHeader.results[0];
								sItem = r.results[0].MRBItem.results;
								sSubItem = r.results[0].MRBSBIT.results;
							}
							for (i = 0; i < sItem.length; i++) {
								sItem[i].itmCatEnable = false;
							}
							if (res !== undefined) {
								var AIWListEqData = AIWListEqModel.getData();
								var eObj = {
									Eqnrbom: Eqdata.copyEquipmentTarget,
									Werks: Eqdata.copyPlantTarget,
									Stlan: Eqdata.copyUsageTarget,
									Bomstatus: res.Bomstatus,
									Lngtxt: res.Txtmi,
									Validfrom: g.getDateFormat(res.Validfrom),
									BaseQty: res.Baseqty,
									BaseUom: res.Baseuom,
									Validtoda: g.getDateFormat(res.Validtoda),

									EquiDesc: Eqdata.copyEquipmentTargetDesc,
									WerksDesc: Eqdata.copyPlantTargetDesc,
									StlanDesc: Eqdata.copyUsageTargetDesc,
									BomstatusText: res.Bomstatustxt,
									equipEnable: false,
									plantEnable: false,
									usageEnable: false,

									bomType: "Create",
									modeFlag: "Delete",

									eqItem: sItem,
									eqSubItem: sSubItem
								};
								eObj.eqItem = g.updateItemStatusActive(Eqdata, eObj.eqItem);
								AIWListEqData.push(eObj);
								AIWListEqModel.setData(AIWListEqData);
								AIWListEqModel.setSizeLimit(AIWListEqData.length);
								g.getView().setModel(AIWListEqModel, "AIWListEqModel");
								g.updateCount("EquipmentBom", AIWListEqModel.getData());
							}
							// g._copyFragment.setBusy(false);
							g.onCopyBOMclose();
						}
						if (g.action === "copyFlbom" || g.action === "copyMtoFlbom") {
							if (g.action === "copyFlbom") {
								res = r.results[0].FBHeader.results[0];
								sItem = r.results[0].FBItem.results;
								sSubItem = r.results[0].FBSBIT.results;
							} else if (g.action === "copyMtoFlbom") {
								res = r.results[0].MRBHeader.results[0];
								sItem = r.results[0].MRBItem.results;
								sSubItem = r.results[0].MRBSBIT.results;
							}
							for (i = 0; i < sItem.length; i++) {
								sItem[i].itmCatEnable = false;
							}
							if (res !== undefined) {
								var AIWListFLData = AIWListFLModel.getData();
								var flObj = {
									Tplnrbom: Eqdata.copyFlocTarget,
									Werks: Eqdata.copyPlantTarget,
									Stlan: Eqdata.copyUsageTarget,
									Bomstatus: res.Bomstatus,
									Lngtxt: res.Txtmi,
									Validfrom: g.getDateFormat(res.Validfrom),
									BaseQty: res.Baseqty,
									BaseUom: res.Baseuom,
									Validtoda: g.getDateFormat(res.Validtoda),

									FLDesc: Eqdata.copyFlocTargetDesc,
									WerksDesc: Eqdata.copyPlantTargetDesc,
									StlanDesc: Eqdata.copyUsageTargetDesc,
									BomstatusText: res.Bomstatustxt,
									FLEnable: false,
									plantEnable: false,
									usageEnable: false,

									bomType: "Create",
									modeFlag: "Delete",

									flItem: sItem,
									flSubItem: sSubItem
								};
								flObj.flItem = g.updateItemStatusActive(Eqdata, flObj.flItem);
								AIWListFLData.push(flObj);
								AIWListFLModel.setData(AIWListFLData);
								AIWListFLModel.setSizeLimit(AIWListFLData.length);
								g.getView().setModel(AIWListFLModel, "AIWListFLModel");
								g.updateCount("FLBom", AIWListFLModel.getData());
							}
							// g._copyFragment.setBusy(false);
							g.onCopyBOMclose();
						}
						if (g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
							if (g.action === "copyWbsbom") {
								res = r.results[0].WBHeader.results[0];
								sItem = r.results[0].WBItem.results;
								sSubItem = r.results[0].WBSBIT.results;
							} else if (g.action === "copyMtoWbsbom") {
								res = r.results[0].MRBHeader.results[0];
								sItem = r.results[0].MRBItem.results;
								sSubItem = r.results[0].MRBSBIT.results;
							}
							for (i = 0; i < sItem.length; i++) {
								sItem[i].itmCatEnable = false;
							}
							if (res !== undefined) {
								var AIWListWBSData = AIWListWBSModel.getData();
								var wbsObj = {
									WbsExt: Eqdata.copyWBSTarget,
									Matnr: Eqdata.copyMaterialTarget,
									Werks: Eqdata.copyPlantTarget,
									Stlan: Eqdata.copyUsageTarget,
									Bomstatus: res.Bomstatus,
									Lngtxt: res.Txtmi,
									Validfrom: g.getDateFormat(res.Validfrom),
									BaseQty: res.Baseqty,
									BaseUom: res.Baseuom,
									Validtoda: g.getDateFormat(res.Validtoda),

									WbsDesc: Eqdata.copyWBSTargetDesc,
									MatDesc: Eqdata.copyMaterialTargetDesc,
									WerksDesc: Eqdata.copyPlantTargetDesc,
									StlanDesc: Eqdata.copyUsageTargetDesc,
									BomstatusText: res.Bomstatustxt,
									wbsEnable: false,
									matEnable: false,
									plantEnable: false,
									usageEnable: false,

									bomType: "Create",
									modeFlag: "Delete",

									wbsItem: sItem,
									wbsSubItem: sSubItem
								};
								wbsObj.wbsItem = g.updateItemStatusActive(Eqdata, wbsObj.wbsItem);
								AIWListWBSData.push(wbsObj);
								AIWListWBSModel.setData(AIWListWBSData);
								AIWListWBSModel.setSizeLimit(AIWListWBSData.length);
								g.getView().setModel(AIWListWBSModel, "AIWListWBSModel");
								g.updateCount("WbsBom", AIWListWBSModel.getData());
							}
							// g._copyFragment.setBusy(false);
							g.onCopyBOMclose();
						}
					}
				},
				error: function (err) {
					g._copyFragment.setBusy(false);
					g.onCopyBOMclose();
					BusyData.AiwTblBusy = false;
					g.getView().getModel("BusyModel").setData(BusyData);
					var error = [];
					if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
						.errordetails
						.length === 0) {
						error[0] = JSON.parse(err.responseText).error.message.value;
					} else {
						for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
							error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
						}
					}

					var oMessageList = [];
					for (var e = 0; e < error.length; e++) {
						oMessageList.push({
							type: "Error",
							title: error[e]
						});
					}

					g.createMessagePopover(oMessageList, false);

					// var value = error.join("\n");
					// sap.m.MessageBox.show(value, {
					// 	title: "Error",
					// 	icon: sap.m.MessageBox.Icon.ERROR,
					// 	onClose: function (oAction) {}
					// });
				}
			});
		},

		//Note:- 2725008
		/*
		 * Function to update Item status
		 * @param {object} Eqdata
		 * @param {array} Item
		 */
		updateItemStatusActive: function (Eqdata, Item) {
			var selUsgItemStatus = {};
			var itemStatusModel = sap.ui.getCore().getModel("itemStatusModel");
			var itemStatusData = itemStatusModel.getData();
			for (var z = 0; z < itemStatusData.length; z++) {
				if (Eqdata.copyUsageTarget === itemStatusData[z].Stlan) {
					selUsgItemStatus = itemStatusData[z];
				}
			}

			var sArray = $.map(Item, function (obj) {
				return $.extend(true, {}, obj);
			});
			for (var y = 0; y < Item.length; y++) {
				sArray[y].Pmper = selUsgItemStatus.Pmper;
				sArray[y].Pmpka = selUsgItemStatus.Pmpka;
				sArray[y].Pmprv = selUsgItemStatus.Pmprv;
				sArray[y].Pmpfe = selUsgItemStatus.Pmpfe;
				sArray[y].Pmpin = selUsgItemStatus.Pmpin;
				sArray[y].Pmpko = selUsgItemStatus.Pmpko;

				if (sArray[y].Pmpfe === "+")
					sArray[y].Sanfe = true;
				else
					sArray[y].Sanfe = false;

				if (sArray[y].Pmpin === "+")
					sArray[y].Sanin = true;
				else
					sArray[y].Sanin = false;

				if (sArray[y].Pmpko === "+")
					sArray[y].Sanko = true;
				else
					sArray[y].Sanko = false;
			}
			return sArray;
		},
		/*
		 * Function to create BOM row
		 * @param {string} sType
		 */
		CreateBomRow: function (sType) {
			if (sType === "CreateMaterialBom") {
				var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");
				var AiwListMatData = AIWListMatModel.getData();
				var mandateFillCheck = this.mandateFillCheck(sType, AiwListMatData);
				if (mandateFillCheck) {
					var mObj = {
						Matnr: "",
						Werks: "",
						Stlan: "",
						Stalt: "",
						Pmbomtech: "",
						PmbomtechTxt: "",
						Bomstatus: "",
						Lngtxt: "",
						Validfrom: "",
						BaseQty: "",
						BaseUom: "",
						Validtoda: "",

						MatDesc: "",
						WerksDesc: "",
						StlanDesc: "",
						BomstatusText: "",

						matEnable: true,
						plantEnable: true,
						usageEnable: true,
						altbomEnable: true,
						BomstatusEnable: true,
						BaseQtyEnable: true,
						LngtxtEnable: true,
						addItemEnable: false,
						fromDateEnable: true,

						matValueState: "None",
						plantValueState: "None",
						usageValueState: "None",
						altbomValueState: "None",
						statusValueState: "None",
						BaseQtyValueState: "None",

						bomType: "Create",
						modeFlag: "Delete",

						matItem: [],
						matSubItem: []
					};
					AiwListMatData.push(mObj);
					AIWListMatModel.setData(AiwListMatData);
					AIWListMatModel.setSizeLimit(AiwListMatData.length);
					this.getView().setModel(AIWListMatModel, "AIWListMatModel");
					this.updateCount("MaterialBom", AiwListMatData);
				}
			}

			if (sType === "CreateEquipmentBom") {
				var AIWListEqModel = sap.ui.getCore().getModel("AIWListEqModel");
				var AiwListEqData = AIWListEqModel.getData();
				var mandateFillCheck = this.mandateFillCheck(sType, AiwListEqData);
				if (mandateFillCheck) {
					var eObj = {
						Eqnrbom: "",
						Werks: "",
						Stlan: "",
						Bomstatus: "",
						Lngtxt: "",
						Validfrom: "",
						BaseQty: "",
						BaseUom: "",
						Validtoda: "",

						EquiDesc: "",
						WerksDesc: "",
						StlanDesc: "",
						BomstatusText: "",
						equipEnable: true,
						plantEnable: true,
						usageEnable: true,
						BomstatusEnable: true,
						BaseQtyEnable: true,
						LngtxtEnable: true,
						addItemEnable: false,
						fromDateEnable: true, //new

						equipValueState: "None",
						plantValueState: "None",
						usageValueState: "None",
						statusValueState: "None",
						BaseQtyValueState: "None",

						bomType: "Create",
						modeFlag: "Delete",

						eqItem: [],
						eqSubItem: []
					};
					AiwListEqData.push(eObj);
					AIWListEqModel.setData(AiwListEqData);
					AIWListEqModel.setSizeLimit(AiwListEqData.length);
					this.getView().setModel(AIWListEqModel, "AIWListEqModel");
					this.updateCount("EquipmentBom", AIWListEqModel.getData());
				}
			}

			if (sType === "CreateFLBom") {
				var AIWListFLModel = sap.ui.getCore().getModel("AIWListFLModel");
				var AiwListFLData = AIWListFLModel.getData();
				var mandateFillCheck = this.mandateFillCheck(sType, AiwListFLData);
				if (mandateFillCheck) {
					var flObj = {
						Tplnrbom: "",
						Werks: "",
						Stlan: "",
						Bomstatus: "",
						Lngtxt: "",
						Validfrom: "",
						BaseQty: "",
						BaseUom: "",
						Validtoda: "",

						FLDesc: "",
						WerksDesc: "",
						StlanDesc: "",
						BomstatusText: "",
						FLEnable: true,
						plantEnable: true,
						usageEnable: true,
						BomstatusEnable: true,
						BaseQtyEnable: true,
						LngtxtEnable: true,
						addItemEnable: false,
						fromDateEnable: true, //new

						FLValueState: "None",
						plantValueState: "None",
						usageValueState: "None",
						statusValueState: "None",
						BaseQtyValueState: "None",

						bomType: "Create",
						modeFlag: "Delete",

						flItem: [],
						flSubItem: []
					};
					AiwListFLData.push(flObj);
					AIWListFLModel.setData(AiwListFLData);
					AIWListFLModel.setSizeLimit(AiwListFLData.length);
					this.getView().setModel(AIWListFLModel, "AIWListFLModel");
					this.updateCount("FLBom", AIWListFLModel.getData());
				}
			}
			if (sType === "createWbsbom") {
				var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
				var AiwListWBSData = AIWListWBSModel.getData();
				var mandateFillCheck = this.mandateFillCheck(sType, AiwListWBSData);
				if (mandateFillCheck) {
					var wbsObj = {
						WbsExt: "",
						Matnr: "",
						Werks: "",
						Stlan: "",
						Bomstatus: "",
						Lngtxt: "",
						Validfrom: "",
						BaseQty: "",
						BaseUom: "",
						Validtoda: "",

						WbsDesc: "",
						MatDesc: "",
						WerksDesc: "",
						StlanDesc: "",
						BomstatusText: "",
						wbsEnable: true,
						matEnable: true,
						plantEnable: true,
						usageEnable: true,
						BomstatusEnable: true,
						BaseQtyEnable: true,
						LngtxtEnable: true,
						addItemEnable: false,
						fromDateEnable: true, //new

						wbsValueState: "None",
						matValueState: "None",
						plantValueState: "None",
						usageValueState: "None",
						statusValueState: "None",
						BaseQtyValueState: "None",

						bomType: "Create",
						modeFlag: "Delete",

						wbsItem: [],
						wbsSubItem: []
					};
					AiwListWBSData.push(wbsObj);
					AIWListWBSModel.setData(AiwListWBSData);
					AIWListWBSModel.setSizeLimit(AiwListWBSData.length);
					this.getView().setModel(AIWListWBSModel, "AIWListWBSModel");
					this.updateCount("WbsBom", AIWListWBSModel.getData());
				}
			}
			if (sType === "createObjNet") {
				var AIWListONModel = sap.ui.getCore().getModel("AIWListONModel");
				var AiwListONData = AIWListONModel.getData();
				var mandateFillCheck = this.mandateFillCheck(sType, AiwListONData);
				if (mandateFillCheck) {
					var onObj = {
						"Objnetwrk": "",
						"Netgrp": "",
						"Netwtyp": "",
						"Netxt": "",
						"Ntobjtyp": "",

						"NetgrpDesc": "",
						"NetwtypDesc": "",
						"NetIDValueState": "None",
						"NetIDValueStateText": "",
						"NetgrpValueState": "None",
						"NetwtypValueState": "None",
						"ShrtTxtValueState": "None", //new

						"NetIDEnable": true,

						lam: {
							Lrpid: "",
							LrpidDesc: "",
							Strtptatr: "",
							Endptatr: "",
							Length: "",
							LinUnit: "",
							LinUnitDesc: "",
							Startmrkr: "",
							Endmrkr: "",
							Mrkdisst: "",
							Mrkdisend: "",
							MrkrUnit: "",
							enableLrp: false,
							enableMarker: false,
							LrpidVS: "None",
							StrtptatrVS: "None",
							EndptatrVS: "None",
							LinUnitVS: "None",
							StartmrkrVS: "None",
							EndmrkrVS: "None",
							MrkdisstVS: "None",
							MrkdisendVS: "None",
							MrkrUnitVS: "None"
						}
					};
					AiwListONData.push(onObj);
					AIWListONModel.setData(AiwListONData);
					AIWListONModel.setSizeLimit(AiwListONData.length);
					this.getView().setModel(AIWListONModel, "AIWListONModel");
					this.updateCount("ObjNet", AIWListONModel.getData());
				}
			}
		},
		/*
		 * Function to update Task list count (General, Equipment & Funcitonal location task lists)
		 */
		updateTotalTLCount: function () {
			var GTLCount = this.getView().getModel("AIWListGTLModel").getData().length;
			var ETLCount = this.getView().getModel("AIWListETLModel").getData().length;
			var FTLCount = this.getView().getModel("AIWListFTLModel").getData().length;
			var CountModel = this.getView().getModel("CountModel");
			var CountData = CountModel.getData();
			var tempTotal = 0;

			tempTotal = GTLCount + ETLCount + FTLCount;
			CountData.TotalTLCount = tempTotal; //this.getResourceBundle().getText("TLHeaderTitle", [tempTotal]);
			CountModel.setData(CountData);
		},
		/*
		 * Function to update count of all objects
		 * @param {string} sType
		 * @param {array} sArray
		 */
		updateCount: function (sType, sArray) {
			var CountModel = this.getView().getModel("CountModel");
			var CountData = CountModel.getData();
			var length = 0;
			if (sArray.length > 0) {
				length = sArray.length;
			}
			if (sType === "workCenter") {
				CountData.WCCount = length; //this.getResourceBundle().getText("detailWCIconTabFilterMaster", [length]);
			}
			if (sType === "generalTL") {
				CountData.GTLCount = length; //this.getResourceBundle().getText("GTLHeader", [length]);
				this.updateTotalTLCount();
			}
			if (sType === "equiTL") {
				CountData.ETLCount = length; //this.getResourceBundle().getText("ETLHeader", [length]);
				this.updateTotalTLCount();
			}
			if (sType === "flocTL") {
				CountData.FTLCount = length; //this.getResourceBundle().getText("FTLHeader", [length]);
				this.updateTotalTLCount();
			}
			if (sType === "objLink") {
				CountData.OLCount = length; //this.getResourceBundle().getText("detailOLIconTabFilterMaster", [length]);
			}
			if (sType === "MaterialBom") {
				CountData.MatBomCount = length; //this.getResourceBundle().getText("mbom", [length]);
				this.updateTotalBomCount();
			}
			if (sType === "EquipmentBom") {
				CountData.EqBomCount = length; //this.getResourceBundle().getText("ebom", [length]);
				this.updateTotalBomCount();
			}
			if (sType === "FLBom") {
				CountData.FLBomCount = length; //this.getResourceBundle().getText("flbom", [length]);
				this.updateTotalBomCount();
			}
			if (sType === "WbsBom") {
				CountData.WbsBomCount = length; //this.getResourceBundle().getText("wbsbom", [length]);
				this.updateTotalBomCount();
			}
			if (sType === "ObjNet") {
				CountData.ONCount = length; //this.getResourceBundle().getText("objNet", [length]);
			}

			CountModel.setData(CountData);
		},
		/*
		 * Function to update Bill of Material counts (Material, Equipment & Funcitonal location & WBS)
		 */
		updateTotalBomCount: function () {
			var matCount = this.getView().getModel("AIWListMatModel").getData().length;
			var eqCount = this.getView().getModel("AIWListEqModel").getData().length;
			var flCount = this.getView().getModel("AIWListFLModel").getData().length;
			var wbsCount = this.getView().getModel("AIWListWBSModel").getData().length;
			var CountModel = this.getView().getModel("CountModel");
			var CountData = CountModel.getData();
			var tempTotal = 0;

			tempTotal = matCount + eqCount + flCount + wbsCount;
			CountData.TotalBomCount = tempTotal; //this.getResourceBundle().getText("billOfMaterials", [tempTotal]);
			CountModel.setData(CountData);
		},
		/*
		 * To handle SOP navigation of Equiment BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		onEquiNavigation: function (oEvent) {
			var sPath = oEvent.getSource().getBindingContext("AIWListEqModel").sPath;
			var fragmentName = "CreateEquipmentBom";

			this.getRouter().navTo("detail", {
				FragmentName: fragmentName,
				itemPath: encodeURIComponent(sPath),
				e: " ",
				p: " ",
				u: " ",
				cr: " ",
				w: " ",
				mode: this.getMode()
			});
		},
		/*
		 * To handle SOP navigation of Functional Location BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		onFlocNavigation: function (oEvent) {
			var sPath = oEvent.getSource().getBindingContext("AIWListFLModel").sPath;
			var fragmentName = "CreateFLBom";

			this.getRouter().navTo("detail", {
				FragmentName: fragmentName,
				itemPath: encodeURIComponent(sPath),
				e: " ",
				p: " ",
				u: " ",
				cr: " ",
				w: " ",
				mode: this.getMode()
			});
		},
		/*
		 * To handle SOP navigation of Material BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		onMatNavigation: function (oEvent) {
			var sPath = oEvent.getSource().getBindingContext("AIWListMatModel").sPath;
			var fragmentName = "CreateMaterialBom";

			this.getRouter().navTo("detail", {
				FragmentName: fragmentName,
				itemPath: encodeURIComponent(sPath),
				e: " ",
				p: " ",
				u: " ",
				cr: " ",
				w: " ",
				mode: this.getMode()
			});
		},
		/*
		 * To handle SOP navigation of WBS BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		onWBSNavigation: function (oEvent) {
			var sPath = oEvent.getSource().getBindingContext("AIWListWBSModel").sPath;
			var fragmentName = "CreateWBSBom";

			this.getRouter().navTo("detail", {
				FragmentName: fragmentName,
				itemPath: encodeURIComponent(sPath),
				e: " ",
				p: " ",
				u: " ",
				cr: " ",
				w: " ",
				mode: this.getMode()
			});
		},
		/*
		 * To handle SOP navigation of Object Network
		 * @param {sap.ui.base.Event} oEvent
		 */
		onObjNetNavigation: function (oEvent) {
			var sPath = oEvent.getSource().getBindingContext("AIWListONModel").sPath;
			var action = "Create";

			this.getRouter().navTo("ONdetail", {
				itemPath: encodeURIComponent(sPath),
				action: action,
				netId: " ",
				objType: " ",
				status: " ",
				mode: this.getMode()
			});
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Equipment in BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		onEquipmentVH: function (oEvent) {
			var g = this;
			var M = this.getView().getModel("valueHelp");
			if (this.action === "createEbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListEqModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "copyEbom" || this.action === "copyMtoEbom") {
				this.sourceId = oEvent.getSource().getId();
			}
			var EquipmentSelectDialog = ValueHelpRequest.EquipmentSelectDialog(g);

			this.getView().addDependent(EquipmentSelectDialog);
			EquipmentSelectDialog.setModel(M);
			EquipmentSelectDialog.setModel(this.getView().getModel("i18n"), "i18n");

			EquipmentSelectDialog.open();
		},
		/*
		 * To handle valueHelp CONFIRM press of Equipment in BOM
		 * @param {sap.ui.base.Event} E
		 */
		handleEquimentConfirm: function (E) {
			var g = this.getParent().getController();
			var sindex = g.sindex;
			var action = g.action;
			var AIWListEqModel = sap.ui.getCore().getModel("AIWListEqModel");
			var Eqdata = AIWListEqModel.getData();
			if (action === "createEbom") {
				Eqdata[sindex].Eqnrbom = E.getParameters().selectedItem.getProperty("title");
				Eqdata[sindex].EquiDesc = E.getParameters().selectedItem.getProperty("description");
				Eqdata[sindex].equipValueState = "None";
				AIWListEqModel.setData(Eqdata);
				if (Eqdata[sindex].Werks !== "" && Eqdata[sindex].Stlan !== "") {
					g.readBomHdrDetails(Eqdata[sindex].Eqnrbom, Eqdata[sindex].Werks, Eqdata[sindex].Stlan, Eqdata, sindex, "");
				}
			}
			if (action === "copyEbom" || action === "copyMtoEbom") {
				var copyModel = g._copyFragment.getModel("copyModel");
				var copyData = copyModel.getData();
				var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
				if (binding === "/copyEquipmentSource") {
					copyData.copyEquipmentSource = E.getParameters().selectedItem.getProperty("title");
					copyData.copyEquipmentSourceDesc = E.getParameters().selectedItem.getProperty("description");
					copyData.srcEquiValueState = "None"; //14.08
				} else {
					copyData.copyEquipmentTarget = E.getParameters().selectedItem.getProperty("title");
					copyData.copyEquipmentTargetDesc = E.getParameters().selectedItem.getProperty("description");
					copyData.tarEquiValueState = "None"; //14.08
				}
				copyModel.setData(copyData);
			}
			if (action.indexOf("ETL")) {
				var g = this.getParent().getController();
				var sindex = g.eqindex;
				var AIWListETLModel = sap.ui.getCore().getModel("AIWListETLModel");
				var ETLdata = AIWListETLModel.getData();
				ETLdata[sindex].equipment = E.getParameters().selectedItem.getProperty("title");
				ETLdata[sindex].equipmentDesc = E.getParameters().selectedItem.getProperty("description");
				ETLdata[sindex].equipmentVS = "None";
				ETLdata[sindex].header.forEach(function (headerItem) {
					headerItem.equipment = ETLdata[sindex].equipment;
					headerItem.equipmentDesc = ETLdata[sindex].equipmentDesc;
				});
				AIWListETLModel.setData(ETLdata);

				// this.DeriveEquipmentData(ETLdata[sindex].equipment);
				g.sGrpTableRef.setSelectedItem(g.sGrpTableRef.getItems()[g.eqindex], true /*selected*/ , true /*fire event*/ );
				if (ETLdata[sindex].header.length > 0) {
					g.DeriveEquiFlocData(ETLdata[sindex].equipment, 'E');
				}

			}
		},
		/*
		 * Function to derive Equipment and Functional location data
		 * @param e
		 * @param {string} flag
		 */
		DeriveEquiFlocData: function (e, flag) {
			var g = this;
			var sPath = "/ChangeRequestSet";
			var oModel = g.getView().getModel();
			// var AIWListETLModel = sap.ui.getCore().getModel("AIWListETLModel");
			// var ETLdata = AIWListETLModel.getData();
			// var sObject = {};
			var sPayload = {
				"ChangeRequestType": "AIWEAM0P",
				"CrDescription": "",
				"Reason": "01",
				"DeriveData": true,
				"FuncLoc": [],
				"FLAddr": [],
				"FLAddrI": [],
				"FLClass": [],
				"FLVal": [],
				"Equipment": [],
				"EqAddr": [],
				"EqAddrI": [],
				"EqClass": [],
				"EqVal": [],
				"MSPoint": [],
				"MSClass": [],
				"MSVal": [],
				"MPLAN": [],
				"MPItem": [],
				"MPCycle": [],
				"MRBHeader": [],
				"MRBItem": [],
				"MRBSBIT": [],
				"EBHeader": [],
				"EBItem": [],
				"EBSBIT": [],
				"FBHeader": [],
				"FBItem": [],
				"FBSBIT": [],
				"WBHeader": [],
				"WBItem": [],
				"WBSBIT": [],
				"ONetwork": [],
				"ONLAM": [],
				"Workcenter": [],
				"WCCost": [],
				"GTList": [],
				"GTOprs": [],
				"GTComp": [],
				"GTClass": [],
				"GTVal": [],
				"ETList": [],
				"ETOprs": [],
				"ETComp": [],
				"ETClass": [],
				"ETVal": [],
				"FTList": [],
				"FTOprs": [],
				"FTComp": [],
				"FTClass": [],
				"FTVal": [],
				"Olink": [],
				"OLClass": [],
				"OLVal": [],
				"Messages": []
			};

			// var oAIWFLOCModel = sap.ui.getCore().getModel("AIWFLOC");
			// var oAIWEQUIModel = sap.ui.getCore().getModel("AIWEQUI");

			var AIWEQUIModel = sap.ui.getCore().getModel("AIWEQUI").getData();
			var AIWFLOCModel = sap.ui.getCore().getModel("AIWFLOC").getData();

			if (AIWFLOCModel.length > 0) {
				for (var a = 0; a < AIWFLOCModel.length; a++) {
					var sFuncLoc = {
						// "Type" : true, 
						"Tplnr": AIWFLOCModel[a].Functionallocation,
						"Txtmi": AIWFLOCModel[a].Flocdescription, // Floc Description
						"TplkzFlc": AIWFLOCModel[a].Strucindicator,
						"Tplxt": AIWFLOCModel[a].StrucIndicatorDesc,
						"EditMask": AIWFLOCModel[a].EditMask,
						"Hierarchy": AIWFLOCModel[a].Hierarchy,
						"Fltyp": AIWFLOCModel[a].Floccategory,
						"Flttx": AIWFLOCModel[a].FlocCategoryDesc,
						"Swerk": AIWFLOCModel[a].Maintplant,
						"Plantname": AIWFLOCModel[a].MaintplantDesc,
						"StorFloc": AIWFLOCModel[a].Location, // Location
						"Locationdesc": AIWFLOCModel[a].Locationdesc, // Location Description
						"Abckzfloc": AIWFLOCModel[a].Abckz,
						"Abctx": AIWFLOCModel[a].Abctx,
						"Bukrsfloc": AIWFLOCModel[a].Bukrs,
						"Butxt": AIWFLOCModel[a].Butxt,
						"City": AIWFLOCModel[a].City,
						"KostFloc": AIWFLOCModel[a].Kostl, // Cost Center
						"KokrFloc": AIWFLOCModel[a].Kokrs, // ccPart1
						"Contareaname": AIWFLOCModel[a].Mctxt, // Name
						"PlntFloc": AIWFLOCModel[a].Werks, // Planning Plant
						"Planningplantdes": AIWFLOCModel[a].Planningplantdes, // Planning Plant Description
						"Ingrp": AIWFLOCModel[a].Ingrp, // Planner Group
						"Plannergrpdesc": AIWFLOCModel[a].Innam, // Planner Group Description
						"Arbplfloc": AIWFLOCModel[a].Arbpl, // Work Center
						// "Workcenterdesc" : AIWFLOCModel[a].Ktext, // Plant Work Center
						"Wergwfloc": AIWFLOCModel[a].WcWerks, // Name
						"Gewrkfloc": AIWFLOCModel[a].MainArbpl, // Main Work Center
						// "MainWcDesc" : AIWFLOCModel[a].MainKtext, // Work center Plant
						"MainWcPlant": AIWFLOCModel[a].MainWerks, // Work Center Description
						"Tplma": AIWFLOCModel[a].SupFunctionallocation, // Sup FuncLoc
						"Supflocdesc": AIWFLOCModel[a].SupFlocdescription, // Sup FlocDescription
						"BeberFl": AIWFLOCModel[a].BeberFl, // Plant Section
						"Fing": AIWFLOCModel[a].Fing, // Person responsible
						"Tele": AIWFLOCModel[a].Tele, // Phone
						"Submtiflo": AIWFLOCModel[a].ConstrType, // Construction Type
						"Constdesc": AIWFLOCModel[a].ConstructionDesc, // Construction Description
						"Eqart": AIWFLOCModel[a].TechnicalObjectTyp, // TechnicalObjectTyp
						"Eartx": AIWFLOCModel[a].Description, // TechnicalObjectTyp Description
						"Stattext": AIWFLOCModel[a].Stattext, // System Status
						"StsmFloc": AIWFLOCModel[a].StsmEqui, // Status Profile
						"Statproftxt": AIWFLOCModel[a].StsmEquiDesc, // Status Profile Description
						"UstwFloc": AIWFLOCModel[a].UstwEqui, // Status with Status Number
						"UswoFloc": AIWFLOCModel[a].UswoEqui, // Status without Status Number
						"UstaFloc": AIWFLOCModel[a].UstaEqui // User Status
					};

					if (AIWFLOCModel[a].viewParameter === "create") {
						sFuncLoc.Type = true;
					}
					sPayload.FuncLoc.push(sFuncLoc);

					var sFLAddr = {
						"Funcloc": AIWFLOCModel[a].Functionallocation,
						"Title": AIWFLOCModel[a].TitleCode,
						"Name1": AIWFLOCModel[a].Name1,
						"Name2": AIWFLOCModel[a].Name2,
						"Name3": AIWFLOCModel[a].Name3,
						"Name4": AIWFLOCModel[a].Name4,
						"Sort1": AIWFLOCModel[a].Sort1,
						"Sort2": AIWFLOCModel[a].Sort2,
						"NameCo": AIWFLOCModel[a].NameCo,
						"PostCod1": AIWFLOCModel[a].PostCod1,
						"City1": AIWFLOCModel[a].City1,
						"Building": AIWFLOCModel[a].Building,
						"Floor": AIWFLOCModel[a].Floor,
						"Roomnum": AIWFLOCModel[a].Roomnum,
						"Strsuppl1": AIWFLOCModel[a].Strsuppl1,
						"Strsuppl2": AIWFLOCModel[a].Strsuppl2,
						"Strsuppl3": AIWFLOCModel[a].Strsuppl3,
						"Location": AIWFLOCModel[a].AddrLocation,
						"RPostafl": AIWFLOCModel[a].RefPosta,
						"Landx": AIWFLOCModel[a].Landx,
						"TimeZone": AIWFLOCModel[a].TimeZone
					};
					sPayload.FLAddr.push(sFLAddr);

					var aIntlAddr = AIWFLOCModel[a].intlAddr;
					if (aIntlAddr.length > 0) {
						for (var z = 0; z < aIntlAddr.length; z++) {
							sPayload.FLAddrI.push(aIntlAddr[z]);
						}
					}

					if (g.AltLblDerv === "2" && AIWFLOCModel[a].altlbl.length > 0) {
						for (var y = 0; y < AIWFLOCModel[a].altlbl.length; y++) {
							var oAltLbl = {
								"Funcloc": AIWFLOCModel[a].Functionallocation,
								"AltAlkey": AIWFLOCModel[a].altlbl[y].AltAlkey,
								"AltStrno": AIWFLOCModel[a].altlbl[y].AltStrno,
								"AltTplkz": AIWFLOCModel[a].altlbl[y].AltTplkz
							};
							sPayload.FLALTLBEL.push(oAltLbl);
						}
					}

					var sFLClassList = AIWFLOCModel[a].classItems;
					if (sFLClassList) {
						if (sFLClassList.length > 0) {
							for (var b = 0; b < sFLClassList.length; b++) {
								var sFLClass = {
									"Funcloc": AIWFLOCModel[a].Functionallocation,
									"Classtype": sFLClassList[b].Classtype,
									"Class": sFLClassList[b].Class,
									"Clstatus1": sFLClassList[b].Clstatus1
								};
								sPayload.FLClass.push(sFLClass);
							}
						}
					}

					var sFLCharList = AIWFLOCModel[a].characteristics;
					if (sFLCharList) {
						if (sFLCharList.length > 0) {
							for (var c = 0; c < sFLCharList.length; c++) {
								var sFLVal = {
									"Funcloc": AIWFLOCModel[a].Functionallocation,
									"Atnam": sFLCharList[c].Atnam,
									"Textbez": sFLCharList[c].Textbez,
									"Atwrt": sFLCharList[c].Atwrt,
									"Class": sFLCharList[c].Class
								};
								sPayload.FLVal.push(sFLVal);
							}
						}
					}
				}
			}
			if (AIWEQUIModel.length > 0) {
				for (var d = 0; d < AIWEQUIModel.length; d++) {
					var sEquipment = {
						// "Type": true, 
						"Herst": AIWEQUIModel[d].Herst, // Manufacturer
						"Equnr": AIWEQUIModel[d].Equnr,
						"Txtmi": AIWEQUIModel[d].Eqktx,
						//"Eqktx" : AIWEQUIModel[d].Eqktx,
						"Swerk": AIWEQUIModel[d].Maintplant,
						"Name1": AIWEQUIModel[d].MaintplantDesc,
						"TplnEilo": AIWEQUIModel[d].Tplnr,
						"Flocdescription": AIWEQUIModel[d].Pltxt,
						"Eqtyp": AIWEQUIModel[d].EquipmentCatogory,
						"Etytx": AIWEQUIModel[d].EquipCatgDescription,
						"Eqart": AIWEQUIModel[d].TechnicalObjectTyp, // TechnicalObjectTyp
						"Eartx": AIWEQUIModel[d].Description, // TechnicalObjectTyp Description
						"Typbz": AIWEQUIModel[d].Typbz, // Model Number
						"SubmEeqz": AIWEQUIModel[d].ConstrType, // Construction Type
						"Constdesc": AIWEQUIModel[d].ConstructionDesc, // Construction Description
						"BukrEilo": AIWEQUIModel[d].Bukrs,
						"Butxt": AIWEQUIModel[d].Butxt,
						"HequEeqz": AIWEQUIModel[d].SuperordinateEquip, // Superord. Equipment
						"SuperordEqDes": AIWEQUIModel[d].SuperordinateEquipDesc, // Superord. Equipment Description
						"TidnEeqz": AIWEQUIModel[d].TechIdNum, // techIndNo
						"KostEilo": AIWEQUIModel[d].Kostl, // Cost Center
						"KokrEilo": AIWEQUIModel[d].Kokrs, // ccPart1
						"Contareaname": AIWEQUIModel[d].Mctxt, // Name
						"StorEilo": AIWEQUIModel[d].Location,
						"Locationdesc": AIWEQUIModel[d].Locationdesc,
						"AbckEilo": AIWEQUIModel[d].Abckz,
						"Abctx": AIWEQUIModel[d].Abctx,
						"PplaEeqz": AIWEQUIModel[d].Werks, // Planning Plant
						"Planningplantdes": AIWEQUIModel[d].Planningplantdes, // Planning Plant Description
						"IngrEeqz": AIWEQUIModel[d].Ingrp, // Planner Group
						"Plannergrpdesc": AIWEQUIModel[d].Innam, // Planner Group Description
						"Serge": AIWEQUIModel[d].Serge, // manfSerNo
						"MapaEeqz": AIWEQUIModel[d].MapaEeqz, // partNum
						"Stattext": AIWEQUIModel[d].Stattext, // System Status
						"StsmEqui": AIWEQUIModel[d].StsmEqui, // Status Profile
						"Statproftxt": AIWEQUIModel[d].StsmEquiDesc, // Status Profile Description
						"UstwEqui": AIWEQUIModel[d].UstwEqui, // Status with Status Number
						"UswoEqui": AIWEQUIModel[d].UswoEqui, // Status without Status Number
						"UstaEqui": AIWEQUIModel[d].UstaEqui, // User Status

						"Answt": AIWEQUIModel[d].Answt,
						"Ansdt": g._formatDate(AIWEQUIModel[d].Ansdt),
						"Waers": AIWEQUIModel[d].Waers, // Currency

						"ArbpEilo": AIWEQUIModel[d].Arbpl, // Work Center
						// "Workcenterdesc" : AIWEQUIModel[d].Ktext, // Plant Work Center
						"WorkCenterPlant": AIWEQUIModel[d].WcWerks, // Name
						"ArbpEeqz": AIWEQUIModel[d].MainArbpl, // Main Work Center
						// "MainWcDesc" : AIWEQUIModel[d].MainKtext, // Work Center Description
						"MainWcPlant": AIWEQUIModel[d].MainWerks, // Work center Plant

						"BebeEilo": AIWEQUIModel[d].BeberFl, // Plant Section
						"Fing": AIWEQUIModel[d].Fing, // Plant Section
						"Tele": AIWEQUIModel[d].Tele, // Plant Section
						"HeqnEeqz": AIWEQUIModel[d].EquipPosition // Position
					};

					if (AIWEQUIModel[d].viewParameter === "create") {
						sEquipment.Type = true;
					}
					sPayload.Equipment.push(sEquipment);

					var sEqAddr = {
						"Equi": AIWEQUIModel[d].Equnr,
						"Title": AIWEQUIModel[d].TitleCode,
						"Name1": AIWEQUIModel[d].Name1,
						"Name2": AIWEQUIModel[d].Name2,
						"Name3": AIWEQUIModel[d].Name3,
						"Name4": AIWEQUIModel[d].Name4,
						"Sort1": AIWEQUIModel[d].Sort1,
						"Sort2": AIWEQUIModel[d].Sort2,
						"NameCo": AIWEQUIModel[d].NameCo,
						"PostCod1": AIWEQUIModel[d].PostCod1,
						"City1": AIWEQUIModel[d].City1,
						"Building": AIWEQUIModel[d].Building,
						"Floor": AIWEQUIModel[d].Floor,
						"Roomnum": AIWEQUIModel[d].Roomnum,
						"Strsuppl1": AIWEQUIModel[d].Strsuppl1,
						"Strsuppl2": AIWEQUIModel[d].Strsuppl2,
						"Strsuppl3": AIWEQUIModel[d].Strsuppl3,
						"Location": AIWEQUIModel[d].AddrLocation,
						"RefPosta": AIWEQUIModel[d].RefPosta,
						"Landx": AIWEQUIModel[d].Landx,
						"TimeZone": AIWEQUIModel[d].TimeZone
					};
					sPayload.EqAddr.push(sEqAddr);

					var aIntlAddr = AIWEQUIModel[d].intlAddr;
					if (aIntlAddr.length > 0) {
						for (var z = 0; z < aIntlAddr.length; z++) {
							sPayload.EqAddrI.push(aIntlAddr[z]);
						}
					}

					var sEqClassList = AIWEQUIModel[d].classItems;
					if (sEqClassList) {
						if (sEqClassList.length > 0) {
							for (var e = 0; e < sEqClassList.length; e++) {
								var sEqClass = {
									"Equi": AIWEQUIModel[d].Equnr,
									"Classtype": sEqClassList[e].Classtype,
									"Class": sEqClassList[e].Class,
									"Clstatus1": sEqClassList[e].Clstatus1
								};
								sPayload.EqClass.push(sEqClass);
							}
						}
					}

					var sEqCharList = AIWEQUIModel[d].characteristics;
					if (sEqCharList) {
						if (sEqCharList.length > 0) {
							for (var f = 0; f < sEqCharList.length; f++) {
								var sEqVal = {
									"Equi": AIWEQUIModel[d].Equnr,
									"Atnam": sEqCharList[f].Atnam,
									"Textbez": sEqCharList[f].Textbez,
									"Atwrt": sEqCharList[f].Atwrt,
									"Class": sEqCharList[f].Class
								};
								sPayload.EqVal.push(sEqVal);
							}
						}
					}
				}
			}

			if (flag === 'E') {
				var i = this.etlPath;
				var AIWListETLModel = sap.ui.getCore().getModel("AIWListETLModel");
				var AIWListETLData = AIWListETLModel.getData();
				if (AIWListETLData[i].header) {
					for (var j = 0; j < AIWListETLData[i].header.length; j++) {
						//if (AIWListETLData[i].header[j].equipment === e) {
						if (AIWListETLData[i].header[j].Iwerk !== "") {
							AIWListETLData[i].header[j].Werks = AIWListETLData[i].header[j].Iwerk;
						}
						var etList = {
							"Werks": AIWListETLData[i].header[j].Werks,
							"Wcplant": AIWListETLData[i].header[j].plant,
							"Statu": AIWListETLData[i].header[j].Statu,
							"Tverwe": AIWListETLData[i].header[j].tlusg,
							"Ktext": AIWListETLData[i].header[j].Ktext,
							"Tarbpl": AIWListETLData[i].header[j].wc,
							"Vagrp": AIWListETLData[i].header[j].Vagrp,
							"Anlzu": AIWListETLData[i].header[j].Anlzu,
							"Tplnal": (AIWListETLData[i].header[j].Plnal).toString(),
							"Tleqhdr": AIWListETLData[i].grp,
							"Strat": AIWListETLData[i].header[j].Strat,
							"Eq2tl": AIWListETLData[i].equipment
						};
						sPayload.ETList.push(etList);
						//}
					}
				}

				if (AIWListETLData[i].operation) {
					for (var k = 0; k < AIWListETLData[i].operation.length; k++) {
						var etlOpr = {
							"Tleqhdr": AIWListETLData[i].grp,
							"Vornr": AIWListETLData[i].operation[k].Vornr,
							"TlArbpl": AIWListETLData[i].operation[k].Arbpl,
							"Werks2eop": AIWListETLData[i].operation[k].Werks,
							"Steus2eop": AIWListETLData[i].operation[k].Steus,
							"Ltxa1": AIWListETLData[i].operation[k].Ltxa1,
							"Arbei": AIWListETLData[i].operation[k].Arbei,
							"Dauno": AIWListETLData[i].operation[k].Dauno,
							"Arbeh": AIWListETLData[i].operation[k].Arbeh,
							"Anzzl": AIWListETLData[i].operation[k].Anzzl,
							"Daune": AIWListETLData[i].operation[k].Daune,
							"Indet": AIWListETLData[i].operation[k].Indet,
							"Tplnal": (AIWListETLData[i].operation[k].Plnal).toString()
						};
						sPayload.ETOprs.push(etlOpr);
					}
				}
			}

			if (flag === "F") {
				var i = this.ftlPath;
				var AIWListFTLModel = sap.ui.getCore().getModel("AIWListFTLModel");
				var AIWListFTLData = AIWListFTLModel.getData();
				if (AIWListFTLData[i].header) {
					for (var j = 0; j < AIWListFTLData[i].header.length; j++) {
						if (AIWListFTLData[i].header[j].Iwerk !== "") {
							AIWListFTLData[i].header[j].Werks = AIWListFTLData[i].header[j].Iwerk;
						}
						var ftList = {
							"Werks": AIWListFTLData[i].header[j].Werks,
							"Wcplant": AIWListFTLData[i].header[j].plant,
							"Statu": AIWListFTLData[i].header[j].Statu,
							"Tverwe": AIWListFTLData[i].header[j].tlusg,
							"Ktext": AIWListFTLData[i].header[j].Ktext,
							"Tarbpl": AIWListFTLData[i].header[j].wc,
							"Vagrp": AIWListFTLData[i].header[j].Vagrp,
							"Anlzu": AIWListFTLData[i].header[j].Anlzu,
							"Tplnal": (AIWListFTLData[i].header[j].Plnal).toString(),
							"Tlflhdr": AIWListFTLData[i].grp,
							"Strat": AIWListFTLData[i].header[j].Strat,
							"Fl2tl": AIWListFTLData[i].floc
						};
						sPayload.FTList.push(ftList);
					}
				}

				if (AIWListFTLData[i].operation) {
					for (var k = 0; k < AIWListFTLData[i].operation.length; k++) {
						var ftlOpr = {
							"Tlflhdr": AIWListFTLData[i].grp,
							"Vornr": AIWListFTLData[i].operation[k].Vornr,
							"TlArbpl": AIWListFTLData[i].operation[k].Arbpl,
							"Werks2fop": AIWListFTLData[i].operation[k].Werks,
							"Steus2fop": AIWListFTLData[i].operation[k].Steus,
							"Ltxa1": AIWListFTLData[i].operation[k].Ltxa1,
							"Arbei": AIWListFTLData[i].operation[k].Arbei,
							"Dauno": AIWListFTLData[i].operation[k].Dauno,
							"Arbeh": AIWListFTLData[i].operation[k].Arbeh,
							"Anzzl": AIWListFTLData[i].operation[k].Anzzl,
							"Daune": AIWListFTLData[i].operation[k].Daune,
							"Indet": AIWListFTLData[i].operation[k].Indet,
							"Tplnal": (AIWListFTLData[i].operation[k].Plnal).toString()
						};
						sPayload.FTOprs.push(ftlOpr);
					}
				}
			}

			var fnSuccess = function (r) {
				if (flag === 'E') {
					var AIWListETLModel = sap.ui.getCore().getModel("AIWListETLModel");
					var AIWListETLData = AIWListETLModel.getData();
					if (r.ETList.results.length > 0) {
						for (var j = 0; j < r.ETList.results.length; j++) {
							AIWListETLData[i].header[j].equipment = r.ETList.results[j].Eq2tl; //EQUIPMENT
							AIWListETLData[i].header[j].Iwerk = r.ETList.results[j].Werks; //PLANNING PLANT
							AIWListETLData[i].header[j].pPlantDesc = r.ETList.results[j].Iwerktxt; // PLANNING PLANT DESCRIPTION
							AIWListETLData[i].header[j].wc = r.ETList.results[j].Tarbpl; // WORK CENTER
							AIWListETLData[i].header[j].plant = r.ETList.results[j].Wcplant; //WORK CENTER PLANT
						}
					}
					if (r.ETOprs.results.length > 0) {
						for (var j = 0; j < r.ETOprs.results.length; j++) {
							AIWListETLData[i].operation[j].Arbpl = r.ETOprs.results[j].TlArbpl; // WORK CENTER
							AIWListETLData[i].operation[j].Werks = r.ETOprs.results[j].Werks2eop; //WORK CENTER PLANT
							AIWListETLData[i].operation[j].Steus = r.ETOprs.results[j].Steus2eop; //CONTROL KEY
							if (r.ETOprs.results[j].Usrvalflg1 === "X") { //CONTROL KEY ENABLE/DISABLE
								AIWListETLData[i].operation[j].SteusEnable = false;
							} else {
								AIWListETLData[i].operation[j].SteusEnable = true;
							}
						}
					}
					AIWListETLModel.setData(AIWListETLData);
					sap.ui.getCore().getModel("AIWListETLModel").refresh();
					g.getView().getModel("ETLHeaderModel").refresh();
				}
				if (flag === 'F') {
					var AIWListFTLModel = sap.ui.getCore().getModel("AIWListFTLModel");
					var AIWListFTLData = AIWListFTLModel.getData();
					if (r.FTList.results.length > 0) {
						for (var j = 0; j < r.FTList.results.length; j++) {
							AIWListFTLData[i].header[j].floc = r.FTList.results[j].Fl2tl; //FUNCTIONAL LOCATION
							AIWListFTLData[i].header[j].Iwerk = r.FTList.results[j].Werks; //PLANNING PLANT
							AIWListFTLData[i].header[j].pPlantDesc = r.FTList.results[j].Iwerktxt; // PLANNING PLANT DESCRIPTION
							AIWListFTLData[i].header[j].wc = r.FTList.results[j].Tarbpl; // WORK CENTER
							AIWListFTLData[i].header[j].plant = r.FTList.results[j].Wcplant; //WORK CENTER PLANT
						}
					}
					if (r.ETOprs.results.length > 0) {
						for (var j = 0; j < r.FTOprs.results.length; j++) {
							AIWListFTLData[i].operation[j].Arbpl = r.FTOprs.results[j].TlArbpl; // WORK CENTER
							AIWListFTLData[i].operation[j].Werks = r.FTOprs.results[j].Werks2fop; //WORK CENTER PLANT
							AIWListFTLData[i].operation[j].Steus = r.FTOprs.results[j].Steus2fop; //CONTROL KEY
							if (r.FTOprs.results[j].Usrvalflg1 === "X") { //CONTROL KEY ENABLE/DISABLE
								AIWListFTLData[i].operation[j].SteusEnable = false;
							} else {
								AIWListFTLData[i].operation[j].SteusEnable = true;
							}
						}
					}
					AIWListFTLModel.setData(AIWListFTLData);
					sap.ui.getCore().getModel("AIWListFTLModel").refresh();
					g.getView().getModel("FTLHeaderModel").refresh();
				}
			};

			//var oModel = g.getView().getModel();
			if (sPayload.FLAddrI.length > 0) {
				sPayload.FLAddrI = $.map(sPayload.FLAddrI, function (obj) {
					return $.extend(true, {}, obj);
				});
				for (var z = 0; z < sPayload.FLAddrI.length > 0; z++) {
					delete sPayload.FLAddrI[z].AdNationEnable;
					delete sPayload.FLAddrI[z].City1iVS;
					delete sPayload.FLAddrI[z].StreetiVS;
				}
			}
			if (sPayload.EqAddrI.length > 0) {
				sPayload.EqAddrI = $.map(sPayload.EqAddrI, function (obj) {
					return $.extend(true, {}, obj);
				});
				for (var z = 0; z < sPayload.EqAddrI.length > 0; z++) {
					delete sPayload.EqAddrI[z].AdNationEnable;
					delete sPayload.EqAddrI[z].City1iVS;
					delete sPayload.EqAddrI[z].StreetiVS;
				}
			}
			oModel.create(sPath, sPayload, {
				success: fnSuccess,
				error: {

				}
			});
		},

		// DeriveEquipmentData: function(e) {},
		/*
		 * Function to handle 'change' event of Functional location in Task List
		 * @param {sap.ui.base.Event} oEvent
		 */
		onTLFlocChange: function (oEvent) {
			var g = this;
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var AIWListFTLModel = sap.ui.getCore().getModel("AIWListFTLModel");
			var FLData = AIWListFTLModel.getData();
			var sPath = oEvent.getSource().getBindingContext("AIWListFTLModel").getPath();
			this.FLindex = parseInt(sPath.split("/")[1]);
			this.sGrpTableRef = oEvent.getSource().getParent().getParent();

			if (newValue !== "") {
				if (newValue === undefined)
					return;
				var oModelData = sap.ui.getCore().getModel("AIWFLOC").getData();
				if (oModelData.length > 0) {
					for (var i = 0; i < oModelData.length; i++) {
						if (newValue === oModelData[i].Functionallocation) {
							FLData[g.FLindex].floc = oModelData[i].Functionallocation;
							FLData[g.FLindex].flocDesc = oModelData[i].Flocdescription;
							FLData[g.FLindex].flocVS = "None";
							FLdata[g.FLindex].header.forEach(function (headerItem) {
								headerItem.floc = FLdata[g.FLindex].floc;
								headerItem.flocDesc = FLdata[g.FLindex].flocDesc;
							});
							AIWListFTLModel.setData(FLData);
							g.sGrpTableRef.setSelectedItem(g.sGrpTableRef.getItems()[g.eqindex], true /*selected*/ , true /*fire event*/ );
							if (FLData[g.FLindex].header.length > 0) {
								g.DeriveEquiFlocData(FLData[g.FLindex].floc, 'F');
							}
							return;
						}
					}
				}
				var c = newValue.toUpperCase();
				var oFilter = [new sap.ui.model.Filter("Tplnr", "EQ", c)];
				M.read("/FunctionLocationSet", {
					filters: oFilter,
					success: function (r) {
						if (r.results.length > 0) {
							FLData[g.FLindex].floc = r.results[0].Tplnr;
							FLData[g.FLindex].flocDesc = r.results[0].Pltxt;
							FLData[g.FLindex].flocVS = "None";
							FLdata[g.FLindex].header.forEach(function (headerItem) {
								headerItem.floc = FLdata[g.FLindex].floc;
								headerItem.flocDesc = FLdata[g.FLindex].flocDesc;
							});
							AIWListFTLModel.setData(FLData);
							g.sGrpTableRef.setSelectedItem(g.sGrpTableRef.getItems()[g.eqindex], true /*selected*/ , true /*fire event*/ );
							if (FLData[g.FLindex].header.length > 0) {
								g.DeriveEquiFlocData(FLData[g.FLindex].floc, 'F');
							}
						} else {
							FLData[g.FLindex].flocVS = "Error";
							AIWListFTLModel.setData(FLData);
						}
					},
					error: function (err) {
						FLData[g.FLindex].flocVS = "Error";
						AIWListFTLModel.setData(FLData);
					}
				});
			} else {
				FLData[g.FLindex].flocVS = "Error";
				AIWListFTLModel.setData(FLData);
			}
		},
		/*
		 * Function to handle 'change' event of Equipment in Task List
		 * @param {sap.ui.base.Event} oEvent
		 */
		onTLEquipChange: function (oEvent) {
			var g = this;
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var AIWListETLModel = sap.ui.getCore().getModel("AIWListETLModel");
			var ETLdata = AIWListETLModel.getData();
			var sPath = oEvent.getSource().getBindingContext("AIWListETLModel").getPath();
			this.eqindex = parseInt(sPath.split("/")[1]);
			this.sGrpTableRef = oEvent.getSource().getParent().getParent();

			if (newValue !== "") {
				if (newValue === undefined)
					return;
				var oModelData = sap.ui.getCore().getModel("AIWEQUI").getData();
				if (oModelData.length > 0) {
					for (var i = 0; i < oModelData.length; i++) {
						if (newValue === oModelData[i].Equnr) {
							ETLdata[g.eqindex].equipment = oModelData[i].Equnr;
							ETLdata[g.eqindex].equipmentDesc = oModelData[i].Eqktx;
							ETLdata[g.eqindex].equipmentVS = "None";
							ETLdata[g.eqindex].header.forEach(function (headerItem) {
								headerItem.equipment = ETLdata[g.eqindex].equipment;
								headerItem.equipmentDesc = ETLdata[g.eqindex].equipmentDesc;
							});
							AIWListETLModel.setData(ETLdata);
							g.sGrpTableRef.setSelectedItem(g.sGrpTableRef.getItems()[g.eqindex], true /*selected*/ , true /*fire event*/ );
							if (ETLdata[g.eqindex].header.length > 0) {
								g.DeriveEquiFlocData(ETLdata[g.eqindex].equipment, 'E');
							}
							//this.DeriveEquiFlocData(ETLdata[g.eqindex].equipment, 'E');
							return;
						}
					}
				}
				var c = newValue.toUpperCase();
				var oFilter = [new sap.ui.model.Filter("Equnr", "EQ", c)];
				M.read("/EquipmentNumberSet", {
					filters: oFilter,
					success: function (r) {
						if (r.results.length > 0) {
							ETLdata[g.eqindex].equipment = r.results[0].Equnr;
							ETLdata[g.eqindex].equipmentDesc = r.results[0].Eqktx;
							ETLdata[g.eqindex].equipmentVS = "None";
							ETLdata[g.eqindex].header.forEach(function (headerItem) {
								headerItem.equipment = ETLdata[g.eqindex].equipment;
								headerItem.equipmentDesc = ETLdata[g.eqindex].equipmentDesc;
							});
							AIWListETLModel.setData(ETLdata);

							g.sGrpTableRef.setSelectedItem(g.sGrpTableRef.getItems()[g.eqindex], true /*selected*/ , true /*fire event*/ );
							if (ETLdata[g.eqindex].header.length > 0) {
								g.DeriveEquiFlocData(ETLdata[g.eqindex].equipment, 'E');
							}
							//g.DeriveEquiFlocData(ETLdata[g.eqindex].equipment, 'E');
							//g.DeriveEquiFlocData(ETLdata[g.eqindex].equipment, 'E');
						} else {
							ETLdata[g.eqindex].equipmentVS = "Error";
							AIWListETLModel.setData(ETLdata);
						}
					},
					error: function (err) {
						ETLdata[g.eqindex].equipmentVS = "Error";
						AIWListETLModel.setData(ETLdata);
					}
				});
			} else {
				ETLdata[g.eqindex].equipmentVS = "Error";
				AIWListETLModel.setData(ETLdata);
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Functional location in Task List
		 * @param {sap.ui.base.Event} oEvent
		 */
		onTLFlocVH: function (oEvent) {
			var g = this;
			var M = this.getView().getModel("valueHelp");
			var sPath = oEvent.getSource().getBindingContext("AIWListFTLModel").getPath();
			this.FLindex = parseInt(sPath.split("/")[1]);

			var FLocSelectDialog = ValueHelpRequest.FLocSelectDialog(g);

			this.getView().addDependent(FLocSelectDialog);
			FLocSelectDialog.setModel(M);
			FLocSelectDialog.setModel(this.getView().getModel("i18n"), "i18n");

			FLocSelectDialog.open();
			this.sGrpTableRef = oEvent.getSource().getParent().getParent();
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Functional location in BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		onFLocBomVH: function (oEvent) {
			var g = this;
			var M = this.getView().getModel("valueHelp");
			if (this.action === "createFlbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListFLModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "copyFlbom" || this.action === "copyMtoFlbom") {
				this.sourceId = oEvent.getSource().getId();
			}
			var FLocSelectDialog = ValueHelpRequest.FLocSelectDialog(g);

			this.getView().addDependent(FLocSelectDialog);
			FLocSelectDialog.setModel(M);
			FLocSelectDialog.setModel(this.getView().getModel("i18n"), "i18n");

			FLocSelectDialog.open();
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Equipment in Task List
		 * @param {sap.ui.base.Event} oEvent
		 */
		onTLEquipVH: function (oEvent) {
			var g = this;
			var M = this.getView().getModel("valueHelp");
			var sPath = oEvent.getSource().getBindingContext("AIWListETLModel").getPath();
			this.eqindex = parseInt(sPath.split("/")[1]);
			var EquipmentSelectDialog = ValueHelpRequest.EquipmentSelectDialog(g);

			this.getView().addDependent(EquipmentSelectDialog);
			EquipmentSelectDialog.setModel(M);
			EquipmentSelectDialog.setModel(this.getView().getModel("i18n"), "i18n");

			EquipmentSelectDialog.open();
			this.sGrpTableRef = oEvent.getSource().getParent().getParent();
		},
		/*
		 * Function to handle 'change' event of Functional location in BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		flocChangeBOM: function (oEvent) {
			var g = this;
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var AIWListFLModel = sap.ui.getCore().getModel("AIWListFLModel");
			var FLData = AIWListFLModel.getData();
			if (this.action === "createFlbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListFLModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "copyFlbom" || this.action === "copyMtoFlbom") {
				this.sourceId = oEvent.getSource().getId();
				g._copyFragment.setBusy(true);
			}

			if (newValue !== "") {
				if (newValue === undefined)
					return;
				var c = newValue.toUpperCase();
				var oFilter = [new sap.ui.model.Filter("Tplnr", "EQ", c)];
				//this.BusyDialog.open();
				M.read("/FunctionLocationSet", {
					filters: oFilter,
					success: function (r) {
						if (r.results.length > 0) {
							if (g.action === "createFlbom") {
								FLData[g.sindex].Tplnrbom = r.results[0].Tplnr;
								FLData[g.sindex].FLDesc = r.results[0].Pltxt;
								FLData[g.sindex].FLValueState = "None";
								AIWListFLModel.setData(FLData);
								if (FLData[g.sindex].Werks !== "" && FLData[g.sindex].Stlan !== "") {
									g.readBomHdrDetails(FLData[g.sindex].Tplnrbom, FLData[g.sindex].Werks, FLData[g.sindex].Stlan, FLData, g.sindex);
								}
							}
							if (g.action === "copyFlbom" || g.action === "copyMtoFlbom") {
								/*sap.ui.getCore().byId(g.sourceId).setValue(r.results[0].Tplnr);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");*/
								var copyModel = g._copyFragment.getModel("copyModel");
								var copyData = copyModel.getData();
								var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
								if (binding === "/copyFlocSource") {
									copyData.copyFlocSource = r.results[0].Tplnr;
									copyData.copyFlocSourceDesc = r.results[0].Pltxt;
								} else if (binding === "/copyFlocTarget") {
									copyData.copyFlocTarget = r.results[0].Tplnr;
									copyData.copyFlocTargetDesc = r.results[0].Pltxt;
								}
								copyModel.setData(copyData);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");
								g._copyFragment.setBusy(false);
							}
						} else {
							if (g.action === "createFlbom") {
								FLData[g.sindex].FLValueState = "Error";
								AIWListFLModel.setData(FLData);
							}
							if (g.action === "copyFlbom" || g.action === "copyMtoFlbom") {
								sap.ui.getCore().byId(g.sourceId).setValueState("Error");
								g._copyFragment.setBusy(false);
							}
						}
						//g.BusyDialog.close(); 
					},
					error: function (err) {
						if (g.action === "createFlbom") {
							FLData[g.sindex].FLValueState = "Error";
							AIWListFLModel.setData(FLData);
						}
						if (g.action === "copyFlbom" || g.action === "copyMtoFlbom") {
							sap.ui.getCore().byId(g.sourceId).setValueState("Error");
							g._copyFragment.setBusy(false);
						}
						//g.BusyDialog.close(); 
					}
				});
			} else {
				if (g.action === "createFlbom") {
					FLData[g.sindex].FLValueState = "Error";
					AIWListFLModel.setData(FLData);
				}
				if (g.action === "copyFlbom" || g.action === "copyMtoFlbom") {
					sap.ui.getCore().byId(g.sourceId).setValueState("Error");
					g._copyFragment.setBusy(false);
				}
			}
		},
		/*
		 * To handle valueHelp CONFIRM press of Functional location in BOM
		 * @param {sap.ui.base.Event} E
		 */
		handleFLocConfirm: function (E) {
			var g = this.getParent().getController();
			var action = g.action;
			var AIWListFLModel = sap.ui.getCore().getModel("AIWListFLModel");
			var FLdata = AIWListFLModel.getData();
			if (action === "createFlbom") {
				var sindex = g.sindex;
				FLdata[sindex].Tplnrbom = E.getParameters().selectedItem.getProperty("title");
				FLdata[sindex].FLDesc = E.getParameters().selectedItem.getProperty("description");
				FLdata[sindex].FLValueState = "None";
				AIWListFLModel.setData(FLdata);
				if (FLdata[sindex].Werks !== "" && FLdata[sindex].Stlan !== "") {
					g.readBomHdrDetails(FLdata[sindex].Tplnrbom, FLdata[sindex].Werks, FLdata[sindex].Stlan, FLdata, sindex, "");
				}
			}
			if (action === "copyFlbom" || action === "copyMtoFlbom") {
				var copyModel = g._copyFragment.getModel("copyModel");
				var copyData = copyModel.getData();
				var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
				if (binding === "/copyFlocSource") {
					copyData.copyFlocSource = E.getParameters().selectedItem.getProperty("title");
					copyData.copyFlocSourceDesc = E.getParameters().selectedItem.getProperty("description");
					copyData.srcFlocValueState = "None"; //14.08
				} else {
					copyData.copyFlocTarget = E.getParameters().selectedItem.getProperty("title");
					copyData.copyFlocTargetDesc = E.getParameters().selectedItem.getProperty("description");
					copyData.tarFlocValueState = "None"; //14.08
				}
				copyModel.setData(copyData);
			}
			if (action.indexOf("FTL")) {
				var g = this.getParent().getController();
				var AIWListFTLModel = sap.ui.getCore().getModel("AIWListFTLModel");
				var FLdata = AIWListFTLModel.getData();
				var sindex = g.FLindex;
				FLdata[sindex].floc = E.getParameters().selectedItem.getProperty("title");
				FLdata[sindex].flocDesc = E.getParameters().selectedItem.getProperty("description");
				FLdata[sindex].flocVS = "None";
				FLdata[sindex].header.forEach(function (headerItem) {
					headerItem.floc = FLdata[sindex].floc;
					headerItem.flocDesc = FLdata[sindex].flocDesc;
				});
				AIWListFTLModel.setData(FLdata);
				g.sGrpTableRef.setSelectedItem(g.sGrpTableRef.getItems()[g.eqindex], true /*selected*/ , true /*fire event*/ );
				if (FLdata[sindex].header.length > 0) {
					g.DeriveEquiFlocData(FLdata[sindex].floc, 'F');
				}
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Material in BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		onMaterialVH: function (oEvent) {
			var g = this;
			var M = this.getView().getModel("valueHelp");
			if (this.action === "createMbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListMatModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
				/*var Eqdata = oEvent.getSource().getBindingContext("AIWListMatModel").getModel().getData();
				var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");*/
			}
			if (this.action === "createWbsbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListWBSModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
				/*var Eqdata = oEvent.getSource().getBindingContext("AIWListMatModel").getModel().getData();
				var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");*/
			}
			if (this.action === "copyMbom" || this.action === "copyMtoEbom" || g.action === "copyMtoFlbom" || g.action === "copyWbsbom" || g.action ===
				"copyMtoWbsbom") {
				this.sourceId = oEvent.getSource().getId();
			}

			var settings = {
				title: this.getView().getModel("i18n").getProperty("MATERIAL_TXT"),
				noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
				items: {
					path: "/MaterialSHSet",
					template: new sap.m.StandardListItem({
						title: "{Matnr}",
						description: "{Maktx}"
					})
				},
				confirm: function (E) {
					//var g = this.getParent().getController();
					if (g.action === "createMbom") {
						var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");
						var Matdata = AIWListMatModel.getData();
						Matdata[g.sindex].Matnr = E.getParameters().selectedItem.getProperty("title");
						Matdata[g.sindex].MatDesc = E.getParameters().selectedItem.getProperty("description");
						Matdata[g.sindex].matValueState = "None";
						AIWListMatModel.setData(Matdata);
						if (Matdata[g.sindex].Werks !== "" && Matdata[g.sindex].Stlan !== "" && Matdata[g.sindex].Stalt !== "") {
							g.readBomHdrDetails(Matdata[g.sindex].Matnr, Matdata[g.sindex].Werks, Matdata[g.sindex].Stlan, Matdata, g.sindex, "");
						}
					}
					if (g.action === "createWbsbom") {
						var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
						var Wbsdata = AIWListWBSModel.getData();
						Wbsdata[g.sindex].Matnr = E.getParameters().selectedItem.getProperty("title");
						Wbsdata[g.sindex].MatDesc = E.getParameters().selectedItem.getProperty("description");
						Wbsdata[g.sindex].matValueState = "None";
						AIWListWBSModel.setData(Wbsdata);
						if (Wbsdata[g.sindex].WbsExt !== "" && Wbsdata[g.sindex].Werks !== "" && Wbsdata[g.sindex].Stlan !== "") {
							g.readBomHdrDetails(Wbsdata[g.sindex].Matnr, Wbsdata[g.sindex].Werks, Wbsdata[g.sindex].Stlan, Wbsdata, g.sindex, Wbsdata[g
								.sindex].WbsExt);
						}
					}
					if (g.action === "copyMbom" || g.action === "copyMtoEbom" || g.action === "copyMtoFlbom" || g.action === "copyWbsbom" || g.action ===
						"copyMtoWbsbom") {
						var copyModel = g._copyFragment.getModel("copyModel");
						var copyData = copyModel.getData();
						var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
						if (binding === "/copyMaterialSource") {
							copyData.copyMaterialSource = E.getParameters().selectedItem.getProperty("title");
							copyData.copyMaterialSourceDesc = E.getParameters().selectedItem.getProperty("description");
							copyData.srcMatValueState = "None"; //14.08
						} else {
							copyData.copyMaterialTarget = E.getParameters().selectedItem.getProperty("title");
							copyData.copyMaterialTargetDesc = E.getParameters().selectedItem.getProperty("description");
							copyData.tarMatValueState = "None"; //14.08
						}
						copyModel.setData(copyData);
					}
				}
			};

			var q = "/MaterialSHSet";
			var MaterialSelectDialog = ValueHelpProvider.getSelectDialog(M, q, [], settings, "Matnr", "Maktx");
			MaterialSelectDialog.setModel(this.getView().getModel("i18n"), "i18n");
			MaterialSelectDialog.open();
		},
		/*
		 * To handle valueHelp CONFIRM press of Material in BOM
		 * @param {sap.ui.base.Event} E
		 */
		handleMaterialConfirm: function (E) {
			var g = this.getParent().getController();
			if (g.action === "createMbom") {
				var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");
				var Matdata = AIWListMatModel.getData();
				Matdata[g.sindex].Matnr = E.getParameters().selectedItem.getProperty("title");
				Matdata[g.sindex].MatDesc = E.getParameters().selectedItem.getProperty("description");
				Matdata[g.sindex].matValueState = "None";
				AIWListMatModel.setData(Matdata);
				if (Matdata[g.sindex].Werks !== "" && Matdata[g.sindex].Stlan !== "" && Matdata[g.sindex].Stalt !== "") {
					g.readBomHdrDetails(Matdata[g.sindex].Matnr, Matdata[g.sindex].Werks, Matdata[g.sindex].Stlan, Matdata, g.sindex, "");
				}
			}
			if (g.action === "createWbsbom") {
				var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
				var Wbsdata = AIWListWBSModel.getData();
				Wbsdata[g.sindex].Matnr = E.getParameters().selectedItem.getProperty("title");
				Wbsdata[g.sindex].MatDesc = E.getParameters().selectedItem.getProperty("description");
				Wbsdata[g.sindex].matValueState = "None";
				AIWListWBSModel.setData(Wbsdata);
				if (Wbsdata[g.sindex].WbsExt !== "" && Wbsdata[g.sindex].Werks !== "" && Wbsdata[g.sindex].Stlan !== "") {
					g.readBomHdrDetails(Wbsdata[g.sindex].Matnr, Wbsdata[g.sindex].Werks, Wbsdata[g.sindex].Stlan, Wbsdata, g.sindex, Wbsdata[g.sindex]
						.WbsExt);
				}
			}
			if (g.action === "copyMbom" || g.action === "copyMtoEbom" || g.action === "copyMtoFlbom" || g.action === "copyWbsbom" || g.action ===
				"copyMtoWbsbom") {
				var copyModel = g._copyFragment.getModel("copyModel");
				var copyData = copyModel.getData();
				var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
				if (binding === "/copyMaterialSource") {
					copyData.copyMaterialSource = E.getParameters().selectedItem.getProperty("title");
					copyData.copyMaterialSourceDesc = E.getParameters().selectedItem.getProperty("description");
					copyData.srcMatValueState = "None"; //14.08
				} else {
					copyData.copyMaterialTarget = E.getParameters().selectedItem.getProperty("title");
					copyData.copyMaterialTargetDesc = E.getParameters().selectedItem.getProperty("description");
					copyData.tarMatValueState = "None"; //14.08
				}
				copyModel.setData(copyData);
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of WBS Element in BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		onWbsVH: function (oEvent) {
			var g = this;
			var M = this.getView().getModel("valueHelp");
			if (this.action === "createWbsbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListWBSModel").getPath();
				var sindex = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "copyWbsbom" || this.action === "copyMtoWbsbom") {
				this.sourceId = oEvent.getSource().getId();
			}
			var action = g.action;
			var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
			var Wbsdata = AIWListWBSModel.getData();

			var settings = {
				title: "{i18n>WBS_TXT}",
				noDataText: "{i18n>LOAD}" + "...",
				columns: [new sap.m.Column({
						header: [
							new sap.m.Text({
								text: "{i18n>DESC_TXT}"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>WBS_TXT}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>SHORTID}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>PROJDEF}"
							})
						]
					})
				],
				items: {
					path: "/WBSElementSet",
					template: new sap.m.ColumnListItem({
						type: "Active",
						unread: false,
						cells: [
							new sap.m.Text({
								text: "{Post1}"
							}),
							new sap.m.Text({
								text: "{Posid}"
							}),
							new sap.m.Text({
								text: "{Poski}"
							}),
							new sap.m.Text({
								text: "{Objnr}"
							})
						]
					})

				},
				confirm: function (E) {
					if (action === "createWbsbom") {
						Wbsdata[sindex].WbsExt = E.getParameter("selectedItem").getCells()[1].getText();
						Wbsdata[sindex].WbsDesc = E.getParameter("selectedItem").getCells()[0].getText();
						Wbsdata[sindex].wbsValueState = "None";
						AIWListWBSModel.setData(Wbsdata);
						if (Wbsdata[sindex].Matnr !== "" && Wbsdata[sindex].Werks !== "" && Wbsdata[sindex].Stlan !== "") {
							g.readBomHdrDetails(Wbsdata[sindex].Matnr, Wbsdata[sindex].Werks, Wbsdata[sindex].Stlan, Wbsdata, sindex, Wbsdata[sindex].WbsExt);
						}
					}
					if (action === "copyWbsbom" || action === "copyMtoWbsbom") {
						var copyModel = g._copyFragment.getModel("copyModel");
						var copyData = copyModel.getData();
						var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
						if (binding === "/copyWBSSource") {
							copyData.copyWBSSource = E.getParameter("selectedItem").getCells()[1].getText();
							copyData.copyWBSSourceDesc = E.getParameter("selectedItem").getCells()[0].getText();
							copyData.srcWBSValueState = "None";
						} else {
							copyData.copyWBSTarget = E.getParameter("selectedItem").getCells()[1].getText();
							copyData.copyWBSTargetDesc = E.getParameter("selectedItem").getCells()[0].getText();
							copyData.tarWBSValueState = "None";
						}
						copyModel.setData(copyData);
					}
				}
			};

			var sPath = "/WBSElementSet";
			var oFilter = [];
			var cells = [
				new sap.m.Text({
					text: "{Post1}"
				}),
				new sap.m.Text({
					text: "{Posid}"
				}),
				new sap.m.Text({
					text: "{Poski}"
				}),
				new sap.m.Text({
					text: "{Objnr}"
				})
			];
			var WbsSelectDialog = ValueHelpProvider.getValueHelp(M, sPath, cells, oFilter, settings, "Post1", "Posid");
			WbsSelectDialog.open();
			WbsSelectDialog.setModel(this.getView().getModel("i18n"), "i18n");
		},
		/*
		 * To handle valueHelp CONFIRM press of WBS Element in BOM
		 * @param {sap.ui.base.Event} E
		 */
		handleWbsConfirm: function (E) {
			var g = this.getParent().getController();
			var sindex = g.sindex;
			var action = g.action;
			var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
			var Wbsdata = AIWListWBSModel.getData();
			if (action === "createWbsbom") {
				Wbsdata[sindex].WbsExt = E.getParameter("selectedItem").getCells()[1].getText();
				Wbsdata[sindex].WbsDesc = E.getParameter("selectedItem").getCells()[0].getText();
				Wbsdata[sindex].wbsValueState = "None";
				AIWListWBSModel.setData(Wbsdata);
				if (Wbsdata[sindex].Matnr !== "" && Wbsdata[sindex].Werks !== "" && Wbsdata[sindex].Stlan !== "") {
					g.readBomHdrDetails(Wbsdata[sindex].Matnr, Wbsdata[sindex].Werks, Wbsdata[sindex].Stlan, Wbsdata, sindex, Wbsdata[sindex].WbsExt);
				}
			}
			if (action === "copyWbsbom" || action === "copyMtoWbsbom") {
				var copyModel = g._copyFragment.getModel("copyModel");
				var copyData = copyModel.getData();
				var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
				if (binding === "/copyWBSSource") {
					copyData.copyWBSSource = E.getParameter("selectedItem").getCells()[1].getText();
					copyData.copyWBSSourceDesc = E.getParameter("selectedItem").getCells()[0].getText();
					copyData.srcWBSValueState = "None"; //14.08
				} else {
					copyData.copyWBSTarget = E.getParameter("selectedItem").getCells()[1].getText();
					copyData.copyWBSTargetDesc = E.getParameter("selectedItem").getCells()[0].getText();
					copyData.tarWBSValueState = "None"; //14.08
				}
				copyModel.setData(copyData);
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Plant in BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		onPlantInBomVH: function (oEvent) {
			var g = this;
			if (this.action === "createMbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListMatModel").getPath();
				this.index = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "createEbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListEqModel").getPath();
				this.index = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "createFlbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListFLModel").getPath();
				this.index = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "createWbsbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListWBSModel").getPath();
				this.index = parseInt(sPath.split("/")[1]);
			}
			if (g.action === "copyMbom" || this.action === "copyEbom" || this.action === "copyMtoEbom" || g.action === "copyFlbom" || g.action ===
				"copyMtoFlbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
				this.sourceId = oEvent.getSource().getId();
			}

			var settings = {
				title: this.getView().getModel("i18n").getProperty("PLANT_TXT"),
				noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
				items: {
					path: "/PlantNameSet",
					template: new sap.m.StandardListItem({
						title: "{Werks}",
						description: "{Name1}"
					})
				},
				confirm: function (E) {
					//var g = this.getParent().getController();
					if (g.action === "createMbom") {
						var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");
						var Matdata = AIWListMatModel.getData();
						Matdata[g.index].Werks = E.getParameters().selectedItem.getProperty("title");
						Matdata[g.index].WerksDesc = E.getParameters().selectedItem.getProperty("description");
						Matdata[g.index].plantValueState = "None";
						AIWListMatModel.setData(Matdata);
						if (Matdata[g.index].Matnr !== "" && Matdata[g.index].Stlan !== "" && Matdata[g.index].Stalt !== "") {
							g.readBomHdrDetails(Matdata[g.index].Matnr, Matdata[g.index].Werks, Matdata[g.index].Stlan, Matdata, g.index, "");
						}
					}
					if (g.action === "createEbom") {
						var AIWListEqModel = sap.ui.getCore().getModel("AIWListEqModel");
						var Eqdata = AIWListEqModel.getData();
						Eqdata[g.index].Werks = E.getParameters().selectedItem.getProperty("title");
						Eqdata[g.index].WerksDesc = E.getParameters().selectedItem.getProperty("description");
						Eqdata[g.index].plantValueState = "None";
						AIWListEqModel.setData(Eqdata);
						if (Eqdata[g.index].Eqnrbom !== "" && Eqdata[g.index].Stlan !== "") {
							g.readBomHdrDetails(Eqdata[g.index].Eqnrbom, Eqdata[g.index].Werks, Eqdata[g.index].Stlan, Eqdata, g.index, "");
						}
					}
					if (g.action === "createFlbom") {
						var AIWListFLModel = sap.ui.getCore().getModel("AIWListFLModel");
						var FLdata = AIWListFLModel.getData();
						FLdata[g.index].Werks = E.getParameters().selectedItem.getProperty("title");
						FLdata[g.index].WerksDesc = E.getParameters().selectedItem.getProperty("description");
						FLdata[g.index].plantValueState = "None";
						AIWListFLModel.setData(FLdata);
						if (FLdata[g.index].Tplnrbom !== "" && FLdata[g.index].Stlan !== "") {
							g.readBomHdrDetails(FLdata[g.index].Tplnrbom, FLdata[g.index].Werks, FLdata[g.index].Stlan, FLdata, g.index, "");
						}
					}
					if (g.action === "createWbsbom") {
						var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
						var Wbsdata = AIWListWBSModel.getData();
						Wbsdata[g.index].Werks = E.getParameters().selectedItem.getProperty("title");
						Wbsdata[g.index].WerksDesc = E.getParameters().selectedItem.getProperty("description");
						Wbsdata[g.index].plantValueState = "None";
						AIWListWBSModel.setData(Wbsdata);
						if (Wbsdata[g.index].WbsExt !== "" && Wbsdata[g.index].Matnr !== "" && Wbsdata[g.index].Stlan !== "") {
							g.readBomHdrDetails(Wbsdata[g.index].Matnr, Wbsdata[g.index].Werks, Wbsdata[g.index].Stlan, Wbsdata, g.index, Wbsdata[g.index]
								.WbsExt);
						}
					}
					if (g.action === "copyMbom" || g.action === "copyEbom" || g.action === "copyMtoEbom" || g.action === "copyFlbom" || g.action ===
						"copyMtoFlbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
						var copyModel = g._copyFragment.getModel("copyModel");
						var copyData = copyModel.getData();
						var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
						if (binding === "/copyPlantSource") {
							copyData.copyPlantSource = E.getParameters().selectedItem.getProperty("title");
							copyData.copyPlantSourceDesc = E.getParameters().selectedItem.getProperty("description");
							copyData.srcPlantValueState = "None"; //14.08
						} else {
							copyData.copyPlantTarget = E.getParameters().selectedItem.getProperty("title");
							copyData.copyPlantTargetDesc = E.getParameters().selectedItem.getProperty("description");
							copyData.tarPlantValueState = "None"; //14.08
						}
						copyModel.setData(copyData);
					}
				}
			};

			var q = "/PlantNameSet";
			var M = this.getView().getModel("valueHelp");
			var PlantSelectDialog = ValueHelpProvider.getSelectDialog(M, q, [], settings, "Werks", "Name1");
			PlantSelectDialog.setModel(this.getView().getModel("i18n"), "i18n");
			PlantSelectDialog.open();
		},
		/*
		 * To handle valueHelp CONFIRM press of Plant in BOM
		 * @param {sap.ui.base.Event} E
		 */
		handlePlantConfirm: function (E) {
			var g = this.getParent().getController();
			if (g.action === "createMbom") {
				var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");
				var Matdata = AIWListMatModel.getData();
				Matdata[g.index].Werks = E.getParameters().selectedItem.getProperty("title");
				Matdata[g.index].WerksDesc = E.getParameters().selectedItem.getProperty("description");
				Matdata[g.index].plantValueState = "None";
				AIWListMatModel.setData(Matdata);
				if (Matdata[g.index].Matnr !== "" && Matdata[g.index].Stlan !== "" && Matdata[g.index].Stalt !== "") {
					g.readBomHdrDetails(Matdata[g.index].Matnr, Matdata[g.index].Werks, Matdata[g.index].Stlan, Matdata, g.index, "");
				}
			}
			if (g.action === "createEbom") {
				var AIWListEqModel = sap.ui.getCore().getModel("AIWListEqModel");
				var Eqdata = AIWListEqModel.getData();
				Eqdata[g.index].Werks = E.getParameters().selectedItem.getProperty("title");
				Eqdata[g.index].WerksDesc = E.getParameters().selectedItem.getProperty("description");
				Eqdata[g.index].plantValueState = "None";
				AIWListEqModel.setData(Eqdata);
				if (Eqdata[g.index].Eqnrbom !== "" && Eqdata[g.index].Stlan !== "") {
					g.readBomHdrDetails(Eqdata[g.index].Eqnrbom, Eqdata[g.index].Werks, Eqdata[g.index].Stlan, Eqdata, g.index, "");
				}
			}
			if (g.action === "createFlbom") {
				var AIWListFLModel = sap.ui.getCore().getModel("AIWListFLModel");
				var FLdata = AIWListFLModel.getData();
				FLdata[g.index].Werks = E.getParameters().selectedItem.getProperty("title");
				FLdata[g.index].WerksDesc = E.getParameters().selectedItem.getProperty("description");
				FLdata[g.index].plantValueState = "None";
				AIWListFLModel.setData(FLdata);
				if (FLdata[g.index].Tplnrbom !== "" && FLdata[g.index].Stlan !== "") {
					g.readBomHdrDetails(FLdata[g.index].Tplnrbom, FLdata[g.index].Werks, FLdata[g.index].Stlan, FLdata, g.index, "");
				}
			}
			if (g.action === "createWbsbom") {
				var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
				var Wbsdata = AIWListWBSModel.getData();
				Wbsdata[g.index].Werks = E.getParameters().selectedItem.getProperty("title");
				Wbsdata[g.index].WerksDesc = E.getParameters().selectedItem.getProperty("description");
				Wbsdata[g.index].plantValueState = "None";
				AIWListWBSModel.setData(Wbsdata);
				if (Wbsdata[g.index].WbsExt !== "" && Wbsdata[g.index].Matnr !== "" && Wbsdata[g.index].Stlan !== "") {
					g.readBomHdrDetails(Wbsdata[g.index].Matnr, Wbsdata[g.index].Werks, Wbsdata[g.index].Stlan, Wbsdata, g.index, Wbsdata[g.index]
						.WbsExt);
				}
			}
			if (g.action === "copyMbom" || g.action === "copyEbom" || g.action === "copyMtoEbom" || g.action === "copyFlbom" || g.action ===
				"copyMtoFlbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
				var copyModel = g._copyFragment.getModel("copyModel");
				var copyData = copyModel.getData();
				var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
				if (binding === "/copyPlantSource") {
					copyData.copyPlantSource = E.getParameters().selectedItem.getProperty("title");
					copyData.copyPlantSourceDesc = E.getParameters().selectedItem.getProperty("description");
					copyData.srcPlantValueState = "None"; //14.08
				} else {
					copyData.copyPlantTarget = E.getParameters().selectedItem.getProperty("title");
					copyData.copyPlantTargetDesc = E.getParameters().selectedItem.getProperty("description");
					copyData.tarPlantValueState = "None"; //14.08
				}
				copyModel.setData(copyData);
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Usage in BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		omBomUsageVH: function (oEvent) {
			var g = this;
			var oFilters = [];
			if (this.action === "createMbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListMatModel").getPath();
				this.index = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "createEbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListEqModel").getPath();
				this.index = parseInt(sPath.split("/")[1]);
				oFilters = [new sap.ui.model.Filter("EqFl", "EQ", true)];
			}
			if (this.action === "createFlbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListFLModel").getPath();
				this.index = parseInt(sPath.split("/")[1]);
				oFilters = [new sap.ui.model.Filter("EqFl", "EQ", true)];
			}
			if (this.action === "createWbsbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListWBSModel").getPath();
				this.index = parseInt(sPath.split("/")[1]);
			}
			if (g.action === "copyMbom" || this.action === "copyEbom" || this.action === "copyMtoEbom" || g.action === "copyFlbom" || g.action ===
				"copyMtoFlbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
				this.sourceId = oEvent.getSource().getId();
				this.BindPath = oEvent.getSource().getBindingInfo("value").binding.sPath;
			}

			var settings = {
				title: this.getView().getModel("i18n").getProperty("BOM_USAGE_TXT"),
				noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
				items: {
					path: "/BOMUsageHelpSet",
					template: new sap.m.StandardListItem({
						title: "{Stlan}",
						description: "{Antxt}"
					})
				},
				confirm: function (E) {
					//var g = this.getParent().getController();
					if (g.action === "createMbom") {
						var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");
						var Matdata = AIWListMatModel.getData();
						Matdata[g.index].Stlan = E.getParameters().selectedItem.getProperty("title");
						Matdata[g.index].StlanDesc = E.getParameters().selectedItem.getProperty("description");
						Matdata[g.index].usageValueState = "None";
						AIWListMatModel.setData(Matdata);
						if (Matdata[g.index].Matnr !== "" && Matdata[g.index].Werks !== "" && Matdata[g.index].Stalt !== "") {
							g.readBomHdrDetails(Matdata[g.index].Matnr, Matdata[g.index].Werks, Matdata[g.index].Stlan, Matdata, g.index, "");
						}
					}
					if (g.action === "createEbom") {
						var AIWListEqModel = sap.ui.getCore().getModel("AIWListEqModel");
						var Eqdata = AIWListEqModel.getData();
						Eqdata[g.index].Stlan = E.getParameters().selectedItem.getProperty("title");
						Eqdata[g.index].StlanDesc = E.getParameters().selectedItem.getProperty("description");
						Eqdata[g.index].usageValueState = "None";
						AIWListEqModel.setData(Eqdata);
						if (Eqdata[g.index].Eqnrbom !== "" && Eqdata[g.index].Werks !== "") {
							g.readBomHdrDetails(Eqdata[g.index].Eqnrbom, Eqdata[g.index].Werks, Eqdata[g.index].Stlan, Eqdata, g.index, "");
						}
					}
					if (g.action === "createFlbom") {
						var AIWListFLModel = sap.ui.getCore().getModel("AIWListFLModel");
						var FLdata = AIWListFLModel.getData();
						FLdata[g.index].Stlan = E.getParameters().selectedItem.getProperty("title");
						FLdata[g.index].StlanDesc = E.getParameters().selectedItem.getProperty("description");
						FLdata[g.index].usageValueState = "None";
						AIWListFLModel.setData(FLdata);
						if (FLdata[g.index].Tplnrbom !== "" && FLdata[g.index].Werks !== "") {
							g.readBomHdrDetails(FLdata[g.index].Tplnrbom, FLdata[g.index].Werks, FLdata[g.index].Stlan, FLdata, g.index, "");
						}
					}
					if (g.action === "createWbsbom") {
						var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
						var Wbsdata = AIWListWBSModel.getData();
						Wbsdata[g.index].Stlan = E.getParameters().selectedItem.getProperty("title");
						Wbsdata[g.index].StlanDesc = E.getParameters().selectedItem.getProperty("description");
						Wbsdata[g.index].usageValueState = "None";
						AIWListWBSModel.setData(Wbsdata);
						if (Wbsdata[g.index].WbsExt !== "" && Wbsdata[g.index].Matnr !== "" && Wbsdata[g.index].Werks !== "") {
							g.readBomHdrDetails(Wbsdata[g.index].Matnr, Wbsdata[g.index].Werks, Wbsdata[g.index].Stlan, Wbsdata, g.index, Wbsdata[g.index]
								.WbsExt);
						}
					}
					if (g.action === "copyMbom" || g.action === "copyEbom" || g.action === "copyMtoEbom" || g.action === "copyFlbom" || g.action ===
						"copyMtoFlbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
						var copyModel = g._copyFragment.getModel("copyModel");
						var copyData = copyModel.getData();
						var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
						if (binding === "/copyUsageSource") {
							copyData.copyUsageSource = E.getParameters().selectedItem.getProperty("title");
							copyData.copyUsageSourceDesc = E.getParameters().selectedItem.getProperty("description");
							copyData.srcUsageValueState = "None"; //14.08
						} else {
							copyData.copyUsageTarget = E.getParameters().selectedItem.getProperty("title");
							copyData.copyUsageTargetDesc = E.getParameters().selectedItem.getProperty("description");
							copyData.tarUsageValueState = "None"; //14.08
						}
						copyModel.setData(copyData);
					}
				}
			};

			var q = "/BOMUsageHelpSet";
			var M = this.getView().getModel("valueHelp");
			var BomUsageSelectDialog = ValueHelpProvider.getSelectDialog(M, q, oFilters, settings, "Stlan", "Antxt");
			BomUsageSelectDialog.setModel(this.getView().getModel("i18n"), "i18n");
			BomUsageSelectDialog.open();
		},
		/*
		 * To handle valueHelp CONFIRM press of Usage in BOM
		 * @param {sap.ui.base.Event} E
		 */
		handleBomUsageConfirm: function (E) {
			var g = this.getParent().getController();
			if (g.action === "createMbom") {
				var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");
				var Matdata = AIWListMatModel.getData();
				Matdata[g.index].Stlan = E.getParameter("selectedItem").getCells()[0].getText();
				Matdata[g.index].StlanDesc = E.getParameter("selectedItem").getCells()[7].getText();
				Matdata[g.index].usageValueState = "None";
				AIWListMatModel.setData(Matdata);
				if (Matdata[g.index].Matnr !== "" && Matdata[g.index].Werks !== "" && Matdata[g.index].Stalt !== "") {
					g.readBomHdrDetails(Matdata[g.index].Matnr, Matdata[g.index].Werks, Matdata[g.index].Stlan, Matdata, g.index, "");
				}
			}
			if (g.action === "createEbom") {
				var AIWListEqModel = sap.ui.getCore().getModel("AIWListEqModel");
				var Eqdata = AIWListEqModel.getData();
				Eqdata[g.index].Stlan = E.getParameter("selectedItem").getCells()[0].getText();
				Eqdata[g.index].StlanDesc = E.getParameter("selectedItem").getCells()[7].getText();
				Eqdata[g.index].usageValueState = "None";
				AIWListEqModel.setData(Eqdata);
				if (Eqdata[g.index].Eqnrbom !== "" && Eqdata[g.index].Werks !== "") {
					g.readBomHdrDetails(Eqdata[g.index].Eqnrbom, Eqdata[g.index].Werks, Eqdata[g.index].Stlan, Eqdata, g.index, "");
				}
			}
			if (g.action === "createFlbom") {
				var AIWListFLModel = sap.ui.getCore().getModel("AIWListFLModel");
				var FLdata = AIWListFLModel.getData();
				FLdata[g.index].Stlan = E.getParameter("selectedItem").getCells()[0].getText();
				FLdata[g.index].StlanDesc = E.getParameter("selectedItem").getCells()[7].getText();
				FLdata[g.index].usageValueState = "None";
				AIWListFLModel.setData(FLdata);
				if (FLdata[g.index].Tplnrbom !== "" && FLdata[g.index].Werks !== "") {
					g.readBomHdrDetails(FLdata[g.index].Tplnrbom, FLdata[g.index].Werks, FLdata[g.index].Stlan, FLdata, g.index, "");
				}
			}
			if (g.action === "createWbsbom") {
				var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
				var Wbsdata = AIWListWBSModel.getData();
				Wbsdata[g.index].Stlan = E.getParameter("selectedItem").getCells()[0].getText();
				Wbsdata[g.index].StlanDesc = E.getParameter("selectedItem").getCells()[7].getText();
				Wbsdata[g.index].usageValueState = "None";
				AIWListWBSModel.setData(Wbsdata);
				if (Wbsdata[g.index].WbsExt !== "" && Wbsdata[g.index].Matnr !== "" && Wbsdata[g.index].Werks !== "") {
					g.readBomHdrDetails(Wbsdata[g.index].Matnr, Wbsdata[g.index].Werks, Wbsdata[g.index].Stlan, Wbsdata, g.index, Wbsdata[g.index]
						.WbsExt);
				}
			}
			if (g.action === "copyMbom" || g.action === "copyEbom" || g.action === "copyMtoEbom" || g.action === "copyFlbom" || g.action ===
				"copyMtoFlbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
				var copyModel = g._copyFragment.getModel("copyModel");
				var copyData = copyModel.getData();
				var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
				if (binding === "/copyUsageSource") {
					copyData.copyUsageSource = E.getParameter("selectedItem").getCells()[0].getText();
					copyData.copyUsageSourceDesc = E.getParameter("selectedItem").getCells()[7].getText();
					copyData.srcUsageValueState = "None"; //14.08
				} else {
					copyData.copyUsageTarget = E.getParameter("selectedItem").getCells()[0].getText();
					copyData.copyUsageTargetDesc = E.getParameter("selectedItem").getCells()[7].getText();
					copyData.tarUsageValueState = "None"; //14.08
				}
				copyModel.setData(copyData);
			}
		},
		/*
		 * Function to read BOM Header derive data
		 * @param {string} m - Material/Equipment/Functional Location
		 * @param {string} p - Plant
		 * @param {string} u - Usage
		 * @param {array} Eqdata 
		 * @param {string} index 
		 * @param {string} w - WBS Element
		 */
		readBomHdrDetails: function (m, p, u, Eqdata, index, w) {
			var g = this;
			var M = this.getView().getModel();
			var q;
			var BusyData = this.getView().getModel("BusyModel").getData();
			if (this.action === "createMbom") {
				var existCount = 0;
				var AIWListMatData = sap.ui.getCore().getModel("AIWListMatModel").getData();
				if (AIWListMatData.length > 0) {
					for (var j = 0; j < AIWListMatData.length; j++) {
						if (AIWListMatData[j].Matnr === m && AIWListMatData[j].Werks === p && AIWListMatData[j].Stlan === u && AIWListMatData[j].Stalt ===
							Eqdata[index].Stalt) {
							var msg = "Material BOM " + m + "/" + p + "/" + u + "/" + Eqdata[index].Stalt + " already locked in this CR";
							existCount = existCount + 1;
							if (existCount > 1) {
								AIWListMatData[j].Matnr = "";
								AIWListMatData[j].Werks = "";
								AIWListMatData[j].Stlan = "";
								AIWListMatData[j].Stalt = "";
								AIWListMatData[j].MatDesc = "";
								AIWListMatData[j].WerksDesc = "";
								AIWListMatData[j].StlanDesc = "";
								break;
							}
						}
					}
				}
				if (existCount <= 1) {
					q = "/DeriveBOMHDRSet(Material='" + m + "',Werks='" + p + "',Stlan='" + u + "',Stlal='" + Eqdata[index].Stalt +
						"',Tplnr='',Equnr='',Proid='')";
				} else {
					g.createMessagePopover([{
						title: msg,
						type: "Error"
					}], false);
					// sap.m.MessageBox.show(msg, {
					// 	title: "Error",
					// 	icon: sap.m.MessageBox.Icon.ERROR,
					// 	onClose: function (oAction) {}
					// });
					sap.ui.getCore().getModel("AIWListMatModel").setData(AIWListMatData);
					this.getView().getModel("AIWListMatModel").setData(AIWListMatData);
					return;
				}
			}
			if (this.action === "createEbom") {
				var existCount = 0;
				var AIWListEqData = sap.ui.getCore().getModel("AIWListEqModel").getData();
				if (AIWListEqData.length > 0) {
					for (var j = 0; j < AIWListEqData.length; j++) {
						if (AIWListEqData[j].Eqnrbom === m && AIWListEqData[j].Werks === p && AIWListEqData[j].Stlan === u) {
							var msg = "Equipment BOM " + m + "/" + p + "/" + u + " already locked in this CR";
							existCount = existCount + 1;
							if (existCount > 1) {
								AIWListEqData[j].Eqnrbom = "";
								AIWListEqData[j].Werks = "";
								AIWListEqData[j].Stlan = "";
								AIWListEqData[j].EquiDesc = "";
								AIWListEqData[j].WerksDesc = "";
								AIWListEqData[j].StlanDesc = "";
								break;
							}
						}
					}
				}
				if (existCount <= 1) {
					q = "/DeriveBOMHDRSet(Equnr='" + m + "',Werks='" + p + "',Stlan='" + u + "',Stlal='',Material='',Tplnr='',Proid='')";
				} else {
					g.createMessagePopover([{
						title: msg,
						type: "Error"
					}], false);
					// sap.m.MessageBox.show(msg, {
					// 	title: "Error",
					// 	icon: sap.m.MessageBox.Icon.ERROR,
					// 	onClose: function (oAction) {}
					// });
					sap.ui.getCore().getModel("AIWListEqModel").setData(AIWListEqData);
					this.getView().getModel("AIWListEqModel").setData(AIWListEqData);
					return;
				}
			}
			if (this.action === "copyEbom") {
				q = "/DeriveBOMHDRSet(Equnr='" + m + "',Werks='" + p + "',Stlan='" + u + "',Stlal='',Material='',Tplnr='',Proid='')";
			}

			if (this.action === "createFlbom") {
				var existCount = 0;
				var AiwListFLData = sap.ui.getCore().getModel("AIWListFLModel").getData();
				if (AiwListFLData.length > 0) {
					for (var j = 0; j < AiwListFLData.length; j++) {
						if (AiwListFLData[j].Tplnrbom === m && AiwListFLData[j].Werks === p && AiwListFLData[j].Stlan === u) {
							var msg = "Functional Location BOM " + m + "/" + p + "/" + u + " already locked in this CR";
							existCount = existCount + 1;
							if (existCount > 1) {
								AiwListFLData[j].Tplnrbom = "";
								AiwListFLData[j].Werks = "";
								AiwListFLData[j].Stlan = "";
								AiwListFLData[j].FLDesc = "";
								AiwListFLData[j].WerksDesc = "";
								AiwListFLData[j].StlanDesc = "";
								break;
							}
						}
					}
				}
				if (existCount <= 1) {
					q = "/DeriveBOMHDRSet(Tplnr='" + m + "',Werks='" + p + "',Stlan='" + u + "',Stlal='',Material='',Equnr='',Proid='')";
				} else {
					g.createMessagePopover([{
						title: msg,
						type: "Error"
					}], false);
					// sap.m.MessageBox.show(msg, {
					// 	title: "Error",
					// 	icon: sap.m.MessageBox.Icon.ERROR,
					// 	onClose: function (oAction) {}
					// });
					sap.ui.getCore().getModel("AIWListFLModel").setData(AiwListFLData);
					this.getView().getModel("AIWListFLModel").setData(AiwListFLData);
					return;
				}
			}
			if (this.action === "copyFlbom") {
				q = "/DeriveBOMHDRSet(Tplnr='" + m + "',Werks='" + p + "',Stlan='" + u + "',Stlal='',Material='',Equnr='',Proid='')";
			}

			if (this.action === "createWbsbom") {
				var existCount = 0;
				var AIWListWBSData = sap.ui.getCore().getModel("AIWListWBSModel").getData();
				if (AIWListWBSData.length > 0) {
					for (var j = 0; j < AIWListWBSData.length; j++) {
						if (AIWListWBSData[j].WbsExt === w && AIWListWBSData[j].Matnr === m && AIWListWBSData[j].Werks === p && AIWListWBSData[j].Stlan ===
							u) {
							var msg = "WBS BOM " + w + "/" + m + "/" + p + "/" + u + " already locked in this CR";
							existCount = existCount + 1;
							if (existCount > 1) {
								AIWListWBSData[j].WbsExt = "";
								AIWListWBSData[j].Matnr = "";
								AIWListWBSData[j].Werks = "";
								AIWListWBSData[j].Stlan = "";
								AIWListWBSData[j].WbsDesc = "";
								AIWListWBSData[j].MatDesc = "";
								AIWListWBSData[j].WerksDesc = "";
								AIWListWBSData[j].StlanDesc = "";
								break;
							}
						}
					}
				}
				if (existCount <= 1) {
					q = "/DeriveBOMHDRSet(Material='" + m + "',Werks='" + p + "',Stlan='" + u + "',Stlal='',Proid='" + w + "',Tplnr='',Equnr='')";
				} else {
					g.createMessagePopover([{
						title: msg,
						type: "Error"
					}], false);
					// sap.m.MessageBox.show(msg, {
					// 	title: "Error",
					// 	icon: sap.m.MessageBox.Icon.ERROR,
					// 	onClose: function (oAction) {}
					// });
					sap.ui.getCore().getModel("AIWListWBSModel").setData(AIWListWBSData);
					this.getView().getModel("AIWListWBSModel").setData(AIWListWBSData);
					return;
				}
			}
			if (this.action === "copyWbsbom") {
				q = "/DeriveBOMHDRSet(Material='" + m + "',Werks='" + p + "',Stlan='" + u + "',Stlal='',Proid='" + w + "',Tplnr='',Equnr='')";
			}

			if (g.action === "copyMbom" || this.action === "copyMtoEbom" || this.action === "copyMtoFlbom" || this.action ===
				"copyMtoWbsbom") {
				q = "/DeriveBOMHDRSet(Material='" + m + "',Werks='" + p + "',Stlan='" + u + "',Stlal='" + Eqdata[index].Stalt +
					"',Tplnr='',Equnr='',Proid='')";
			}

			BusyData.AiwTblBusy = true;
			this.getView().getModel("BusyModel").setData(BusyData);

			M.read(q, {
				success: function (r) {
					BusyData.AiwTblBusy = false;
					g.getView().getModel("BusyModel").setData(BusyData);
					var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");
					var AIWListEqModel = sap.ui.getCore().getModel("AIWListEqModel");
					var AIWListFLModel = sap.ui.getCore().getModel("AIWListFLModel");
					var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
					if (g.action.indexOf("create") > -1) {
						if (r.Message !== "") {
							g.createMessagePopover([{
								title: r.Message,
								type: "Error"
							}], false);
							// sap.m.MessageBox.show(r.Message, {
							// 	title: "Error",
							// 	icon: sap.m.MessageBox.Icon.ERROR,
							// 	onClose: function (oAction) {}
							// });
							Eqdata[index].plantEnable = true;
							Eqdata[index].usageEnable = true;

							if (g.action === "createMbom") {
								Eqdata[index].matValueState = "Error";
								Eqdata[index].plantValueState = "Error";
								Eqdata[index].usageValueState = "Error";
								Eqdata[index].altbomValueState = "Error";
								Eqdata[index].matEnable = true;
								Eqdata[index].altbomEnable = true;
								AIWListMatModel.setData(Eqdata);
							}
							if (g.action === "createEbom") {
								Eqdata[index].equipValueState = "Error";
								Eqdata[index].plantValueState = "Error";
								Eqdata[index].usageValueState = "Error";
								Eqdata[index].equipEnable = true;
								AIWListEqModel.setData(Eqdata);
							}
							if (g.action === "createFlbom") {
								Eqdata[index].FLValueState = "Error";
								Eqdata[index].plantValueState = "Error";
								Eqdata[index].usageValueState = "Error";
								Eqdata[index].FLEnable = true;
								AIWListFLModel.setData(Eqdata);
							}
							if (g.action === "createWbsbom") {
								Eqdata[index].wbsValueState = "Error";
								Eqdata[index].matValueState = "Error";
								Eqdata[index].plantValueState = "Error";
								Eqdata[index].usageValueState = "Error";
								Eqdata[index].wbsEnable = true;
								Eqdata[index].matEnable = true;
								AIWListWBSModel.setData(Eqdata);
							}
							BusyData.AiwTblBusy = false;
							g.getView().getModel("BusyModel").setData(BusyData);
							return;
						}
					}
					if (g.action === "createMbom") {
						Eqdata[index].Stalt = r.Stlal;
						Eqdata[index].Pmbomtech = r.Pmbomtech;
						Eqdata[index].PmbomtechTxt = r.PmbomtechTxt;
						Eqdata[index].BaseQty = r.Bmeng;
						Eqdata[index].BaseUom = r.Bmein;
						Eqdata[index].Bomstatus = r.Stlst;
						Eqdata[index].BomstatusText = r.Sttxt;
						Eqdata[index].Validfrom = g.getDateFormat(r.Validfrom);
						Eqdata[index].Validtoda = g.getDateFormat(r.Validto);

						Eqdata[index].matEnable = false;
						Eqdata[index].plantEnable = false;
						Eqdata[index].usageEnable = false;
						if (w && w !== "" && Eqdata[index].Stalt !== "") {
							Eqdata[index].altbomEnable = false;
						}
						Eqdata[index].addItemEnable = true;

						Eqdata[index].matValueState = "None";
						Eqdata[index].plantValueState = "None";
						Eqdata[index].usageValueState = "None";
						AIWListMatModel.setData(Eqdata);
					}
					if (g.action === "createEbom") {
						Eqdata[index].BaseQty = r.Bmeng;
						Eqdata[index].BaseUom = r.Bmein;
						Eqdata[index].Bomstatus = r.Stlst;
						Eqdata[index].BomstatusText = r.Sttxt;
						Eqdata[index].Validfrom = g.getDateFormat(r.Validfrom);
						Eqdata[index].Validtoda = g.getDateFormat(r.Validto);

						Eqdata[index].equipEnable = false;
						Eqdata[index].plantEnable = false;
						Eqdata[index].usageEnable = false;
						Eqdata[index].addItemEnable = true;

						Eqdata[index].equipValueState = "None";
						Eqdata[index].plantValueState = "None";
						Eqdata[index].usageValueState = "None";
						AIWListEqModel.setData(Eqdata);
					}
					if (g.action === "createFlbom") {
						Eqdata[index].BaseQty = r.Bmeng;
						Eqdata[index].BaseUom = r.Bmein;
						Eqdata[index].Bomstatus = r.Stlst;
						Eqdata[index].BomstatusText = r.Sttxt;
						Eqdata[index].Validfrom = g.getDateFormat(r.Validfrom);
						Eqdata[index].Validtoda = g.getDateFormat(r.Validto);

						Eqdata[index].FLEnable = false;
						Eqdata[index].plantEnable = false;
						Eqdata[index].usageEnable = false;
						Eqdata[index].addItemEnable = true;

						Eqdata[index].FLValueState = "None";
						Eqdata[index].plantValueState = "None";
						Eqdata[index].usageValueState = "None";
						AIWListFLModel.setData(Eqdata);
					}
					if (g.action === "createWbsbom") {
						Eqdata[index].BaseQty = r.Bmeng;
						Eqdata[index].BaseUom = r.Bmein;
						Eqdata[index].Bomstatus = r.Stlst;
						Eqdata[index].BomstatusText = r.Sttxt;
						Eqdata[index].Validfrom = g.getDateFormat(r.Validfrom);
						Eqdata[index].Validtoda = g.getDateFormat(r.Validto);

						Eqdata[index].wbsEnable = false;
						Eqdata[index].matEnable = false;
						Eqdata[index].plantEnable = false;
						Eqdata[index].usageEnable = false;
						Eqdata[index].addItemEnable = true;

						Eqdata[index].wbsValueState = "None";
						Eqdata[index].matValueState = "None";
						Eqdata[index].plantValueState = "None";
						Eqdata[index].usageValueState = "None";
						AIWListWBSModel.setData(Eqdata);
					}
					if (g.action === "copyMbom") {
						//var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");
						var AIWListMatData = AIWListMatModel.getData();
						var mObj = {
							Matnr: Eqdata.copyMaterialTarget,
							Werks: Eqdata.copyPlantTarget,
							Stlan: Eqdata.copyUsageTarget,
							Stalt: Eqdata.copyAltBomTarget,
							Bomstatus: r.Stlst,
							Lngtxt: "",
							Validfrom: g.getDateFormat(r.Validfrom),
							BaseQty: r.Bmeng,
							BaseUom: r.Bmein,
							Validtoda: g.getDateFormat(r.Validto),

							MatDesc: Eqdata.copyMaterialTargetDesc,
							WerksDesc: Eqdata.copyPlantTargetDesc,
							StlanDesc: Eqdata.copyUsageTargetDesc,
							BomstatusText: r.Sttxt,
							matEnable: false,
							plantEnable: false,
							usageEnable: false,

							bomType: "Change",
							modeFlag: "Delete",

							matItem: [],
							matSubItem: []
						};
						AIWListMatData.push(mObj);
						AIWListMatModel.setData(AIWListMatData);
						g.getView().setModel(AIWListMatModel, "AIWListMatModel");
						g.updateCount("MaterialBom", AIWListMatModel.getData());
						g.onCopyBOMclose();
					}
					if (g.action === "copyEbom" || g.action === "copyMtoEbom") {
						//var AIWListEqModel = sap.ui.getCore().getModel("AIWListEqModel");
						var AIWListEqData = AIWListEqModel.getData();
						var eObj = {
							Eqnrbom: Eqdata.copyEquipmentTarget,
							Werks: Eqdata.copyPlantTarget,
							Stlan: Eqdata.copyUsageTarget,
							Bomstatus: r.Stlst,
							Lngtxt: "",
							Validfrom: g.getDateFormat(r.Validfrom),
							BaseQty: r.Bmeng,
							BaseUom: r.Bmein,
							Validtoda: g.getDateFormat(r.Validto),

							EquiDesc: Eqdata.copyEquipmentTargetDesc,
							WerksDesc: Eqdata.copyPlantTargetDesc,
							StlanDesc: Eqdata.copyUsageTargetDesc,
							BomstatusText: r.Sttxt,
							equipEnable: false,
							plantEnable: false,
							usageEnable: false,

							bomType: "Change",
							modeFlag: "Delete",

							eqItem: [],
							eqSubItem: []
						};
						AIWListEqData.push(eObj);
						AIWListEqModel.setData(AIWListEqData);
						g.getView().setModel(AIWListEqModel, "AIWListEqModel");
						g.updateCount("EquipmentBom", AIWListEqModel.getData());
						g.onCopyBOMclose();
					}
					if (g.action === "copyFlbom" || g.action === "copyMtoFlbom") {
						//var AIWListFLModel = sap.ui.getCore().getModel("AIWListFLModel");
						var AIWListFLData = AIWListFLModel.getData();
						var flObj = {
							Tplnrbom: Eqdata.copyFlocTarget,
							Werks: Eqdata.copyPlantTarget,
							Stlan: Eqdata.copyUsageTarget,
							Bomstatus: r.Stlst,
							Lngtxt: "",
							Validfrom: g.getDateFormat(r.Validfrom),
							BaseQty: r.Bmeng,
							BaseUom: r.Bmein,
							Validtoda: g.getDateFormat(r.Validto),

							FLDesc: Eqdata.copyFlocTargetDesc,
							WerksDesc: Eqdata.copyPlantTargetDesc,
							StlanDesc: Eqdata.copyUsageTargetDesc,
							BomstatusText: r.Sttxt,
							FLEnable: false,
							plantEnable: false,
							usageEnable: false,

							bomType: "Change",
							modeFlag: "Delete",

							flItem: [],
							flSubItem: []
						};
						AIWListFLData.push(flObj);
						AIWListFLModel.setData(AIWListFLData);
						g.getView().setModel(AIWListFLModel, "AIWListFLModel");
						g.updateCount("FLBom", AIWListFLModel.getData());
						g.onCopyBOMclose();
					}
					if (g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
						//var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
						var AIWListWBSData = AIWListWBSModel.getData();
						var wbsObj = {
							WbsExt: Eqdata.copyWBSTarget,
							Matnr: Eqdata.copyMaterialTarget,
							Werks: Eqdata.copyPlantTarget,
							Stlan: Eqdata.copyUsageTarget,
							Bomstatus: r.Stlst,
							Lngtxt: "",
							Validfrom: g.getDateFormat(r.Validfrom),
							BaseQty: r.Bmeng,
							BaseUom: r.Bmein,
							Validtoda: g.getDateFormat(r.Validto),

							WbsDesc: Eqdata.copyWBSTargetDesc,
							MatDesc: Eqdata.copyMaterialTargetDesc,
							WerksDesc: Eqdata.copyPlantTargetDesc,
							StlanDesc: Eqdata.copyUsageTargetDesc,
							BomstatusText: r.Sttxt,
							wbsEnable: false,
							matEnable: false,
							plantEnable: false,
							usageEnable: false,

							bomType: "Change",
							modeFlag: "Delete",

							wbsItem: [],
							wbsSubItem: []
						};
						AIWListWBSData.push(wbsObj);
						AIWListWBSModel.setData(AIWListWBSData);
						g.getView().setModel(AIWListWBSModel, "AIWListWBSModel");
						g.updateCount("WbsBom", AIWListWBSModel.getData());
						g.onCopyBOMclose();
					}
				},
				error: function (err) {
					var error = [];
					if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
						.errordetails
						.length === 0) {
						error[0] = JSON.parse(err.responseText).error.message.value;
					} else {
						for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
							error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
						}
					}

					var oMessageList = [];
					for (var e = 0; e < error.length; e++) {
						oMessageList.push({
							type: "Error",
							title: error[e]
						});
					}

					g.createMessagePopover(oMessageList, false);

					// var value = error.join("\n");
					// sap.m.MessageBox.show(value, {
					// 	title: "Error",
					// 	icon: sap.m.MessageBox.Icon.ERROR,
					// 	onClose: function (oAction) {}
					// });
					BusyData.AiwTblBusy = false;
					g.getView().getModel("BusyModel").setData(BusyData);
				}
			});
		},
		/*
		 * Function to get Date in MM/DD/YYYY format
		 * @param {date} _date
		 * @returns fprmatDate
		 */
		getDateFormat: function (_date) {
			if (_date !== "" && _date !== null) {
				var formatDate = "";
				var date = new Date(_date);
				var yyyy = date.getFullYear();
				var mm = date.getMonth();
				if (mm < 10) {
					mm = mm + 1;
					if (mm.length === 1) {
						mm = "0" + mm;
					}
				} else {
					mm = mm + 1;
				}
				var dd = date.getDate();
				if (dd < 10) {
					dd = "0" + dd;
				}
				var hh = date.getHours();
				if (hh < 10) {
					hh = "0" + hh;
				}
				var min = date.getMinutes();
				if (min < 10) {
					min = "0" + min;
				}
				var ss = date.getSeconds();
				if (ss < 10) {
					ss = "0" + ss;
				}
				formatDate = mm + "/" + dd + "/" + yyyy;
				return formatDate;
			} else if (_date === null) {
				return "";
			}
		},
		/*
		 * Common function to handle 'liveChange' event of inputs
		 * @param {sap.ui.base.Event} oEvent
		 */
		onLiveChange: function (oEvent) {
			if (oEvent.getSource().getValue() === " ") {
				oEvent.getSource().setValue("");
			}
			oEvent.getSource().setValueState("None");
			oEvent.getSource().setValueStateText("");
		},
		/*
		 * Function to handle 'change' event of Material in BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		materialChange: function (oEvent) {
			var g = this;
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var sPath;
			if (this.action === "createMbom") {
				var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");
				var Matdata = AIWListMatModel.getData();
				sPath = oEvent.getSource().getBindingContext("AIWListMatModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "createWbsbom") {
				var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
				var Wbsdata = AIWListWBSModel.getData();
				sPath = oEvent.getSource().getBindingContext("AIWListWBSModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "copyMbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
				this.sourceId = oEvent.getSource().getId();
				this._copyFragment.setBusy(true);
			}

			if (newValue !== "") {
				if (newValue === undefined)
					return;
				var c = newValue.toUpperCase();
				var oFilter = [new sap.ui.model.Filter("Matnr", "EQ", c)];
				//this.BusyDialog.open();
				M.read("/MaterialSHSet", {
					filters: oFilter,
					success: function (r) {
						if (r.results.length > 0) {
							if (g.action === "createMbom") {
								Matdata[g.sindex].Matnr = r.results[0].Matnr;
								Matdata[g.sindex].MatDesc = r.results[0].Maktx;
								Matdata[g.sindex].matValueState = "None";
								AIWListMatModel.setData(Matdata);
								if (Matdata[g.sindex].Werks !== "" && Matdata[g.sindex].Stlan !== "") {
									g.readBomHdrDetails(Matdata[g.sindex].Matnr, Matdata[g.sindex].Werks, Matdata[g.sindex].Stlan, Matdata, g.sindex);
								}
							}
							if (g.action === "createWbsbom") {
								Wbsdata[g.sindex].Matnr = r.results[0].Matnr;
								Wbsdata[g.sindex].MatDesc = r.results[0].Maktx;
								Wbsdata[g.sindex].matValueState = "None";
								AIWListWBSModel.setData(Wbsdata);
								if (Wbsdata[g.sindex].WbsExt !== "" && Wbsdata[g.sindex].Werks !== "" && Wbsdata[g.sindex].Stlan !== "") {
									g.readBomHdrDetails(Wbsdata[g.sindex].Matnr, Wbsdata[g.sindex].Werks, Wbsdata[g.sindex].Stlan, Wbsdata, g.sindex,
										Wbsdata[g.sindex].WbsExt);
								}
							}
							if (g.action === "copyMbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
								/*sap.ui.getCore().byId(g.sourceId).setValue(r.results[0].Matnr);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");*/
								var copyModel = g._copyFragment.getModel("copyModel");
								var copyData = copyModel.getData();
								var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
								if (binding === "/copyMaterialSource") {
									copyData.copyMaterialSource = r.results[0].Matnr;
									copyData.copyMaterialSourceDesc = r.results[0].Maktx;
								} else if (binding === "/copyMaterialTarget") {
									copyData.copyMaterialTarget = r.results[0].Matnr;
									copyData.copyMaterialTargetDesc = r.results[0].Maktx;
								}
								copyModel.setData(copyData);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");
								g._copyFragment.setBusy(false);
							}
						} else {
							if (g.action === "createMbom") {
								Matdata[g.sindex].matValueState = "Error";
								AIWListMatModel.setData(Matdata);
							}
							if (g.action === "createWbsbom") {
								Wbsdata[g.sindex].matValueState = "Error";
								AIWListWBSModel.setData(Wbsdata);
							}
							if (g.action === "copyMbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
								sap.ui.getCore().byId(g.sourceId).setValueState("Error");
								g._copyFragment.setBusy(false);
							}
						}
						//g.BusyDialog.close(); 
					},
					error: function (err) {
						if (g.action === "createMbom") {
							Matdata[g.sindex].matValueState = "Error";
							AIWListMatModel.setData(Matdata);
						}
						if (g.action === "createWbsbom") {
							Wbsdata[g.sindex].matValueState = "Error";
							AIWListWBSModel.setData(Wbsdata);
						}
						if (g.action === "copyMbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
							sap.ui.getCore().byId(g.sourceId).setValueState("Error");
							g._copyFragment.setBusy(false);
						}
						//g.BusyDialog.close(); 
					}
				});
			} else {
				if (g.action === "createMbom") {
					Matdata[g.sindex].matValueState = "Error";
					AIWListMatModel.setData(Matdata);
				}
				if (g.action === "createWbsbom") {
					Wbsdata[g.sindex].matValueState = "Error";
					AIWListWBSModel.setData(Wbsdata);
				}
				if (g.action === "copyMbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
					sap.ui.getCore().byId(g.sourceId).setValueState("Error");
					g._copyFragment.setBusy(false);
				}
			}
		},
		/*
		 * Function to handle 'change' event of Equipment in BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		equipmenBomtChange: function (oEvent) {
			var g = this;
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var AIWListEqModel = sap.ui.getCore().getModel("AIWListEqModel");
			var Eqdata = AIWListEqModel.getData();
			if (this.action === "createEbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListEqModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "copyEbom" || this.action === "copyMtoEbom") {
				this.sourceId = oEvent.getSource().getId();
				g._copyFragment.setBusy(true);
			}

			if (newValue !== "") {
				if (newValue === undefined)
					return;
				var oModelData = sap.ui.getCore().getModel("AIWEQUI").getData();
				if (oModelData.length > 0) {
					for (var i = 0; i < oModelData.length; i++) {
						if (newValue === oModelData[i].Equnr) {
							if (g.action === "createEbom") {
								Eqdata[g.sindex].Eqnrbom = oModelData[i].Equnr;
								Eqdata[g.sindex].EquiDesc = oModelData[i].Eqktx;
								Eqdata[g.sindex].equipValueState = "None";
								AIWListEqModel.setData(Eqdata);
								if (Eqdata[g.sindex].Werks !== "" && Eqdata[g.sindex].Stlan !== "") {
									g.readBomHdrDetails(Eqdata[g.sindex].Eqnrbom, Eqdata[g.sindex].Werks, Eqdata[g.sindex].Stlan, Eqdata, g.sindex);
								}
							}
							if (g.action === "copyEbom" || g.action === "copyMtoEbom") {
								var copyModel = g._copyFragment.getModel("copyModel");
								var copyData = copyModel.getData();
								var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
								if (binding === "/copyEquipmentSource") {
									copyData.copyEquipmentSource = oModelData[i].Equnr;
									copyData.copyEquipmentSourceDesc = oModelData[i].Eqktx;
								} else if (binding === "/copyEquipmentTarget") {
									copyData.copyEquipmentTarget = oModelData[i].Equnr;
									copyData.copyEquipmentTargetDesc = oModelData[i].Eqktx;
								}
								copyModel.setData(copyData);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");
								g._copyFragment.setBusy(false);
							}
							return;
						}
					}
				}
				var c = newValue.toUpperCase();
				var oFilter = [new sap.ui.model.Filter("Equnr", "EQ", c)];
				//this.BusyDialog.open();
				M.read("/EquipmentNumberSet", {
					filters: oFilter,
					success: function (r) {
						if (r.results.length > 0) {
							if (g.action === "createEbom") {
								Eqdata[g.sindex].Eqnrbom = r.results[0].Equnr;
								Eqdata[g.sindex].EquiDesc = r.results[0].Eqktx;
								Eqdata[g.sindex].equipValueState = "None";
								AIWListEqModel.setData(Eqdata);
								if (Eqdata[g.sindex].Werks !== "" && Eqdata[g.sindex].Stlan !== "") {
									g.readBomHdrDetails(Eqdata[g.sindex].Eqnrbom, Eqdata[g.sindex].Werks, Eqdata[g.sindex].Stlan, Eqdata, g.sindex);
								}
							}
							if (g.action === "copyEbom" || g.action === "copyMtoEbom") {
								/*sap.ui.getCore().byId(g.sourceId).setValue(r.results[0].Equnr);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");*/
								var copyModel = g._copyFragment.getModel("copyModel");
								var copyData = copyModel.getData();
								var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
								if (binding === "/copyEquipmentSource") {
									copyData.copyEquipmentSource = r.results[0].Equnr;
									copyData.copyEquipmentSourceDesc = r.results[0].Eqktx;
								} else if (binding === "/copyEquipmentTarget") {
									copyData.copyEquipmentTarget = r.results[0].Equnr;
									copyData.copyEquipmentTargetDesc = r.results[0].Eqktx;
								}
								copyModel.setData(copyData);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");
								g._copyFragment.setBusy(false);
							}
						} else {
							if (g.action === "createEbom") {
								Eqdata[g.sindex].equipValueState = "Error";
								AIWListEqModel.setData(Eqdata);
							}
							if (g.action === "copyEbom" || g.action === "copyMtoEbom") {
								sap.ui.getCore().byId(g.sourceId).setValueState("Error");
								g._copyFragment.setBusy(false);
							}
						}
						//g.BusyDialog.close(); 
					},
					error: function (err) {
						if (g.action === "createEbom") {
							Eqdata[g.sindex].equipValueState = "Error";
							AIWListEqModel.setData(Eqdata);
						}
						if (g.action === "copyEbom" || g.action === "copyMtoEbom") {
							sap.ui.getCore().byId(g.sourceId).setValueState("Error");
							g._copyFragment.setBusy(false);
						}
						//g.BusyDialog.close(); 
					}
				});
			} else {
				if (g.action === "createEbom") {
					Eqdata[g.sindex].equipValueState = "Error";
					AIWListEqModel.setData(Eqdata);
				}
				if (g.action === "copyEbom" || g.action === "copyMtoEbom") {
					sap.ui.getCore().byId(g.sourceId).setValueState("Error");
					g._copyFragment.setBusy(false);
				}
			}
		},
		/*
		 * Function to handle 'change' event of Functional Location in BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		flocBomChange: function (oEvent) {
			var g = this;
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var AIWListFLModel = sap.ui.getCore().getModel("AIWListFLModel");
			var FLData = AIWListFLModel.getData();
			if (this.action === "createFlbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListFLModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "copyFlbom" || this.action === "copyMtoFlbom") {
				this.sourceId = oEvent.getSource().getId();
				g._copyFragment.setBusy(true);
			}

			if (newValue !== "") {
				if (newValue === undefined)
					return;
				var oModelData = sap.ui.getCore().getModel("AIWFLOC").getData();
				if (oModelData.length > 0) {
					for (var i = 0; i < oModelData.length; i++) {
						if (newValue === oModelData[i].Functionallocation) {
							if (g.action === "createFlbom") {
								FLData[g.sindex].Tplnrbom = oModelData[i].Functionallocation;
								FLData[g.sindex].FLDesc = oModelData[i].Flocdescription;
								FLData[g.sindex].FLValueState = "None";
								AIWListFLModel.setData(FLData);
								if (FLData[g.sindex].Werks !== "" && FLData[g.sindex].Stlan !== "") {
									g.readBomHdrDetails(FLData[g.sindex].Tplnrbom, FLData[g.sindex].Werks, FLData[g.sindex].Stlan, FLData, g.sindex);
								}
							}
							if (g.action === "copyFlbom" || g.action === "copyMtoFlbom") {
								var copyModel = g._copyFragment.getModel("copyModel");
								var copyData = copyModel.getData();
								var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
								if (binding === "/copyFlocSource") {
									copyData.copyFlocSource = oModelData[i].Functionallocation;
									copyData.copyFlocSourceDesc = oModelData[i].Flocdescription;
								} else if (binding === "/copyFlocTarget") {
									copyData.copyFlocTarget = oModelData[i].Functionallocation;
									copyData.copyFlocTargetDesc = oModelData[i].Flocdescription;
								}
								copyModel.setData(copyData);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");
								g._copyFragment.setBusy(false);
							}
							return;
						}
					}
				}
				var c = newValue.toUpperCase();
				var oFilter = [new sap.ui.model.Filter("Tplnr", "EQ", c)];
				//this.BusyDialog.open();
				M.read("/FunctionLocationSet", {
					filters: oFilter,
					success: function (r) {
						if (r.results.length > 0) {
							if (g.action === "createFlbom") {
								FLData[g.sindex].Tplnrbom = r.results[0].Tplnr;
								FLData[g.sindex].FLDesc = r.results[0].Pltxt;
								FLData[g.sindex].FLValueState = "None";
								AIWListFLModel.setData(FLData);
								if (FLData[g.sindex].Werks !== "" && FLData[g.sindex].Stlan !== "") {
									g.readBomHdrDetails(FLData[g.sindex].Tplnrbom, FLData[g.sindex].Werks, FLData[g.sindex].Stlan, FLData, g.sindex);
								}
							}
							if (g.action === "copyFlbom" || g.action === "copyMtoFlbom") {
								/*sap.ui.getCore().byId(g.sourceId).setValue(r.results[0].Tplnr);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");*/
								var copyModel = g._copyFragment.getModel("copyModel");
								var copyData = copyModel.getData();
								var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
								if (binding === "/copyFlocSource") {
									copyData.copyFlocSource = r.results[0].Tplnr;
									copyData.copyFlocSourceDesc = r.results[0].Pltxt;
								} else if (binding === "/copyFlocTarget") {
									copyData.copyFlocTarget = r.results[0].Tplnr;
									copyData.copyFlocTargetDesc = r.results[0].Pltxt;
								}
								copyModel.setData(copyData);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");
								g._copyFragment.setBusy(false);
							}
						} else {
							if (g.action === "createFlbom") {
								FLData[g.sindex].FLValueState = "Error";
								AIWListFLModel.setData(FLData);
							}
							if (g.action === "copyFlbom" || g.action === "copyMtoFlbom") {
								sap.ui.getCore().byId(g.sourceId).setValueState("Error");
								g._copyFragment.setBusy(false);
							}
						}
						//g.BusyDialog.close(); 
					},
					error: function (err) {
						if (g.action === "createFlbom") {
							FLData[g.sindex].FLValueState = "Error";
							AIWListFLModel.setData(FLData);
						}
						if (g.action === "copyFlbom" || g.action === "copyMtoFlbom") {
							sap.ui.getCore().byId(g.sourceId).setValueState("Error");
							g._copyFragment.setBusy(false);
						}
						//g.BusyDialog.close(); 
					}
				});
			} else {
				if (g.action === "createFlbom") {
					FLData[g.sindex].FLValueState = "Error";
					AIWListFLModel.setData(FLData);
				}
				if (g.action === "copyFlbom" || g.action === "copyMtoFlbom") {
					sap.ui.getCore().byId(g.sourceId).setValueState("Error");
					g._copyFragment.setBusy(false);
				}
			}
		},
		/*
		 * Function to handle 'change' event of WBS Element in BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		wbsChange: function (oEvent) {
			var g = this;
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
			var Wbsdata = AIWListWBSModel.getData();
			if (this.action === "createWbsbom") {
				var sPath = oEvent.getSource().getBindingContext("AIWListWBSModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "copyWbsbom" || this.action === "copyMtoWbsbom") {
				this.sourceId = oEvent.getSource().getId();
				g._copyFragment.setBusy(true);
			}

			if (newValue !== "") {
				if (newValue === undefined)
					return;
				var c = newValue.toUpperCase();
				var oFilter = [new sap.ui.model.Filter("Posid", "EQ", c)];
				//this.BusyDialog.open();
				M.read("/WBSElementSet", {
					filters: oFilter,
					success: function (r) {
						if (r.results.length > 0) {
							if (g.action === "createWbsbom") {
								Wbsdata[g.sindex].WbsExt = r.results[0].Posid;
								Wbsdata[g.sindex].WbsDesc = r.results[0].Post1;
								Wbsdata[g.sindex].wbsValueState = "None";
								AIWListWBSModel.setData(Wbsdata);
								if (Wbsdata[g.sindex].Matnr !== "" && Wbsdata[g.sindex].Werks !== "" && Wbsdata[g.sindex].Stlan !== "") {
									g.readBomHdrDetails(Wbsdata[g.sindex].Matnr, Wbsdata[g.sindex].Werks, Wbsdata[g.sindex].Stlan, Wbsdata, g.sindex,
										Wbsdata[g.sindex].WbsExt);
								}
							}
							if (g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
								/*sap.ui.getCore().byId(g.sourceId).setValue(r.results[0].Posid);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");*/
								var copyModel = g._copyFragment.getModel("copyModel");
								var copyData = copyModel.getData();
								var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
								if (binding === "/copyWBSSource") {
									copyData.copyWBSSource = r.results[0].Posid;
									copyData.copyWBSSourceDesc = r.results[0].Post1;
								} else if (binding === "/copyWBSTarget") {
									copyData.copyWBSTarget = r.results[0].Posid;
									copyData.copyWBSTargetDesc = r.results[0].Post1;
								}
								copyModel.setData(copyData);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");
								g._copyFragment.setBusy(false);
							}
						} else {
							if (g.action === "createWbsbom") {
								Wbsdata[g.sindex].wbsValueState = "Error";
								AIWListWBSModel.setData(Wbsdata);
							}
							if (g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
								sap.ui.getCore().byId(g.sourceId).setValueState("Error");
								g._copyFragment.setBusy(false);
							}
						}
						//g.BusyDialog.close(); 
					},
					error: function (err) {
						if (g.action === "createWbsbom") {
							Wbsdata[g.sindex].wbsValueState = "Error";
							AIWListWBSModel.setData(Wbsdata);
						}
						if (g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
							sap.ui.getCore().byId(g.sourceId).setValueState("Error");
							g._copyFragment.setBusy(false);
						}
						//g.BusyDialog.close(); 
					}
				});
			} else {
				if (g.action === "createWbsbom") {
					Wbsdata[g.sindex].wbsValueState = "Error";
					AIWListWBSModel.setData(Wbsdata);
				}
				if (g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
					sap.ui.getCore().byId(g.sourceId).setValueState("Error");
					g._copyFragment.setBusy(false);
				}
			}
		},
		/*
		 * Function to handle 'change' event of Plant in BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		plantChange: function (oEvent) {
			var g = this;
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var sPath;
			if (this.action === "createMbom") {
				var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");
				var Matdata = AIWListMatModel.getData();
				sPath = oEvent.getSource().getBindingContext("AIWListMatModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "createEbom") {
				var AIWListEqModel = sap.ui.getCore().getModel("AIWListEqModel");
				var Eqdata = AIWListEqModel.getData();
				sPath = oEvent.getSource().getBindingContext("AIWListEqModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "createFlbom") {
				var AIWListFLModel = sap.ui.getCore().getModel("AIWListFLModel");
				var FLdata = AIWListFLModel.getData();
				sPath = oEvent.getSource().getBindingContext("AIWListFLModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "createWbsbom") {
				var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
				var Wbsdata = AIWListWBSModel.getData();
				sPath = oEvent.getSource().getBindingContext("AIWListWBSModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "copyMbom" || this.action === "copyEbom" || this.action === "copyMtoEbom" || this.action === "copyFlbom" ||
				this.action === "copyMtoFlbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
				this.sourceId = oEvent.getSource().getId();
				g._copyFragment.setBusy(true);
			}

			if (newValue !== "") {
				if (newValue === undefined)
					return;
				var c = newValue.toUpperCase();
				var oFilter = [new sap.ui.model.Filter("Werks", "EQ", c)];
				//this.BusyDialog.open();
				M.read("/PlantNameSet", {
					filters: oFilter,
					success: function (r) {
						if (r.results.length > 0) {
							if (g.action === "createMbom") {
								Matdata[g.sindex].Werks = r.results[0].Werks;
								Matdata[g.sindex].WerksDesc = r.results[0].Name1;
								Matdata[g.sindex].plantValueState = "None";
								AIWListMatModel.setData(Matdata);
								if (Matdata[g.sindex].Matnr !== "" && Matdata[g.sindex].Stlan !== "") {
									g.readBomHdrDetails(Matdata[g.sindex].Matnr, Matdata[g.sindex].Werks, Matdata[g.sindex].Stlan, Matdata, g.sindex);
								}
							}
							if (g.action === "createEbom") {
								Eqdata[g.sindex].Werks = r.results[0].Werks;
								Eqdata[g.sindex].WerksDesc = r.results[0].Name1;
								Eqdata[g.sindex].plantValueState = "None";
								AIWListEqModel.setData(Eqdata);
								if (Eqdata[g.sindex].Eqnrbom !== "" && Eqdata[g.sindex].Stlan !== "") {
									g.readBomHdrDetails(Eqdata[g.sindex].Eqnrbom, Eqdata[g.sindex].Werks, Eqdata[g.sindex].Stlan, Eqdata, g.sindex);
								}
							}
							if (g.action === "createFlbom") {
								FLdata[g.sindex].Werks = r.results[0].Werks;
								FLdata[g.sindex].WerksDesc = r.results[0].Name1;
								FLdata[g.sindex].plantValueState = "None";
								AIWListFLModel.setData(FLdata);
								if (FLdata[g.sindex].Tplnrbom !== "" && FLdata[g.sindex].Stlan !== "") {
									g.readBomHdrDetails(FLdata[g.sindex].Tplnrbom, FLdata[g.sindex].Werks, FLdata[g.sindex].Stlan, FLdata, g.sindex);
								}
							}
							if (g.action === "createWbsbom") {
								Wbsdata[g.sindex].Werks = r.results[0].Werks;
								Wbsdata[g.sindex].WerksDesc = r.results[0].Name1;
								Wbsdata[g.sindex].plantValueState = "None";
								AIWListWBSModel.setData(Wbsdata);
								if (Wbsdata[g.sindex].WbsExt !== "" && Wbsdata[g.sindex].Matnr !== "" && Wbsdata[g.sindex].Stlan !== "") {
									g.readBomHdrDetails(Wbsdata[g.sindex].Matnr, Wbsdata[g.sindex].Werks, Wbsdata[g.sindex].Stlan, Wbsdata, g.sindex,
										Wbsdata[g.sindex].WbsExt);
								}
							}
							if (g.action === "copyMbom" || g.action === "copyEbom" || g.action === "copyMtoEbom" || g.action === "copyFlbom" || g.action ===
								"copyMtoFlbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
								/*sap.ui.getCore().byId(g.sourceId).setValue(r.results[0].Werks);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");*/
								var copyModel = g._copyFragment.getModel("copyModel");
								var copyData = copyModel.getData();
								var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
								if (binding === "/copyPlantSource") {
									copyData.copyPlantSource = r.results[0].Werks;
									copyData.copyPlantSourceDesc = r.results[0].Name1;
								} else if (binding === "/copyPlantTarget") {
									copyData.copyPlantTarget = r.results[0].Werks;
									copyData.copyPlantTargetDesc = r.results[0].Name1;
								}
								copyModel.setData(copyData);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");
								g._copyFragment.setBusy(false);
							}
						} else {
							if (g.action === "createMbom") {
								Matdata[g.sindex].plantValueState = "Error";
								AIWListMatModel.setData(Matdata);
							}
							if (g.action === "createEbom") {
								Eqdata[g.sindex].plantValueState = "Error";
								AIWListEqModel.setData(Eqdata);
							}
							if (g.action === "createFlbom") {
								FLdata[g.sindex].plantValueState = "Error";
								AIWListFLModel.setData(FLdata);
							}
							if (g.action === "createWbsbom") {
								Wbsdata[g.sindex].plantValueState = "Error";
								AIWListWBSModel.setData(Wbsdata);
							}
							if (g.action === "copyMbom" || g.action === "copyEbom" || g.action === "copyMtoEbom" || g.action === "copyFlbom" || g.action ===
								"copyMtoFlbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
								sap.ui.getCore().byId(g.sourceId).setValueState("Error");
								g._copyFragment.setBusy(false);
							}
						}
						//g.BusyDialog.close(); 
					},
					error: function (err) {
						if (g.action === "createMbom") {
							Matdata[g.sindex].plantValueState = "Error";
							AIWListMatModel.setData(Matdata);
						}
						if (g.action === "createEbom") {
							Eqdata[g.sindex].plantValueState = "Error";
							AIWListEqModel.setData(Eqdata);
						}
						if (g.action === "createFlbom") {
							FLdata[g.sindex].plantValueState = "Error";
							AIWListFLModel.setData(FLdata);
						}
						if (g.action === "createWbsbom") {
							Wbsdata[g.sindex].plantValueState = "Error";
							AIWListWBSModel.setData(Wbsdata);
						}
						if (g.action === "copyMbom" || g.action === "copyEbom" || g.action === "copyMtoEbom" || g.action === "copyFlbom" || g.action ===
							"copyMtoFlbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
							sap.ui.getCore().byId(g.sourceId).setValueState("Error");
							g._copyFragment.setBusy(false);
						}
						//g.BusyDialog.close(); 
					}
				});
			} else {
				if (g.action === "createMbom") {
					Matdata[g.sindex].plantValueState = "Error";
					AIWListMatModel.setData(Matdata);
				}
				if (g.action === "createEbom") {
					Eqdata[g.sindex].plantValueState = "Error";
					AIWListEqModel.setData(Eqdata);
				}
				if (g.action === "createFlbom") {
					FLdata[g.sindex].plantValueState = "Error";
					AIWListFLModel.setData(FLdata);
				}
				if (g.action === "createWbsbom") {
					Wbsdata[g.sindex].plantValueState = "Error";
					AIWListWBSModel.setData(Wbsdata);
				}
				if (g.action === "copyMbom" || g.action === "copyEbom" || g.action === "copyMtoEbom" || g.action === "copyFlbom" || g.action ===
					"copyMtoFlbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
					sap.ui.getCore().byId(g.sourceId).setValueState("Error");
					g._copyFragment.setBusy(false);
				}
			}
		},
		/*
		 * Function to handle 'change' event of Usage in BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		bomUsageChange: function (oEvent) {
			var g = this;
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var sPath;
			var oFilters = [];
			if (this.action === "createMbom") {
				var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");
				var Matdata = AIWListMatModel.getData();
				sPath = oEvent.getSource().getBindingContext("AIWListMatModel").getPath();
				this.index = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "createEbom") {
				var AIWListEqModel = sap.ui.getCore().getModel("AIWListEqModel");
				var Eqdata = AIWListEqModel.getData();
				sPath = oEvent.getSource().getBindingContext("AIWListEqModel").getPath();
				this.index = parseInt(sPath.split("/")[1]);
				oFilters.push(new sap.ui.model.Filter("EqFl", "EQ", true));
			}
			if (this.action === "createFlbom") {
				var AIWListFLModel = sap.ui.getCore().getModel("AIWListFLModel");
				var FLdata = AIWListFLModel.getData();
				sPath = oEvent.getSource().getBindingContext("AIWListFLModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
				oFilters.push(new sap.ui.model.Filter("EqFl", "EQ", true));
			}
			if (this.action === "createWbsbom") {
				var AIWListWBSModel = sap.ui.getCore().getModel("AIWListWBSModel");
				var Wbsdata = AIWListWBSModel.getData();
				sPath = oEvent.getSource().getBindingContext("AIWListWBSModel").getPath();
				this.sindex = parseInt(sPath.split("/")[1]);
			}
			if (this.action === "copyMbom" || this.action === "copyEbom" || this.action === "copyMtoEbom" || this.action === "copyFlbom" ||
				this.action === "copyMtoFlbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
				this.sourceId = oEvent.getSource().getId();
				g._copyFragment.setBusy(true);
			}

			if (newValue !== "") {
				if (newValue === undefined)
					return;
				var c = newValue.toUpperCase();
				oFilters.push(new sap.ui.model.Filter("Stlan", "EQ", c));
				//this.BusyDialog.open();
				M.read("/BOMUsageHelpSet", {
					filters: oFilters,
					success: function (r) {
						if (r.results.length > 0) {
							if (g.action === "createMbom") {
								Matdata[g.index].Stlan = r.results[0].Stlan;
								Matdata[g.index].StlanDesc = r.results[0].Antxt;
								Matdata[g.index].usageValueState = "None";
								AIWListMatModel.setData(Matdata);
								if (Matdata[g.index].Matnr !== "" && Matdata[g.index].Werks !== "") {
									g.readBomHdrDetails(Matdata[g.index].Matnr, Matdata[g.index].Werks, Matdata[g.index].Stlan, Matdata, g.index);
								}
							}
							if (g.action === "createEbom") {
								Eqdata[g.index].Stlan = r.results[0].Stlan;
								Eqdata[g.index].StlanDesc = r.results[0].Antxt;
								Eqdata[g.index].usageValueState = "None";
								AIWListEqModel.setData(Eqdata);
								if (Eqdata[g.index].Eqnrbom !== "" && Eqdata[g.index].Werks !== "") {
									g.readBomHdrDetails(Eqdata[g.index].Eqnrbom, Eqdata[g.index].Werks, Eqdata[g.index].Stlan, Eqdata, g.index);
								}
							}
							if (g.action === "createFlbom") {
								FLdata[g.sindex].Stlan = r.results[0].Stlan;
								FLdata[g.sindex].StlanDesc = r.results[0].Antxt;
								FLdata[g.sindex].usageValueState = "None";
								AIWListFLModel.setData(FLdata);
								if (FLdata[g.sindex].Tplnrbom !== "" && FLdata[g.sindex].Werks !== "") {
									g.readBomHdrDetails(FLdata[g.sindex].Tplnrbom, FLdata[g.sindex].Werks, FLdata[g.sindex].Stlan, FLdata, g.sindex);
								}
							}
							if (g.action === "createWbsbom") {
								Wbsdata[g.sindex].Stlan = r.results[0].Stlan;
								Wbsdata[g.sindex].StlanDesc = r.results[0].Antxt;
								Wbsdata[g.sindex].usageValueState = "None";
								AIWListWBSModel.setData(Wbsdata);
								if (Wbsdata[g.sindex].WbsExt !== "" && Wbsdata[g.sindex].Matnr !== "" && Wbsdata[g.sindex].Werks !== "") {
									g.readBomHdrDetails(Wbsdata[g.sindex].Matnr, Wbsdata[g.sindex].Werks, Wbsdata[g.sindex].Stlan, Wbsdata, g.sindex,
										Wbsdata[g.sindex].WbsExt);
								}
							}
							if (g.action === "copyMbom" || g.action === "copyEbom" || g.action === "copyMtoEbom" || g.action === "copyFlbom" || g.action ===
								"copyMtoFlbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
								/*sap.ui.getCore().byId(g.sourceId).setValue(r.results[0].Stlan);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");*/
								var copyModel = g._copyFragment.getModel("copyModel");
								var copyData = copyModel.getData();
								var binding = sap.ui.getCore().byId(g.sourceId).getBindingInfo("value").binding.sPath;
								if (binding === "/copyUsageSource") {
									copyData.copyUsageSource = r.results[0].Stlan;
									copyData.copyUsageSourceDesc = r.results[0].Antxt;
								} else if (binding === "/copyUsageTarget") {
									copyData.copyUsageTarget = r.results[0].Stlan;
									copyData.copyUsageTargetDesc = r.results[0].Antxt;
								}
								copyModel.setData(copyData);
								sap.ui.getCore().byId(g.sourceId).setValueState("None");
								g._copyFragment.setBusy(false);
							}
						} else {
							if (g.action === "createMbom") {
								Matdata[g.sindex].usageValueState = "Error";
								AIWListMatModel.setData(Matdata);
							}
							if (g.action === "createEbom") {
								Eqdata[g.index].usageValueState = "Error";
								AIWListEqModel.setData(Eqdata);
							}
							if (g.action === "createFlbom") {
								FLdata[g.sindex].usageValueState = "Error";
								AIWListFLModel.setData(FLdata);
							}
							if (g.action === "createWbsbom") {
								Wbsdata[g.sindex].usageValueState = "Error";
								AIWListWBSModel.setData(Wbsdata);
							}
							if (g.action === "copyMbom" || g.action === "copyEbom" || g.action === "copyMtoEbom" || g.action === "copyFlbom" || g.action ===
								"copyMtoFlbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
								sap.ui.getCore().byId(g.sourceId).setValueState("Error");
								g._copyFragment.setBusy(false);
							}
						}
						//g.BusyDialog.close(); 
					},
					error: function (err) {
						if (g.action === "createMbom") {
							Matdata[g.sindex].usageValueState = "Error";
							AIWListMatModel.setData(Matdata);
						}
						if (g.action === "createEbom") {
							Eqdata[g.index].usageValueState = "Error";
							AIWListEqModel.setData(Eqdata);
						}
						if (g.action === "createFlbom") {
							FLdata[g.sindex].usageValueState = "Error";
							AIWListFLModel.setData(FLdata);
						}
						if (g.action === "createWbsbom") {
							Wbsdata[g.sindex].usageValueState = "Error";
							AIWListWBSModel.setData(Wbsdata);
						}
						if (g.action === "copyMbom" || g.action === "copyEbom" || g.action === "copyMtoEbom" || g.action === "copyFlbom" || g.action ===
							"copyMtoFlbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
							sap.ui.getCore().byId(g.sourceId).setValueState("Error");
							g._copyFragment.setBusy(false);
						}
						//g.BusyDialog.close(); 
					}
				});
			} else {
				if (g.action === "createMbom") {
					Matdata[g.sindex].usageValueState = "Error";
					AIWListMatModel.setData(Matdata);
				}
				if (g.action === "createEbom") {
					Eqdata[g.index].usageValueState = "Error";
					AIWListEqModel.setData(Eqdata);
				}
				if (g.action === "createFlbom") {
					FLdata[g.sindex].usageValueState = "Error";
					AIWListFLModel.setData(FLdata);
				}
				if (g.action === "createWbsbom") {
					Wbsdata[g.sindex].usageValueState = "Error";
					AIWListWBSModel.setData(Wbsdata);
				}
				if (g.action === "copyMbom" || g.action === "copyEbom" || g.action === "copyMtoEbom" || g.action === "copyFlbom" || g.action ===
					"copyMtoFlbom" || g.action === "copyWbsbom" || g.action === "copyMtoWbsbom") {
					sap.ui.getCore().byId(g.sourceId).setValueState("Error");
					g._copyFragment.setBusy(false);
				}
			}
		},
		/*
		 * Function to handle 'change' event of Alternate BOM
		 * @param {sap.ui.base.Event} oEvent
		 */
		onAltBomChange: function (oEvent) {
			var g = this;
			if (oEvent.getSource().getValue() !== "") {
				// oEvent.getSource().setEnabled(false);
				// oEvent.getSource().setValueState("None");
				var AIWListMatModel = sap.ui.getCore().getModel("AIWListMatModel");
				var Matdata = AIWListMatModel.getData();
				var sAltBom = oEvent.getSource().getValue();

				if (Matdata[g.index].Matnr !== "" && Matdata[g.index].Werks !== "" && Matdata[g.index].Stlan !== "") {
					g.readBomHdrDetails(Matdata[g.index].Matnr, Matdata[g.index].Werks, Matdata[g.index].Stlan, Matdata, g.index, sAltBom);
				}
			}
		},
		/*
		 * To handle row select of Material Bom table
		 * @param {sap.ui.base.Event} oEvent
		 */
		onMatRowSelect: function (oEvent) {
			this.updateDeleteEnableBOM("MBOM", oEvent);
		},
		/*
		 * To handle row select of Equipment Bom table
		 * @param {sap.ui.base.Event} oEvent
		 */
		onEqRowSelect: function (oEvent) {
			this.updateDeleteEnableBOM("EBOM", oEvent);
		},
		/*
		 * To handle row select of Functional Location Bom table
		 * @param {sap.ui.base.Event} oEvent
		 */
		onFLRowSelect: function (oEvent) {
			this.updateDeleteEnableBOM("FLBOM", oEvent);
		},
		/*
		 * To handle row select of WBS Element Bom table
		 * @param {sap.ui.base.Event} oEvent
		 */
		onWbsRowSelect: function (oEvent) {
			this.updateDeleteEnableBOM("WBSBOM", oEvent);
		},
		/*
		 * To handle row select of Object Network table
		 * @param {sap.ui.base.Event} oEvent
		 */
		onONRowSelect: function (oEvent) {
			this.updateDeleteEnableBOM("ON", oEvent);
		},
		/*
		 * Function to set enable/disable of delete button of BOM.
		 * @param {string} sFrom - Flag indicating bom type
		 * @param {sap.ui.base.Event} oEvent
		 */
		updateDeleteEnableBOM: function (sFrom, oEvent) {
			var EnableModel = this.getView().getModel("EnableModel");
			var EnableData = EnableModel.getData();

			this.tableId = oEvent.getSource().getId();
			if (sFrom === "MBOM") {
				this.selectedRowsMAT = oEvent.getSource()._aSelectedPaths;
				if (this.selectedRowsMAT.length > 0) {
					EnableData.deleteMAT = true;
				} else {
					EnableData.deleteMAT = false;
				}
			}
			if (sFrom === "EBOM") {
				this.selectedRowsEQ = oEvent.getSource()._aSelectedPaths;
				if (this.selectedRowsEQ.length > 0) {
					EnableData.deleteEQ = true;
				} else {
					EnableData.deleteEQ = false;
				}
			}
			if (sFrom === "FLBOM") {
				this.selectedRowsFL = oEvent.getSource()._aSelectedPaths;
				if (this.selectedRowsFL.length > 0) {
					EnableData.deleteFL = true;
				} else {
					EnableData.deleteFL = false;
				}
			}
			if (sFrom === "WBSBOM") {
				this.selectedRowsWBS = oEvent.getSource()._aSelectedPaths;
				if (this.selectedRowsWBS.length > 0) {
					EnableData.deleteWBS = true;
				} else {
					EnableData.deleteWBS = false;
				}
			}
			if (sFrom === "ON") {
				this.selectedRowsON = oEvent.getSource()._aSelectedPaths;
				if (this.selectedRowsON.length > 0) {
					EnableData.deleteON = true;
				} else {
					EnableData.deleteON = false;
				}
			}
			EnableModel.setData(EnableData);
		},
		/*
		 * Function to delete Material BOMs
		 * @param {sap.ui.base.Event} oEvent
		 */
		onRemoveMATPress: function (oEvent) {
			var tempArray = [];
			var index;
			var AIWListMatModel = this.getView().getModel("AIWListMatModel");
			var AIWListMatData = AIWListMatModel.getData();

			//this.selectedRowsMAT.sort();
			// for (var i = this.selectedRowsMAT.length - 1; i >= 0; i--) {
			// 	var index = this.selectedRowsMAT[i].split("/")[1];
			// 	index = parseInt(index);
			// 	AIWListMatData.splice(index, 1);
			// }
			for (var z = 0; z < this.selectedRowsMAT.length; z++) {
				tempArray.push(parseInt(this.selectedRowsMAT[z].split("/")[1]));
			}
			tempArray.sort(function (a, b) {
				return a - b;
			});
			for (var i = tempArray.length - 1; i >= 0; i--) {
				index = tempArray[i];
				AIWListMatData.splice(index, 1);
			}
			sap.ui.getCore().byId(this.tableId).removeSelections();
			AIWListMatModel.setData(AIWListMatData);
			this.updateCount("MaterialBom", AIWListMatData);
			this.selectedRowsMAT = [];

			var EnableModel = this.getView().getModel("EnableModel");
			var EnableData = EnableModel.getData();
			EnableData.deleteMAT = false;
			EnableModel.setData(EnableData);
		},
		/*
		 * Function to delete Equipment BOMs
		 * @param {sap.ui.base.Event} oEvent
		 */
		onRemoveEQPress: function (oEvent) {
			var tempArray = [];
			var index;
			var AIWListEqModel = this.getView().getModel("AIWListEqModel");
			var AIWListEqData = AIWListEqModel.getData();

			//this.selectedRowsEQ.sort();
			// for (var i = this.selectedRowsEQ.length - 1; i >= 0; i--) {
			// 	var index = this.selectedRowsEQ[i].split("/")[1];
			// 	index = parseInt(index);
			// 	AIWListEqData.splice(index, 1);
			// }
			for (var z = 0; z < this.selectedRowsEQ.length; z++) {
				tempArray.push(parseInt(this.selectedRowsEQ[z].split("/")[1]));
			}
			tempArray.sort(function (a, b) {
				return a - b;
			});
			for (var i = tempArray.length - 1; i >= 0; i--) {
				index = tempArray[i];
				AIWListEqData.splice(index, 1);
			}
			sap.ui.getCore().byId(this.tableId).removeSelections();
			AIWListEqModel.setData(AIWListEqData);
			this.updateCount("EquipmentBom", AIWListEqData);
			this.selectedRowsEQ = [];

			var EnableModel = this.getView().getModel("EnableModel");
			var EnableData = EnableModel.getData();
			EnableData.deleteEQ = false;
			EnableModel.setData(EnableData);
		},
		/*
		 * Function to delete Functional Location BOMs
		 * @param {sap.ui.base.Event} oEvent
		 */
		onRemoveFLPress: function (oEvent) {
			var tempArray = [];
			var index;
			var AIWListFLModel = this.getView().getModel("AIWListFLModel");
			var AIWListFLData = AIWListFLModel.getData();

			//this.selectedRowsFL.sort();
			// for (var i = this.selectedRowsFL.length - 1; i >= 0; i--) {
			// 	var index = this.selectedRowsFL[i].split("/")[1];
			// 	index = parseInt(index);
			// 	AIWListFLData.splice(index, 1);
			// }
			for (var z = 0; z < this.selectedRowsFL.length; z++) {
				tempArray.push(parseInt(this.selectedRowsFL[z].split("/")[1]));
			}
			tempArray.sort(function (a, b) {
				return a - b;
			});
			for (var i = tempArray.length - 1; i >= 0; i--) {
				index = tempArray[i];
				AIWListFLData.splice(index, 1);
			}
			sap.ui.getCore().byId(this.tableId).removeSelections();
			AIWListFLModel.setData(AIWListFLData);
			this.updateCount("FLBom", AIWListFLData);
			this.selectedRowsFL = [];

			var EnableModel = this.getView().getModel("EnableModel");
			var EnableData = EnableModel.getData();
			EnableData.deleteFL = false;
			EnableModel.setData(EnableData);
		},
		/*
		 * Function to delete WBS BOMs
		 * @param {sap.ui.base.Event} oEvent
		 */
		onRemoveWBSPress: function (oEvent) {
			var tempArray = [];
			var index;
			var AIWListWBSModel = this.getView().getModel("AIWListWBSModel");
			var AIWListWBSData = AIWListWBSModel.getData();

			//this.selectedRowsWBS.sort();
			// for (var i = this.selectedRowsWBS.length - 1; i >= 0; i--) {
			// 	var index = this.selectedRowsWBS[i].split("/")[1];
			// 	index = parseInt(index);
			// 	AIWListWBSData.splice(index, 1);
			// }
			for (var z = 0; z < this.selectedRowsWBS.length; z++) {
				tempArray.push(parseInt(this.selectedRowsWBS[z].split("/")[1]));
			}
			tempArray.sort(function (a, b) {
				return a - b;
			});
			for (var i = tempArray.length - 1; i >= 0; i--) {
				index = tempArray[i];
				AIWListWBSData.splice(index, 1);
			}
			sap.ui.getCore().byId(this.tableId).removeSelections();
			AIWListWBSModel.setData(AIWListWBSData);
			this.updateCount("WbsBom", AIWListWBSData);
			this.selectedRowsWBS = [];

			var EnableModel = this.getView().getModel("EnableModel");
			var EnableData = EnableModel.getData();
			EnableData.deleteWBS = false;
			EnableModel.setData(EnableData);
		},
		/*
		 * Function to delete Object Network
		 * @param {sap.ui.base.Event} oEvent
		 */
		onRemoveONPress: function (oEvent) {
			var tempArray = [];
			var index;
			var AIWListONModel = this.getView().getModel("AIWListONModel");
			var AIWListONData = AIWListONModel.getData();

			//this.selectedRowsON.sort();
			// for (var i = this.selectedRowsON.length - 1; i >= 0; i--) {
			// 	var index = this.selectedRowsON[i].split("/")[1];
			// 	index = parseInt(index);
			// 	AIWListONData.splice(index, 1);
			// }
			for (var z = 0; z < this.selectedRowsON.length; z++) {
				tempArray.push(parseInt(this.selectedRowsON[z].split("/")[1]));
			}
			tempArray.sort(function (a, b) {
				return a - b;
			});
			for (var i = tempArray.length - 1; i >= 0; i--) {
				index = tempArray[i];
				AIWListONData.splice(index, 1);
			}
			sap.ui.getCore().byId(this.tableId).removeSelections();
			AIWListONModel.setData(AIWListONData);
			this.updateCount("ObjNet", AIWListONData);
			this.selectedRowsON = [];

			var EnableModel = this.getView().getModel("EnableModel");
			var EnableData = EnableModel.getData();
			EnableData.deleteON = false;
			EnableModel.setData(EnableData);
		},

		/////////////////////////////////////////////////////Copy ON////////////////////////////////////////////
		/*
		 * Function to open Copy dialog Object Network
		 */
		openCopyOnFragment: function () {
			if (!this._copyONFragment) {
				this._copyONFragment = sap.ui.xmlfragment("ugiaiwui.mdg.aiw.request.Fragments.ON.CopyObjectNetwork", this);
				this.getView().addDependent(this._copyFragment);
			}
			this._copyONFragment.open();

			var src = sap.ui.getCore().byId("idSrcNetwork");
			var tar = sap.ui.getCore().byId("idTarNetwork");
			src.setValue("");
			src.setValueState("None");
			src.setValueStateText("");
			tar.setValue("");
			tar.setValueState("None");
			tar.setValueStateText("");
		},
		/*
		 * To handle close button press of Copy dialog Object Network
		 */
		onCopyONclose: function () {
			this._copyONFragment.close();
			if (this.action === "copyOn") {
				this.action = "createOn";
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Object Network
		 * @param {sap.ui.base.Event} oEvent
		 */
		onNetworkIdVH: function (oEvent) {
			var g = this;
			var a;
			a = oEvent.getSource();

			var settings = {
				title: this.getView().getModel("i18n").getProperty("NET_ID"),
				noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
				columns: [new sap.m.Column({
						header: [
							new sap.m.Text({
								text: "{i18n>netId}"
							})
						]
					}), new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>NET_SHTXT}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>NET_GRP}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>NET_TYP}"
							})
						]
					}),
					new sap.m.Column({
						demandPopin: true,
						minScreenWidth: "Tablet",
						header: [
							new sap.m.Text({
								text: "{i18n>DELINDICATOR}"
							})
						]
					})
				],
				items: {
					path: "/NetidSet",
					template: new sap.m.ColumnListItem({
						type: "Active",
						unread: false,
						cells: [
							new sap.m.Text({
								text: "{Netwid}"
							}),
							new sap.m.Text({
								text: "{Netxt}"
							}),
							new sap.m.Text({
								text: "{NetworkGroup}"
							}),
							new sap.m.Text({
								text: "{NetworkType}"
							}),
							new sap.m.Text({
								text: "{Lvorm}"
							})
						]
					})
				},
				confirm: function (E) {
					a.setValue(E.getParameter("selectedItem").getCells()[0].getText());
					a.setValueState("None");
					a.setValueStateText("");
				}
			};
			var q = "/NetidSet";
			var oFilter = [];
			var M = this.getView().getModel("valueHelp");
			var cells = [
				new sap.m.Text({
					text: "{Netwid}"
				}),
				new sap.m.Text({
					text: "{Netxt}"
				}),
				new sap.m.Text({
					text: "{NetworkGroup}"
				}),
				new sap.m.Text({
					text: "{NetworkType}"
				}),
				new sap.m.Text({
					text: "{Lvorm}"
				})
			];

			var stSelectDialog = ValueHelpProvider.getValueHelp(M, q, cells, oFilter, settings, "Netwid", "Netxt");
			stSelectDialog.open();
			stSelectDialog.setModel(this.getView().getModel("i18n"), "i18n");
		},
		/*
		 * Function to handle 'change' event of Source Object Network in its copy dialog
		 * @param {sap.ui.base.Event} oEvent
		 */
		srcnetIdChange: function (oEvent) {
			var g = this;
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var a = oEvent.getSource();
			this._copyONFragment.setBusy(true);

			if (newValue !== "") {
				if (newValue !== undefined) {
					var c = newValue.toUpperCase();
					var oFilter = [new sap.ui.model.Filter("Netwid", "EQ", c)];
					M.read("/NetidSet", {
						filters: oFilter,
						success: function (r) {
							if (r.results.length > 0) {
								a.setValue(r.results[0].Netwid);
								a.setValueState("None");
								a.setValueStateText("");
							} else {
								a.setValueState("Error");
								a.setValueStateText("Object Network " + newValue + " doesn't exists");
							}
							g._copyONFragment.setBusy(false);
						},
						error: function (err) {
							a.setValueState("Error");
							g._copyONFragment.setBusy(false);
						}
					});
				}
			}
		},
		/*
		 * Function to handle 'change' event of Target Object Network in its copy dialog
		 * @param {sap.ui.base.Event} oEvent
		 */
		tarnetIdChange: function (oEvent) {
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var a = oEvent.getSource();
			var existFlag = false;

			if (newValue !== "") {
				if (newValue !== undefined) {
					var c = newValue.toUpperCase();
					var AIWListONModel = sap.ui.getCore().getModel("AIWListONModel").getData();
					if (AIWListONModel.length > 0) {
						for (var j = 0; j < AIWListONModel.length; j++) {
							if (AIWListONModel[j].Objnetwrk === newValue) {
								var msg = "Object Network " + newValue + " already locked in this CR";
								a.setValueState("Error");
								a.setValueStateText(msg);
								existFlag = true;
								break;
							}
						}
					}
					if (!existFlag) {
						a.setValueState("None");
						a.setValueStateText("");
						var oFilter = [new sap.ui.model.Filter("Netwid", "EQ", c)];
						M.read("/NetidSet", {
							filters: oFilter,
							success: function (r) {
								if (r.results.length > 0) {
									a.setValueState("Error");
									a.setValueStateText("Object Network " + r.results[0].Netwid + " already exists");
									a.setValue(r.results[0].Netwid);
								} else {
									a.setValue(newValue);
									a.setValueState("None");
									a.setValueStateText("");
								}
							},
							error: function (err) {
								a.setValueState("Error");
							}
						});
					}
				}
			}
		},
		/*
		 * Function to handle 'change' event of Object Network in main table
		 * @param {sap.ui.base.Event} oEvent
		 */
		aiwNetIdChange: function (oEvent) {
			var g = this;
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var a = oEvent.getSource();
			var existFlag = false;
			var sPath = oEvent.getSource().getBindingContext("AIWListONModel").getPath();
			var sindex = parseInt(sPath.split("/")[1]);

			if (newValue !== "") {
				if (newValue !== undefined) {
					var c = newValue.toUpperCase();
					var AIWListONModel = sap.ui.getCore().getModel("AIWListONModel");
					var AIWListONData = AIWListONModel.getData();
					if (AIWListONData.length > 0) {
						for (var j = 0; j < AIWListONData.length; j++) {
							if (j !== sindex) {
								if (AIWListONData[j].Objnetwrk === newValue) {
									var msg = "Object Network " + newValue + " already locked in this CR";
									AIWListONData[sindex].NetIDValueState = "Error";
									AIWListONModel.setData(AIWListONData);
									existFlag = true;
									this.createMessagePopover([{
										type: "Error",
										title: msg
									}]);
									break;
								}
							}
						}
					}
					if (!existFlag) {
						var oFilter = [new sap.ui.model.Filter("Netwid", "EQ", c)];
						M.read("/NetidSet", {
							filters: oFilter,
							success: function (r) {
								if (r.results.length > 0) {
									AIWListONData[sindex].NetIDValueState = "Error";
									g.createMessagePopover([{
										type: "Error",
										title: "Object Network " + r.results[0].Netwid + " already exists"
									}]);
									AIWListONModel.setData(AIWListONData);
								} else {
									AIWListONData[sindex].Objnetwrk = newValue.toUpperCase();
									AIWListONData[sindex].NetIDValueState = "None";
									AIWListONModel.setData(AIWListONData);
								}
							},
							error: function (err) {
								AIWListONData[sindex].NetIDValueState = "Error";
								AIWListONModel.setData(AIWListONData);
							}
						});
					}
				}
			}
		},
		/*
		 * Function to handle 'valueHelpRequest' event of Network Group
		 * @param {sap.ui.base.Event} oEvent
		 */
		onNetGrpVH: function (oEvent) {
			var g = this;
			var sPath = oEvent.getSource().getBindingContext("AIWListONModel").getPath();
			this.sindex = parseInt(sPath.split("/")[1]);

			var settings = {
				title: this.getView().getModel("i18n").getProperty("NET_GRP"),
				noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
				items: {
					path: "/NetGrpSet",
					template: new sap.m.StandardListItem({
						title: "{Netgrp}",
						description: "{Netgrp_txt}"
					})
				},
				confirm: function (E) {
					//var g = this.getParent().getController();
					var sindex = g.sindex;
					var AIWListONModel = sap.ui.getCore().getModel("AIWListONModel");
					var ONdata = AIWListONModel.getData();
					ONdata[sindex].Netgrp = E.getParameters().selectedItem.getProperty("title");
					ONdata[sindex].NetgrpDesc = E.getParameters().selectedItem.getProperty("description");
					ONdata[sindex].NetgrpValueState = "None";
					AIWListONModel.setData(ONdata);
				}
			};

			var q = "/NetGrpSet";
			var M = this.getView().getModel("valueHelp");
			var NetworkGroupSelectDialog = ValueHelpProvider.getSelectDialog(M, q, [], settings, "Netgrp", "Netgrp_txt");
			NetworkGroupSelectDialog.setModel(this.getView().getModel("i18n"), "i18n");
			NetworkGroupSelectDialog.open();
		},
		/*
		 * To handle valueHelp CONFIRM press of Network Group
		 * @param {sap.ui.base.Event} E
		 */
		handleNetGrpConfirm: function (E) {
			var g = this.getParent().getController();
			var sindex = g.sindex;
			var AIWListONModel = sap.ui.getCore().getModel("AIWListONModel");
			var ONdata = AIWListONModel.getData();
			ONdata[sindex].Netgrp = E.getParameters().selectedItem.getProperty("title");
			ONdata[sindex].NetgrpDesc = E.getParameters().selectedItem.getProperty("description");
			ONdata[sindex].NetgrpValueState = "None";
			AIWListONModel.setData(ONdata);

		},
		/*
		 * Function to handle 'valueHelpRequest' event of Network Type
		 * @param {sap.ui.base.Event} oEvent
		 */
		onNetTypeVH: function (oEvent) {
			var g = this;
			var sPath = oEvent.getSource().getBindingContext("AIWListONModel").getPath();
			this.sindex = parseInt(sPath.split("/")[1]);

			var settings = {
				title: this.getView().getModel("i18n").getProperty("NET_TYP"),
				noDataText: this.getView().getModel("i18n").getProperty("LOAD") + "...",
				items: {
					path: "/NetTypSet",
					template: new sap.m.StandardListItem({
						title: "{NETYP}",
						description: "{NETYP_TXT}"
					})
				},
				confirm: function (E) {
					//var g = this.getParent().getController();
					var sindex = g.sindex;
					var AIWListONModel = sap.ui.getCore().getModel("AIWListONModel");
					var ONdata = AIWListONModel.getData();
					ONdata[sindex].Netwtyp = E.getParameters().selectedItem.getProperty("title");
					ONdata[sindex].NetwtypDesc = E.getParameters().selectedItem.getProperty("description");
					ONdata[sindex].NetwtypValueState = "None";
					AIWListONModel.setData(ONdata);
				}
			};

			var q = "/NetTypSet";
			var M = this.getView().getModel("valueHelp");
			var NetworkTypeSelectDialog = ValueHelpProvider.getSelectDialog(M, q, [], settings, "NETYP", "NETYP_TXT");
			NetworkTypeSelectDialog.setModel(this.getView().getModel("i18n"), "i18n");
			NetworkTypeSelectDialog.open();
		},
		/*
		 * To handle valueHelp CONFIRM press of Network Type
		 * @param {sap.ui.base.Event} E
		 */
		handleNetTypConfirm: function (E) {
			var g = this.getParent().getController();
			var sindex = g.sindex;
			var AIWListONModel = sap.ui.getCore().getModel("AIWListONModel");
			var ONdata = AIWListONModel.getData();
			ONdata[sindex].Netwtyp = E.getParameters().selectedItem.getProperty("title");
			ONdata[sindex].NetwtypDesc = E.getParameters().selectedItem.getProperty("description");
			ONdata[sindex].NetwtypValueState = "None";
			AIWListONModel.setData(ONdata);

		},
		/*
		 * Function to handle 'change' event of Network Group
		 * @param {sap.ui.base.Event} oEvent
		 */
		netGrpChange: function (oEvent) {
			var g = this;
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var AIWListONModel = sap.ui.getCore().getModel("AIWListONModel");
			var ONdata = AIWListONModel.getData();
			var sPath = oEvent.getSource().getBindingContext("AIWListONModel").getPath();
			this.sindex = parseInt(sPath.split("/")[1]);

			if (newValue !== "") {
				if (newValue !== undefined) {
					var c = newValue.toUpperCase();
					var oFilter = [new sap.ui.model.Filter("Netgrp", "EQ", c)];
					M.read("/NetGrpSet", {
						filters: oFilter,
						success: function (r) {
							if (r.results.length > 0) {
								ONdata[g.sindex].Netgrp = r.results[0].Netgrp;
								ONdata[g.sindex].NetgrpDesc = r.results[0].Netgrp_txt;
								ONdata[g.sindex].NetgrpValueState = "None";
								AIWListONModel.setData(ONdata);
							} else {
								ONdata[g.sindex].NetgrpValueState = "Error";
								ONdata[g.sindex].NetgrpDesc = "";
								AIWListONModel.setData(ONdata);
							}
						},
						error: function (err) {
							ONdata[g.sindex].NetgrpValueState = "Error";
							ONdata[g.sindex].NetgrpDesc = "";
							AIWListONModel.setData(ONdata);
						}
					});
				}
			} else {
				ONdata[g.sindex].NetgrpValueState = "Error";
				ONdata[g.sindex].NetgrpDesc = "";
				AIWListONModel.setData(ONdata);
			}
		},
		/*
		 * Function to handle 'change' event of Network Type
		 * @param {sap.ui.base.Event} oEvent
		 */
		netTypeChange: function (oEvent) {
			var g = this;
			var newValue = oEvent.getParameters().newValue;
			var M = this.getView().getModel("valueHelp");
			var AIWListONModel = sap.ui.getCore().getModel("AIWListONModel");
			var ONdata = AIWListONModel.getData();
			var sPath = oEvent.getSource().getBindingContext("AIWListONModel").getPath();
			this.sindex = parseInt(sPath.split("/")[1]);

			if (newValue !== "") {
				if (newValue !== undefined) {
					var c = newValue.toUpperCase();
					var oFilter = [new sap.ui.model.Filter("NETYP", "EQ", c)];
					M.read("/NetTypSet", {
						filters: oFilter,
						success: function (r) {
							if (r.results.length > 0) {
								ONdata[g.sindex].Netwtyp = r.results[0].NETYP;
								ONdata[g.sindex].NetwtypDesc = r.results[0].NETYP_TXT;
								ONdata[g.sindex].NetwtypValueState = "None";
								AIWListONModel.setData(ONdata);
							} else {
								ONdata[g.sindex].NetwtypValueState = "Error";
								ONdata[g.sindex].NetwtypDesc = "";
								AIWListONModel.setData(ONdata);
							}
						},
						error: function (err) {
							ONdata[g.sindex].NetwtypValueState = "Error";
							ONdata[g.sindex].NetwtypDesc = "";
							AIWListONModel.setData(ONdata);
						}
					});
				}
			} else {
				ONdata[g.sindex].NetwtypValueState = "Error";
				ONdata[g.sindex].NetwtypDesc = "";
				AIWListONModel.setData(ONdata);
			}
		},
		/*
		 * To handle copy button press of object network copy dialog
		 */
		onCopyONpress: function () {
			var src = sap.ui.getCore().byId("idSrcNetwork");
			var tar = sap.ui.getCore().byId("idTarNetwork");
			var srcValue = sap.ui.getCore().byId("idSrcNetwork").getValue();
			var tarValue = sap.ui.getCore().byId("idTarNetwork").getValue();
			var srcValueState = sap.ui.getCore().byId("idSrcNetwork").getValueState();
			var tarValueState = sap.ui.getCore().byId("idTarNetwork").getValueState();
			var validCopy = true;

			if (srcValue === "") {
				validCopy = false;
				src.setValueState("Error");
			}
			if (tarValue === "") {
				validCopy = false;
				tar.setValueState("Error");
			}
			if (srcValueState === "Error" || tarValueState === "Error") {
				validCopy = false;

				g.createMessagePopover([{
					title: "Enter Valid Network ID",
					type: "Error"
				}], false);
				// sap.m.MessageBox.show("Enter Valid Network ID", {
				// 	title: "Error",
				// 	icon: sap.m.MessageBox.Icon.ERROR,
				// 	onClose: function (oAction) {}
				// });
			}
			if (!validCopy) {
				return;
			}
			this.BusyDialog.open();
			this.readNetworkData(srcValue, "", "", tarValue);
		},
		/*
		 * Function to read Network derive data
		 * @param {string} n - Source network
		 * @param {string} o
		 * @param {string} s
		 * @param {string} t - target network
		 */
		readNetworkData: function (n, o, s, t) {
			var g = this;
			var stagingFlag = 0;
			var AIWListONData = sap.ui.getCore().getModel("AIWListONModel").getData();
			var objData = sap.ui.getCore().getModel("AIWListONModel").getData();
			for (var i = 0; i < objData.length; i++) {
				if (objData[i].Objnetwrk === n && stagingFlag === 0) {
					stagingFlag = stagingFlag + 1;
					var onObj = {};
					onObj.Objnetwrk = t; //obj.Objnetwrk;
					onObj.Netgrp = objData[i].Netgrp;
					onObj.Netwtyp = objData[i].Netwtyp;
					onObj.Netxt = objData[i].Netxt;
					onObj.NetgrpDesc = objData[i].NetgroupTxt;
					onObj.NetwtypDesc = objData[i].NettypeTxt;
					onObj.NetgrpValueState = "None";
					onObj.NetwtypValueState = "None";
					onObj.Ntobjtyp = objData[i].Ntobjtyp;
					onObj.lam = {
						Lrpid: objData[i].lam.Lrpid,
						Strtptatr: objData[i].lam.Strtptatr,
						Endptatr: objData[i].lam.lam.Endptatr,
						Length: objData[i].lam.Length,
						LinUnit: objData[i].lam.LinUnit,
						LinUnitDesc: objData[i].lam.Uomtext,
						Startmrkr: objData[i].lam.Startmrkr,
						Endmrkr: objData[i].lam.Endmrkr,
						Mrkdisst: objData[i].lam.Mrkdisst,
						Mrkdisend: objData[i].lam.Mrkdisend,
						MrkrUnit: objData[i].lam.MrkrUnit,
						LrpidDesc: objData[i].lam.LrpDescr
					};
					// onObj.lam.Lrpid = objData[i].lam.Lrpid;
					// onObj.lam.Strtptatr = objData[i].lam.Strtptatr;
					// onObj.lam.Endptatr = objData[i].lam.lam.Endptatr;
					// onObj.lam.Length = objData[i].lam.Length;
					// onObj.lam.LinUnit = objData[i].lam.LinUnit;
					// onObj.lam.LinUnitDesc = objData[i].lam.Uomtext;
					// onObj.lam.Startmrkr = objData[i].lam.Startmrkr;
					// onObj.lam.Endmrkr = objData[i].lam.Endmrkr;
					// onObj.lam.Mrkdisst = objData[i].lam.Mrkdisst;
					// onObj.lam.Mrkdisend = objData[i].lam.Mrkdisend;
					// onObj.lam.MrkrUnit = objData[i].lam.MrkrUnit;
					// onObj.lam.LrpidDesc = objData[i].lam.LrpDescr;
					AIWListONData.push(onObj);
					sap.ui.getCore().getModel("AIWListONModel").refresh();
					g.updateCount("ObjNet", AIWListONData);
					g.onCopyONclose();
					g.BusyDialog.close();
				}
			}
			if (stagingFlag > 0) {
				return;
			}
			var m = this.getView().getModel();
			var oFilter = [new sap.ui.model.Filter("Objnetwrk", "EQ", n), new sap.ui.model.Filter("Kantyp", "EQ", o)];
			var oExpand = ["ONLAM", "ONText", "ONetwork", "ONWClass", "ONVal", "ONALAM", "ONatevt", "ONattrp", "ONLink", "ONLLAM"];
			var url = "/ChangeRequestSet";
			m.read(url, {
				filters: oFilter,
				urlParameters: {
					"$expand": oExpand
				},
				success: function (r) {
					if (r.results.length > 0) {
						g.match = true;
						var d = r.results[0];
						var onObj = {};
						if (d.ONetwork.results[0] !== undefined) {
							var objNetwork = d.ONetwork.results;
							if (objNetwork.length > 0) {
								var obj = objNetwork[0];
								onObj.Objnetwrk = t; //obj.Objnetwrk;
								onObj.Netgrp = obj.Netgrp;
								onObj.Netwtyp = obj.Netwtyp;
								onObj.Netxt = obj.Netxt;
								onObj.NetgrpDesc = obj.NetgroupTxt;
								onObj.NetwtypDesc = obj.NettypeTxt;
								onObj.NetgrpValueState = "None";
								onObj.NetwtypValueState = "None";
							}
							if (obj.Ntobjtyp === "E") {
								onObj.Ntobjtyp = "EQ";
							} else if (obj.Ntobjtyp === "T") {
								onObj.Ntobjtyp = "FL";
							} else {
								onObj.Ntobjtyp = "";
							}
							var networkLam = d.ONLAM.results;
							if (networkLam.length > 0) {
								var lamObj = networkLam[0];
								onObj.lam = {
									Lrpid: lamObj.Lrpid,
									Strtptatr: lamObj.Strtptatr,
									Endptatr: lamObj.Endptatr,
									Length: lamObj.Length,
									LinUnit: lamObj.LinUnit,
									LinUnitDesc: lamObj.Uomtext,
									Startmrkr: lamObj.Startmrkr,
									Endmrkr: lamObj.Endmrkr,
									Mrkdisst: lamObj.Mrkdisst,
									Mrkdisend: lamObj.Mrkdisend,
									MrkrUnit: lamObj.MrkrUnit,
									LrpidDesc: lamObj.LrpDescr,
									enableLrp: true,
									enableMarker: true,
									LrpidVS: "None",
									StrtptatrVS: "None",
									EndptatrVS: "None",
									LinUnitVS: "None",
									StartmrkrVS: "None",
									EndmrkrVS: "None",
									MrkdisstVS: "None",
									MrkdisendVS: "None",
									MrkrUnitVS: "None"
								};
							} else {
								onObj.lam = {
									Lrpid: "",
									Strtptatr: "",
									Endptatr: "",
									Length: "",
									LinUnit: "",
									LinUnitDesc: "",
									Startmrkr: "",
									Endmrkr: "",
									Mrkdisst: "",
									Mrkdisend: "",
									MrkrUnit: "",
									LrpidDesc: "",
									enableLrp: true,
									enableMarker: false,
									LrpidVS: "None",
									StrtptatrVS: "None",
									EndptatrVS: "None",
									LinUnitVS: "None",
									StartmrkrVS: "None",
									EndmrkrVS: "None",
									MrkdisstVS: "None",
									MrkdisendVS: "None",
									MrkrUnitVS: "None"
								};
							}
							AIWListONData.push(onObj);
							sap.ui.getCore().getModel("AIWListONModel").refresh();
							g.updateCount("ObjNet", AIWListONData);
						}
						g.onCopyONclose();
						g.BusyDialog.close();
					}
				},
				error: function (err) {
					g.onCopyONclose();
					g.BusyDialog.close();

				}

			});
		},
		/*
		 * Function to handle approve data load
		 */
		handleApprovalLoad: function () {
			var key = this.getView().byId("_iconTabBar").getSelectedKey();
			var g = this;
			if (key === "BOM") {
				if (g.CountObj.mbomCount > 0 && g.getMode() === "display") {
					g.readApprovalData("MBOMTab");
				}
				if (g.CountObj.ebomCount > 0 && g.getMode() === "display") {
					g.readApprovalData("EBOMTab");
				}
				if (g.CountObj.flbomCount > 0 && g.getMode() === "display") {
					g.readApprovalData("FLBOMTab");
				}
				if (g.CountObj.wbsbomCount > 0 && g.getMode() === "display") {
					g.readApprovalData("WBSBOMTab");
				}
			} else if (key === "TLTab") {
				var TLFragmentId = this.getView().createId("tlMain");
				var TLKey = sap.ui.core.Fragment.byId(TLFragmentId, "_iconTabBarTL").getSelectedKey();
				if (TLKey === "GTLTab") {
					this.readApprovalData("GTLTab");
					this.action = "ApproveGTL";
				}
				if (TLKey === "EqTLTab") {
					this.readApprovalData("EqTLTab");
					this.action = "ApproveETL";
				}
				if (TLKey === "FLOCTLTab") {
					this.readApprovalData("FLOCTLTab");
					this.action = "ApproveFTL";
				}
			} else if (key === "EQUITab" || key === "FLOCTab" || key === "MPMITab" || key === "MSPTTab") {
				this.handleApproveModel(false, "None", false, true, false, false);
				this.readApprovalData(key);
			} else {
				this.readApprovalData(key);
			}

			// else {
			// 	this.readLastApprovalData(key);
			// }
		},
		/*
		 * Function to bind Notes data
		 * @param {object} d
		 * @returns notesData
		 */
		bindNotesData: function (d) {
			var notesData = new sap.ui.model.json.JSONModel();
			var notes = d.Notes.results;
			var a = {
				items: []
			};
			if (notes.length > 0) {
				for (var i = 0; i < notes.length; i++) {
					a.items.push(notes[i]);
				}
				notesData.setData(a);
			}
			this.getView().byId("CNoteAprl").setModel(notesData, "notes");
			this.getView().setModel(notesData, "notes");
			return notesData;
		},
		/*
		 * Function to bind Attachments
		 * @param {object} d
		 */
		bindAttachmentData: function (d) {
			var attachData = new sap.ui.model.json.JSONModel();
			var f = {
				dataitems: []
			};
			var o = d.CrAttachments.results;
			if (o.length > 0) {
				for (var k = 0; k < o.length; k++) {
					// var C = this.getDateFormat(o[k].CreatedAt);
					//var date = new Date(o[k].CreatedAt);
					//var C = date.toISOString();
					var C = formatter._formatDate(o[k].CreatedAt);
					var name = decodeURIComponent(o[k].FileName);
					o[k].FileName = name;
					var s = C.split(".");
					o[k].url = "/sap/opu/odata/UGIOD01/MDG_APPROVE_CR_SRV/AttachmentCollection(ChangeRequestID='" + o[k].ChangeRequestID +
						"',CreatedAt=datetime'" + s[0] + "')/$value";
					f.dataitems.push(o[k]);

				}
			}

			attachData.setData(f);
			this.getView().byId("_fileUpload").setModel(attachData); //, "json"
			this.getView().byId("_fileUpload").getBinding("items").refresh(true);
			this.getView().byId("_fileUpload").rerender();
			this.getView().setModel(attachData, "json");
		},
		/*
		 * Function to handle Approve data model
		 * @param {boolean} headerToolbarVis
		 * @param {string} mainTableMode
		 * @param {boolean} createVisible
		 * @param {boolean} approveVisible
		 * @param {boolean} mainFieldEnabled
		 * @param {boolean} supordEqui
		 */
		handleApproveModel: function (headerToolbarVis, mainTableMode, createVisible, approveVisible, mainFieldEnabled, supordEqui) {
			var sApproveModel = this.getView().getModel("ApproveModel");
			var sApproveData = sApproveModel.getData();
			sApproveData.headerToolbarVis = headerToolbarVis;
			sApproveData.mainTableMode = mainTableMode;
			sApproveData.createVisible = createVisible;
			sApproveData.approveVisible = approveVisible;
			sApproveData.mainFieldEnabled = mainFieldEnabled;
			sApproveData.SuperordinateEquipEnabled = supordEqui;
			// if(approveVisible === true){
			// 	sApproveData.SuperordinateEquipEnabled = false;
			// }else{
			// 	sApproveData.SuperordinateEquipEnabled = true;
			// }
			sApproveModel.setData(sApproveData);
		},
		/*
		 * Function to read Buffer data
		 */
		readBufferData: function () {
			var g = this;
			var oModel = this.getView().getModel();
			var url = "/ChangeRequestSet";
			// var oFilter = [new sap.ui.model.Filter("Buffer", "EQ", true)];
			var key = g.getView().byId("_iconTabBar").getSelectedKey();
			var AIWFLOCModel = sap.ui.getCore().getModel(g.oModelAIWFLOC).getData();
			var AIWEQUIModel = sap.ui.getCore().getModel(g.oModelAIWEQUI).getData();
			var AIWMSPTModel = sap.ui.getCore().getModel(g.oModelAIWMSPT).getData();
			var AIWMPMIModel = sap.ui.getCore().getModel(g.oModelAIWMPMI).getData();
			var payload = {};
			payload.BufferRead = true;
			payload.Hierarchy = [];
			payload.FuncLoc = [];
			payload.FLLAM = [];
			payload.FLAddr = [];
			payload.FLAddrI = [];
			payload.FLALTLBEL = [];
			payload.FLClass = [];
			payload.FLVal = [];
			payload.Equipment = [];
			payload.EqLAM = [];
			payload.EqAddr = [];
			payload.EqAddrI = [];
			payload.EqClass = [];
			payload.EqVal = [];
			payload.MSPoint = [];
			payload.MSLAM = [];
			payload.MSClass = [];
			payload.MSVal = [];
			payload.MPLAN = [];
			payload.MPItem = [];
			payload.MPLAM = [];
			payload.MPCycle = [];
			payload.MRBHeader = [];
			payload.MRBItem = [];
			payload.MRBSBIT = [];
			payload.EBHeader = [];
			payload.EBItem = [];
			payload.EBSBIT = [];
			payload.FBHeader = [];
			payload.FBItem = [];
			payload.FBSBIT = [];
			payload.WBHeader = [];
			payload.WBItem = [];
			payload.WBSBIT = [];
			payload.ONetwork = [];
			payload.ONLAM = [];
			payload.Workcenter = [];
			payload.WCCost = [];
			payload.ClassWC = [];
			payload.ValueWC = [];
			payload.GTHdr = [];
			payload.GTList = [];
			payload.GTOprs = [];
			payload.GTComp = [];
			payload.GTClass = [];
			payload.GTVal = [];
			payload.ETHdr = [];
			payload.ETList = [];
			payload.ETOprs = [];
			payload.ETComp = [];
			payload.ETClass = [];
			payload.ETVal = [];
			payload.FTHdr = [];
			payload.FTList = [];
			payload.FTOprs = [];
			payload.FTComp = [];
			payload.FTClass = [];
			payload.FTVal = [];
			payload.Olink = [];
			payload.OLClass = [];
			payload.OLVal = [];
			payload.AiwModel = [];
			payload.AiwModelRef = [];
			// payload.HIERDOI = [{
			// 	"OBJDOI": []
			// }];
			var fnSuccess = function (r) {
				if (r) {
					sap.ui.getCore().getModel("mocrRefresh").setProperty("/refresh", false);
					var payload = {
						"ReadAllObj": true
					};
					var id = sap.ushell.Container.getService("UserInfo").getId();
					var date = g.formatter.getDateFormat(new Date);
					if (g.isHierarchy) {

						var desc = "Mass Change" + " " + id + " " + date;
						g.getView().byId("Description").setValue(desc);
						if (g.hMode === "copy") {
							var sFloc = r.Hierarchy.results[0].EntKey;
							var tFloc = r.Hierarchy.results[0].RowKey;
							desc = "Hierarchy Copy: " + sFloc + " ->" + " " + tFloc;
							g.getView().byId("Description").setValue(desc);
							payload.CopyCreate = true;
						}
						var h = r.Hierarchy.results;
						for (var re = 0; re < h.length; re++) {
							delete h[re].__metadata;
						}
						g.getView().byId("_iconTabBar").setSelectedKey("FLOCTab");
						payload.Hierarchy = h;
						payload.FuncLoc = [];
						payload.FLLAM = [];
						payload.FLAddr = [];
						payload.FLAddrI = [];
						payload.FLALTLBEL = [];
						payload.FLClass = [];
						payload.FLVal = [];
						payload.Equipment = [];
						payload.EqLAM = [];
						payload.EqAddr = [];
						payload.EqAddrI = [];
						payload.EqClass = [];
						payload.EqVal = [];
						payload.MSPoint = [];
						payload.MSLAM = [];
						payload.MSClass = [];
						payload.MSVal = [];
						payload.MPLAN = [];
						payload.MPItem = [];
						payload.MPLAM = [];
						payload.MPCycle = [];
						payload.MRBHeader = [];
						payload.MRBItem = [];
						payload.MRBSBIT = [];
						payload.EBHeader = [];
						payload.EBItem = [];
						payload.EBSBIT = [];
						payload.FBHeader = [];
						payload.FBItem = [];
						payload.FBSBIT = [];
						payload.WBHeader = [];
						payload.WBItem = [];
						payload.WBSBIT = [];
						payload.ONetwork = [];
						payload.ONLAM = [];
						payload.Workcenter = [];
						payload.WCCost = [];
						payload.ClassWC = [];
						payload.ValueWC = [];
						payload.GTHdr = [];
						payload.GTList = [];
						payload.GTOprs = [];
						payload.GTComp = [];
						payload.GTClass = [];
						payload.GTVal = [];
						payload.ETHdr = [];
						payload.ETList = [];
						payload.ETOprs = [];
						payload.ETComp = [];
						payload.ETClass = [];
						payload.ETVal = [];
						payload.FTHdr = [];
						payload.FTList = [];
						payload.FTOprs = [];
						payload.FTComp = [];
						payload.FTClass = [];
						payload.FTVal = [];
						payload.Olink = [];
						payload.OLClass = [];
						payload.OLVal = [];
						payload.HIERDOI = [{
							"OBJDOI": []
						}];
						payload.AiwModel = [];
						payload.AiwModelRef = [];

					} else {
						var d = "AIW Mass Process " + id + " " + date;
						g.getView().byId("Description").setValue(d);

						payload.FuncLoc = r.FuncLoc;
						payload.Equipment = r.Equipment;
						payload.EBHeader = r.EBHeader;
						payload.FBHeader = r.FBHeader;
						payload.MPLAN = r.MPLAN;
						payload.MRBHeader = r.MRBHeader;
						payload.MSPoint = r.MSPoint;
						payload.ONetwork = r.ONetwork;
						payload.Olink = r.Olink;
						payload.WBHeader = r.WBHeader;
						payload.Workcenter = r.Workcenter;
						payload.GTList = r.GTList;
						payload.FTList = r.FTList;
						payload.ETList = r.ETList;
						// payload.FuncLoc = [];
						payload.FLLAM = [];
						payload.FLAddr = [];
						payload.FLAddrI = [];
						payload.FLALTLBEL = [];
						payload.FLClass = [];
						payload.FLVal = [];

						payload.EqLAM = [];
						payload.EqAddr = [];
						payload.EqAddrI = [];
						payload.EqClass = [];
						payload.EqVal = [];

						payload.MSLAM = [];
						payload.MSClass = [];
						payload.MSVal = [];

						payload.MPItem = [];
						payload.MPLAM = [];
						payload.MPCycle = [];

						payload.MRBItem = [];
						payload.MRBSBIT = [];

						payload.EBItem = [];
						payload.EBSBIT = [];

						payload.FBItem = [];
						payload.FBSBIT = [];

						payload.WBItem = [];
						payload.WBSBIT = [];

						payload.ONLAM = [];

						payload.WCCost = [];
						payload.ClassWC = [];
						payload.ValueWC = [];

						payload.GTOprs = [];
						payload.GTComp = [];
						payload.GTClass = [];
						payload.GTVal = [];

						payload.ETOprs = [];
						payload.ETComp = [];
						payload.ETClass = [];
						payload.ETVal = [];

						payload.FTOprs = [];
						payload.FTComp = [];
						payload.FTClass = [];
						payload.FTVal = [];

						payload.OLClass = [];
						payload.OLVal = [];
						payload.HIERDOI = [{
							"OBJDOI": []
						}];
						payload.AiwModel = [];
						payload.AiwModelRef = [];
					}

					g.BusyDialog.close();
					g.readApprovalData(key, payload);

				}
			};
			var fnError = function (err) {
				g.BusyDialog.close();
			};
			this.BusyDialog.open();
			oModel.create(url, payload, {
				// filters: oFilter,
				// urlParameters: {
				// 	"$expand": oExpand
				// },
				success: fnSuccess,
				error: fnError
			});

		},
		/*
		 * Function to read Approve data
		 * @param {string} sType
		 * @param {object} payload
		 */
		readApprovalData: function (sType, payload) {
			var g = this;
			var m = this.getView().getModel("ApprModel");
			var oModel = this.getView().getModel();
			var url = "/ChangeRequestSet";
			var oFilter = [new sap.ui.model.Filter("ChangeRequestId", "EQ", this.cReqNo)];
			var oExpand = {};
			var sObject = {};
			var AIWFLOCModel = sap.ui.getCore().getModel(g.oModelAIWFLOC).getData();
			var AIWEQUIModel = sap.ui.getCore().getModel(g.oModelAIWEQUI).getData();
			var AIWMSPTModel = sap.ui.getCore().getModel(g.oModelAIWMSPT).getData();
			var AIWMPMIModel = sap.ui.getCore().getModel(g.oModelAIWMPMI).getData();
			var AIWListMatData = sap.ui.getCore().getModel("AIWListMatModel").getData();
			var AIWListEqData = sap.ui.getCore().getModel("AIWListEqModel").getData();
			var AIWListFLData = sap.ui.getCore().getModel("AIWListFLModel").getData();
			var AIWListWBSData = sap.ui.getCore().getModel("AIWListWBSModel").getData();
			var AIWListONData = sap.ui.getCore().getModel("AIWListONModel").getData();
			var AIWListWCData = sap.ui.getCore().getModel("AIWListWCModel").getData();
			var AIWListGTLData = sap.ui.getCore().getModel("AIWListGTLModel").getData();
			var AIWListETLData = sap.ui.getCore().getModel("AIWListETLModel").getData();
			var AIWListFTLData = sap.ui.getCore().getModel("AIWListFTLModel").getData();
			var AIWListOLData = sap.ui.getCore().getModel("AIWListOLModel").getData();
			var oPayload = payload;

			function readStatusProf(d, l) {
				//var q = "/DeriveOLstatusSet(NETYP='" + d + "',STSMA='')";
				var q = "/DeriveOLstatusSet(Netyp='" + d + "',Lvorm=false)";
				m.read(q, {
					success: function (r) {
						if (r.Statproftxt !== "" && (r.Ustw_oln !== "" || r.Uswo_oln !== "")) {
							AIWListOLData[l - 1].usrSts = r.Usta_oln;
							AIWListOLData[l - 1].stProfLblV = true;
							AIWListOLData[l - 1].stsProf = r.Stsm_oln;
							AIWListOLData[l - 1].stsProfV = true;
							AIWListOLData[l - 1].stsProfDesc = r.Statproftxt;
							AIWListOLData[l - 1].stsProfDescV = true;
							AIWListOLData[l - 1].stsObj = r.Ustw_oln;
							AIWListOLData[l - 1].stsObjLblV = true;
							AIWListOLData[l - 1].stsObjV = true;
							AIWListOLData[l - 1].stsWoLblV = true;
							AIWListOLData[l - 1].stsWoNoV = true;
							AIWListOLData[l - 1].stsWoNo = r.Uswo_oln;
							AIWListOLData[l - 1].sysSts = r.Stattext;
						} else {
							AIWListOLData[l - 1].stProfLblV = false;
							AIWListOLData[l - 1].stsProfV = false;
							AIWListOLData[l - 1].stsProfDescV = false;
							AIWListOLData[l - 1].stsObjLblV = false;
							AIWListOLData[l - 1].stsObjV = false;
							AIWListOLData[l - 1].stsWoLblV = false;
							AIWListOLData[l - 1].stsWoNoV = false;
							AIWListOLData[l - 1].usrSts = "";
							AIWListOLData[l - 1].stsProf = "";
							AIWListOLData[l - 1].stsProfDesc = "";
							AIWListOLData[l - 1].stsObj = "";
							AIWListOLData[l - 1].stsWoNo = "";
							AIWListOLData[l - 1].sysSts = "";
						}
						// AIWListOLData.push(objLink);
						// }
						if (l > 1) {
							l--;
							readStatusProf(AIWListOLData[l - 1].linkCat, l);
						}
						sap.ui.getCore().getModel("AIWListOLModel").setData(AIWListOLData);
						//g.updateCount("objLink", AIWListOLData);
						sap.ui.getCore().getModel("AIWListOLModel").refresh();
					},
					error: function (err) {
						var error = [];
						if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
							.errordetails
							.length === 0) {
							error[0] = JSON.parse(err.responseText).error.message.value;
						} else {
							for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
								error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
							}
						}
						var value = error.join("\n");
						g.BusyDialog.close();
						g.invokeMessage(value);
					}
				});
			}

			var fnSuccessAll = function (r) {
				var results = r;
				var pApproveObject = {};
				if (results) {
					var equiCount = results.EquiCount === "" ? "0" : results.EquiCount;
					// var flocCount = results.FlocCount === "" ? "0" : results.FlocCount;
					var msptCount = results.MsptCount === "" ? "0" : results.MsptCount;
					var mpmiCount = results.MpmiCount === "" ? "0" : results.MpmiCount;
					if (msptCount !== "" && msptCount !== "0") {
						g.getView().getModel('EnableModel').setProperty("/Measuring Point", true);
					} else {
						g.getView().getModel('EnableModel').setProperty("/Measuring Point", false);
					}
					if (mpmiCount !== "" && mpmiCount !== "0") {
						g.getView().getModel("EnableModel").setProperty("/Maintenance Plan", true);
					} else {
						g.getView().getModel("EnableModel").setProperty("/Maintenance Plan", false);
					}

					var mbomCount = results.MbomCount === "" ? "0" : results.MbomCount;
					var ebomCount = results.EbomCount === "" ? "0" : results.EbomCount;
					var flbomCount = results.FbomCount === "" ? "0" : results.FbomCount;
					var wbsbomCount = results.WbomCount === "" ? "0" : results.WbomCount;
					var onCount = results.ObjnCount === "" ? "0" : results.ObjnCount;
					var totalBOMCount = parseInt(mbomCount) + parseInt(ebomCount) + parseInt(flbomCount) + parseInt(wbsbomCount);

					var WcCount = results.WcCount === "" ? "0" : results.WcCount;
					var GntlCount = results.GntlCount === "" ? "0" : results.GntlCount;
					var EqtlCount = results.EqtlCount === "" ? "0" : results.EqtlCount;
					var FltlCount = results.FltlCount === "" ? "0" : results.FltlCount;
					var ObjlCount = results.ObjlCount === "" ? "0" : results.ObjlCount;
					var TotalTLCount = (parseInt(GntlCount) + parseInt(EqtlCount) + parseInt(FltlCount)).toString();

					if (onCount !== "" && onCount !== "0") {
						g.getView().getModel("EnableModel").setProperty("/Object Network", true);
					} else {
						g.getView().getModel("EnableModel").setProperty("/Object Network", false);
					}
					if (WcCount !== "" && WcCount !== "0") {
						g.getView().getModel('EnableModel').setProperty("/Work Center", true);
					} else {
						g.getView().getModel('EnableModel').setProperty("/Work Center", false);
					}
					if (TotalTLCount !== "" && TotalTLCount !== "0") {
						g.getView().getModel('EnableModel').setProperty("/Task List", true);
					} else {
						g.getView().getModel('EnableModel').setProperty("/Task List", false);
					}
					if (ObjlCount !== "" && ObjlCount !== "0") {
						g.getView().getModel('EnableModel').setProperty("/Object Link", true);
					} else {
						g.getView().getModel('EnableModel').setProperty("/Object Link", false);
					}

					var countModel = g.getView().getModel("CountModel");
					countModel.setProperty("/MatBomCount", g.getResourceBundle().getText("mbom", [mbomCount]));
					countModel.setProperty("/EqBomCount",
						g.getResourceBundle().getText("ebom", [ebomCount]));
					countModel.setProperty("/FLBomCount", g.getResourceBundle().getText(
						"flbom", [flbomCount]));
					countModel.setProperty("/WbsBomCount", g.getResourceBundle().getText("wbsbom", [wbsbomCount]));
					countModel
						.setProperty("/TotalBomCount", g.getResourceBundle().getText("billOfMaterials", [totalBOMCount.toString()]));
					countModel.setProperty(
						"/ONCount", g.getResourceBundle().getText("objNet", [onCount]));
					countModel.setProperty("/WCCount", g.getResourceBundle().getText(
						"detailWCIconTabFilterMaster", [WcCount]));
					countModel.setProperty("/GTLCount", g.getResourceBundle().getText(
						"GTLHeader", [GntlCount]));
					countModel.setProperty("/ETLCount", g.getResourceBundle().getText("ETLHeader", [EqtlCount]));
					countModel
						.setProperty("/FTLCount", g.getResourceBundle().getText("FTLHeader", [FltlCount]));
					countModel.setProperty(
						"/TotalTLCount", g.getResourceBundle().getText("TLHeaderTitle", [TotalTLCount.toString()]));
					countModel.setProperty(
						"/OLCount", g.getResourceBundle().getText("detailOLIconTabFilterMaster", [ObjlCount]));
					if (g.getState() === "MOCR" && g.isHierarchy) {
						g.getView().byId("_iconTabBar").setSelectedKey("FLOCTab");
					}

					if (results.FuncLoc) {
						var sFunctionalLoc = results.FuncLoc.results;
						if (sFunctionalLoc) {
							if (g.getState() === "MOCR" && !g.isHierarchy) {
								g.getView().byId("_iconTabBar").setSelectedKey("FLOCTab");
							}
							for (var a = 0; a < sFunctionalLoc.length; a++) {
								pApproveObject = {
									intlAddr: [],
									classItems: [],
									characteristics: [],
									emailAddress: [],
									urlAddress: [],
									telephoneData: [],
									faxData: []
								};
								sObject = {
									intlAddr: [],
									classItems: [],
									characteristics: [],
									altlbl: [],
									Partners: [], // Partners
									Permits: [], // Permit
									attachmentCount: "0", // Attachment Count
									Guids: "", // Attachment
									TplnrEnabled: true,
									MaintplantEnabled: true,
									BukrsEnabled: true,
									FunctionalLocEnabled: true,
									FlocCatEnabled: true,
									StrucIndEnabled: true
								};
								if (g.getState() === "MOCR" && g.hMode !== "copy") {
									sObject.FunctionalLocEnabled = false;
									sObject.FlocCatEnabled = false;
									sObject.StrucIndEnabled = false;
								}
								sObject.Tplnr = sFunctionalLoc[a].Tplnr;
								if (g.hMode === "copy") {
									sObject.Type = true;
									sObject.viewParameter = "create";
								} else {
									sObject.viewParameter = "change";
								}
								sObject.Functionallocation = sFunctionalLoc[a].FlocRef;
								sObject.Flocdescription = sFunctionalLoc[a].Txtmi; // Floc Description
								sObject.EditMask = sFunctionalLoc[a].EditMask;
								sObject.Hierarchy = sFunctionalLoc[a].Hierarchy;
								sObject.Floccategory = sFunctionalLoc[a].Fltyp;
								sObject.FlocCategoryDesc = sFunctionalLoc[a].Flttx;
								sObject.Strucindicator = sFunctionalLoc[a].TplkzFlc;
								sObject.StrucIndicatorDesc = sFunctionalLoc[a].Tplxt;
								sObject.Lvorm = sFunctionalLoc[a].Lvorm;
								sObject.Deact = sFunctionalLoc[a].Deact;
								sObject.Trpnr = sFunctionalLoc[a].Trpnr;
								sObject.Refflocdesc = sFunctionalLoc[a].Refflocdesc;
								sObject.SupFunctionallocation = sFunctionalLoc[a].Tplma; // Sup FuncLoc
								sObject.SupFlocdescription = sFunctionalLoc[a].Supflocdesc; // Sup FlocDescription
								sObject.Stattext = sFunctionalLoc[a].Stattext; // System Status
								sObject.UstaEqui = sFunctionalLoc[a].UstaFloc; // User Status
								sObject.StsmEqui = sFunctionalLoc[a].StsmFloc; // Status Profile
								sObject.StsmEquiDesc = sFunctionalLoc[a].Statproftxt; // Status Profile Description
								sObject.UstwEqui = sFunctionalLoc[a].UstwFloc; // Status with Status Number
								sObject.UswoEqui = sFunctionalLoc[a].UswoFloc; // Status without Status Number
								sObject.TechnicalObjectTyp = sFunctionalLoc[a].Eqart; // TechnicalObjectTyp
								sObject.Description = sFunctionalLoc[a].Eartx; // TechnicalObjectTyp Description
								sObject.Begru = sFunctionalLoc[a].Begru;
								sObject.Begtx = sFunctionalLoc[a].Begtx;
								sObject.Brgew = sFunctionalLoc[a].Brgew;
								sObject.Gewei = sFunctionalLoc[a].Gewei;
								sObject.Invnr = sFunctionalLoc[a].Invnr;
								sObject.Groes = sFunctionalLoc[a].Groes;
								sObject.Inbdt = sFunctionalLoc[a].Inbdt;
								sObject.Answt = sFunctionalLoc[a].Answt;
								sObject.Waers = sFunctionalLoc[a].Waers;
								sObject.Ansdt = sFunctionalLoc[a].Ansdt;
								sObject.Herst = sFunctionalLoc[a].Herst;
								sObject.Typbz = sFunctionalLoc[a].Typbz;
								sObject.Mapar = sFunctionalLoc[a].Mapar;
								sObject.Serge = sFunctionalLoc[a].Serge;
								sObject.Herld = sFunctionalLoc[a].Herld;
								sObject.Baujj = sFunctionalLoc[a].Baujj;
								sObject.Baumm = sFunctionalLoc[a].Baumm;
								sObject.MonthName = sFunctionalLoc[a].MonthName;
								sObject.Maintplant = sFunctionalLoc[a].Swerk;
								if (sObject.Maintplant !== "" && g.getState() === "MOCR" && g.hMode !== "copy") {
									sObject.MaintplantEnabled = false;
								}
								sObject.MaintplantDesc = sFunctionalLoc[a].Plantname;
								sObject.Location = sFunctionalLoc[a].StorFloc; // Location
								sObject.Locationdesc = sFunctionalLoc[a].Locationdesc; // Location Description
								sObject.Msgrp = sFunctionalLoc[a].Msgrp;
								sObject.BeberFl = sFunctionalLoc[a].BeberFl; // Plant Section
								sObject.Fing = sFunctionalLoc[a].Fing; // Person responsible
								sObject.Tele = sFunctionalLoc[a].Tele; // Phone
								sObject.Eqfnr = sFunctionalLoc[a].Eqfnr;
								sObject.Abckz = sFunctionalLoc[a].Abckzfloc;
								sObject.Abctx = sFunctionalLoc[a].Abctx;
								sObject.Bukrs = sFunctionalLoc[a].Bukrsfloc;
								if (sObject.Bukrs !== "" && g.getState() === "MOCR" && g.hMode !== "copy") {
									sObject.BukrsEnabled = false;
								}
								sObject.Butxt = sFunctionalLoc[a].Butxt;
								sObject.City = sFunctionalLoc[a].City;
								sObject.GsbeFloc = sFunctionalLoc[a].GsbeFloc;
								sObject.Gtext = sFunctionalLoc[a].Gtext;
								sObject.Anln1Fl = sFunctionalLoc[a].Anln1Fl;
								sObject.AnlaFl = sFunctionalLoc[a].AnlaFl;
								sObject.Txt50 = sFunctionalLoc[a].Txt50;
								sObject.Kostl = sFunctionalLoc[a].KostFloc; // Cost Center
								sObject.Kokrs = sFunctionalLoc[a].KokrFloc; // ccPart1
								sObject.Mctxt = sFunctionalLoc[a].Contareaname; // Name
								sObject.Posid = sFunctionalLoc[a].Posid;
								sObject.Post1 = sFunctionalLoc[a].Post1;
								sObject.DaufFloc = sFunctionalLoc[a].DaufFloc;
								sObject.Standorderdesc = sFunctionalLoc[a].Standorderdesc;
								sObject.AufnFloc = sFunctionalLoc[a].AufnFloc;
								sObject.SettleOrdDesc = sFunctionalLoc[a].SettleOrdDesc;
								sObject.Werks = sFunctionalLoc[a].PlntFloc; // Planning Plant
								sObject.Planningplantdes = sFunctionalLoc[a].Planningplantdes; // Planning Plant Description
								sObject.Ingrp = sFunctionalLoc[a].Ingrp; // Planner Group
								sObject.Innam = sFunctionalLoc[a].Plannergrpdesc; // Planner Group Description
								sObject.Arbpl = sFunctionalLoc[a].Arbplfloc; // Work Center
								sObject.Ktext = sFunctionalLoc[a].Workcenterdesc; // Work Center Description
								sObject.WcWerks = sFunctionalLoc[a].Wergwfloc; // Work center Plant
								sObject.MainArbpl = sFunctionalLoc[a].Gewrkfloc; // Main Work Center
								sObject.MainKtext = sFunctionalLoc[a].MainWcDesc; // Plant Work Center
								sObject.MainWerks = sFunctionalLoc[a].MainWcPlant; // Name
								sObject.RbnrFloc = sFunctionalLoc[a].RbnrFloc;
								sObject.Rbnrx = sFunctionalLoc[a].Rbnrx;
								sObject.Tplma = sFunctionalLoc[a].Tplma;
								sObject.Supflocdesc = sFunctionalLoc[a].Supflocdesc;
								sObject.Posnr = sFunctionalLoc[a].Posnr;
								sObject.Trpnr = sFunctionalLoc[a].Trpnr;
								sObject.Refflocdesc = sFunctionalLoc[a].Refflocdesc;
								sObject.Iequi = sFunctionalLoc[a].Iequi;
								sObject.Einzl = sFunctionalLoc[a].Einzl;
								sObject.ConstrType = sFunctionalLoc[a].Submtiflo; // Construction Type
								sObject.ConstructionDesc = sFunctionalLoc[a].Constdesc; // Construction Description
								sObject.CgwldtFl = sFunctionalLoc[a].CgwldtFl;
								sObject.CgwlenFl = sFunctionalLoc[a].CgwlenFl;
								sObject.CmganrFl = sFunctionalLoc[a].CmganrFl;
								sObject.CwagetFl = sFunctionalLoc[a].CwagetFl;
								sObject.CgaerbFl = sFunctionalLoc[a].CgaerbFl;
								sObject.VgwldtFl = sFunctionalLoc[a].VgwldtFl;
								sObject.VgwlenFl = sFunctionalLoc[a].VgwlenFl;
								sObject.VmganrFl = sFunctionalLoc[a].VmganrFl;
								sObject.VwagetFl = sFunctionalLoc[a].VwagetFl;
								sObject.VgaerbFl = sFunctionalLoc[a].VgaerbFl;
								sObject.Vkorg = sFunctionalLoc[a].Vkorg;
								sObject.Vkorgtxt = sFunctionalLoc[a].Vkorgtxt;
								sObject.Vtweg = sFunctionalLoc[a].Vtweg;
								sObject.Vtwegtxt = sFunctionalLoc[a].Vtwegtxt;
								sObject.Spart = sFunctionalLoc[a].Spart;
								sObject.Sparttxt = sFunctionalLoc[a].Sparttxt;
								sObject.Vkbur = sFunctionalLoc[a].Vkbur;
								sObject.Vkburtxt = sFunctionalLoc[a].Vkburtxt;
								sObject.Vkgrp = sFunctionalLoc[a].Vkgrp;
								sObject.Vkgrptxt = sFunctionalLoc[a].Vkgrptxt;
								sObject.Modeldesc = sFunctionalLoc[a].Modeldesc;
								sObject.Modelref = sFunctionalLoc[a].Modelref;
								sObject.Modelrver = sFunctionalLoc[a].Modelrver;
								sObject.Modelext = sFunctionalLoc[a].Modelext;
								sObject.Modelname = sFunctionalLoc[a].Modelname;
								sObject.Modelver = sFunctionalLoc[a].Modelver;

								if (sFunctionalLoc[a].Fltyp === "L" && results.FLLAM) {
									var sLAM = results.FLLAM.results;
									if (sLAM) {
										for (var z = 0; z < sLAM.length; z++) {
											if (sLAM[z].Funcloc === sFunctionalLoc[a].Tplnr) {
												sObject.lam = sLAM[z];
												sObject.lam.LrpidDesc = sLAM[z].LrpDescr;
												sObject.lam.LinUnitDesc = sLAM[z].Uomtext;
												break;
											}
										}
									}
								}

								if (results.FLClass) {
									var sClassFloc = results.FLClass.results;
									if (sClassFloc) {
										if (sClassFloc.length > 0) {
											for (var b = 0; b < sClassFloc.length; b++) {
												if (sObject.Tplnr === sClassFloc[b].Funcloc) {
													if (g.getState() === "MOCR" && g.hMode !== "copy") {
														sClassFloc[b].ctEnable = false;
														sClassFloc[b].classEnable = false;
													} else {
														sClassFloc[b].ctEnable = true;
														sClassFloc[b].classEnable = true;
													}

													sClassFloc[b].ClassTypeDesc = sClassFloc[b].Artxt;
													delete sClassFloc[b].Artxt;
													sClassFloc[b].ClassDesc = sClassFloc[b].Kltxt;
													delete sClassFloc[b].Kltxt;
													delete sClassFloc[b].Changerequestid;
													delete sClassFloc[b].Clint;
													delete sClassFloc[b].Service;
													sObject.classItems.push(sClassFloc[b]);
												}
											}
										}
									}
								}

								if (results.FLVal) {
									var sCharFLOC = results.FLVal.results;
									if (sCharFLOC) {
										if (sCharFLOC.length > 0) {
											for (var c = 0; c < sCharFLOC.length; c++) {
												if (sObject.Tplnr === sCharFLOC[c].Funcloc) {
													if (g.getState() === "MOCR" && g.hMode !== "copy") {
														sCharFLOC[c].cNameEnable = false;
													} else {
														sCharFLOC[c].cNameEnable = true;
													}
													sCharFLOC[c].Textbz = sCharFLOC[c].Atwtb;
													delete sCharFLOC[c].Ataut;
													delete sCharFLOC[c].Ataw1;
													delete sCharFLOC[c].Atawe;
													delete sCharFLOC[c].Atcod;
													delete sCharFLOC[c].Atflb;
													delete sCharFLOC[c].Atflv;
													delete sCharFLOC[c].Atimb;
													delete sCharFLOC[c].Atsrt;
													delete sCharFLOC[c].Atvglart;
													delete sCharFLOC[c].Atzis;
													delete sCharFLOC[c].Changerequestid;
													delete sCharFLOC[c].Charid;
													delete sCharFLOC[c].Classtype;
													delete sCharFLOC[c].Service;
													delete sCharFLOC[c].Valcnt;
													sCharFLOC[c].slNo = c + 1; // ()
													sCharFLOC[c].flag = sCharFLOC[c].Class + "-" + sCharFLOC[c].slNo; // ()
													sObject.characteristics.push(sCharFLOC[c]);
												}
											}

											for (var z = 0; z < sObject.characteristics.length; z++) {
												var count = 1;
												for (var y = 0; y < sObject.characteristics.length; y++) {
													if (z === y) {
														continue;
													}
													if (sObject.characteristics[y].Atnam === sObject.characteristics[z].Atnam && sObject.characteristics[y].Class ===
														sObject.characteristics[z].Class) {
														count++;
													}
												}
												if (count > 1) {
													sObject.characteristics[z].charDltEnable = true;
												} else {
													sObject.characteristics[z].charDltEnable = false;
												}

												if (sObject.characteristics[z].Atein === true) {
													sObject.characteristics[z].charAddEnable = false;
												}
											}
										}
									}
								}

								if (results.FLPrtnr) {
									var sPartnerData = results.FLPrtnr.results;
									if (sPartnerData) {
										if (sPartnerData.length > 0) {
											for (var d = 0; d < sPartnerData.length; d++) {
												if (sObject.Tplnr === sPartnerData[d].Funcloc) {
													var sPartnerObj = {};
													sPartnerObj.Partnerfn = sPartnerData[d].Partnerfn;
													sPartnerObj.Partner = sPartnerData[d].Partner;
													sPartnerObj.Namedisp = sPartnerData[d].Namedisp;
													sPartnerObj.Addressfl = sPartnerData[d].Addressfl;
													sPartnerObj.Address = sPartnerData[d].Address;
													sPartnerObj.Partnrfuntxt = sPartnerData[d].Partnrfuntxt;
													sObject.Partners.push(sPartnerObj);
												}
											}
										}
									}
								}

								if (results.FLPermit) {
									var sPermitData = results.FLPermit.results;
									if (sPermitData) {
										if (sPermitData.length > 0) {
											for (var e = 0; e < sPermitData.length; e++) {
												if (sObject.Tplnr === sPermitData[e].Funcloc) {
													var sPermitObj = {};
													sPermitObj.Permit = sPermitData[e].Permit;
													sPermitObj.Permittxt = sPermitData[e].Permittxt;
													sPermitObj.Permitcat = sPermitData[e].Permitcat;
													sPermitObj.Ordercomp = sPermitData[e].Ordercomp;
													sPermitObj.Orderrel = sPermitData[e].Orderrel;
													sPermitObj.Printper = sPermitData[e].Printper;
													sPermitObj.Proposper = sPermitData[e].Proposper;
													sPermitObj.Ltxtper = sPermitData[e].Ltxtper;
													sPermitObj.Chbltyper = sPermitData[e].Chbltyper;
													sPermitObj.PermitLt = sPermitData[e].PermitLt;
													sObject.Permits.push(sPermitObj);
												}
											}
										}
									}
								}

								if (results.FLAddr) {
									if (results.FLAddr.results) {
										var sAddressFloc = results.FLAddr.results;
										if (sAddressFloc) {
											if (sAddressFloc.length > 0) {
												for (var f = 0; f < sAddressFloc.length; f++) {
													if (sObject.Tplnr === sAddressFloc[f].Funcloc) {
														var oAddressModel = sap.ui.getCore().getModel("flocAddressView");
														var oAddressData = oAddressModel.getData();
														var mCountFlag = true;
														var sObj, sMatchIndex;
														if (oAddressData.length > 0) {
															for (var sa = 0; sa < oAddressData.length; sa++) {
																if (sObject.Functionallocation === oAddressData[sa].Functionallocation) {
																	mCountFlag = false;
																	sMatchIndex = sa;
																	break;
																}
															}
														}
														if (mCountFlag && sObject.SupFunctionallocation !== "" && sObject.SupFunctionallocation !== undefined) {
															sObj = {
																Functionallocation: sObject.Functionallocation,
																IsEditable: sAddressFloc[f].IsEditable
															};
															oAddressData.push(sObj);
															oAddressModel.setData(oAddressData);
														}
														if (!mCountFlag && sObject.SupFunctionallocation !== "" && sObject.SupFunctionallocation !== undefined) {
															oAddressData[sMatchIndex].Functionallocation = sObject.Functionallocation;
															oAddressData[sMatchIndex].IsEditable = sAddressFloc[f].IsEditable; //sModelData.IsEditable;
															oAddressModel.setData(oAddressData);
														}

														sObject.Title = sAddressFloc[f].Titletxt;
														sObject.TitleCode = sAddressFloc[f].Title;
														sObject.Name1 = sAddressFloc[f].Name1;
														sObject.Name2 = sAddressFloc[f].Name2;
														sObject.Name3 = sAddressFloc[f].Name3;
														sObject.Name4 = sAddressFloc[f].Name4;
														sObject.Sort1 = sAddressFloc[f].Sort1; // searchTerm1
														sObject.Sort2 = sAddressFloc[f].Sort2; // searchTerm2
														sObject.NameCo = sAddressFloc[f].NameCo; // Company 
														sObject.Building = sAddressFloc[f].Building;
														sObject.Floor = sAddressFloc[f].Floor;
														sObject.Roomnum = sAddressFloc[f].Roomnum;
														sObject.Street = sAddressFloc[f].Street;
														sObject.HouseNr1 = sAddressFloc[f].HouseNr1;
														sObject.HouseNr2 = sAddressFloc[f].HouseNr2;
														sObject.Strsuppl1 = sAddressFloc[f].Strsuppl1;
														sObject.Strsuppl2 = sAddressFloc[f].Strsuppl2;
														sObject.Strsuppl3 = sAddressFloc[f].Strsuppl3;
														sObject.AddrLocation = sAddressFloc[f].Location;
														sObject.District = sAddressFloc[f].District;
														sObject.PostCod1 = sAddressFloc[f].PostCod1;
														sObject.City1 = sAddressFloc[f].City1; // City
														sObject.RefPosta = sAddressFloc[f].RPostafl;
														sObject.Landx = sAddressFloc[f].Landx;
														sObject.Region = sAddressFloc[f].RfePost;
														sObject.Regiotxt = sAddressFloc[f].Regiotxt;
														sObject.HomeCity = sAddressFloc[f].HomeCity;
														sObject.TimeZone = sAddressFloc[f].TimeZone;
														sObject.Taxjurcod = sAddressFloc[f].Taxjurcod;
														sObject.Regiogrou = sAddressFloc[f].Regiogrou;
														sObject.RfePostl = sAddressFloc[f].RfePostl;
														sObject.Dontusestxt = sAddressFloc[f].Dontusestxt;
														sObject.PoBox = sAddressFloc[f].PoBox;
														sObject.PoboxNum = sAddressFloc[f].PoboxNum;
														sObject.DlvsrvTy = sAddressFloc[f].DlvsrvTy;
														sObject.DlvsrvNr = sAddressFloc[f].DlvsrvNr;
														sObject.PostCod2 = sAddressFloc[f].PostCod2;
														sObject.PoboxLoc = sAddressFloc[f].PoboxLoc;
														sObject.PoboxLby = sAddressFloc[f].PoboxLby;
														sObject.PoboxCty = sAddressFloc[f].PoboxCty;
														sObject.LandxP = sAddressFloc[f].LandxP;
														sObject.RfePstal = sAddressFloc[f].RPstaFl;
														sObject.RegiotxtP = sAddressFloc[f].RegiotxtP;
														sObject.Dontuseptxt = sAddressFloc[f].Dontuseptxt;
														sObject.PostCod3 = sAddressFloc[f].PostCod3;
														sObject.Remark = sAddressFloc[f].Remark;
														sObject.Region = sAddressFloc[f].RPostFl;
														sObject.RegionDesc = sAddressFloc[f].Regiotxt;
													}
												}
											}
										}
									}
								}

								var aIntlAddr = results.FLAddrI.results;
								if (aIntlAddr) {
									for (var z = 0; z < aIntlAddr.length; z++) {
										if (aIntlAddr[z].Funcloc === sObject.Tplnr) {
											aIntlAddr[z].AdNationEnable = false;
											aIntlAddr[z].City1iVS = "None";
											aIntlAddr[z].StreetiVS = "None";
											sObject.intlAddr.push(aIntlAddr[z]);
										}
									}
								}

								var aAltLbl = results.FLALTLBEL.results;
								if (aAltLbl) {
									for (var y = 0; y < aAltLbl.length; y++) {
										if (aAltLbl[y].Funcloc === sObject.Tplnr) {
											var oAltLbl = {
												"Funcloc": aAltLbl[y].Funcloc,
												"AltAlkey": aAltLbl[y].AltAlkey, // Labeling system
												"Altxt": aAltLbl[y].Altxt, // Labeling system descr
												"AltStrno": aAltLbl[y].AltStrno, // Alternative Label
												"AltTplkz": aAltLbl[y].AltTplkz, // Strycture Indicator
												"Tplxt": aAltLbl[y].Tplxt, // Structure Indicator Descr
												"Name1i": aAltLbl[y].Editm, // Edit Mask
												"Actvs": aAltLbl[y].Actvs, // Active
												"AltPrkey": aAltLbl[y].AltPrkey, // Primary
												"AltReuse": aAltLbl[y].AltReuse, // Reusable

												"enableLblSys": false,
												"enableAltLbl": false,
												"enableStrInd": false,

												"LblSysVS": "None",
												"AltLblVS": "None",
												"StrIndVS": "None"
											};
											sObject.altlbl.push(oAltLbl);
										}
									}
								}

								if (results.FLEmail) {
									if (results.FLEmail.results) {
										var sEmailData = results.FLEmail.results;
										if (sEmailData) {
											if (sEmailData.length > 0) {
												for (var h = 0; h < sEmailData.length; h++) {
													if (sObject.Tplnr === sEmailData[h].Funcloc) {
														var sEmailObj = {};
														sEmailObj.EAddress = sEmailData[h].EAddress;
														sEmailObj.EFlgdeft = sEmailData[h].EFlgdeft;
														sEmailObj.EFlgnous = sEmailData[h].EFlgnous;
														pApproveObject.emailAddress.push(sEmailObj);
													}
												}
											}
										}
									}
								}

								if (results.FLUrl) {
									if (results.FLUrl.results) {
										var sUrlData = results.FLUrl.results;
										if (sUrlData) {
											if (sUrlData.length > 0) {
												for (var l = 0; l < sUrlData.length; l++) {
													if (sObject.Tplnr === sUrlData[l].Funcloc) {
														var sUrlObj = {};
														sUrlObj.Uritypetxt = sUrlData[l].Uritypetxt;
														sUrlObj.UAddress = sUrlData[l].UAddress;
														sUrlObj.UFlgdeft = sUrlData[l].UFlgdeft;
														sUrlObj.UFlgnous = sUrlData[l].UFlgnous;
														pApproveObject.urlAddress.push(sUrlObj);
													}
												}
											}
										}
									}
								}

								if (results.FLTele) {
									if (results.FLTele.results) {
										var sTelData = results.FLTele.results;
										if (sTelData) {
											if (sTelData.length > 0) {
												for (var m = 0; m < sTelData.length; m++) {
													if (sObject.Tplnr === sTelData[m].Funcloc) {
														var sTelObj = {};
														sTelObj.Teltype = sTelData[m].Teltype;
														sTelObj.TCountry = sTelData[m].TCountry;
														sTelObj.Telefto = sTelData[m].Telefto;
														sTelObj.TNumber = sTelData[m].TNumber;
														sTelObj.TExtens = sTelData[m].TExtens;
														sTelObj.TFlgsms = sTelData[m].TFlgsms;
														sTelObj.TFlgdeft = sTelData[m].TFlgdeft;
														sTelObj.TFlgnous = sTelData[m].TFlgnous;
														pApproveObject.telephoneData.push(sTelObj);
													}
												}
											}
										}
									}
								}

								if (results.FLFax) {
									if (results.FLFax.results) {
										var sFaxData = results.FLFax.results;
										if (sFaxData) {
											if (sFaxData.length > 0) {
												for (var n = 0; n < sFaxData.length; n++) {
													if (sObject.Tplnr === sFaxData[n].Funcloc) {
														var sFaxObj = {};
														sFaxObj.FCountry = sFaxData[n].FCountry;
														sFaxObj.Telefto = sFaxData[n].Telefto;
														sFaxObj.FNumber = sFaxData[n].FNumber;
														sFaxObj.FExtens = sFaxData[n].FExtens;
														sFaxObj.FFlgdeft = sFaxData[n].FFlgdeft;
														sFaxObj.FFlgnous = sFaxData[n].FFlgnous;
														pApproveObject.faxData.push(sFaxObj);
													}
												}
											}
										}
									}
								}

								g.setCommonApprovalData(g.oModelAIWFLOC, pApproveObject, true);
								g.handleCreatePress(g, sObject, g.oModelAIWFLOC);
							}

							if (results.HIERDOI) {
								var hierDoi = results.HIERDOI.results;
								for (var z = 0; z < hierDoi.length; z++) {
									if (hierDoi[z].Tplnr !== "" && hierDoi[z].Equnr === "") {
										sap.ui.getCore().getModel("dataOriginMOP").getData().FL.push({
											key: hierDoi[z].Tplnr,
											DOI: hierDoi[z].OBJDOI.results
										});
									}
								}
							}
						}
					}
					// }

					if (results.Equipment) {
						var sEquipment = results.Equipment.results;
						if (sEquipment) {
							if (g.getState() === "MOCR" && !g.isHierarchy) {
								g.getView().byId("_iconTabBar").setSelectedKey("EQUITab");
							}
							for (var o = 0; o < sEquipment.length; o++) {
								pApproveObject = {
									intlAddr: [],
									classItems: [],
									characteristics: [],
									emailAddress: [],
									urlAddress: [],
									telephoneData: [],
									faxData: []
								};
								sObject = {
									intlAddr: [],
									classItems: [],
									characteristics: [],
									PRTInfo: {},
									DFPS: {},
									FLEET: {},
									Stock: {},
									Partners: [], // Partners
									Permits: [], // Permit
									attachmentCount: "0", // Attachment Count
									Guids: "", // Attachment
									ConstrTypeMaxL: 0,
									charValueMaxL: 0,
									EqunrEnabled: true,
									EquipCatEnabled: true,
									MaintplantEnabled: true,
									BukrsEnabled: true,
									TplnrEnabled: true, //false,
									SuperordinateEquipEnabled: true //false
								};
								if (g.getState() === "MOCR" && g.hMode !== "copy") {
									sObject.EqunrEnabled = false;
									sObject.EquipCatEnabled = false;
								}

								sObject.Equnr = sEquipment[o].Equnr;
								if (g.hMode === "copy") {
									sObject.Type = true;
									sObject.viewParameter = "create";
								} else {
									sObject.viewParameter = "change";
								}
								sObject.Eqktx = sEquipment[o].Txtmi;
								// sObject.Eqktx = sEquipment[o].Eqktx;
								sObject.EquipmentCatogory = sEquipment[o].Eqtyp;
								sObject.EquipCatgDescription = sEquipment[o].Etytx;
								sObject.ValidFrom = sEquipment[o].DataEeqz;
								sObject.DatbEeqz = sEquipment[o].DatbEeqz;
								sObject.LvormEqi = sEquipment[o].LvormEqi;
								sObject.Deact = sEquipment[o].Deact;
								sObject.DeactEnable = false;
								sObject.Stattext = sEquipment[o].Stattext; // System Status
								sObject.UstaEqui = sEquipment[o].UstaEqui; // User Status
								sObject.StsmEqui = sEquipment[o].StsmEqui; // Status Profile
								sObject.StsmEquiDesc = sEquipment[o].Statproftxt; // Status Profile Description
								sObject.UstwEqui = sEquipment[o].UstwEqui; // Status with Status Number
								sObject.UswoEqui = sEquipment[o].UswoEqui; // Status without Status Number
								sObject.TechnicalObjectTyp = sEquipment[o].Eqart; // TechnicalObjectTyp
								sObject.Description = sEquipment[o].Eartx; // TechnicalObjectTyp Description
								sObject.AuthorizGroup = sEquipment[o].Begru;
								sObject.Begtx = sEquipment[o].Begtx;
								sObject.GrossWt = sEquipment[o].Brgew;
								sObject.Gewei = sEquipment[o].Gewei;
								sObject.Invnr = sEquipment[o].Invnr;
								sObject.GroesEqu = sEquipment[o].GroesEqu;
								sObject.Inbdt = sEquipment[o].Inbdt;
								sObject.Answt = sEquipment[o].Answt;
								sObject.Waers = sEquipment[o].Waers; // Currency
								sObject.Ansdt = sEquipment[o].Ansdt;
								sObject.Herst = sEquipment[o].Herst; // Manufacturer
								sObject.Typbz = sEquipment[o].Typbz; // Model Number
								sObject.MapaEeqz = sEquipment[o].MapaEeqz; // partNum
								sObject.Serge = sEquipment[o].Serge; // manfSerNo
								sObject.Herld = sEquipment[o].Herld;
								sObject.CountryName = sEquipment[o].CountryName;
								sObject.ConstructYear = sEquipment[o].Baujj;
								sObject.ConstructMth = sEquipment[o].BaummEqi;
								sObject.MonthName = sEquipment[o].MonthName;
								sObject.Maintplant = sEquipment[o].Swerk;
								if (sObject.Maintplant !== "" && g.getState() === "MOCR" && g.hMode !== "copy") {
									sObject.MaintplantEnabled = false;
								}
								sObject.MaintplantDesc = sEquipment[o].Name1;
								sObject.Location = sEquipment[o].StorEilo; // Location
								sObject.Locationdesc = sEquipment[o].Locationdesc; // Location Description
								sObject.MsgrEilo = sEquipment[o].MsgrEilo;
								sObject.Abckz = sEquipment[o].AbckEilo;
								sObject.Abctx = sEquipment[o].Abctx;
								sObject.BeberFl = sEquipment[o].BebeEilo; // Plant Section
								sObject.Fing = sEquipment[o].Fing; // Plant Section
								sObject.Tele = sEquipment[o].Tele; // Plant Section
								sObject.EqfnEilo = sEquipment[o].EqfnEilo;
								sObject.Bukrs = sEquipment[o].BukrEilo;
								if (sObject.Bukrs !== "" && g.getState() === "MOCR" && g.hMode !== "copy") {
									sObject.BukrsEnabled = false;
								}
								sObject.Butxt = sEquipment[o].Butxt;
								sObject.GsbeEilo = sEquipment[o].GsbeEilo;
								sObject.Gtext = sEquipment[o].Gtext;
								sObject.Anl1Eilo = sEquipment[o].Anl1Eilo;
								sObject.Anl2Eilo = sEquipment[o].Anl2Eilo;
								sObject.AssesmentDesc = sEquipment[o].Txt50;
								sObject.Kostl = sEquipment[o].KostEilo; // Cost Center
								sObject.Kokrs = sEquipment[o].KokrEilo; // ccPart1
								sObject.Mctxt = sEquipment[o].Contareaname; // Name
								sObject.Posid = sEquipment[o].Posid;
								sObject.Post1 = sEquipment[o].Post1;
								sObject.DaufEilo = sEquipment[o].DaufEilo;
								sObject.Standorderdesc = sEquipment[o].Standorderdesc;
								sObject.Settlement = sEquipment[o].AufnEilo;
								sObject.SettleOrdDesc = sEquipment[o].SettleOrdDesc;
								sObject.Werks = sEquipment[o].PplaEeqz; // Planning Plant
								sObject.Planningplantdes = sEquipment[o].Planningplantdes; // Planning Plant Description
								sObject.Ingrp = sEquipment[o].IngrEeqz; // Planner Group
								sObject.Innam = sEquipment[o].Plannergrpdesc; // Planner Group Description
								sObject.Arbpl = sEquipment[o].ArbpEilo; // Work Center
								sObject.Ktext = sEquipment[o].Workcenterdesc; // Work Center Description
								sObject.WcWerks = sEquipment[o].WorkCenterPlant; // Work center Plant
								sObject.MainArbpl = sEquipment[o].ArbpEeqz; // Main Work Center
								sObject.MainKtext = sEquipment[o].MainWcDesc; // Plant Work Center
								sObject.MainWerks = sEquipment[o].MainWcPlant; // Name
								sObject.RbnrEeqz = sEquipment[o].RbnrEeqz;
								sObject.CatalogProfDesc = sEquipment[o].Rbnrx;
								sObject.SuperordinateEquip = sEquipment[o].HequEeqz; // Superord. Equipment
								sObject.SuperordinateEquipDesc = sEquipment[o].SuperordEqDes; // Superord. Equipment Description
								sObject.EquipPosition = sEquipment[o].HeqnEeqz; // Position
								sObject.Liznr = sEquipment[o].Liznr;

								sObject.TechIdNum = sEquipment[o].TidnEeqz; // techIndNo
								sObject.ConstrType = sEquipment[o].SubmEeqz; // Construction Type
								sObject.ConstructionDesc = sEquipment[o].Constdesc; // Construction Description

								if (sEquipment[o].Eqtyp !== "P") {
									sObject.Tplnr = sEquipment[o].TplnEilo; // Functional Location
									sObject.Pltxt = sEquipment[o].Flocdescription; // Functional Location Description
								} else {
									sObject.Tplnr = "";
									sObject.Pltxt = "";
								}

								if (sObject.SuperordinateEquip !== "" && sObject.SuperordinateEquip !== undefined) {
									sObject.TplnrEnabled = false;
									sObject.SuperordinateEquipEnabled = true;
								}
								if (sObject.SuperordinateEquip === "" && sObject.Tplnr !== "" && sObject.Tplnr !== undefined) {
									sObject.TplnrEnabled = true;
									sObject.SuperordinateEquipEnabled = false;
								}

								// Serialization Data
								sObject.MatEqu = sEquipment[o].MatEqu;
								sObject.Materialdesc = sEquipment[o].Materialdesc;
								sObject.Sernr = sEquipment[o].Sernr;
								sObject.Lsernr = sEquipment[o].Lsernr;

								// Configuration Data
								sObject.Kmatn = sEquipment[o].Kmatn;
								sObject.Funcid = sEquipment[o].Funcid;
								sObject.Frcfit = sEquipment[o].Frcfit;
								sObject.Frcrmv = sEquipment[o].Frcrmv;
								sObject.SubmEeqz = sEquipment[o].SubmEeqz;

								// Sales and Distribution
								sObject.Vkorg = sEquipment[o].Vkorg;
								sObject.Vkorgtxt = sEquipment[o].Vkorgtxt;
								sObject.Vtweg = sEquipment[o].Vtweg;
								sObject.Vtwegtxt = sEquipment[o].Vtwegtxt;
								sObject.Spart = sEquipment[o].Spart;
								sObject.Sparttxt = sEquipment[o].Sparttxt;
								sObject.Vkbur = sEquipment[o].Vkbur;
								sObject.Vkburtxt = sEquipment[o].Vkburtxt;
								sObject.Vkgrp = sEquipment[o].Vkgrp;
								sObject.Vkgrptxt = sEquipment[o].Vkgrptxt;

								// Customer Warranty
								sObject.CgwldtEq = sEquipment[o].CgwldtEq;
								sObject.CgwlenEq = sEquipment[o].CgwlenEq;
								sObject.CmganrEq = sEquipment[o].CmganrEq;
								sObject.CwagetEq = sEquipment[o].CwagetEq;
								sObject.CgaerbEq = sEquipment[o].CgaerbEq;

								// Vendor/Manufacturer Warranty
								sObject.VgwldtEq = sEquipment[o].VgwldtEq;
								sObject.VgwlenEq = sEquipment[o].VgwlenEq;
								sObject.VmganrEq = sEquipment[o].VmganrEq;
								sObject.VwagetEq = sEquipment[o].VwagetEq;
								sObject.VgaerbEq = sEquipment[o].VgaerbEq;

								// Customer Vendor Information
								sObject.EliefEqi = sEquipment[o].EliefEqi;
								sObject.Kun1Eeqz = sEquipment[o].Kun1Eeqz;
								sObject.Pstlz1 = sEquipment[o].Pstlz1;
								sObject.City1 = sEquipment[o].City1;
								sObject.Kun2Eeqz = sEquipment[o].Kun2Eeqz;
								sObject.Pstlz2 = sEquipment[o].Pstlz2;
								sObject.City2 = sEquipment[o].City2;
								sObject.Kun3Eeqz = sEquipment[o].Kun3Eeqz;
								sObject.Pstlz3 = sEquipment[o].Pstlz3;
								sObject.City3 = sEquipment[o].City3;
								sObject.AuldtEqi = sEquipment[o].AuldtEqi;
								sObject.PstcdCcust = sEquipment[o].PstcdCcust;
								sObject.LocatCcust = sEquipment[o].LocatCcust;
								sObject.KundeEq = sEquipment[o].KundeEq;
								sObject.Insdate = sEquipment[o].Insdate === null ? "" : sEquipment[o].Insdate;
								sObject.Instime = formatter.getTime(sEquipment[o].Instime);
								sObject.Modelid = sEquipment[o].Modelid;
								sObject.Modelname = sEquipment[o].Modelnam;
								sObject.ModelDescription = sEquipment[o].ModelDescription;
								sObject.Template = sEquipment[o].Template;
								sObject.GlobalId = sEquipment[o].GlobalId;
								sObject.Manuf = sEquipment[o].Manuf;
								sObject.IsModel = sEquipment[o].IsModel;
								sObject.CopyFrom = sEquipment[o].CopyFrom;
								sObject.Modelid = sEquipment[o].Modelid;

								if (sEquipment[o].Eqtyp === "L" && results.EqLAM) {
									var sLAM = results.EqLAM.results;
									if (sLAM) {
										for (var z = 0; z < sLAM.length; z++) {
											if (sLAM[z].Equi === sEquipment[o].Equnr) {
												sObject.lam = sLAM[z];
												sObject.lam.LrpidDesc = sLAM[z].LrpDescr;
												sObject.lam.LinUnitDesc = sLAM[z].Uomtext;
												break;
											}
										}
									}
								}

								if (results.EqClass) {
									var sClassEqui = results.EqClass.results;
									if (sClassEqui) {
										if (sClassEqui.length > 0) {
											for (var p = 0; p < sClassEqui.length; p++) {
												if (sObject.Equnr === sClassEqui[p].Equi) {
													if (g.getState() === "MOCR" && g.hMode !== "copy") {
														sClassEqui[p].ctEnable = false;
														sClassEqui[p].classEnable = false;
													} else {
														sClassEqui[p].ctEnable = true;
														sClassEqui[p].classEnable = true;
													}

													sClassEqui[p].ClassTypeDesc = sClassEqui[p].Artxt;
													delete sClassEqui[p].Artxt;
													sClassEqui[p].ClassDesc = sClassEqui[p].Kltxt;
													delete sClassEqui[p].Kltxt;
													delete sClassEqui[p].Changerequestid;
													delete sClassEqui[p].Clint;
													delete sClassEqui[p].Service;
													sObject.classItems.push(sClassEqui[p]);
												}
											}
										}
									}
								}
								if (results.EqFleet) {
									if (results.EqFleet.results) {
										var sFleet = results.EqFleet.results;
										if (sFleet) {
											if (sFleet.length > 0) {
												for (var uf = 0; uf < sFleet.length; uf++) {
													if (sObject.Equnr === sFleet[uf].Equi) {
														sObject.FLEET.FleetCat = sFleet[uf].FleetCat;
														sObject.FLEET.FleetNum = sFleet[uf].FleetNum;
														sObject.FLEET.LicenseN = sFleet[uf].LicenseN;
														sObject.FLEET.ValidityEndDate = formatter.getDateFormat(sFleet[uf].ExpiryDt);
														sObject.FLEET.FleetVin = sFleet[uf].FleetVin;
														sObject.FLEET.Chasisnum = sFleet[uf].Chasisnum;

														sObject.FLEET.FleetHgt = sFleet[uf].FleetHgt;
														sObject.FLEET.DimUnit = sFleet[uf].DimUnit;
														sObject.FLEET.FleetWid = sFleet[uf].FleetWid;
														sObject.FLEET.FleetLen = sFleet[uf].FleetLen;

														sObject.FLEET.BrgewFt = sFleet[uf].BrgewFt;
														sObject.FLEET.GeweiFt = sFleet[uf].GeweiFt;
														sObject.FLEET.GrossWgt = sFleet[uf].GrossWgt;
														sObject.FLEET.LoadWgt = sFleet[uf].LoadWgt;
														sObject.FLEET.LoadVol = sFleet[uf].LoadVol;
														sObject.FLEET.VolUnit = sFleet[uf].VolUnit;
														sObject.FLEET.LoadHgt = sFleet[uf].LoadHgt;
														sObject.FLEET.Lddimunit = sFleet[uf].Lddimunit;
														sObject.FLEET.LoadWid = sFleet[uf].LoadWid;
														sObject.FLEET.LoadLen = sFleet[uf].LoadLen;
														sObject.FLEET.Nocompart = sFleet[uf].Nocompart;

														sObject.FLEET.FleetUse = sFleet[uf].FleetUse;
														sObject.FLEET.CardNum = sFleet[uf].CardNum;
														sObject.FLEET.KeyNum = sFleet[uf].KeyNum;
														sObject.FLEET.NumAxle = sFleet[uf].NumAxle;
														sObject.FLEET.Maxoccupa = sFleet[uf].Maxoccupa;

														sObject.FLEET.FuelPri = sFleet[uf].FuelPri;
														sObject.FLEET.FuelSec = sFleet[uf].FuelSec;
														sObject.FLEET.OilType = sFleet[uf].OilType;
														sObject.FLEET.Consumpmv = sFleet[uf].Consumpmv;
														sObject.FLEET.Consumptl = sFleet[uf].Consumptl;
														sObject.FLEET.PriCalc = sFleet[uf].PriCalc;

														sObject.FLEET.Enginetyp = sFleet[uf].Enginetyp;
														sObject.FLEET.Enginesnr = sFleet[uf].Enginesnr;
														sObject.FLEET.SpeedMax = sFleet[uf].SpeedMax;
														sObject.FLEET.Enginepow = sFleet[uf].Enginepow;
														sObject.FLEET.Revlutons = sFleet[uf].Revlutons;
														sObject.FLEET.Enginecap = sFleet[uf].Enginecap;
														sObject.FLEET.Enginecyl = sFleet[uf].Enginecyl;

														sObject.FLEET.ReplaDt = formatter.getDateFormat(sFleet[uf].ReplaDt);
														sObject.FLEET.Enginecyl = sFleet[uf].Enginecyl;
														sObject.FLEET.Enginecyl = sFleet[uf].Enginecyl;
														sObject.FLEET.Replaodom = sFleet[uf].Replaodom;
														sObject.FLEET.ReplaOph = sFleet[uf].ReplaOph;
													}
												}
											}
										}
									}
								}

								if (results.EqDFPS) {
									if (results.EqDFPS.results) {
										var sDpfs = results.EqDFPS.results;
										if (sDpfs) {
											if (sDpfs.length > 0) {
												for (var ud = 0; ud < sDpfs.length; ud++) {
													if (sObject.Equnr === sDpfs[ud].Equi) {
														sObject.DFPS.MeOwner = sDpfs[ud].MeOwner;
														sObject.DFPS.MeUser = sDpfs[ud].MeUser;
														sObject.DFPS.DeviceId = sDpfs[ud].DeviceId;
														sObject.DFPS.Topsiteid = sDpfs[ud].Topsiteid;
														sObject.DFPS.Topsitede = sDpfs[ud].Topsitede;
														sObject.DFPS.SiteId = sDpfs[ud].SiteId;
														sObject.DFPS.SiteDesc = sDpfs[ud].SiteDesc;
														sObject.DFPS.MpoId = sDpfs[ud].MpoId;
														sObject.DFPS.MpoDescr = sDpfs[ud].MpoDescr;
														sObject.DFPS.RicId = sDpfs[ud].RicId;
														sObject.DFPS.RicDescr = sDpfs[ud].RicDescr;
														sObject.DFPS.ModelId = sDpfs[ud].ModelId;
														sObject.DFPS.ModelDes = sDpfs[ud].ModelDes;
														sObject.DFPS.Foreignob = sDpfs[ud].Foreignob;
														sObject.DFPS.TecState = sDpfs[ud].TecState;
														sObject.DFPS.DepState = sDpfs[ud].DepState;
														sObject.DFPS.DfpsRmrk = sDpfs[ud].DfpsRmrk;
													}
												}
											}
										}
									}
								}

								if (results.EqVal) {
									var sCharEQUI = results.EqVal.results;
									if (sCharEQUI) {
										if (sCharEQUI.length > 0) {
											for (var q = 0; q < sCharEQUI.length; q++) {
												if (sObject.Equnr === sCharEQUI[q].Equi) {
													if (g.getState() === "MOCR" && g.hMode !== "copy") {
														sCharEQUI[q].cNameEnable = false;
													} else {
														sCharEQUI[q].cNameEnable = true;
													}
													sCharEQUI[q].Textbz = sCharEQUI[q].Atwtb;
													delete sCharEQUI[q].Ataut;
													delete sCharEQUI[q].Ataw1;
													delete sCharEQUI[q].Atawe;
													delete sCharEQUI[q].Atcod;
													delete sCharEQUI[q].Atflb;
													delete sCharEQUI[q].Atflv;
													delete sCharEQUI[q].Atimb;
													delete sCharEQUI[q].Atsrt;
													delete sCharEQUI[q].Atvglart;
													delete sCharEQUI[q].Atzis;
													delete sCharEQUI[q].Changerequestid;
													delete sCharEQUI[q].Charid;
													delete sCharEQUI[q].Classtype;
													delete sCharEQUI[q].Service;
													delete sCharEQUI[q].Valcnt;
													sCharEQUI[q].slNo = c + 1; // ()
													sCharEQUI[q].flag = sCharEQUI[q].Class + "-" + sCharEQUI[q].slNo; // ()
													sObject.characteristics.push(sCharEQUI[q]);
												}
											}
											for (var z = 0; z < sObject.characteristics.length; z++) {
												var count = 1;
												for (var y = 0; y < sObject.characteristics.length; y++) {
													if (z === y) {
														continue;
													}
													if (sObject.characteristics[y].Atnam === sObject.characteristics[z].Atnam && sObject.characteristics[y].Class ===
														sObject.characteristics[z].Class) {
														count++;
													}
												}
												if (count > 1) {
													sObject.characteristics[z].charDltEnable = true;
												} else {
													sObject.characteristics[z].charDltEnable = false;
												}

												if (sObject.characteristics[z].Atein === true) {
													sObject.characteristics[z].charAddEnable = false;
												}
											}
										}
									}
								}

								if (results.EqPRTNR) {
									var sPartnerEqData = results.EqPRTNR.results;
									if (sPartnerEqData) {
										if (sPartnerEqData.length > 0) {
											for (var r = 0; r < sPartnerEqData.length; r++) {
												if (sObject.Equnr === sPartnerEqData[r].Equi) {
													var sPartnerEqObj = {};
													sPartnerEqObj.Partnrfun = sPartnerEqData[r].Partnrfun;
													sPartnerEqObj.Partnereq = sPartnerEqData[r].Partnereq;
													sPartnerEqObj.NameList = sPartnerEqData[r].NameList;
													sPartnerEqObj.Aadind = sPartnerEqData[r].Aadind;
													sPartnerEqObj.Address = sPartnerEqData[r].Address;
													sPartnerEqObj.Partnrfuntxt = sPartnerEqData[r].Partnrfuntxt;
													sObject.Partners.push(sPartnerEqObj);
												}
											}
										}
									}
								}

								if (results.EqPermt) {
									var sPermitEqData = results.EqPermt.results;
									if (sPermitEqData) {
										if (sPermitEqData.length > 0) {
											for (var s = 0; s < sPermitEqData.length; s++) {
												if (sObject.Equnr === sPermitEqData[s].Equi) {
													var sPermitEqObj = {};
													sPermitEqObj.Countereq = sPermitEqData[s].Countereq;
													sPermitEqObj.Pmsog = sPermitEqData[s].Pmsog;
													sPermitEqObj.KAa = sPermitEqData[s].KAa;
													sPermitEqObj.KAf = sPermitEqData[s].KAf;
													sPermitEqObj.KDruck = sPermitEqData[s].KDruck;
													sPermitEqObj.KPro = sPermitEqData[s].KPro;
													sPermitEqObj.PmtLtext = sPermitEqData[s].PmtLtext;
													sObject.Permits.push(sPermitEqObj);
												}
											}
										}
									}
								}

								if (results.EqPRT) {
									if (results.EqPRT.results) {
										var sPrtData = results.EqPRT.results;
										if (sPrtData) {
											if (sPrtData.length > 0) {
												for (var t = 0; t < sPrtData.length; t++) {
													if (sObject.Equnr === sPrtData[t].Equi) {
														sObject.PRTInfo.PlanvPrt = sPrtData[t].PlanvPrt;
														sObject.PRTInfo.Fgru1 = sPrtData[t].Fgru1;
														sObject.PRTInfo.Fgru2 = sPrtData[t].Fgru2;
														sObject.PRTInfo.Kzkbl = sPrtData[t].Kzkbl;
														sObject.PRTInfo.SteufPrt = sPrtData[t].SteufPrt;
														sObject.PRTInfo.SteufRef = sPrtData[t].SteufRef;
														sObject.PRTInfo.KtschPrt = sPrtData[t].KtschPrt;
														sObject.PRTInfo.Ktschref = sPrtData[t].Ktschref;
														sObject.PRTInfo.Ewformprt = sPrtData[t].Ewformprt;
														sObject.PRTInfo.Ewformref = sPrtData[t].Ewformref;
														sObject.PRTInfo.Bzoffbprt = sPrtData[t].Bzoffbprt;
														sObject.PRTInfo.Bzoffbref = sPrtData[t].Bzoffbref;
														sObject.PRTInfo.Offstb = sPrtData[t].Offstb;
														sObject.PRTInfo.Ehoffbprt = sPrtData[t].Ehoffbprt;
														sObject.PRTInfo.Offstbref = sPrtData[t].Offstbref;
														sObject.PRTInfo.Bzoffeprt = sPrtData[t].Bzoffeprt;
														sObject.PRTInfo.Offsteref = sPrtData[t].Offsteref;
														sObject.PRTInfo.Offste = sPrtData[t].Offste;
														sObject.PRTInfo.Ehoffeprt = sPrtData[t].Ehoffeprt;
														sObject.PRTInfo.Offsteref = sPrtData[t].Offsteref;
														sObject.PRTInfo.Warpl = sPrtData[t].Warpl;
														sObject.PRTInfo.PointEq = sPrtData[t].PointEq;
													}
												}
											}
										}
									}
								}

								if (results.EqStock) {
									if (results.EqStock.results) {
										var sStock = results.EqStock.results[0];
										if (sStock) {
											if (sStock.length > 0) {
												for (var u = 0; u < sStock.length; u++) {
													if (sObject.Equnr === sStock[u].Equi) {
														sObject.Stock.Equilbbsa = sStock[u].Equilbbsa;
														sObject.Stock.BWerk = sStock[u].BWerk;
														sObject.Stock.BukrrsSk = sStock[u].BukrrsSk;
														sObject.Stock.Sloc2equi = sStock[u].Sloc2equi;
														sObject.Stock.Chrg2stk = sStock[u].Chrg2stk;
														sObject.Stock.Sobk2stk = sStock[u].Sobk2stk;
														sObject.Stock.Datlwb = formatter.getDateFormat(sStock[u].Datlwb);
														sObject.Stock.Kunnr = sStock[u].Kunnr;
														sObject.Stock.LifnrStc = sStock[u].LifnrStc;
														sObject.Stock.Kdauf = sStock[u].Kdauf;
														sObject.Stock.Kdpos = sStock[u].Kdpos;
														sObject.Stock.PsPspPn = sStock[u].PsPspPn;
													}
												}
											}
										}
									}
								}

								if (results.EqAddr) {
									if (results.EqAddr.results) {
										var sAddressEqui = results.EqAddr.results;
										if (sAddressEqui) {
											if (sAddressEqui.length > 0) {
												for (var v = 0; v < sAddressEqui.length; v++) {
													if (sObject.Equnr === sAddressEqui[v].Equi) {
														var oAddressEquiModel = sap.ui.getCore().getModel("equiAddressView");
														var oAddressEquiData = oAddressEquiModel.getData();
														var mCountEquiFlag = true;
														var sEquiObj, sEquiMatchIndex;
														if (oAddressEquiData.length > 0) {
															for (var sfa = 0; sfa < oAddressEquiData.length; sfa++) {
																if (sObject.Equnr === oAddressEquiData[sfa].Equnr) {
																	mCountEquiFlag = false;
																	sEquiMatchIndex = sfa;
																	break;
																}
															}
														}
														if (mCountEquiFlag === true) {
															if ((sObject.SuperordinateEquip !== "" && sObject.SuperordinateEquip !== undefined) ||
																(sObject.Tplnr !== "" && sObject.Tplnr !== undefined)) {
																sEquiObj = {
																	Equnr: sObject.Equnr,
																	Tplnr: sObject.Tplnr,
																	IsEditable: sAddressEqui[v].IsEditable
																};
																oAddressEquiData.push(sEquiObj);
																oAddressEquiModel.setData(oAddressEquiData);
															}
														}
														if (mCountEquiFlag === false) {
															if ((sObject.SuperordinateEquip !== "" && sObject.SuperordinateEquip !== undefined) ||
																(sObject.Tplnr !== "" && sObject.Tplnr !== undefined)) {
																oAddressEquiData[sEquiMatchIndex].Equnr = sObject.Equnr;
																oAddressEquiData[sEquiMatchIndex].Tplnr = sObject.Tplnr;
																oAddressEquiData[sEquiMatchIndex].IsEditable = sAddressEqui[v].IsEditable; //sObject.IsEditable;
																oAddressEquiModel.setData(oAddressEquiData);
															}
														}
														sObject.Title = sAddressEqui[v].Titletxt;
														sObject.TitleCode = sAddressEqui[v].Title;
														sObject.Name1 = sAddressEqui[v].Name1;
														sObject.Name2 = sAddressEqui[v].Name2;
														sObject.Name3 = sAddressEqui[v].Name3;
														sObject.Name4 = sAddressEqui[v].Name4;
														sObject.Sort1 = sAddressEqui[v].Sort1; // searchTerm1
														sObject.Sort2 = sAddressEqui[v].Sort2; // searchTerm2
														sObject.NameCo = sAddressEqui[v].NameCo; // Company 
														sObject.Building = sAddressEqui[v].Building;
														sObject.Floor = sAddressEqui[v].Floor;
														sObject.Roomnum = sAddressEqui[v].Roomnum;
														sObject.Street = sAddressEqui[v].Street;
														sObject.HouseNr1 = sAddressEqui[v].HouseNr1;
														sObject.HouseNr2 = sAddressEqui[v].HouseNr2;
														sObject.Strsuppl1 = sAddressEqui[v].Strsuppl1;
														sObject.Strsuppl2 = sAddressEqui[v].Strsuppl2;
														sObject.Strsuppl3 = sAddressEqui[v].Strsuppl3;
														sObject.AddrLocation = sAddressEqui[v].Location;
														sObject.District = sAddressEqui[v].District;
														sObject.PostCod1 = sAddressEqui[v].PostCod1;
														sObject.City1 = sAddressEqui[v].City1; // City
														sObject.RefPosta = sAddressEqui[v].RefPosta;
														sObject.Landx = sAddressEqui[v].Landx;
														sObject.RfePost = sAddressEqui[v].RfePost;
														sObject.Regiotxt = sAddressEqui[v].Regiotxt;
														sObject.HomeCity = sAddressEqui[v].HomeCity;
														sObject.TimeZone = sAddressEqui[v].TimeZone;
														sObject.Taxjurcod = sAddressEqui[v].Taxjurcod;
														sObject.Regiogrou = sAddressEqui[v].Regiogrou;
														sObject.RfePostl = sAddressEqui[v].RfePostl;
														sObject.Region = sAddressEqui[v].RPostFl; //RfePost;
														// sObject.RefPosta = sAddressEqui[v].RefPosta;														sObject.Dontusestxt = sAddressEqui[v].Dontusestxt;
														sObject.PoBox = sAddressEqui[v].PoBox;
														sObject.PoboxNum = sAddressEqui[v].PoboxNum;
														sObject.DlvsrvTy = sAddressEqui[v].DlvsrvTy;
														sObject.DlvsrvNr = sAddressEqui[v].DlvsrvNr;
														sObject.PostCod2 = sAddressEqui[v].PostCod2;
														sObject.PoboxLoc = sAddressEqui[v].PoboxLoc;
														sObject.PoboxLby = sAddressEqui[v].PoboxLby;
														sObject.PoboxCty = sAddressEqui[v].PoboxCty;
														sObject.LandxP = sAddressEqui[v].LandxP;
														sObject.RfePstal = sAddressEqui[v].RfePstal;
														sObject.RegiotxtP = sAddressEqui[v].RegiotxtP;
														sObject.RegionDesc = sAddressEqui[v].Regiotxt;
														sObject.Dontuseptxt = sAddressEqui[v].Dontuseptxt;
														sObject.PostCod3 = sAddressEqui[v].PostCod3;
														sObject.Remark = sAddressEqui[v].Remark;
													}
												}
											}
										}
									}
								}

								var aIntlAddr = results.EqAddrI.results;
								if (aIntlAddr) {
									for (var z = 0; z < aIntlAddr.length; z++) {
										if (aIntlAddr[z].Equi === sObject.Equnr) {
											aIntlAddr[z].AdNationEnable = false;
											aIntlAddr[z].City1iVS = "None";
											aIntlAddr[z].StreetiVS = "None";
											sObject.intlAddr.push(aIntlAddr[z]);
										}
									}
								}

								var ainResults = results.AINHeaderinfo.results;
								if (ainResults) {
									for (var ai = 0; ai < ainResults.length; ai++) {
										var ainData = ainResults[0];
										// g.isAin = true;
										var oAin = {};
										oAin.Name = ainData.Name;
										oAin.Modelid = ainData.Modelid;
										oAin.Description = ainData.Description;
										oAin.Manufacturer = ainData.Manufacturer;
										oAin.Modeltemplate = ainData.Modeltemplate;
										oAin.Globalid = ainData.Globalid;
										oAin.moreInfo = true;
										oAin.linkVisible = false;
										oAin.deLinkVisible = false;
										oAin.equiCreate = data.results[0].AineqInd;
										oAin.AinEqunr = data.results[0].AinEqunr;

										sap.ui.getCore().getModel("ainMOP").getData().push({
											key: sObject.Equnr,
											AIN: oAin
										});
									}
								}

								if (results.EqEmail) {
									if (results.EqEmail.results) {
										var sEmailEqData = results.EqEmail.results;
										if (sEmailEqData) {
											if (sEmailEqData.length > 0) {
												for (var w = 0; w < sEmailEqData.length; w++) {
													if (sObject.Equnr === sEmailEqData[w].Equi) {
														var sEmailEqObj = {};
														sEmailEqObj.EAddress = sEmailEqData[w].EAddress;
														sEmailEqObj.EFlgdeft = sEmailEqData[w].EFlgdeft;
														sEmailEqObj.EFlgnous = sEmailEqData[w].EFlgnous;
														pApproveObject.emailAddress.push(sEmailEqObj);
													}
												}
											}
										}
									}
								}

								if (results.EqUrl) {
									if (results.EqUrl.results) {
										var sUrlEqData = results.EqUrl.results;
										if (sUrlEqData) {
											if (sUrlEqData.length > 0) {
												for (var x = 0; x < sUrlEqData.length; x++) {
													if (sObject.Equnr === sUrlEqData[x].Equi) {
														var sUrlEqObj = {};
														sUrlEqObj.Uritypetxt = sUrlEqData[x].Uritypetxt;
														sUrlEqObj.UAddress = sUrlEqData[x].UAddress;
														sUrlEqObj.UFlgdeft = sUrlEqData[x].UFlgdeft;
														sUrlEqObj.UFlgnous = sUrlEqData[x].UFlgnous;
														pApproveObject.urlAddress.push(sUrlEqObj);
													}
												}
											}
										}
									}
								}

								if (results.EqTel) {
									if (results.EqTel.results) {
										var sTelEqData = results.EqTel.results;
										if (sTelEqData) {
											if (sTelEqData.length > 0) {
												for (var y = 0; y < sTelEqData.length; y++) {
													if (sObject.Equnr === sTelEqData[y].Equi) {
														var sTelEqObj = {};
														sTelEqObj.Teltype = sTelEqData[y].Teltype;
														sTelEqObj.TCountry = sTelEqData[y].TCountry;
														sTelEqObj.Telefto = sTelEqData[y].Telefto;
														sTelEqObj.TNumber = sTelEqData[y].TNumber;
														sTelEqObj.TExtens = sTelEqData[y].TExtens;
														sTelEqObj.TFlgsms = sTelEqData[y].TFlgsms;
														sTelEqObj.TFlgdeft = sTelEqData[y].TFlgdeft;
														sTelEqObj.TFlgnous = sTelEqData[y].TFlgnous;
														pApproveObject.telephoneData.push(sTelEqObj);
													}
												}
											}
										}
									}
								}

								if (results.EqFax) {
									if (results.EqFax.results) {
										var sFaxEqData = results.EqFax.results;
										if (sFaxEqData) {
											if (sFaxEqData.length > 0) {
												for (var z = 0; z < sFaxEqData.length; z++) {
													if (sObject.Equnr === sFaxEqData[z].Equi) {
														var sFaxEqObj = {};
														sFaxEqObj.FCountry = sFaxEqData[z].FCountry;
														sFaxEqObj.Telefto = sFaxEqData[z].Telefto;
														sFaxEqObj.FNumber = sFaxEqData[z].FNumber;
														sFaxEqObj.FExtens = sFaxEqData[z].FExtens;
														sFaxEqObj.FFlgdeft = sFaxEqData[z].FFlgdeft;
														sFaxEqObj.FFlgnous = sFaxEqData[z].FFlgnous;
														pApproveObject.faxData.push(sFaxEqObj);
													}
												}
											}
										}
									}
								}

								g.setCommonApprovalData(g.oModelAIWEQUI, pApproveObject, true);
								g.handleCreatePress(g, sObject, g.oModelAIWEQUI);
							}

							if (results.HIERDOI) {
								var hierDoi = results.HIERDOI.results;
								for (var z = 0; z < hierDoi.length; z++) {
									if (hierDoi[z].Equnr !== "" && hierDoi[z].Tplnr === "") {
										sap.ui.getCore().getModel("dataOriginMOP").getData().EQ.push({
											key: hierDoi[z].Equnr,
											DOI: hierDoi[z].OBJDOI.results
										});
									}
								}
							}
						}
					}

					if (results.MSPoint) {
						var sMsPoint = results.MSPoint.results;
						if (sMsPoint) {
							if (g.getState() === "MOCR" && !g.isHierarchy) {
								g.getView().byId("_iconTabBar").setSelectedKey("MSPTTab");
							}
							for (var i = 0; i < sMsPoint.length; i++) {
								pApproveObject = {
									classItems: [],
									characteristics: []
								};
								sObject = {
									classItems: [],
									characteristics: [],
									attachmentCount: "0", // Attachment Count
									Guids: "", // Attachment
									MspointEnabled: true,
									ObtypMsEnabled: true,
									EqunrEnabled: true,
									TplnrEnabled: true,
									MptypEnabled: true,
									AtnamMsEnabled: true,
									countEnable: true,
									tEnable: true,
									valCodeStuffSel: true
								};
								if (g.getState() === "MOCR" && g.hMode !== "copy") {
									sObject.MspointEnabled = false;
									sObject.MptypEnabled = false;
									sObject.ObtypMsEnabled = false;
									sObject.AtnamMsEnabled = false;
								}
								sObject.Mspoint = sMsPoint[i].Point;
								if (g.hMode === "copy") {
									sObject.Type = true;
									sObject.viewParameter = "create";
								} else {
									sObject.viewParameter = "change";
								}
								sObject.Psort = sMsPoint[i].Psort;
								sObject.Pttxt = sMsPoint[i].Pttxt;
								sObject.ObtypMs = sMsPoint[i].ObtypMs;
								if (sMsPoint[i].ObtypMs === "IFL" && g.getState() === "MOCR" && g.hMode !== "copy") {
									sObject.TplnrEnabled = false;
								} else if (sMsPoint[i].ObtypMs === "IEQ" && g.getState() === "MOCR" && g.hMode !== "copy") {
									sObject.EqunrEnabled = false;
								}
								sObject.Deact = sMsPoint[i].Inact;
								sObject.DeactEnable = false;

								sObject.Txt = sMsPoint[i].Objtypetxt;
								sObject.Equnr = sMsPoint[i].Equnr;
								sObject.Eqktx = sMsPoint[i].Eqktx;
								sObject.Tplnr = sMsPoint[i].Tplnr;
								sObject.Pltxt = sMsPoint[i].Floctxt;
								sObject.Mptyp = sMsPoint[i].Mptyp;
								sObject.Mpttx = sMsPoint[i].Mpttx;
								sObject.Inact = sMsPoint[i].Inact;
								sObject.AtnamMs = sMsPoint[i].AtnamMs;
								sObject.Atbez = sMsPoint[i].Atbez;
								sObject.Mseh6 = sMsPoint[i].Mseh6;
								sObject.Msehl = sMsPoint[i].Msehl;
								sObject.Decim = sMsPoint[i].Decim.toString();
								sObject.Codgr = sMsPoint[i].Codgr;
								sObject.Codgrtxt = sMsPoint[i].Codgrtxt;
								sObject.Locas = sMsPoint[i].Locas;
								sObject.Maktx = sMsPoint[i].Maktx;
								sObject.Begru = sMsPoint[i].Begru;
								sObject.Begtx = sMsPoint[i].Begtx;
								sObject.Indct = sMsPoint[i].Indct;
								sObject.Expon = sMsPoint[i].Expon;
								sObject.Cdsuf = sMsPoint[i].Cdsuf;
								sObject.Cjumc = sMsPoint[i].Cjumc;
								sObject.Pyeac = sMsPoint[i].Pyeac;
								sObject.Desir = sMsPoint[i].Desir;
								sObject.Mrngu = sMsPoint[i].Mrngu;
								sObject.Dstxt = sMsPoint[i].Dstxt;
								sObject.Indrv = sMsPoint[i].Indrv;
								sObject.Mrmax = sMsPoint[i].Mrmax;
								sObject.Mrmin = sMsPoint[i].Mrmin;

								if (sMsPoint[i].Equnr !== "") {
									sObject.EqunrLblVis = true;
									sObject.EqunrInpVis = true;
									sObject.EqktxInpVis = true;
									sObject.TplnrLblVis = false;
									sObject.TplnrInpVis = false;
									sObject.PltxtInpVis = false;
								} else {
									sObject.EqunrLblVis = false;
									sObject.EqunrInpVis = false;
									sObject.EqktxInpVis = false;
									sObject.TplnrLblVis = true;
									sObject.TplnrInpVis = true;
									sObject.PltxtInpVis = true;
								}

								if (sMsPoint[i].Mptyp === "L" && results.MSLAM) {
									var sLAM = results.MSLAM.results;
									if (sLAM) {
										for (var z = 0; z < sLAM.length; z++) {
											if (sLAM[z].Mspoint === sMsPoint[i].Point) {
												sObject.lam = sLAM[z];
												sObject.lam.LrpidDesc = sLAM[z].LrpDescr;
												sObject.lam.LinUnitDesc = sLAM[z].Uomtext;
												break;
											}
										}
									}
								}

								if (results.MSClass) {
									var sClassList = results.MSClass.results;
									if (sClassList) {
										if (sClassList.length > 0) {
											for (var j = 0; j < sClassList.length; j++) {
												if (sObject.Mspoint === sClassList[j].Mspoint) {
													sClassList[j].ctEnable = false;
													sClassList[j].classEnable = false;
													sClassList[j].ClassTypeDesc = sClassList[j].Artxt;
													delete sClassList[j].Artxt;
													sClassList[j].ClassDesc = sClassList[j].Kltxt;
													delete sClassList[j].Kltxt;
													delete sClassList[j].Changerequestid;
													delete sClassList[j].Clint;
													delete sClassList[j].Service;
													sObject.classItems.push(sClassList[j]);
												}
											}
										}
									}
								}

								if (results.MSVal) {
									var sCharList = results.MSVal.results;
									if (sCharList) {
										if (sCharList.length > 0) {
											for (var k = 0; k < sCharList.length; k++) {
												if (sObject.Mspoint === sCharList[k].Mspoint) {
													sCharList[k].cNameEnable = false;
													sCharList[k].Textbz = sCharList[k].Atwtb;
													delete sCharList[k].Ataut;
													delete sCharList[k].Ataw1;
													delete sCharList[k].Atawe;
													delete sCharList[k].Atcod;
													delete sCharList[k].Atflb;
													delete sCharList[k].Atflv;
													delete sCharList[k].Atimb;
													delete sCharList[k].Atsrt;
													delete sCharList[k].Atvglart;
													delete sCharList[k].Atzis;
													delete sCharList[k].Changerequestid;
													delete sCharList[k].Charid;
													delete sCharList[k].Classtype;
													delete sCharList[k].Service;
													delete sCharList[k].Valcnt;
													sCharList[k].slNo = k + 1; // ()
													sCharList[k].flag = sCharList[k].Class + "-" + sCharList[k].slNo; // ()
													sObject.characteristics.push(sCharList[k]);
												}
											}
											for (var z = 0; z < sObject.characteristics.length; z++) {
												var count = 1;
												for (var y = 0; y < sObject.characteristics.length; y++) {
													if (z === y) {
														continue;
													}
													if (sObject.characteristics[y].Atnam === sObject.characteristics[z].Atnam && sObject.characteristics[y].Class ===
														sObject.characteristics[z].Class) {
														count++;
													}
												}
												if (count > 1) {
													sObject.characteristics[z].charDltEnable = true;
												} else {
													sObject.characteristics[z].charDltEnable = false;
												}

												if (sObject.characteristics[z].Atein === true) {
													sObject.characteristics[z].charAddEnable = false;
												}
											}
										}
									}
								}

								g.setCommonApprovalData(g.oModelAIWMSPT, pApproveObject);
								g.handleCreatePress(g, sObject, g.oModelAIWMSPT);
							}
						}
					}

					if (results.MPLAN) {
						var sMaintenance = results.MPLAN.results;
						if (sMaintenance) {
							if (g.getState() === "MOCR" && !g.isHierarchy) {
								g.getView().byId("_iconTabBar").setSelectedKey("MPMITab");
							}
							for (var ai = 0; ai < sMaintenance.length; ai++) {
								sObject = {
									// MPMIpmentsDetail
									attachmentCount: "0", // Attachment Count
									Guids: "", // Attachment
									cycleModel: [],
									itemModel: [],
									cycleIndSingle: true, // RBSC
									cycleIndStrategy: true, // RBS
									cycleIndMultCntr: true, // RBMC

									// Fields Enability
									WarplEnabled: true,
									StratEnabled: true,
									WsetEnabled: true,
									MehrfachEnabled: true,
									ScheIndRbTimeEnabled: true,
									ScheIndRbTimeKeyDateEnabled: true,
									ScheIndRbTimeFactCalEnabled: true,
									ScheIndRbPerformanceEnabled: true,
									MptypEnabled: true,
									cycleIndSingleEnabled: true,
									cycleIndStrategyEnabled: true,
									cycleIndMultCntrEnabled: true,
									FabklLBLReq: true,
									ButtonNewCycleEnabled: true,
									FabklEnabled: true,

									// Label Visibility
									OPText: false,
									OPTitle: false,
									OPLBL: false,
									MpcyclenoLBL: false,
									FabklLBL: true,
									AbrhoLBL: true,
									MehrfachLBL: false, // Multiple counter Label
									ScheIndText: true,
									ScheIndTitle: true,
									ScheIndLBL: true,
									StratLBL: false,
									StratDescLBL: false,
									WsetLBL: false,
									SzaehLBL: false,
									StadtLBL: true,

									// Fields Visibility
									HorizVisible: false,
									cycleSetSeqColVis: false,
									OROPVis: false,
									AndOPvis: false,
									ScheIndRbTimeVis: true,
									ScheIndRbTimeKeyDateVis: true,
									ScheIndRbTimeFactCalVis: true,
									ScheIndRbPerformanceVis: true,
									MpcyclenoVis: false,
									HunitVis: true,
									AbrhoVis: true,
									MehrfachVis: false,
									StratVis: false, // Strategy Visibility
									StratDescVis: false,
									WsetVis: false,
									KtextVis: false,
									SzaehVis: false,
									UnitcVis: false,
									StadtVis: true,
									MaintenanceCycleMode: "None"
								};

								if (sMaintenance[ai].Stich !== "" || sMaintenance[ai].Stich === undefined) {
									sObject.Stich = parseInt(sMaintenance[ai].Stich);
								} else {
									sObject.Stich = 0;
								}
								sObject.Deact = sMaintenance[ai].InactMp;
								sObject.DeactEnable = false;

								sObject.Warpl = sMaintenance[ai].Warpl;
								sObject.Wptxt = sMaintenance[ai].Wptxt;
								sObject.Mptyp = sMaintenance[ai].Mptyp;
								sObject.Txt = sMaintenance[ai].Mplancatdesc;
								sObject.Strat = sMaintenance[ai].Strat;
								sObject.StratDesc = sMaintenance[ai].StratDesc;
								sObject.Puffp = sMaintenance[ai].Puffp;

								if (sMaintenance[ai].Mehrfach === "X" || sMaintenance[ai].Stich === "4") {
									sObject.cycleType = 2;
									sObject.cycleSetSeqColVis = true;
									sObject.CycleSetSeqVis = true;
									sObject.ScheIndText = false;
									sObject.ScheIndTitle = false;
									sObject.ScheIndLBL = false;
									sObject.ScheIndRbTimeEnabled = false;
									sObject.ScheIndRbTimeKeyDateEnabled = false;
									sObject.ScheIndRbTimeFactCalEnabled = false;
									sObject.ScheIndRbPerformanceEnabled = false;
									sObject.ScheIndRbTimeVis = false;
									sObject.ScheIndRbTimeKeyDateVis = false;
									sObject.ScheIndRbTimeFactCalVis = false;
									sObject.ScheIndRbPerformanceVis = false;
									// sObject.AbrhoLBL = false;
									// sObject.AbrhoVis = false;
									// sObject.HunitVis = false;
									sObject.FabklLBL = false;
									sObject.FabklVis = false;
									sObject.FabklDescVis = false;
									sObject.OPText = true;
									sObject.OPTitle = true;
									sObject.OPLBL = true;
									sObject.OROPVis = true;
									sObject.AndOPvis = true;
									sObject.WsetLBL = true;
									sObject.WsetVis = true;
									sObject.KtextVis = true;
									sObject.StratLBL = true;
									sObject.StratVis = true;
									sObject.StratDescVis = true;
									sObject.MehrfachLBL = true;
									sObject.MehrfachVis = true;
									sObject.Mehrfach = true;
									sObject.StadtLBL = true;
									sObject.StadtVis = true;
									sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_STDATE");
									sObject.SzaehLBL = false;
									sObject.SzaehVis = false;
									sObject.UnitcVis = false;
									sObject.MpcyclenoLBL = false;
									sObject.MpcyclenoVis = false;
									sObject.cycleIndMultCntr = true;
								} else if (sMaintenance[ai].Strat === "" && (sMaintenance[ai].Stich === "" || sMaintenance[ai].Stich === "1" ||
										sMaintenance[
											ai].Stich === "2")) {
									sObject.cycleType = 0;
									sObject.cycleSetSeqColVis = false;
									sObject.CycleSetSeqVis = false;
									sObject.ScheIndText = true;
									sObject.ScheIndTitle = true;
									sObject.ScheIndLBL = true;
									sObject.AbrhoLBL = true;
									sObject.AbrhoVis = true;
									sObject.HunitVis = true;
									sObject.FabklLBL = true;
									sObject.FabklVis = true;
									sObject.FabklDescVis = true;
									sObject.StadtLBL = true;
									sObject.StadtVis = true;
									sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
									sObject.SzaehLBL = false;
									sObject.SzaehVis = false;
									sObject.UnitcVis = false;
									sObject.MpcyclenoLBL = false;
									sObject.MpcyclenoVis = false;
									sObject.cycleIndSingle = true;
								} else if (sMaintenance[ai].Strat !== "" && sMaintenance[ai].Stich === "3") {
									sObject.cycleType = 1;
									sObject.cycleSetSeqColVis = false;
									sObject.CycleSetSeqVis = false;
									sObject.ScheIndText = false;
									sObject.ScheIndTitle = false;
									sObject.ScheIndLBL = false;
									sObject.ScheIndRbTimeEnabled = false;
									sObject.ScheIndRbTimeKeyDateEnabled = false;
									sObject.ScheIndRbTimeFactCalEnabled = false;
									sObject.ScheIndRbPerformanceEnabled = false;
									sObject.ScheIndRbTimeVis = false;
									sObject.ScheIndRbTimeKeyDateVis = false;
									sObject.ScheIndRbTimeFactCalVis = false;
									sObject.ScheIndRbPerformanceVis = false;
									sObject.AbrhoLBL = false;
									sObject.AbrhoVis = false;
									sObject.HunitVis = false;
									sObject.FabklLBL = false;
									sObject.FabklVis = false;
									sObject.FabklDescVis = false;
									sObject.StratLBL = true;
									sObject.StratVis = true;
									sObject.StratDescVis = true;
									sObject.StadtLBL = false;
									sObject.StadtVis = false;
									sObject.SzaehLBL = true;
									sObject.SzaehVis = true;
									sObject.UnitcVis = true;
									sObject.MpcyclenoLBL = true;
									sObject.MpcyclenoVis = true;
									sObject.cycleIndStrateg = true;
									g.readScheduling(sMaintenance[ai], sMaintenance[ai].Strat, g.oModelAIWMPMI);
								} else if (sMaintenance[ai].Strat.indexOf("TIME") > -1 && sMaintenance[ai].Mehrfach === "" && sMaintenance[ai].Stich !==
									"3") {
									sObject.cycleType = 1;
									sObject.ScheIndText = true;
									sObject.ScheIndTitle = true;
									sObject.ScheIndLBL = true;
									sObject.ScheIndRbTimeVis = true;
									sObject.ScheIndRbTimeKeyDateVis = true;
									sObject.ScheIndRbTimeFactCalVis = true;
									sObject.ScheIndRbPerformanceVis = true;
									sObject.AbrhoLBL = true;
									sObject.AbrhoVis = true;
									sObject.HunitVis = true;
									sObject.FabklLBL = true;
									sObject.FabklVis = true;
									sObject.FabklDescVis = true;
									sObject.StratLBL = true;
									sObject.StratVis = true;
									sObject.StratDescVis = true;
									sObject.Strat = sMaintenance[ai].Strat;
									sObject.StadtLBL = true;
									sObject.StadtVis = true;
									sObject.Stadt = formatter.getDateFormat(sMaintenance[ai].Startdate);
									sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
									sObject.SzaehLBL = false;
									sObject.SzaehVis = false;
									sObject.UnitcVis = false;
									sObject.MpcyclenoLBL = false;
									sObject.MpcyclenoVis = false;
									sObject.cycleIndStrateg = true;
									g.readScheduling(sMaintenance[ai], sMaintenance[ai].Strat, g.oModelAIWMPMI);
								} else if (sMaintenance[ai].Strat === "" && sMaintenance[ai].Stich === "3" && sMaintenance[ai].Mehrfach === "") {
									sObject.cycleIndSingle = true;
									sObject.cycleType = 0;
									sObject.ScheIndText = true;
									sObject.ScheIndTitle = true;
									sObject.ScheIndLBL = true;
									sObject.ScheIndRbTimeVis = true;
									sObject.ScheIndRbTimeKeyDateVis = true;
									sObject.ScheIndRbTimeFactCalVis = true;
									sObject.ScheIndRbPerformanceVis = true;
									sObject.AbrhoLBL = false;
									sObject.AbrhoVis = false;
									sObject.HunitVis = false;
									sObject.FabklLBL = true;
									sObject.FabklVis = true;
									sObject.FabklDescVis = true;
									sObject.StratLBL = false;
									sObject.StratVis = false;
									sObject.StratDescVis = false;
									sObject.StadtLBL = false;
									sObject.StadtVis = false;
									sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
									sObject.SzaehLBL = true;
									sObject.SzaehVis = true;
									sObject.UnitcVis = true;
									sObject.Unitc = " ";
									sObject.MpcyclenoLBL = true;
									sObject.MpcyclenoVis = true;
								}

								sObject.Stadt = formatter.getDateFormat(sMaintenance[ai].Startdate);
								sObject.Unitc = sMaintenance[ai].Unitc;
								sObject.Fabkl = sMaintenance[ai].Fabkl;
								sObject.FabklDesc = sMaintenance[ai].FabklDesc;

								if (sMaintenance[ai].Stich === "1") {
									sObject.ScheIndRbTimeKeyDate = true;
								} else if (sMaintenance[ai].Stich === "2") {
									sObject.ScheIndRbTimeFactCal = true;
								} else if (sMaintenance[ai].Stich === "3") {
									sObject.ScheIndRbPerformance = true;
								} else if (sMaintenance[ai].Stich === "" || sMaintenance[ai].Stich === " ") {
									sObject.ScheIndRbTime = true;
								}

								sObject.Wset = sMaintenance[ai].Wset;
								sObject.Ktext = sMaintenance[ai].Ktext;
								sObject.Sfakt = sMaintenance[ai].Sfakt;
								sObject.Abrho = sMaintenance[ai].Abrho;
								sObject.Hunit = sMaintenance[ai].Hunit;
								sObject.StratDesc = sMaintenance[ai].StratDesc;
								sObject.Szaeh = sMaintenance[ai].Szaeh;
								sObject.Mpcycleno = sMaintenance[ai].PointStp;
								sObject.Andor = sMaintenance[ai].Andor;

								if (sMaintenance[ai].PointStp !== "") {
									sObject.Unitc = sMaintenance[ai].Unitc;
									// g.readCounterData(sMaintenance[ai], sMaintenance[ai].PointStp, "counterUnit");
								}
								if (sMaintenance[ai].Andor === "X") {
									sObject.AndOP = true;
								} else {
									sObject.OROP = true;
								}

								if (sObject.Mehrfach === true || (sObject.Wset !== "" || sObject !== undefined)) {
									sObject.HorizVisible = false;
								} else {
									sObject.HorizVisible = true;
								}
								if (sMaintenance[ai].PointStp !== "") {
									sObject.Unitc = sMaintenance[ai].Unitc;
									// g.readCounterData(sMaintenance[ai], sMaintenance[ai].PointStp, "counterUnit");
								}
								if (sMaintenance[ai].Andor === "X") {
									sObject.AndOP = true;
								} else {
									sObject.OROP = true;
								}

								if (sObject.Mehrfach === true || (sObject.Wset !== "" || sObject !== undefined)) {
									sObject.HorizVisible = false;
								} else {
									sObject.HorizVisible = true;
								}
								sObject.Vspos = sMaintenance[ai].Vspos;
								sObject.Topos = sMaintenance[ai].Topos;
								sObject.Vsneg = sMaintenance[ai].Vsneg;
								sObject.Toneg = sMaintenance[ai].Toneg;
								sObject.Horiz = sMaintenance[ai].Horiz;
								sObject.CallConf = sMaintenance[ai].CallConf;
								sObject.PlanSort = sMaintenance[ai].PlanSort;
								sObject.Begru = sMaintenance[ai].Begru;

								if (results.MPCycle) {
									var sCycle = results.MPCycle.results;
									if (sCycle) {
										for (var ci = 0; ci < sCycle.length; ci++) {
											if (sObject.Warpl === sCycle[ci].Mplan) {
												sCycle[ci].Psort = sCycle[ci].PointTxt;
												sObject.cycleModel.push(sCycle[ci]);
											}
										}
									}
								}

								if (results.MPItem) {
									var items = results.MPItem.results;
									if (items) {
										var temp = [];
										for (var bi = 0; bi < items.length; bi++) {
											if (sObject.Warpl === items[bi].Mplan) {
												var obj = {};
												obj.Mitemnumb = items[bi].Mitemnumb; // maint item 
												obj.Pstxt = items[bi].Pstxt; // maint item desc
												obj.Cycleseq = items[bi].Cycleseq;
												obj.Tplnr = items[bi].TplnrMi; // floc
												obj.Pltxt = items[bi].Flocdesc; // floc desc
												obj.Equnr = items[bi].Equnr; // equip
												obj.Eqktx = items[bi].Equipdesc; // equip desc
												obj.AsmblyOb = items[bi].Bautl; // assembly
												obj.Assemblydesc = items[bi].Assemblydesc; // assembly
												obj.Werks = items[bi].PlntMi; // planning plant
												obj.Planningplantdes = items[bi].Planningplantdes; // planning plant desc
												obj.Auart = items[bi].Auart; // order type 
												obj.oTypeTxt = items[bi].Ordertypedesc; // order type desc
												obj.Qmart = items[bi].Qmart; // notif type
												obj.nTypeTxt = items[bi].Qmartx; // notif type desc
												obj.ArbpMi = items[bi].ArbpMi; // main wc
												obj.WergwMi = items[bi].WergwMi; // main wc desc
												obj.Ingrp = items[bi].IngrpMi; // planner grp
												obj.Innam = items[bi].Plannergrpdesc; // planner grp desc

												// Approve Fields
												var sItmPriotxt = items[bi].ItmPriotxt;
												sItmPriotxt = sItmPriotxt.substr(sItmPriotxt.indexOf(" ") + 1);
												obj.Zeieh = items[bi].Zeieh;
												obj.Priok = items[bi].Priok;
												obj.ItmPriotxt = sItmPriotxt;
												obj.GsberMi = items[bi].GsberMi;
												obj.Gtext = items[bi].Gtext;
												obj.TaskDet = items[bi].TaskDet;
												obj.Ilart = items[bi].Ilart;
												obj.Ilatx = items[bi].Ilatx;
												obj.PlntyMi = items[bi].PlntyMi;
												obj.ApfktMi = items[bi].ApfktMi;
												obj.PlnnrMi = items[bi].PlnnrMi;
												obj.PlnalMi = items[bi].PlnalMi;
												obj.Gpcounterdesc = items[bi].Gpcounterdesc;
												obj.AnlzuMi = items[bi].AnlzuMi;
												obj.Anlzux = items[bi].Anlzux;
												obj.SwerkMil = items[bi].SwerkMil;
												obj.Name1 = items[bi].Name1;
												obj.StortMil = items[bi].StortMil;
												obj.Locationdesc = items[bi].Locationdesc;
												obj.MsgrpIl = items[bi].MsgrpIl;
												obj.BeberMil = items[bi].BeberMil;
												obj.Fing = items[bi].Fing;
												obj.Tele = items[bi].Tele;
												obj.ArbplIl = items[bi].ArbplIl;
												obj.Workcenterdesc = items[bi].Workcenterdesc;
												obj.AbckzIl = items[bi].AbckzIl;
												obj.Abctx = items[bi].Abctx;
												obj.EqfnrIl = items[bi].EqfnrIl;
												obj.BukrsMil = items[bi].BukrsMil;
												obj.Butxt = items[bi].Butxt;
												obj.City = items[bi].City;
												obj.Anln1Mil = items[bi].Anln1Mil;
												obj.Anln2Mil = items[bi].Anln2Mil;
												obj.Txt50 = items[bi].Txt50;
												obj.GsberIl = items[bi].GsberIl;
												obj.KostlMil = items[bi].KostlMil;
												obj.Contareaname = items[bi].Contareaname;
												obj.KokrsMil = items[bi].KokrsMil;
												obj.Posid = items[bi].Posid;
												obj.Post1 = items[bi].Post1;
												obj.AufnrIl = items[bi].AufnrIl;
												obj.SettleOrdDesc = items[bi].SettleOrdDesc;

												obj.QmartLBL = true;
												obj.QmartVis = true;
												obj.nTypetxtVis = true;
												obj.AuartLBL = true;
												obj.AuartVis = true;
												obj.oTypeTxtVis = true;
												obj.CycleseqLBL = false;
												obj.CycleseqVis = false;

												obj.AsmblyObMaxLength = 0;
												obj.maintItemE = false;
												obj.cycleSetE = false;
												obj.TplnrEnabled = false;
												obj.equiE = false;
												obj.assemblyE = false;

												obj.CycleseqVS = "None";
												obj.CycleseqVST = "";
												obj.TplnrVS = "None";
												obj.TplnrVST = "";
												obj.EqunrVS = "None";
												obj.EqunrVST = "";
												obj.AsmblyObVS = "None";
												obj.AsmblyObVST = "";
												obj.WerksVS = "None";
												obj.WerksVST = "";
												obj.AuartVS = "None";
												obj.AuartVST = "";
												obj.QmartVS = "None";
												obj.QmartVST = "";
												obj.ArbpMiVS = "None";
												obj.ArbpMiVST = "";
												obj.WergwMiVS = "None";
												obj.WergwMiVST = "";
												obj.IngrpVS = "None";
												obj.IngrpVST = "";

												var aMPLAM = results.MPLAM.results;
												if (aMPLAM) {
													for (var z = 0; z < aMPLAM.length; z++) {
														if (aMPLAM[z].Mplan === items[bi].Mplan && aMPLAM[z].Mitemnumb === items[bi].Mitemnumb) {
															var oMPLAM = aMPLAM[z];
															oMPLAM.LrpidDesc = aMPLAM[z].LrpDescr;
															oMPLAM.LinUnitDesc = aMPLAM[z].Uomtext;
															obj.lam = oMPLAM;
															break;
														}
													}
												}
												temp.push(obj);
											}
										}
										sObject.itemModel = temp;
									}
								}
								if (g.hMode === "copy") {
									sObject.Type = true;
									sObject.viewParameter = "create";
								} else {
									sObject.viewParameter = "change";
									if (sObject.Mptyp === "" || sObject.Mptyp === undefined || sObject.Mptyp === " ") {
										sObject.MptypEnabled = true;
									} else {
										sObject.MptypEnabled = false;
									}
									if (sObject.cycleType === 1 && (sObject.Strat === "" || sObject.Strat === undefined || sObject.Strat === " ")) {
										sObject.StratEnabled = true;
									} else {
										sObject.StratEnabled = false;
									}
									if (sObject.cycleType === 2 && (sObject.Mehrfach === false || sObject.Mehrfach === "" || sObject.Mehrfach === undefined ||
											sObject.Mehrfach === " ")) {
										sObject.MehrfachEnabled = true;
									} else {
										sObject.MehrfachEnabled = false;
									}
									if (sObject.cycleType === 2 && (sObject.Wset === "" || sObject.Wset === undefined || sObject.Wset === " ")) {
										sObject.WsetEnabled = true;
									} else {
										sObject.WsetEnabled = false;
									}
									sObject.WarplEnabled = false;
								}

								g.handleCreatePress(g, sObject, g.oModelAIWMPMI);
							}
						}
					}

					if (results.MRBHeader) {
						var matHeader = results.MRBHeader.results;
						if (matHeader) {
							if (g.getState() === "MOCR" && !g.isHierarchy) {
								g.getView().byId("_iconTabBar").setSelectedKey("BOM");
							}
							for (var i = 0; i < matHeader.length; i++) {
								var matObj = {};
								if (g.getState() === "MOCR" && g.hMode !== "copy") {
									matObj.bomType = "Change";
								} else {
									matObj.bomType = "Create";
								}

								matObj.Matnr = matHeader[i].Matnr;
								matObj.Werks = matHeader[i].Werks;
								matObj.Stlan = matHeader[i].Stlan;
								matObj.Bomstatus = matHeader[i].Bomstatus;
								matObj.Lngtxt = matHeader[i].Txtmi;
								matObj.Validfrom = g.getDateFormat(matHeader[i].Validfrom);
								matObj.BaseQty = matHeader[i].Baseqty;
								matObj.BaseUom = matHeader[i].Baseuom;
								matObj.Validtoda = g.getDateFormat(matHeader[i].Validtoda);

								matObj.MatDesc = matHeader[i].Maktx;
								matObj.WerksDesc = matHeader[i].Plantname;
								matObj.StlanDesc = matHeader[i].Bomusagetxt;
								matObj.BomstatusText = matHeader[i].Bomstatustxt;
								matObj.Stktx = matHeader[i].Stktx;
								if (g.getState() === "MOCR" && g.hMode !== "copy") {
									matObj.matEnable = false;
									matObj.plantEnable = false;
									matObj.usageEnable = false;
									matObj.bomType = "Change";
								} else {
									matObj.matEnable = true;
									matObj.plantEnable = true;
									matObj.usageEnable = true;
									matObj.bomType = "Create";
								}

								matObj.LngtxtEnable = true;
								matObj.BomstatusEnable = true;
								matObj.BaseQtyEnable = true;
								matObj.fromDateEnable = true; //new
								matObj.addItemEnable = true;
								matObj.modeFlag = "None";

								matObj.Authgroup = matHeader[i].Authgroup;
								matObj.Sizdim = matHeader[i].Sizdim;
								matObj.Labofc = matHeader[i].Labofc;
								matObj.Labortxt = matHeader[i].Labortxt;
								matObj.Stalt = matHeader[i].Stalt;

								matObj.Flbomsub = ""; //matHeader[i].Flbomsub;
								matObj.Delflg = ""; //matHeader[i].Delflg;
								matObj.Invnr = ""; //matHeader[i].Invnr;
								matObj.Herst = ""; //matHeader[i].Herst;
								matObj.Htypb = ""; //matHeader[i].Htypb;
								matObj.Serge = ""; //matHeader[i].Serge;
								// matObj.Stktx = ""; //matHeader[i].Stktx;

								matObj.matItem = [];
								matObj.matSubItem = [];

								var MATITEM = results.MRBItem.results;
								if (MATITEM.length > 0) {
									for (var j = 0; j < MATITEM.length; j++) {
										if (MATITEM[j].Matnr === matObj.Matnr && MATITEM[j].Werks === matObj.Werks && MATITEM[j].Stlan === matObj.Stlan) {
											MATITEM[j].addSubItmEnable = true;
											MATITEM[j].Pmper = "-";
											MATITEM[j].Pmpka = "-";
											MATITEM[j].Pmprv = "-";
											MATITEM[j].Pmpfe = "-";
											MATITEM[j].Pmpin = "-";
											MATITEM[j].Pmpko = "-";
											matObj.matItem.push(MATITEM[j]);
										}
									}
								} else {
									matObj.matItem = [];
								}

								var MATSUBITEM = results.MRBSBIT.results;
								if (MATSUBITEM.length > 0) {
									for (var k = 0; k < MATSUBITEM.length; k++) {
										if (MATSUBITEM[k].Matnr === matObj.Matnr && MATSUBITEM[k].Werks === matObj.Werks && MATSUBITEM[k].Stlan ===
											matObj.Stlan) {
											MATSUBITEM[k].intPointEnable = true;
											MATSUBITEM[k].subQtyEnable = true;
											MATSUBITEM[k].subTextEnable = true;
											matObj.matSubItem.push(MATSUBITEM[k]);
										}
									}
								} else {
									matObj.matSubItem = [];
								}
								AIWListMatData.push(matObj);
							}
							sap.ui.getCore().getModel("AIWListMatModel").setSizeLimit(AIWListMatData.length);
							sap.ui.getCore().getModel("AIWListMatModel").refresh();
						}

					}

					if (results.EBHeader) {
						var eqHeader = results.EBHeader.results;
						if (eqHeader) {
							if (g.getState() === "MOCR" && !g.isHierarchy) {
								g.getView().byId("_iconTabBar").setSelectedKey("BOM");
							}
							for (var i = 0; i < eqHeader.length; i++) {
								var eqObj = {};
								if (g.getState() === "MOCR" && g.hMode !== "copy") {
									eqObj.bomType = "Change";
								} else {
									eqObj.bomType = "Create";
								}
								eqObj.Eqnrbom = eqHeader[i].Eqnrbom;
								eqObj.Werks = eqHeader[i].Werks;
								eqObj.Stlan = eqHeader[i].Stlan;
								eqObj.Bomstatus = eqHeader[i].Bomstatus;
								eqObj.Lngtxt = eqHeader[i].Txtmi;
								eqObj.Validfrom = g.getDateFormat(eqHeader[i].Validfrom);
								eqObj.BaseQty = eqHeader[i].Baseqty;
								eqObj.BaseUom = eqHeader[i].Baseuom;
								eqObj.Validtoda = g.getDateFormat(eqHeader[i].Validtoda);

								eqObj.EquiDesc = eqHeader[i].Eqktx;
								eqObj.WerksDesc = eqHeader[i].Plantname;
								eqObj.StlanDesc = eqHeader[i].Bomusagetxt;
								eqObj.BomstatusText = eqHeader[i].Bomstatustxt;
								if (g.getState() === "MOCR" && g.hMode !== "copy") {
									eqObj.equipEnable = false;
									eqObj.plantEnable = false;
									eqObj.usageEnable = false;
									eqObj.bomType = "Change";
								} else {
									eqObj.equipEnable = true;
									eqObj.plantEnable = true;
									eqObj.usageEnable = true;
									eqObj.bomType = "Create";
								}

								eqObj.LngtxtEnable = true;
								eqObj.fromDateEnable = true; //new
								eqObj.BomstatusEnable = true;
								eqObj.BaseQtyEnable = true;
								eqObj.addItemEnable = true;
								eqObj.modeFlag = "None";

								eqObj.Authgroup = eqHeader[i].Authgroup;
								eqObj.Sizdim = eqHeader[i].Sizdim;
								eqObj.Labofc = eqHeader[i].Labofc;
								eqObj.Labortxt = eqHeader[i].Labortxt;
								eqObj.Delflg = eqHeader[i].Delflg;
								eqObj.Invnr = eqHeader[i].Invnr;
								eqObj.Herst = eqHeader[i].Herst;
								eqObj.Htypb = eqHeader[i].Htypb;
								eqObj.Serge = eqHeader[i].Serge;

								eqObj.Flbomsub = ""; //eqHeader[i].Flbomsub;
								eqObj.Stalt = ""; //eqHeader[i].Stalt;
								eqObj.Stktx = ""; //eqHeader[i].Stktx;

								eqObj.eqItem = [];
								eqObj.eqSubItem = [];

								var EQITEM = results.EBItem.results;
								if (EQITEM.length > 0) {
									for (var j = 0; j < EQITEM.length; j++) {
										if (EQITEM[j].Eqnrbom === eqObj.Eqnrbom && EQITEM[j].Werks === eqObj.Werks && EQITEM[j].Stlan === eqObj.Stlan) {
											EQITEM[j].addSubItmEnable = true;
											EQITEM[j].Pmper = "-";
											EQITEM[j].Pmpka = "-";
											EQITEM[j].Pmprv = "-";
											EQITEM[j].Pmpfe = "-";
											EQITEM[j].Pmpin = "-";
											EQITEM[j].Pmpko = "-";
											eqObj.eqItem.push(EQITEM[j]);
										}
									}
								} else {
									eqObj.eqItem = [];
								}

								var EQSUBITEM = results.EBSBIT.results;
								if (EQSUBITEM.length > 0) {
									for (var k = 0; k < EQSUBITEM.length; k++) {
										if (EQSUBITEM[k].Eqnrbom === eqObj.Eqnrbom && EQSUBITEM[k].Werks === eqObj.Werks && EQSUBITEM[k].Stlan ===
											eqObj.Stlan) {
											EQSUBITEM[k].intPointEnable = false;
											EQSUBITEM[k].subQtyEnable = false;
											EQSUBITEM[k].subTextEnable = false;
											eqObj.eqSubItem.push(EQSUBITEM[k]);
										}
									}
								} else {
									eqObj.eqSubItem = [];
								}
								AIWListEqData.push(eqObj);
							}
							sap.ui.getCore().getModel("AIWListEqModel").setSizeLimit(AIWListEqData.length);
							sap.ui.getCore().getModel("AIWListEqModel").refresh();
						}

					}

					if (results.FBHeader) {
						var flHeader = results.FBHeader.results;
						if (flHeader) {
							if (g.getState() === "MOCR" && !g.isHierarchy) {
								g.getView().byId("_iconTabBar").setSelectedKey("BOM");
							}
							for (var i = 0; i < flHeader.length; i++) {
								var flObj = {};
								if (g.getState() === "MOCR" && g.hMode !== "copy") {
									flObj.bomType = "Change";
								} else {
									flObj.bomType = "Create";
								}
								flObj.Tplnrbom = flHeader[i].Tplnrbom;
								flObj.Werks = flHeader[i].Werks;
								flObj.Stlan = flHeader[i].Stlan;
								flObj.Bomstatus = flHeader[i].Bomstatus;
								flObj.Lngtxt = flHeader[i].Txtmi;
								flObj.Validfrom = g.getDateFormat(flHeader[i].Validfrom);
								flObj.BaseQty = flHeader[i].Baseqty;
								flObj.BaseUom = flHeader[i].Baseuom;
								flObj.Validtoda = g.getDateFormat(flHeader[i].Validtoda);

								flObj.FLDesc = flHeader[i].Pltxt;
								flObj.WerksDesc = flHeader[i].Plantname;
								flObj.StlanDesc = flHeader[i].Bomusagetxt;
								flObj.BomstatusText = flHeader[i].Bomstatustxt;
								if (g.getState() === "MOCR" && g.hMode !== "copy") {
									flObj.FLEnable = false;
									flObj.plantEnable = false;
									flObj.usageEnable = false;
									flObj.bomType = "Change";
								} else {
									flObj.FLEnable = true;
									flObj.plantEnable = true;
									flObj.usageEnable = true;
									flObj.bomType = "Create";
								}

								flObj.LngtxtEnable = true;
								flObj.fromDateEnable = true; //new
								flObj.BomstatusEnable = true;
								flObj.BaseQtyEnable = true;
								flObj.addItemEnable = true;
								flObj.modeFlag = "None";

								flObj.Authgroup = flHeader[i].Authgroup;
								flObj.Sizdim = flHeader[i].Sizdim;
								flObj.Flbomsub = flHeader[i].Flbomsub;
								flObj.Labofc = flHeader[i].Labofc;
								flObj.Labortxt = flHeader[i].Labortxt;

								flObj.Stalt = ""; //flHeader[i].Stalt;
								flObj.Delflg = ""; //flHeader[i].Delflg;
								flObj.Invnr = ""; //flHeader[i].Invnr;
								flObj.Herst = ""; //flHeader[i].Herst;
								flObj.Htypb = ""; //flHeader[i].Htypb;
								flObj.Serge = ""; //flHeader[i].Serge;
								flObj.Stktx = ""; //flHeader[i].Stktx;

								flObj.flItem = [];
								flObj.flSubItem = [];

								var FLITEM = results.FBItem.results;
								if (FLITEM.length > 0) {
									for (var j = 0; j < FLITEM.length; j++) {
										if (FLITEM[j].Tplnrbom === flObj.Tplnrbom && FLITEM[j].Werks === flObj.Werks && FLITEM[j].Stlan === flObj.Stlan) {
											FLITEM[j].addSubItmEnable = true;
											FLITEM[j].Pmper = "-";
											FLITEM[j].Pmpka = "-";
											FLITEM[j].Pmprv = "-";
											FLITEM[j].Pmpfe = "-";
											FLITEM[j].Pmpin = "-";
											FLITEM[j].Pmpko = "-";
											flObj.flItem.push(FLITEM[j]);
										}
									}
								} else {
									flObj.flItem = [];
								}

								var FLSUBITEM = results.FBSBIT.results;
								if (FLSUBITEM.length > 0) {
									for (var k = 0; k < FLSUBITEM.length; k++) {
										if (FLSUBITEM[k].Tplnrbom === flObj.Tplnrbom && FLSUBITEM[k].Werks === flObj.Werks && FLSUBITEM[k].Stlan ===
											flObj.Stlan) {
											FLSUBITEM[k].intPointEnable = true;
											FLSUBITEM[k].subQtyEnable = true;
											FLSUBITEM[k].subTextEnable = true;
											flObj.flSubItem.push(FLSUBITEM[k]);
										}
									}
								} else {
									flObj.flSubItem = [];
								}
								AIWListFLData.push(flObj);
							}
							sap.ui.getCore().getModel("AIWListFLModel").setSizeLimit(AIWListFLData.length);
							sap.ui.getCore().getModel("AIWListFLModel").refresh();
						}

					}

					if (results.WBHeader) {
						var wbsHeader = results.WBHeader.results;
						if (wbsHeader) {
							if (g.getState() === "MOCR" && !g.isHierarchy) {
								g.getView().byId("_iconTabBar").setSelectedKey("BOM");
							}
							for (var i = 0; i < wbsHeader.length; i++) {
								var wbsObj = {};
								if (g.getState() === "MOCR" && g.hMode !== "copy") {
									wbsObj.bomType = "Change";
								} else {
									wbsObj.bomType = "Create";
								}
								wbsObj.WbsExt = wbsHeader[i].WbsExt;
								wbsObj.Matnr = wbsHeader[i].MatnrWbs;
								wbsObj.Werks = wbsHeader[i].Werks;
								wbsObj.Stlan = wbsHeader[i].Stlan;
								wbsObj.Bomstatus = wbsHeader[i].Bomstatus;
								wbsObj.Lngtxt = wbsHeader[i].Txtmi;
								wbsObj.Validfrom = g.getDateFormat(wbsHeader[i].Validfrom);
								wbsObj.BaseQty = wbsHeader[i].Baseqty;
								wbsObj.BaseUom = wbsHeader[i].Baseuom;
								wbsObj.Validtoda = g.getDateFormat(wbsHeader[i].Validtoda);

								wbsObj.WbsDesc = wbsHeader[i].Post1;
								wbsObj.MatDesc = wbsHeader[i].Maktx;
								wbsObj.WerksDesc = wbsHeader[i].Plantname;
								wbsObj.StlanDesc = wbsHeader[i].Bomusagetxt;
								wbsObj.BomstatusText = wbsHeader[i].Bomstatustxt;
								if (g.getState() === "MOCR" && g.hMode !== "copy") {
									wbsObj.wbsEnable = false;
									wbsObj.matEnable = false;
									wbsObj.plantEnable = false;
									wbsObj.usageEnable = false;
									wbsObj.bomType = "Change";
								} else {
									wbsObj.wbsEnable = true;
									wbsObj.matEnable = true;
									wbsObj.plantEnable = true;
									wbsObj.usageEnable = true;
									wbsObj.bomType = "Create";
								}

								wbsObj.LngtxtEnable = true;
								wbsObj.fromDateEnable = true; //new
								wbsObj.BomstatusEnable = true;
								wbsObj.BaseQtyEnable = true;
								wbsObj.addItemEnable = true;
								wbsObj.modeFlag = "None";

								wbsObj.Authgroup = wbsHeader[i].Authgroup;
								wbsObj.Sizdim = wbsHeader[i].Sizdim;
								wbsObj.Labofc = wbsHeader[i].Labofc;
								wbsObj.Labortxt = wbsHeader[i].Labortxt;

								wbsObj.Stalt = ""; //wbsHeader[i].Stalt;
								wbsObj.Flbomsub = ""; //wbsHeader[i].Flbomsub;
								wbsObj.Delflg = ""; //wbsHeader[i].Delflg;
								wbsObj.Invnr = ""; //wbsHeader[i].Invnr;
								wbsObj.Herst = ""; //wbsHeader[i].Herst;
								wbsObj.Htypb = ""; //wbsHeader[i].Htypb;
								wbsObj.Serge = ""; //wbsHeader[i].Serge;
								wbsObj.Stktx = ""; //wbsHeader[i].Stktx;

								wbsObj.wbsItem = [];
								wbsObj.wbsSubItem = [];

								var WBSITEM = results.WBItem.results;
								if (WBSITEM.length > 0) {
									for (var j = 0; j < WBSITEM.length; j++) {
										if (WBSITEM[j].MatnrWbs === wbsObj.Matnr && WBSITEM[j].Werks === wbsObj.Werks && WBSITEM[j].Stlan === wbsObj.Stlan) {
											WBSITEM[j].addSubItmEnable = true;
											WBSITEM[j].Pmper = "-";
											WBSITEM[j].Pmpka = "-";
											WBSITEM[j].Pmprv = "-";
											WBSITEM[j].Pmpfe = "-";
											WBSITEM[j].Pmpin = "-";
											WBSITEM[j].Pmpko = "-";
											wbsObj.wbsItem.push(WBSITEM[j]);
										}
									}
								} else {
									wbsObj.wbsItem = [];
								}

								var WBSSUBITEM = results.WBSBIT.results;
								if (WBSSUBITEM.length > 0) {
									for (var k = 0; k < WBSSUBITEM.length; k++) {
										if (WBSSUBITEM[k].MatnrWbs === wbsObj.Matnr && WBSSUBITEM[k].Werks === wbsObj.Werks && WBSSUBITEM[k].Stlan ===
											wbsObj.Stlan) {
											WBSSUBITEM[k].intPointEnable = true;
											WBSSUBITEM[k].subQtyEnable = true;
											WBSSUBITEM[k].subTextEnable = true;
											wbsObj.wbsSubItem.push(WBSSUBITEM[k]);
										}
									}
								} else {
									wbsObj.wbsSubItem = [];
								}
								AIWListWBSData.push(wbsObj);
							}
							sap.ui.getCore().getModel("AIWListWBSModel").setSizeLimit(AIWListWBSData.length);
							sap.ui.getCore().getModel("AIWListWBSModel").refresh();
						}

					}

					if (results.ONetwork) {
						var onObj = {};
						var ONHeader = results.ONetwork.results;
						if (ONHeader) {
							if (g.getState() === "MOCR" && !g.isHierarchy) {
								g.getView().byId("_iconTabBar").setSelectedKey("ON");
							}
							for (var i = 0; i < ONHeader.length; i++) {
								onObj = {};
								onObj.Objnetwrk = ONHeader[i].Objnetwrk; //obj.Objnetwrk;
								if (g.hMode === "copy") {
									onObj.Type = true;
								}
								onObj.Netgrp = ONHeader[i].Netgrp;
								onObj.Netwtyp = ONHeader[i].Netwtyp;
								onObj.Netxt = ONHeader[i].Netxt;
								onObj.NetgrpDesc = ONHeader[i].NetgroupTxt;
								onObj.NetwtypDesc = ONHeader[i].NettypeTxt;
								if (g.getState() === "MOCR" && g.hMode !== "copy") {
									onObj.NetIDEnable = false; //new
								} else {
									onObj.NetIDEnable = true; //new
								}

								onObj.Ntobjtyp = ONHeader[i].Ntobjtyp;

								var ONLAM = results.ONLAM.results;
								if (ONLAM) {
									for (var j = 0; j < ONLAM.length; j++) {
										if (ONLAM[j].Objnetwrk === ONHeader[i].Objnetwrk) {
											onObj.Lrpid = ONLAM[j].Lrpid;
											onObj.Strtptatr = ONLAM[j].Strtptatr;
											onObj.Endptatr = ONLAM[j].Endptatr;
											onObj.Length = ONLAM[j].Length;
											onObj.LinUnit = ONLAM[j].LinUnit;
											onObj.LinUnitDesc = ONLAM[j].Uomtext;
											onObj.Startmrkr = ONLAM[j].Startmrkr;
											onObj.Endmrkr = ONLAM[j].Endmrkr;
											onObj.Mrkdisst = ONLAM[j].Mrkdisst;
											onObj.Mrkdisend = ONLAM[j].Mrkdisend;
											onObj.MrkrUnit = ONLAM[j].MrkrUnit;
											onObj.LrpidDesc = ONLAM[j].LrpDescr;
										}
									}
								}
								AIWListONData.push(onObj);
							}
							sap.ui.getCore().getModel("AIWListONModel").setSizeLimit(AIWListONData.length);
							sap.ui.getCore().getModel("AIWListONModel").refresh();
							//g.updateCount("ObjNet", AIWListONData);
							g.disableFields(sType);
						}

					}

					if (results.Workcenter) {
						var wcData = results.Workcenter.results;

						if (wcData) {
							if (g.getState() === "MOCR" && !g.isHierarchy) {
								g.getView().byId("_iconTabBar").setSelectedKey("WCTab");
							}
							for (var w = 0; w < wcData.length; w++) {
								var wcObj = {
									classItems: [],
									characteristics: []
								};
								if (g.hMode === "copy") {
									wcObj.Type = true;
								}
								wcObj = wcData[w];
								wcObj.wc = wcData[w].Arbpl;
								wcObj.wcDesc = wcData[w].Txtmi;
								wcObj.plant = wcData[w].Werks;
								wcObj.plantDesc = wcData[w].Plantdesc;
								wcObj.wcCat = wcData[w].Verwe;
								wcObj.wcCatDesc = wcData[w].Ktext;
								wcObj.person = wcData[w].Crveran;
								wcObj.personDesc = wcData[w].Persresptxt;
								wcObj.usg = wcData[w].Planv;
								wcObj.usgDesc = wcData[w].UsageTxt;
								wcObj.stdVal = wcData[w].Vgwts;
								wcObj.stdValDesc = wcData[w].Vgwtx;
								wcObj.ctrlKey = wcData[w].Crsteus;
								wcObj.ctrlKeyDesc = wcData[w].Steutxt;

								wcObj.wcValueState = "None";
								wcObj.wcDescValueState = "None";
								wcObj.plantValueState = "None";
								wcObj.wcCatValueState = "None";
								wcObj.personResValueState = "None";
								wcObj.usgValueState = "None";
								wcObj.stdValueState = "None";
								wcObj.cntrlKeyValueState = "None";
								wcObj.wcValueStateTxt = "";
								wcObj.wcDescValueStateTxt = "";
								wcObj.plantValueStateTxt = "";
								wcObj.wcCatValueStateTxt = "";
								wcObj.personResValueStateTxt = "";
								wcObj.usgValueStateTxt = "";
								wcObj.stdValueStateTxt = "";
								wcObj.cntrlKeyValueStateTxt = "";
								wcObj.enable = true;
								wcObj.wcatEnable = true;
								wcObj.plEnable = true;
								wcObj.wcEnable = true;
								if (g.getState() === "MOCR" && g.hMode !== "copy") {
									wcObj.wcatEnable = false;
									wcObj.plEnable = false;
									wcObj.wcEnable = false;
								}
								wcObj.cost = [];
								wcObj.capacity = [];

								var cost = results.WCCost.results;
								if (cost) {
									if (cost.length > 0) {
										var costArr = [];
										for (var c = 0; c < cost.length; c++) {
											if (wcObj.wc === cost[c].Arbpl) {
												costArr.push(cost[c]);
											}
										}
										var cModel = new sap.ui.model.json.JSONModel();
										cModel.setData(cost);
										// g.cost.setModel(cModel);
										wcObj.cost = costArr;

									}
								}
								var capacity = results.WCCapa.results;
								if (capacity) {
									var capArr = [];
									if (capacity.length > 0) {
										for (var ca = 0; ca < capacity.length; ca++) {
											if (wcObj.wc === capacity[ca].Arbpl) {
												capArr.push(capacity[ca]);
											}
										}
										var capModel = new sap.ui.model.json.JSONModel();
										capModel.setData(capacity);
										wcObj.capacity = capacity;
									}
								}
								var classList = results.ClassWC.results;
								if (classList) {
									if (classList.length > 0) {
										for (var i = 0; i < classList.length; i++) {
											classList[i].ctEnable = false;
											classList[i].classEnable = false;
											classList[i].ClassTypeDesc = classList[i].Artxt;
											delete classList[i].Artxt;
											classList[i].ClassDesc = classList[i].Kltxt;
											delete classList[i].Kltxt;
											delete classList[i].Changerequestid;
											delete classList[i].Clint;
											delete classList[i].Service;
											wcObj.classItems.push(classList[i]);
										}
										// var cModel = new sap.ui.model.json.JSONModel();
										// cModel.setData(classList);
										// g.class.setModel(cModel);
									}
								}

								var charList = results.ValueWC.results;
								if (charList) {
									if (charList.length > 0) {
										for (var j = 0; j < charList.length; j++) {
											charList[j].cNameEnable = false;
											charList[j].Textbz = charList[j].Atwtb;
											delete charList[j].Ataut;
											delete charList[j].Ataw1;
											delete charList[j].Atawe;
											delete charList[j].Atcod;
											delete charList[j].Atflb;
											delete charList[j].Atflv;
											delete charList[j].Atimb;
											delete charList[j].Atsrt;
											delete charList[j].Atvglart;
											delete charList[j].Atzis;
											delete charList[j].Changerequestid;
											delete charList[j].CharName;
											delete charList[j].Charid;
											delete charList[j].Classtype;
											delete charList[j].Service;
											delete charList[j].Valcnt;
											charList[j].slNo = j + 1;
											charList[j].flag = charList[j].Class + "-" + charList[j].slNo;
											wcObj.characteristics.push(charList[j]);
										}

										for (var z = 0; z < wcObj.characteristics.length; z++) {
											var count = 1;
											for (var y = 0; y < wcObj.characteristics.length; y++) {
												if (z === y) {
													continue;
												}
												if (wcObj.characteristics[y].Atnam === wcObj.characteristics[z].Atnam && wcObj.characteristics[y].Class ===
													wcObj.characteristics[z].Class) {
													count++;
												}
											}
											if (count > 1) {
												wcObj.characteristics[z].charDltEnable = true;
											} else {
												wcObj.characteristics[z].charDltEnable = false;
											}

											if (wcObj.characteristics[z].Atein === true) {
												wcObj.characteristics[z].charAddEnable = false;
											}
										}
										// var _cModel = new sap.ui.model.json.JSONModel();
										// _cModel.setData(charList);
										// g.char.setModel(_cModel);
										// g.chData = charList;
										// wcObj.Char = charList;
									}
								}
								AIWListWCData.push(wcObj);
							}
						}
						sap.ui.getCore().getModel("AIWListWCModel").setSizeLimit(AIWListWCData.length);
						sap.ui.getCore().getModel("AIWListWCModel").setData(AIWListWCData);
						// g.updateCount("workCenter", AIWListWCData);
					}
					//else if (sType === "GTLTab") {
					if (results.GTHdr) { //GTList
						// var header = d.GTList.results[0];
						var basic = results.GTHdr.results; //GTList
						if (basic) {
							if (g.getState() === "MOCR" && !g.isHierarchy) {
								g.getView().byId("_iconTabBar").setSelectedKey("TLTab");
							}
							for (var gtl = 0; gtl < basic.length; gtl++) {
								var gtlData = {
									validFrm: formatter.getDateFormat(basic[gtl].Datuv),
									grp: basic[gtl].Tlgnhdr,
									vEquiLbl: false,
									vEqui: false,
									vEquiDesc: false,
									vFlocLbl: false,
									vFloc: false,
									vFlocDesc: false,
									flocEnb: false,
									equiEnb: false,
									bAddComponent: true,
									enable: false,
									header: [],

									operation: [],
									component: [],
									Class: [],
									Char: []
								};
								if (g.hMode === "copy") {
									gtlData.Type = true;
									gtlData.modeFlag = "Crt";
								}
								var header = results.GTList.results;
								if (header.length > 0) {
									// gtlData.header = header;
									for (var h = 0; h < header.length; h++) {
										if (gtlData.grp === header[h].Tlgnhdr) {
											var gtheader = {};
											if (g.hMode === "copy") {
												gtheader.Type = true;
											}
											gtheader.PPenable = false;
											if (g.getState() === "MOCR" && g.hMode !== "copy") {
												gtheader.Grpenable = false;
												gtlData.modeFlag = "Chg";
											}
											gtheader.Grpenable = true;

											gtheader.pPlantDesc = header[h].Iwerktxt;
											gtheader.usageDesc = header[h].TlUsgTxt;
											gtheader.plGrpDesc = header[h].Plnnrgrptxt;
											gtheader.statusDesc = header[h].Statustxt;
											gtheader.sysCondDesc = header[h].Anlzux;
											gtheader.Strat = header[h].Strat;
											gtheader.stratDesc = header[h].Strattxt;
											gtheader.Plnal = header[h].Tplnal;
											gtheader.Verwe = header[h].Tverwe;
											// gtheader.usg = header[h].Tverwe;
											gtheader.plEnable = false;
											gtheader.valueStateT = "None";
											gtheader.valueStatePP = "None";
											gtheader.valueStateU = "None";
											gtheader.valueStateS = "None";
											gtheader.groupCounter = header[h].Tplnal;
											gtheader.Ktext = header[h].Ktext;
											gtheader.profile = header[h].Profident;
											// gtheader.Ktext = header[h].Werks2gtl;
											gtheader.wc = header[h].Tarbpl;
											gtheader.keydate = header[h].Keydate;
											gtheader.plant = header[h].Wcplant;
											gtheader.Iwerk = header[h].Werks;
											gtheader.usage = header[h].Tverwe;
											gtheader.plannerGrp = header[h].Vagrp;
											gtheader.Vagrp = header[h].Vagrp;
											gtheader.Statu = header[h].Statu;
											gtheader.systemCond = header[h].Anlzu;
											gtheader.Anlzu = header[h].Anlzu;
											gtheader.groupVal = header[h].Tlgnhdr;
											gtheader.groupCounterDesc = header[h].Ktext;
											gtheader.wcDesc = header[h].Wcdescription;
											gtheader.assembly = header[h].Istru;
											gtheader.deletion = header[h].Delkz;
											gtheader.Plnnrgrptxt = header[h].Plnnrgrptxt;
											gtheader.Statustxt = header[h].Statustxt;
											gtheader.Anlzux = header[h].Anlzux;
											gtheader.Istrux = header[h].Istrux;
											// added
											gtheader.insPtDesc = header[h].Slwbeztxt;
											gtheader.insPt = header[h].Slwbez;
											gtheader.extNum = header[h].Extnumtxt;
											gtheader.tlusg = header[h].Tverwe;
											gtheader.grp = header[h].Tlgnhdr;
											gtheader.assmbly = header[h].Istru;
											gtheader.assmblyDesc = header[h].Istrux;
											gtlData.header.push(gtheader);
										}
									}
								}
								var operation = results.GTOprs.results;
								if (operation.length > 0) {
									// gtlData.operation = operation;
									for (var o = 0; o < operation.length; o++) {
										if (gtlData.grp === operation[o].Tlgnhdr) {
											var gtoperation = {};
											gtoperation = operation[o];
											gtoperation.calcKeyDesc = "";
											gtoperation.actTypDesc = "";
											gtoperation.Vornr = operation[o].Vornr;
											gtoperation.flag = operation[o].Tplnal + "-" + operation[o].Vornr;
											gtoperation.Arbpl = operation[o].TlArbpl;
											gtoperation.Plnal = operation[o].Tplnal;
											gtoperation.opState = "None";
											gtoperation.opDescState = "None";
											gtoperation.wcState = "None";
											gtoperation.plantState = "None";
											gtoperation.ctrlKeyState = "None";

											gtoperation.operation = operation[o].Gvornr2op;
											gtoperation.subOp = operation[o].Uvorn;
											gtoperation.workCenter = operation[o].TlArbpl;
											gtoperation.plant = operation[o].Werks2gop;
											gtoperation.controlKey = operation[o].Steus2gop;
											gtoperation.Steus = operation[o].Steus2gop;
											gtoperation.shortText = operation[o].Ltxa1;
											gtoperation.Ltxa1 = operation[o].Ltxa1;
											gtoperation.work = operation[o].Arbei;
											gtoperation.unitForWork = operation[o].Arbeh;
											gtoperation.number = operation[o].Anzzl;
											gtoperation.calcKey = operation[o].Indet;
											gtoperation.normDuration = operation[o].Dauno;
											gtoperation.uomDuration = operation[o].Daune;
											gtoperation.workPerc = operation[o].Prznt.toString();
											gtoperation.exeFactor = operation[o].Aufkt;
											gtoperation.Werks = operation[o].Werks2gop;
											gtoperation.actType = operation[o].Larnt2gop;
											gtoperation.stdTextKey = operation[o].Ktsch;
											gtoperation.assembly = operation[o].Tistru;
											gtoperation.noOfTime = operation[o].Loanz;
											gtoperation.sutability = operation[o].Qualf2gop;
											gtoperation.wageGroup = operation[o].Logrp2gop;
											gtoperation.wageType = operation[o].Loart;
											gtoperation.sysCondition = operation[o].Tanlzu;
											gtoperation.orderQty = operation[o].Bmvrg;
											gtoperation.ordQtyUnit = operation[o].Bmeih;
											gtoperation.netPrice = operation[o].Opreis;
											gtoperation.currency = operation[o].Owaers;
											gtoperation.priceUnit = operation[o].Opeinh;
											gtoperation.planDelTime = operation[o].Plifz;
											gtoperation.costElement = operation[o].Sakto2gop;
											gtoperation.materialGrp = operation[o].Omatkl;
											gtoperation.puchGroup = operation[o].Oekgrp;
											gtoperation.vendor = operation[o].Lifnr;
											gtoperation.purchOrg = operation[o].Ekorg;
											gtoperation.shortTerm = operation[o].Sortl;
											gtoperation.purchInfo = operation[o].Infnr;
											gtoperation.fieldKey = operation[o].Slwid;
											gtoperation.purchDoc = operation[o].Ebeln;
											gtoperation.purchDocItem = operation[o].Ebelp2gop;
											gtoperation.userFld = operation[o].Slwid;
											gtoperation.capCat = operation[o].Qlkapar;
											gtoperation.capCatDesc = operation[o].Kapartxt;
											gtoperation.quantity1_ = operation[o].Use04;
											gtoperation.quantity1 = operation[o].Usr04;
											gtoperation.quantity2 = operation[o].Usr05;
											gtoperation.quantity2_ = operation[o].Use05;
											gtoperation.value3 = operation[o].Usr06;
											gtoperation.value4 = operation[o].Usr07;
											gtoperation.value3_ = operation[o].Use06;
											gtoperation.value4_ = operation[o].Use07;
											gtoperation.text1 = operation[o].Usr00;
											gtoperation.text2 = operation[o].Usr01;
											gtoperation.text3 = operation[o].Usr03;
											gtoperation.text4 = operation[o].Usr04;
											gtoperation.date1 = operation[o].Usr08;
											gtoperation.date2 = operation[o].Usr09;
											gtoperation.indicator1 = operation[o].Usr10;
											gtoperation.indicator2 = operation[o].Usr11;
											gtoperation.Usrtxtname1 = operation[o].Usrtxtname1;
											gtoperation.Usrtxtflg1 = operation[o].Usrtxtflg1;
											gtoperation.Usrtxtname2 = operation[o].Usrtxtname2;
											gtoperation.Usrtxtflg2 = operation[o].Usrtxtflg2;
											gtoperation.Usrtxtname3 = operation[o].Usrtxtname3;
											gtoperation.Usrtxtflg3 = operation[o].Usrtxtflg3;
											gtoperation.Usrtxtname4 = operation[o].Usrtxtname4;
											gtoperation.Usrtxtflg4 = operation[o].Usrtxtflg4;
											gtoperation.Usrqtyname1 = operation[o].Usrqtyname1;
											gtoperation.Usrqtyflg1 = operation[o].Usrqtyflg1;
											gtoperation.Usrqtyname2 = operation[o].Usrqtyname2;
											gtoperation.Usrqtyflg2 = operation[o].Usrqtyflg2;
											gtoperation.Usrvalname1 = operation[o].Usrvalname1;
											gtoperation.Usrvalflg1 = operation[o].Usrvalflg1;
											gtoperation.Usrvalname2 = operation[o].Usrvalname2;
											gtoperation.Usrvalflg2 = operation[o].Usrvalflg2;
											gtoperation.Usrdatename1 = operation[o].Usrdatename1;
											gtoperation.Usrdatflg1 = operation[o].Usrdatflg1;
											gtoperation.Usrdatename2 = operation[o].Usrdatename2;
											gtoperation.Usrdatflg2 = operation[o].Usrdatflg2;
											gtoperation.Usrindname1 = operation[o].Usrindname1;
											gtoperation.Usrindflag1 = operation[o].Usrindflag1;
											gtoperation.Usrindname2 = operation[o].Usrindname2;
											gtoperation.Usrindflag2 = operation[o].Usrindflag2;
											gtoperation.qual = operation[o].Qlotype;
											gtoperation.search = operation[o].Qsearchtm;
											gtoperation.groupCounter = operation[o].Tplnal;
											gtlData.operation.push(gtoperation);
										}
									}
								}
								var component = results.GTComp.results;
								if (component.length > 0) {
									// gtlData.component = component;
									for (var c = 0; c < component.length; c++) {
										if (gtlData.grp === component[c].Tlgnhdr) {
											var gtcomponent = {};
											gtcomponent = component[c];
											gtcomponent.matDesc = component[c].Maktx;
											gtcomponent.slNo = c + 1;
											gtcomponent.Plnal = component[c].Tplnal;
											gtcomponent.Vornr = component[c].Vornr;
											gtcomponent.activity = component[c].Vornr;
											gtcomponent.flag = component[c].Tplnal + "-" + component[c].Vornr + "-" + gtcomponent.slNo;
											gtcomponent.hFlag = component[c].Tplnal + "-" + component[c].Vornr;
											gtcomponent.group = component[c].Tlgnhdr;
											gtcomponent.grp = component[c].Tlgnhdr;
											gtcomponent.groupCounter = component[c].Tplnal;
											gtcomponent.activity = component[c].Vorn2gcmp;
											gtcomponent.Idnrk = component[c].Idnrk;
											gtcomponent.component = component[c].Idnrk;
											gtcomponent.compDesc = component[c].Maktx;
											gtcomponent.Menge = component[c].Menge;
											gtcomponent.compQty = component[c].Menge;
											gtcomponent.MeinsGcp = component[c].MeinsGcp;
											gtcomponent.compUnit = component[c].MeinsGcp;
											gtcomponent.backFlush = component[c].RgekzGcp;
											//gtcomponent.resv = component[c].Disp;
											gtcomponent.resv = component[c].Disp === "" ? component[c].Disptxt : component[c].Disp;
											gtcomponent.resvDesc = component[c].Disptxt;
											gtcomponent.storageLoc = component[c].Lgortgcmp;
											gtcomponent.costElement = component[c].Saktogcmp;
											gtcomponent.bom = component[c].Stlnrgcmp;
											gtcomponent.bomCat = component[c].Stltygcmp;
											gtcomponent.bomCatDesc = component[c].Stltygcmptxt;
											gtcomponent.itCat = component[c].Postp;
											gtcomponent.assembly = component[c].Istru;
											gtcomponent.sortStr = component[c].Sortf;
											gtcomponent.itemNo = component[c].Posnr;
											gtcomponent.plantMaint = component[c].Sanin;
											gtcomponent.relSales = component[c].Rvrel;
											gtcomponent.relCost = component[c].Sanka;
											gtcomponent.pmAssembly = component[c].Stkkz;
											gtcomponent.spare = component[c].Erskz;
											gtcomponent.matProv = component[c].Beikz;
											gtcomponent.isPlant = component[c].Pswrk;
											gtcomponent.bulkMat = component[c].Schgt;
											gtcomponent.plant = component[c].Werksgcmp;
											gtcomponent.purchGrp = component[c].Ekgrp;
											gtcomponent.price = component[c].Preis;
											gtcomponent.currency = component[c].Waers;
											gtcomponent.prUnit = component[c].Peinh;
											gtcomponent.delTimeD = component[c].Lifzt;
											gtcomponent.matGrp = component[c].Matkl;
											gtcomponent.qtyFix = component[c].Fmeng;
											gtcomponent.altBom = component[c].Stlal;
											gtlData.component.push(gtcomponent);
										}
									}
									g.cmpData = component;
								}
								var classList = results.GTClass.results;
								if (classList) {
									if (classList.length > 0) {
										for (var i = 0; i < classList.length; i++) {
											if (gtlData.grp === classList[i].Tlgnhdr) {
												if (g.getState() === "MOCR" && g.hMode !== "copy") {
													classList[i].ctEnable = false;
													classList[i].classEnable = false;
												} else {
													classList[i].ctEnable = true;
													classList[i].classEnable = true;
												}

												classList[i].ClassTypeDesc = classList[i].Artxt; //ClassDesc;
												delete classList[i].Artxt; //ClassDesc;
												classList[i].ClassDesc = classList[i].Kltxt;
												delete classList[i].Kltxt;
												delete classList[i].Changerequestid;
												delete classList[i].Clint;
												delete classList[i].Service;
												classList[i].slNo = i + 1;
												classList[i].Plnal = classList[i].Tplnal;
												classList[i].flag = classList[i].Tplnal + "-" + classList[i].slNo;
												gtlData.Class.push(classList[i]);
											}
										}
										g.cData = classList;
										// gtlData.Class = classList;
										/*cModel = new sap.ui.model.json.JSONModel();
										cModel.setData(classList);
										g.class.setModel(cModel);*/
										// g.getView().byId("newClass").setEnabled(true); // check
									}
								}
								var charList = results.GTVal.results;
								if (charList) {
									if (charList.length > 0) {
										for (var j = 0; j < charList.length; j++) {
											if (gtlData.grp === charList[j].Tlgnhdr) {
												if (g.getState() === "MOCR" && g.hMode !== "copy") {
													charList[j].cNameEnable = false;
												} else {
													charList[j].cNameEnable = true;
												}
												charList[j].Textbz = charList[j].Atwtb;
												delete charList[j].Ataut;
												delete charList[j].Ataw1;
												delete charList[j].Atawe;
												delete charList[j].Atcod;
												delete charList[j].Atflb;
												delete charList[j].Atflv;
												delete charList[j].Atimb;
												delete charList[j].Atsrt;
												delete charList[j].Atvglart;
												delete charList[j].Atzis;
												delete charList[j].Changerequestid;
												// delete charList[j].CharName;
												delete charList[j].Charid;
												delete charList[j].Classtype;
												delete charList[j].Service;
												delete charList[j].Valcnt;
												charList[j].slNo = j + 1;
												charList[j].Plnal = charList[j].Tplnal;
												charList[j].flag = charList[j].Tplnal + "-" + charList[j].Class + "-" + charList[j].slNo;
												gtlData.Char.push(charList[j]);
											}
											g.chData = charList;
											/*_cModel = new sap.ui.model.json.JSONModel();
											_cModel.setData(charList);
											g.char.setModel(_cModel);*/
											// gtlData.Char = charList;
										}
										for (var z = 0; z < gtlData.Char.length; z++) {
											var count = 1;
											for (var y = 0; y < gtlData.Char.length; y++) {
												if (z === y) {
													continue;
												}
												if (gtlData.Char[y].Atnam === gtlData.Char[z].Atnam && gtlData.Char[y].Class ===
													gtlData.Char[z].Class) {
													count++;
												}
											}
											if (count > 1) {
												gtlData.Char[z].charDltEnable = true;
											} else {
												gtlData.Char[z].charDltEnable = false;
											}

											if (gtlData.Char[z].Atein === true) {
												gtlData.Char[z].charAddEnable = false;
											}
										}
									}
								}
								// g.getView().setModel(tlDetailModel, "tlDetailModel");
								AIWListGTLData.push(gtlData);

							}
							sap.ui.getCore().getModel("AIWListGTLModel").setSizeLimit(AIWListGTLData.length);
							sap.ui.getCore().getModel("AIWListGTLModel").setData(AIWListGTLData);
							// g.updateCount("generalTL", AIWListGTLData);
						}

					}

					// else if (sType === "EqTLTab") {
					if (results.ETHdr) { //ETList
						var basic = results.ETHdr.results; //ETList
						if (basic) {
							if (g.getState() === "MOCR" && !g.isHierarchy) {
								g.getView().byId("_iconTabBar").setSelectedKey("TLTab");
							}
							for (var etl = 0; etl < basic.length; etl++) {
								var etlData = {
									validFrm: formatter.getDateFormat(basic[etl].Datuv),
									grp: basic[etl].Tleqhdr,
									vEquiLbl: true,
									vEqui: true,
									vEquiDesc: true,
									equipment: basic[etl].Equnr2eth, //Eq2tl,
									equipmentDesc: basic[etl].Eqktx, //Etxt2tlR,
									vFlocLbl: false,
									vFloc: false,
									vFlocDesc: false,
									flocEnb: false,
									bAddComponent: true,
									enable: false,
									equiEnb: false,

									header: [],
									operation: [],
									component: [],
									Class: [],
									Char: []
								};
								if (g.getState() === "MOCR" && g.hMode !== "copy") {

									etlData.modeFlag = "Chg";
								}
								if (g.hMode === "copy") {
									etlData.Type = true;
									etlData.modeFlag = "Crt";
								}
								// tlDetailModel.setData(g.currentObj);
								var header = results.ETList.results;
								if (header.length > 0) {
									// etlData.header = header;
									for (var h = 0; h < header.length; h++) {
										if (etlData.grp === header[h].Tleqhdr) {
											var etheader = {};
											if (g.hMode === "copy") {
												etheader.Type = true;

											}
											if (g.getState() === "MOCR" && g.hMode !== "copy") {
												etheader.Grpenable = false;
											}
											etheader.pPlantDesc = header[h].Iwerktxt;
											etheader.Grpenable = false;
											etheader.usageDesc = header[h].TlUsgTxt;
											etheader.plGrpDesc = header[h].Plnnrgrptxt;
											etheader.statusDesc = header[h].Statustxt;
											etheader.sysCondDesc = header[h].Anlzux;
											etheader.Strat = header[h].Strat;
											etheader.stratDesc = header[h].Strattxt;
											etheader.Plnal = header[h].Tplnal;
											etheader.Verwe = header[h].Tverwe;
											etheader.plEnable = false;
											etheader.Ktext = header[h].Ktext;
											etheader.valueStateT = "None";
											etheader.valueStatePP = "None";
											etheader.valueStateU = "None";
											etheader.valueStateS = "None";

											// etheader.groupCounter = header[h].Plnal;
											etheader.profile = header[h].Profident;
											// etheader.Ktext = header[h].Eqktx;
											etheader.keydate = header[h].Keydate;
											// etheader.Ktext = header[h].Werks2etl;
											etheader.wc = header[h].Tarbpl;
											etheader.plant = header[h].Wcplant;
											etheader.Iwerk = header[h].Werks;
											etheader.usage = header[h].Tverwe;
											etheader.plannerGrp = header[h].Vagrp;
											etheader.Vagrp = header[h].Vagrp;
											etheader.Statu = header[h].Statu;
											etheader.systemCond = header[h].Anlzu;
											etheader.Anlzu = header[h].Anlzu;
											etheader.groupVal = header[h].Tleqhdr;
											etheader.groupCounterDesc = header[h].Eqktx;
											etheader.wcDesc = header[h].Wcdescription;
											// etheader.assembly = header[h].Istru;
											etheader.equipment = header[h].Eq2tl;
											etheader.equipmentDesc = header[h].Eqktx;
											etheader.deletion = header[h].Delkz;
											etheader.TlUsgTxt = header[h].TlUsgTxt;
											etheader.Plnnrgrptxt = header[h].Plnnrgrptxt;
											etheader.Statustxt = header[h].Statustxt;
											etheader.Anlzux = header[h].Anlzux;
											// etheader.Istrux = header[h].Istrux;
											etheader.insPtDesc = header[h].Slwbeztxt;
											etheader.insPt = header[h].Slwbez;
											etheader.extNum = header[h].Extnumtxt;
											etheader.tlusg = header[h].Tverwe;
											etheader.grp = header[h].Tlgnhdr;
											etheader.assmbly = header[h].Istru;
											etheader.assmblyDesc = header[h].Istrux;
											etlData.header.push(etheader);
											// etlData.equipment = header[h].Eq2tl; // Equipment of Group
											// etlData.equipmentDesc = header[h].Eqktx; // Equipment description of Group

										}
									}
									/*var oModel = new sap.ui.model.json.JSONModel();
									oModel.setData(etlData.header);*/
								}
								var operation = results.ETOprs.results;
								if (operation.length > 0) {
									// etlData.operation = operation;
									for (var o = 0; o < operation.length; o++) {
										if (etlData.grp === operation[o].Tleqhdr) {
											var etOperation = {};
											etOperation = operation[o];
											etOperation.calcKeyDesc = "";
											etOperation.actTypDesc = "";
											etOperation.flag = operation[o].Tplnal + "-" + operation[o].Vornr;
											etOperation.Arbpl = operation[o].TlArbpl;
											etOperation.Plnal = operation[o].Tplnal;
											etOperation.Vornr = operation[o].Vornr;
											etOperation.opState = "None";
											etOperation.opDescState = "None";
											etOperation.wcState = "None";
											etOperation.plantState = "None";
											etOperation.ctrlKeyState = "None";

											etOperation.operation = operation[o].Evornr2op;
											etOperation.groupCounter = operation[o].Tplnal;
											etOperation.subOp = operation[o].Uvorn;
											etOperation.workCenter = operation[o].TlArbpl;
											etOperation.Werks = operation[o].Werks2eop;
											etOperation.plant = operation[o].Werks2eop;
											etOperation.controlKey = operation[o].Steus2eop;
											etOperation.Steus = operation[o].Steus2eop; //Steus2gop;
											etOperation.shortText = operation[o].Ltxa1;
											etOperation.Ltxa1 = operation[o].Ltxa1;
											etOperation.work = operation[o].Arbei;
											etOperation.unitForWork = operation[o].Arbeh;
											etOperation.number = operation[o].Anzzl;
											etOperation.calcKey = operation[o].Indet;
											etOperation.normDuration = operation[o].Dauno;
											etOperation.uomDuration = operation[o].Daune;
											etOperation.workPerc = operation[o].Prznt.toString();
											etOperation.exeFactor = operation[o].Aufkt;
											etOperation.actType = operation[o].Larnt2eop;
											etOperation.stdTextKey = operation[o].Ktsch;
											etOperation.assembly = operation[o].Tistru;
											etOperation.noOfTime = operation[o].Loanz;
											etOperation.sutability = operation[o].Qualf2eop;
											etOperation.wageGroup = operation[o].Logrp2eop;
											etOperation.wageType = operation[o].Loart;
											etOperation.sysCondition = operation[o].Tanlzu;
											etOperation.orderQty = operation[o].Bmvrg;
											etOperation.ordQtyUnit = operation[o].Bmeih;
											etOperation.netPrice = operation[o].Opreis;
											etOperation.currency = operation[o].Owaers;
											etOperation.priceUnit = operation[o].Opeinh;
											etOperation.planDelTime = operation[o].Plifz;
											etOperation.costElement = operation[o].Sakto2eop;
											etOperation.materialGrp = operation[o].Omatkl;
											etOperation.puchGroup = operation[o].Oekgrp;
											etOperation.vendor = operation[o].Lifnr;
											etOperation.purchOrg = operation[o].Ekorg;
											etOperation.shortTerm = operation[o].Sortl;
											etOperation.purchInfo = operation[o].Infnr;
											etOperation.fieldKey = operation[o].Slwid;
											etOperation.purchDoc = operation[o].Ebeln;
											etOperation.purchDocItem = operation[o].Ebelp2eop;
											etOperation.userFld = operation[o].Slwid;
											etOperation.capCat = operation[o].Qlkapar;
											etOperation.capCatDesc = operation[o].Kapartxt;
											etOperation.quantity1_ = operation[o].Use04;
											etOperation.quantity1 = operation[o].Usr04;
											etOperation.quantity2 = operation[o].Usr05;
											etOperation.quantity2_ = operation[o].Use05;
											etOperation.value3 = operation[o].Usr06;
											etOperation.value4 = operation[o].Usr07;
											etOperation.value3_ = operation[o].Use06;
											etOperation.value4_ = operation[o].Use07;
											etOperation.text1 = operation[o].Usr00;
											etOperation.text2 = operation[o].Usr01;
											etOperation.text3 = operation[o].Usr03;
											etOperation.text4 = operation[o].Usr04;
											etOperation.date1 = operation[o].Usr08;
											etOperation.date2 = operation[o].Usr09;
											etOperation.indicator1 = operation[o].Usr10;
											etOperation.indicator2 = operation[o].Usr11;
											etOperation.Usrtxtname1 = operation[o].Usrtxtname1;
											etOperation.Usrtxtflg1 = operation[o].Usrtxtflg1;
											etOperation.Usrtxtname2 = operation[o].Usrtxtname2;
											etOperation.Usrtxtflg2 = operation[o].Usrtxtflg2;
											etOperation.Usrtxtname3 = operation[o].Usrtxtname3;
											etOperation.Usrtxtflg3 = operation[o].Usrtxtflg3;
											etOperation.Usrtxtname4 = operation[o].Usrtxtname4;
											etOperation.Usrtxtflg4 = operation[o].Usrtxtflg4;
											etOperation.Usrqtyname1 = operation[o].Usrqtyname1;
											etOperation.Usrqtyflg1 = operation[o].Usrqtyflg1;
											etOperation.Usrqtyname2 = operation[o].Usrqtyname2;
											etOperation.Usrqtyflg2 = operation[o].Usrqtyflg2;
											etOperation.Usrvalname1 = operation[o].Usrvalname1;
											etOperation.Usrvalflg1 = operation[o].Usrvalflg1;
											etOperation.Usrvalname2 = operation[o].Usrvalname2;
											etOperation.Usrvalflg2 = operation[o].Usrvalflg2;
											etOperation.Usrdatename1 = operation[o].Usrdatename1;
											etOperation.Usrdatflg1 = operation[o].Usrdatflg1;
											etOperation.Usrdatename2 = operation[o].Usrdatename2;
											etOperation.Usrdatflg2 = operation[o].Usrdatflg2;
											etOperation.Usrindname1 = operation[o].Usrindname1;
											etOperation.Usrindflag1 = operation[o].Usrindflag1;
											etOperation.Usrindname2 = operation[o].Usrindname2;
											etOperation.Usrindflag2 = operation[o].Usrindflag2;
											etOperation.qual = operation[o].Qlotype;
											etOperation.search = operation[o].Qsearchtm;
											etlData.operation.push(etOperation);

										}
									}
									g.oData = etlData.operation;
								}
								component = results.ETComp.results;
								if (component.length > 0) {
									// etlData.component = component;
									for (var e = 0; e < component.length; e++) {
										if (etlData.grp === component[e].Tleqhdr) {
											var etComponent = {};
											etComponent = component[e];
											etComponent.matDesc = component[e].Maktx;
											etComponent.slNo = e + 1;
											etComponent.flag = component[e].Tplnal + "-" + component[e].Vornr + "-" + component[e].slNo;
											etComponent.hFlag = component[e].Tplnal + "-" + component[e].Vornr;
											etComponent.Vornr = component[e].Vornr;
											etComponent.activity = component[e].Vornr;
											etComponent.group = component[e].Tleqhdr;
											etComponent.grp = component[e].Tleqhdr;
											etComponent.groupCounter = component[e].Tplnal;
											//etComponent.activity = component[e].Vorn2ecmp;
											etComponent.component = component[e].Idnrk;
											etComponent.compDesc = component[e].Maktx;
											etComponent.compQty = component[e].Menge;
											etComponent.compUnit = component[e].MeinsEcp;
											etComponent.backFlush = component[e].RgekzEcp;
											//etComponent.resv = component[e].Disp;
											etComponent.resv = component[e].Disp === "" ? component[e].Disptxt : component[e].Disp;
											etComponent.resvDesc = component[e].Disptxt;
											etComponent.storageLoc = component[e].Lgortecmp;
											etComponent.costElement = component[e].Saktoecmp;
											etComponent.Plnal = component[e].Tplnal;
											etComponent.bom = component[e].Stlnrecmp;
											etComponent.bomCat = component[e].Stltyecmp;
											etComponent.bomCatDesc = component[e].Stltyecmptxt;
											etComponent.itCat = component[e].Postp;
											etComponent.assembly = component[e].Istru;
											etComponent.sortStr = component[e].Sortf;
											etComponent.itemNo = component[e].Posnr;
											etComponent.plantMaint = component[e].Sanin;
											etComponent.relSales = component[e].Rvrel;
											etComponent.relCost = component[e].Sanka;
											etComponent.pmAssembly = component[e].Stkkz;
											etComponent.spare = component[e].Erskz;
											etComponent.matProv = component[e].Beikz;
											etComponent.isPlant = component[e].Pswrk;
											etComponent.bulkMat = component[e].Schgt;
											etComponent.plant = component[e].Werksecmp;
											etComponent.purchGrp = component[e].Ekgrp;
											etComponent.price = component[e].Preis;
											etComponent.currency = component[e].Waers;
											etComponent.prUnit = component[e].Peinh;
											etComponent.delTimeD = component[e].Lifzt;
											etComponent.matGrp = component[e].Matkl;
											etComponent.qtyFix = component[e].Fmeng;
											etComponent.altBom = component[e].Stlal;
											etlData.component.push(etComponent);

										}
									}
									g.cmpData = component;
								}
								var classList = results.ETClass.results;
								if (classList) {
									if (classList.length > 0) {
										for (var i = 0; i < classList.length; i++) {
											if (etlData.grp === classList[i].Tleqhdr) {
												if (g.getState() === "MOCR" && g.hMode !== "copy") {
													classList[i].ctEnable = false;
													classList[i].classEnable = false;
												} else {
													classList[i].ctEnable = true;
													classList[i].classEnable = true;
												}

												classList[i].ClassTypeDesc = classList[i].Artxt; //ClassDesc;
												delete classList[i].Artxt; //ClassDesc;
												classList[i].ClassDesc = classList[i].Kltxt;
												delete classList[i].Kltxt;
												delete classList[i].Changerequestid;
												delete classList[i].Clint;
												delete classList[i].Service;
												classList[i].slNo = i + 1;
												classList[i].Plnal = classList[i].Tplnal;
												classList[i].flag = classList[i].Tplnal + "-" + classList[i].slNo;
												etlData.Class.push(classList[i]);
											}
										}
										g.cData = classList;
										/*cModel = new sap.ui.model.json.JSONModel();
										cModel.setData(classList);
										g.class.setModel(cModel);*/
										// etlData.Class = classList;
									}
								}
								var charList = results.ETVal.results;
								if (charList) {
									if (charList.length > 0) {
										for (var j = 0; j < charList.length; j++) {
											if (etlData.grp === charList[j].Tleqhdr) {
												if (g.getState() === "MOCR" && g.hMode !== "copy") {
													charList[j].cNameEnable = false;
												} else {
													charList[j].cNameEnable = true;
												}
												charList[j].Textbz = charList[j].Atwtb;
												delete charList[j].Ataut;
												delete charList[j].Ataw1;
												delete charList[j].Atawe;
												delete charList[j].Atcod;
												delete charList[j].Atflb;
												delete charList[j].Atflv;
												delete charList[j].Atimb;
												delete charList[j].Atsrt;
												delete charList[j].Atvglart;
												delete charList[j].Atzis;
												delete charList[j].Changerequestid;
												// delete charList[j].CharName;
												delete charList[j].Charid;
												delete charList[j].Classtype;
												delete charList[j].Service;
												delete charList[j].Valcnt;
												charList[j].slNo = j + 1;
												charList[j].Plnal = charList[j].Tplnal;
												charList[j].flag = charList[j].Tplnal + "-" + charList[j].Class + "-" + charList[j].slNo;
												etlData.Char.push(charList[j]);
											}
											g.chData = charList;
											/*_cModel = new sap.ui.model.json.JSONModel();
											_cModel.setData(charList);

											}
											g.chData = charList;
											/*_cModel = new sap.ui.model.json.JSONModel();
											_cModel.setData(charList);
											g.char.setModel(_cModel);*/
											// etlData.Char = charList;
										}
										for (var z = 0; z < etlData.Char.length; z++) {
											var count = 1;
											for (var y = 0; y < etlData.Char.length; y++) {
												if (z === y) {
													continue;
												}
												if (etlData.Char[y].Atnam === etlData.Char[z].Atnam && etlData.Char[y].Class ===
													etlData.Char[z].Class) {
													count++;
												}
											}
											if (count > 1) {
												etlData.Char[z].charDltEnable = true;
											} else {
												etlData.Char[z].charDltEnable = false;
											}

											if (etlData.Char[z].Atein === true) {
												etlData.Char[z].charAddEnable = false;
											}
										}
									}

									AIWListETLData.push(etlData);
								}
								sap.ui.getCore().getModel("AIWListETLModel").setSizeLimit(AIWListETLData.length);
								sap.ui.getCore().getModel("AIWListETLModel").setData(AIWListETLData);
								// g.updateCount("equiTL", AIWListETLData);
							}

							sap.ui.getCore().getModel("AIWListETLModel").setData(AIWListETLData);
							// g.updateCount("equiTL", AIWListETLData);
						}
					}

					// else if (sType === "FLOCTLTab") {
					if (results.FTHdr) { //results.FTList
						var basic = results.FTHdr.results; //results.FTList.results;
						if (basic) {
							if (g.getState() === "MOCR" && !g.isHierarchy) {
								g.getView().byId("_iconTabBar").setSelectedKey("TLTab");
							}
							for (var ftl = 0; ftl < basic.length; ftl++) {
								var ftlData = {
									validFrm: formatter.getDateFormat(basic[ftl].Datuv),
									grp: basic[ftl].Tlflhdr,
									vEquiLbl: false,
									vEqui: false,
									vEquiDesc: false,
									floc: basic[ftl].Tplnr2fth,
									flocDesc: basic[ftl].Pltxt,
									vFlocLbl: true,
									vFloc: true,
									vFlocDesc: true,
									flocEnb: false,
									equiEnb: false,
									bAddComponent: true,
									enable: false,
									header: [],
									operation: [],
									component: [],
									Class: [],
									Char: []
								};
								if (g.getState() === "MOCR" && g.hMode !== "copy") {

									ftlData.modeFlag = "Chg";
								}
								if (g.hMode === "copy") {
									ftlData.Type = true;
									ftlData.modeFlag = "Crt";
								}
								// tlDetailModel.setData(g.currentObj);
								var header = results.FTList.results;
								if (header.length > 0) {
									// ftlData.header = header;
									for (var h = 0; h < header.length; h++) {
										if (ftlData.grp === header[h].Tlflhdr) {
											var ftHeader = {};
											if (g.hMode === "copy") {
												ftHeader.Type = true;
											}
											if (g.getState() === "MOCR" && g.hMode !== "copy") {
												ftHeader.Grpenable = false;
											}
											ftHeader.pPlantDesc = header[h].Iwerktxt;
											ftHeader.usageDesc = header[h].TlUsgTxt;
											ftHeader.plGrpDesc = header[h].Plnnrgrptxt;
											ftHeader.statusDesc = header[h].Statustxt;
											ftHeader.sysCondDesc = header[h].Anlzux;
											ftHeader.Strat = header[h].Strat;
											ftHeader.stratDesc = header[h].Strattxt;
											ftHeader.Plnal = header[h].Tplnal;
											ftHeader.Verwe = header[h].Tverwe;
											ftHeader.plEnable = false;
											ftHeader.Ktext = header[h].Ktext;
											ftHeader.valueStateT = "None";
											ftHeader.valueStatePP = "None";
											ftHeader.valueStateU = "None";
											ftHeader.valueStateS = "None";

											// ftHeader.groupCounter = header[h].Plnal;
											// ftHeader.Ktext = header[h].Pltxt;
											ftHeader.profile = header[h].Profident;
											ftHeader.keydate = header[h].Keydate;
											// ftHeader.Ktext = header[h].Werks2ftl;
											ftHeader.wc = header[h].Tarbpl;
											ftHeader.Iwerk = header[h].Werks;
											ftHeader.plant = header[h].Wcplant;
											ftHeader.tlusg = header[h].Tverwe;
											ftHeader.plannerGrp = header[h].Vagrp;
											ftHeader.Vagrp = header[h].Vagrp;
											ftHeader.Statu = header[h].Statu;
											ftHeader.systemCond = header[h].Anlzu;
											ftHeader.Anlzu = header[h].Anlzu;
											ftHeader.groupVal = header[h].Tlflhdr;
											ftHeader.groupCounterDesc = header[h].Pltxt;
											ftHeader.wcDesc = header[h].Wcdescription;
											ftHeader.assembly = header[h].Istru;
											ftHeader.deletion = header[h].Delkz;
											ftHeader.TlUsgTxt = header[h].TlUsgTxt;
											ftHeader.Plnnrgrptxt = header[h].Plnnrgrptxt;
											ftHeader.Statustxt = header[h].Statustxt;
											ftHeader.Anlzux = header[h].Anlzux;
											// ftHeader.Istrux = header[h].Istrux;
											ftHeader.insPtDesc = header[h].Slwbeztxt;
											ftHeader.insPt = header[h].Slwbez;
											ftHeader.extNum = header[h].Extnumtxt;
											ftHeader.assmbly = header[h].Istru;
											ftHeader.assmblyDesc = header[h].Istrux;

											ftHeader.grp = header[h].Tlgnhdr;
											ftHeader.floc = header[h].Fl2tl;
											ftHeader.flocDesc = header[h].Pltxt;
											ftlData.header.push(ftHeader);
											// ftlData.floc = header[h].Fl2tl; // FLOC of Group
											// ftlData.flocDesc = header[h].Pltxt; // FLOC description of Group

										}
									}
									/*var oModel = new sap.ui.model.json.JSONModel();
									oModel.setData(ftlData.header);*/
									/*g.getView().byId("taskListHeaderOverview").setModel(oModel, "tlDetailModel");
									g.getModel("tlDetailModel").setProperty("/header", header);*/
								}
								var operation = results.FTOprs.results;
								if (operation.length > 0) {
									// ftlData.operation = operation;
									for (var o = 0; o < operation.length; o++) {
										if (ftlData.grp === operation[o].Tlflhdr) {
											var ftOperation = {};
											ftOperation = operation[o];
											ftOperation.calcKeyDesc = "";
											ftOperation.actTypDesc = "";
											ftOperation.flag = operation[o].Tplnal + "-" + operation[o].Vornr;
											ftOperation.Arbpl = operation[o].TlArbpl;
											ftOperation.Plnal = operation[o].Tplnal;
											ftOperation.Vornr = operation[o].Vornr;
											ftOperation.opState = "None";
											ftOperation.opDescState = "None";
											ftOperation.wcState = "None";
											ftOperation.plantState = "None";
											ftOperation.ctrlKeyState = "None";

											ftOperation.groupCounter = operation[o].Tplnal;
											ftOperation.operation = operation[o].Fvornr2op;
											ftOperation.subOp = operation[o].Uvorn;
											ftOperation.workCenter = operation[o].TlArbpl;
											ftOperation.plant = operation[o].Werks2fop;
											ftOperation.controlKey = operation[o].Steus2fop;
											ftOperation.Steus = operation[o].Steus2fop; //Steus2gop;
											ftOperation.shortText = operation[o].Ltxa1;
											ftOperation.Ltxa1 = operation[o].Ltxa1;
											ftOperation.work = operation[o].Arbei;
											ftOperation.unitForWork = operation[o].Arbeh;
											ftOperation.number = operation[o].Anzzl;
											ftOperation.calcKey = operation[o].Indet;
											ftOperation.Werks = operation[o].Werks2fop;
											ftOperation.normDuration = operation[o].Dauno;
											ftOperation.uomDuration = operation[o].Daune;
											ftOperation.workPerc = operation[o].Prznt.toString();
											ftOperation.exeFactor = operation[o].Aufkt;
											ftOperation.actType = operation[o].Larnt2fop;
											ftOperation.stdTextKey = operation[o].Ktsch;
											ftOperation.assembly = operation[o].Tistru;
											ftOperation.noOfTime = operation[o].Loanz;
											ftOperation.sutability = operation[o].Qualf2fop;
											ftOperation.wageGroup = operation[o].Logrp2fop;
											ftOperation.wageType = operation[o].Loart;
											ftOperation.sysCondition = operation[o].Tanlzu;
											ftOperation.orderQty = operation[o].Bmvrg;
											ftOperation.ordQtyUnit = operation[o].Bmeih;
											ftOperation.netPrice = operation[o].Opreis;
											ftOperation.currency = operation[o].Owaers;
											ftOperation.priceUnit = operation[o].Opeinh;
											ftOperation.planDelTime = operation[o].Plifz;
											ftOperation.costElement = operation[o].Sakto2fop;
											ftOperation.materialGrp = operation[o].Omatkl;
											ftOperation.puchGroup = operation[o].Oekgrp;
											ftOperation.vendor = operation[o].Lifnr;
											ftOperation.purchOrg = operation[o].Ekorg;
											ftOperation.shortTerm = operation[o].Sortl;
											ftOperation.purchInfo = operation[o].Infnr;
											ftOperation.fieldKey = operation[o].Slwid;
											ftOperation.purchDoc = operation[o].Ebeln;
											ftOperation.purchDocItem = operation[o].Ebelp2fop;
											ftOperation.userFld = operation[o].Slwid;
											ftOperation.capCat = operation[o].Qlkapar;
											ftOperation.capCatDesc = operation[o].Kapartxt;
											ftOperation.quantity1_ = operation[o].Use04;
											ftOperation.quantity1 = operation[o].Usr04;
											ftOperation.quantity2 = operation[o].Usr05;
											ftOperation.quantity2_ = operation[o].Use05;
											ftOperation.value3 = operation[o].Usr06;
											ftOperation.value4 = operation[o].Usr07;
											ftOperation.value3_ = operation[o].Use06;
											ftOperation.value4_ = operation[o].Use07;
											ftOperation.text1 = operation[o].Usr00;
											ftOperation.text2 = operation[o].Usr01;
											ftOperation.text3 = operation[o].Usr03;
											ftOperation.text4 = operation[o].Usr04;
											ftOperation.date1 = operation[o].Usr08;
											ftOperation.date2 = operation[o].Usr09;
											ftOperation.indicator1 = operation[o].Usr10;
											ftOperation.indicator2 = operation[o].Usr11;
											ftOperation.Usrtxtname1 = operation[o].Usrtxtname1;
											ftOperation.Usrtxtflg1 = operation[o].Usrtxtflg1;
											ftOperation.Usrtxtname2 = operation[o].Usrtxtname2;
											ftOperation.Usrtxtflg2 = operation[o].Usrtxtflg2;
											ftOperation.Usrtxtname3 = operation[o].Usrtxtname3;
											ftOperation.Usrtxtflg3 = operation[o].Usrtxtflg3;
											ftOperation.Usrtxtname4 = operation[o].Usrtxtname4;
											ftOperation.Usrtxtflg4 = operation[o].Usrtxtflg4;
											ftOperation.Usrqtyname1 = operation[o].Usrqtyname1;
											ftOperation.Usrqtyflg1 = operation[o].Usrqtyflg1;
											ftOperation.Usrqtyname2 = operation[o].Usrqtyname2;
											ftOperation.Usrqtyflg2 = operation[o].Usrqtyflg2;
											ftOperation.Usrvalname1 = operation[o].Usrvalname1;
											ftOperation.Usrvalflg1 = operation[o].Usrvalflg1;
											ftOperation.Usrvalname2 = operation[o].Usrvalname2;
											ftOperation.Usrvalflg2 = operation[o].Usrvalflg2;
											ftOperation.Usrdatename1 = operation[o].Usrdatename1;
											ftOperation.Usrdatflg1 = operation[o].Usrdatflg1;
											ftOperation.Usrdatename2 = operation[o].Usrdatename2;
											ftOperation.Usrdatflg2 = operation[o].Usrdatflg2;
											ftOperation.Usrindname1 = operation[o].Usrindname1;
											ftOperation.Usrindflag1 = operation[o].Usrindflag1;
											ftOperation.Usrindname2 = operation[o].Usrindname2;
											ftOperation.Usrindflag2 = operation[o].Usrindflag2;
											ftOperation.qual = operation[o].Qlotype;
											ftOperation.search = operation[o].Qsearchtm;
											ftlData.operation.push(ftOperation);

										}
									}
									/*g.oData = ftlData.operation;
									var oprModel = new sap.ui.model.json.JSONModel();
									oprModel.setData(ftlData.operation);*/
									// g.getView().byId("operationTab").setModel(oprModel, "tlDetailModel");
								}
								component = results.FTComp.results;
								if (component.length > 0) {
									//ftlData.component = component;
									for (var f = 0; f < component.length; f++) {
										if (ftlData.grp === component[f].Tlflhdr) {
											var ftComponent = {};
											ftComponent = component[f];
											ftComponent.matDesc = component[f].Maktx;
											ftComponent.slNo = e + 1;
											ftComponent.flag = component[f].Tplnal + "-" + component[f].Vornr + "-" + component[f].slNo;
											ftComponent.hFlag = component[f].Tplnal + "-" + component[f].Vornr;

											ftComponent.group = component[f].Tlflhdr;
											ftComponent.grp = component[f].Tlflhdr;
											ftComponent.groupCounter = component[f].Tplnal;
											ftComponent.activity = component[f].Vornr;
											ftComponent.Vornr = component[f].Vornr;
											ftComponent.Plnal = component[f].Tplnal;
											// ftComponent.activity = component[f].Vorn2fcmp;
											ftComponent.component = component[f].Idnrk;
											ftComponent.compDesc = component[f].Maktx;
											ftComponent.compQty = component[f].Menge;
											ftComponent.compUnit = component[f].MeinsFcp;
											ftComponent.backFlush = component[f].RgekzFcp;
											//ftComponent.resv = component[f].Disp;
											ftComponent.resv = component[f].Disp === "" ? component[f].Disptxt : component[f].Disp;
											ftComponent.resvDesc = component[f].Disptxt;
											ftComponent.storageLoc = component[f].Lgortfcmp;
											ftComponent.costElement = component[f].Saktofcmp;
											ftComponent.bom = component[f].Stlnrfcmp;
											ftComponent.bomCat = component[f].Stltyfcmp;
											ftComponent.bomCatDesc = component[f].Stltyfcmptxt;
											ftComponent.itCat = component[f].Postp;
											ftComponent.assembly = component[f].Istru;
											ftComponent.sortStr = component[f].Sortf;
											ftComponent.itemNo = component[f].Posnr;
											ftComponent.plantMaint = component[f].Sanin;
											ftComponent.relSales = component[f].Rvrel;
											ftComponent.relCost = component[f].Sanka;
											ftComponent.pmAssembly = component[f].Stkkz;
											ftComponent.spare = component[f].Erskz;
											ftComponent.matProv = component[f].Beikz;
											ftComponent.isPlant = component[f].Pswrk;
											ftComponent.bulkMat = component[f].Schgt;
											ftComponent.plant = component[f].Werksfcmp;
											ftComponent.purchGrp = component[f].Ekgrp;
											ftComponent.price = component[f].Preis;
											ftComponent.currency = component[f].Waers;
											ftComponent.prUnit = component[f].Peinh;
											ftComponent.delTimeD = component[f].Lifzt;
											ftComponent.matGrp = component[f].Matkl;
											ftComponent.qtyFix = component[f].Fmeng;
											ftComponent.altBom = component[f].Stlal;
											ftlData.component.push(ftComponent);

										}
									}
									g.cmpData = component;
									/*compModel = new sap.ui.model.json.JSONModel();
									compModel.setData(ftlData.component);*/
								}
								var classList = results.FTClass.results;
								if (classList) {
									if (classList.length > 0) {
										for (var i = 0; i < classList.length; i++) {
											if (ftlData.grp === classList[i].Tlflhdr) {
												if (g.getState() === "MOCR" && g.hMode !== "copy") {
													classList[i].ctEnable = false;
													classList[i].classEnable = false;
												} else {
													classList[i].ctEnable = true;
													classList[i].classEnable = true;
												}

												classList[i].ClassTypeDesc = classList[i].Artxt; //ClassDesc;
												delete classList[i].Artxt; //ClassDesc;
												classList[i].ClassDesc = classList[i].Kltxt;
												delete classList[i].Kltxt;
												delete classList[i].Changerequestid;
												delete classList[i].Clint;
												delete classList[i].Service;
												classList[i].slNo = i + 1;
												classList[i].Plnal = classList[i].Tplnal;
												classList[i].flag = classList[i].Tplnal + "-" + classList[i].slNo;
												ftlData.Class.push(classList[i]);
											}
										}
										g.cData = classList;
										/*cModel = new sap.ui.model.json.JSONModel();
										cModel.setData(classList);
										g.class.setModel(cModel);*/
										// ftlData.Class = classList;
									}
								}
								var charList = results.FTVal.results;
								if (charList) {
									if (charList.length > 0) {
										for (var j = 0; j < charList.length; j++) {
											if (ftlData.grp === charList[j].Tlflhdr) {
												if (g.getState() === "MOCR" && g.hMode !== "copy") {
													charList[j].cNameEnable = false;
												} else {
													charList[j].cNameEnable = true;
												}
												charList[j].Textbz = charList[j].Atwtb;
												delete charList[j].Ataut;
												delete charList[j].Ataw1;
												delete charList[j].Atawe;
												delete charList[j].Atcod;
												delete charList[j].Atflb;
												delete charList[j].Atflv;
												delete charList[j].Atimb;
												delete charList[j].Atsrt;
												delete charList[j].Atvglart;
												delete charList[j].Atzis;
												delete charList[j].Changerequestid;
												// delete charList[j].CharName;
												delete charList[j].Charid;
												delete charList[j].Classtype;
												delete charList[j].Service;
												delete charList[j].Valcnt;
												charList[j].slNo = j + 1;
												charList[j].Plnal = charList[j].Tplnal;
												charList[j].flag = charList[j].Tplnal + "-" + charList[j].Class + "-" + charList[j].slNo;
												ftlData.Char.push(charList[j]);
											}
											g.chData = charList;
											/*_cModel = new sap.ui.model.json.JSONModel();
											_cModel.setData(charList);
											g.char.setModel(_cModel);*/
											// ftlData.Char = charList;
										}
										for (var z = 0; z < ftlData.Char.length; z++) {
											var count = 1;
											for (var y = 0; y < ftlData.Char.length; y++) {
												if (z === y) {
													continue;
												}
												if (ftlData.Char[y].Atnam === ftlData.Char[z].Atnam && ftlData.Char[y].Class ===
													ftlData.Char[z].Class) {
													count++;
												}
											}
											if (count > 1) {
												ftlData.Char[z].charDltEnable = true;
											} else {
												ftlData.Char[z].charDltEnable = false;
											}

											if (ftlData.Char[z].Atein === true) {
												ftlData.Char[z].charAddEnable = false;
											}
										}
									}
								}
								AIWListFTLData.push(ftlData);
							}
							sap.ui.getCore().getModel("AIWListFTLModel").setSizeLimit(AIWListFTLData.length);
							sap.ui.getCore().getModel("AIWListFTLModel").setData(AIWListFTLData);
							// g.updateCount("flocTL", AIWListFTLData);
						}

						// g.updateCount("flocTL", AIWListFTLData);
					}

					// else if (sType === "OLTab") {
					if (results.Olink) {
						var d = results.Olink.results;
						// g.olData = d;
						if (d) {
							if (d.length > 0) {
								if (g.getState() === "MOCR" && !g.isHierarchy) {
									g.getView().byId("_iconTabBar").setSelectedKey("OLTab");
								}
								for (var i = 0; i < d.length; i++) {
									var objLink = {};
									if (g.hMode === "copy") {
										objLink.Type = true;
									}
									objLink.linkCat = d[i].Netyp;
									objLink.objCat = d[i].Kantyp;
									objLink.link = d[i].Objlink;
									if (g.getState() === "MOCR" && g.hMode !== "copy") {
										objLink.lenable = false;
									} else {
										objLink.lenable = true;
									}
									// Netyp: d[i].Netyp,
									// objLink.linkCat = d[i].Netyp;
									objLink.linkCatDesc = d[i].Netyptxt;
									// Kantyp= d[i].Kantyp;
									objLink.objCat = d[i].Kantyp;
									objLink.objCatDesc = d[i].Kantyptxt;
									objLink.linkDesc = d[i].Kanxt;
									objLink.netId = d[i].Netid;
									objLink.netIdDesc = d[i].Netidtxt;
									objLink.linkNum = d[i].Lfdknr;
									objLink.autGrp = d[i].Begru;
									objLink.autGrpDesc = d[i].Begtx;
									objLink.validFrm = formatter.getDateFormat(d[i].Datva);
									objLink.timeFrm = formatter.getTime(d[i].Zeitva);
									objLink.validTo = formatter.getDateFormat(d[i].Datvb);
									objLink.timeTo = formatter.getTime(d[i].Zeitvb);
									objLink.medium = d[i].Mediu;
									objLink.mediumDesc = d[i].Medkxt;
									objLink.linkFrmFlEn = true;
									objLink.linkToFlEn = true;
									objLink.linkObjFlEn = true;
									objLink.linkFromEQEn = true;
									objLink.linkToEQEn = true;
									objLink.linkObjEqEn = true;
									objLink.linkCatEn = true;
									if (g.getState() === "MOCR" && g.hMode !== "copy") {
										objLink.linkCatEn = false;
									}
									objLink.linkCatVS = "true";
									objLink.objCatEn = true;
									if ((g.getState() === "MOCR" && g.hMode !== "copy")) {
										objLink.objCatEn = false;
									}
									objLink.objCatVS = "None";
									objLink.linkFEqLblRQ = true;
									objLink.linkToEqLblRQ = true;
									objLink.linkFrmEq = "";
									objLink.linkFrmEqDesc = "";
									objLink.linkToEq = "";
									objLink.linkToEqDesc = "";
									objLink.linkObjEq = "";
									objLink.linkObjEqDesc = "";
									objLink.linkFrmflLblV = true;
									objLink.linkFrmFlV = true;
									objLink.linkFrmFlDescV = true;
									objLink.linkToFlLblV = true;
									objLink.linkToFlV = true;
									objLink.linkToFlDescV = true;
									objLink.linkObjFlLblV = true;
									objLink.linkObjFlV = true;
									objLink.linkObjFlDescV = true;
									objLink.linkFrmEqLblV = true;
									objLink.linkFrmEqV = true;
									objLink.linkFrmEqDescV = true;
									objLink.linkToEqLblV = true;
									objLink.linkToEQV = true;
									objLink.linkToEqDescV = true;
									objLink.linkObjEqLblV = true;
									objLink.linkObjEqV = true;
									objLink.linkObjEqDescV = true;
									objLink.enable = true;
									objLink.LAM = [];
									objLink.Class = [];
									objLink.Char = [];
									if (objLink.objCat === "E") {
										objLink.linkCatEn = false;
										objLink.linkFrmFlEn = false;
										objLink.linkToFlEn = false;
										objLink.linkObjFlEn = false;
										objLink.linkFEqLblRQ = true;
										objLink.linkToEqLblRQ = true;
										objLink.linkFrmflLblV = false;
										objLink.linkFrmFlV = false;
										objLink.linkFrmFlDescV = false;
										objLink.linkToFlLblV = false;
										objLink.linkToFlV = false;
										objLink.linkToFlDescV = false;
										objLink.linkObjFlLblV = false;
										objLink.linkObjFlV = false;
										objLink.linkObjFlDescV = false;
										objLink.linkCatVS = "None";
										objLink.objCatEn = false;
										objLink.objCatVS = "None";
										objLink.linkFEqLblRQ = true;
										objLink.linkToEqLblRQ = true;
										objLink.linkFrmEq = d[i].Eqvon;
										objLink.linkFrmEqDesc = d[i].Eqtxtf;
										objLink.linkToEq = d[i].Eqnach;
										objLink.linkToEqDesc = d[i].Eqtxtt;
										objLink.linkObjEq = d[i].Eqkant;
										objLink.linkObjEqDesc = d[i].Eqtxtl;
										objLink.linkFrmflLblV = false;
										objLink.linkFrmFlV = false;
										objLink.linkFrmFlDescV = false;
										objLink.linkToFlLblV = false;
										objLink.linkToFlV = false;
										objLink.linkToFlDescV = false;
										objLink.linkObjFlLblV = false;
										objLink.linkObjFlV = false;
										objLink.linkObjFlDescV = false;
										objLink.linkFrmEqLblV = true;
										objLink.linkFrmEqV = true;
										objLink.linkFrmEqDescV = true;
										objLink.linkToEqLblV = true;
										objLink.linkToEQV = true;
										objLink.linkToEqDescV = true;
										objLink.linkObjEqLblV = true;
										objLink.linkObjEqV = true;
										objLink.linkObjEqDescV = true;
										// readStatusProf(objLink.linkCat);
									} else if (objLink.objCat === "T") {
										objLink.linkCatEn = false;
										objLink.linkFromEQEn = false;
										objLink.linkToEQEn = false;
										objLink.linkObjEqEn = false;
										objLink.linkFrmflLblRQ = true;
										objLink.linkToFlLblRQ = true;
										objLink.linkFrmEqLblV = false;
										objLink.linkFrmEqV = false;
										objLink.linkFrmEqDescV = false;
										objLink.linkToEqLblV = false;
										objLink.linkToEQV = false;
										objLink.linkToEqDescV = false;
										objLink.linkObjEqLblV = false;
										objLink.linkObjEqV = false;
										objLink.linkObjEqDescV = false;
										objLink.linkCatVS = "None";
										objLink.objCatEn = false;
										objLink.objCatVS = "None";
										objLink.linkFrmflLblRQ = true;
										objLink.linkToFlLblRQ = true;
										objLink.linkFrmFl = d[i].Tpvon;
										objLink.linkFrmFlDesc = d[i].Fltxtf;
										objLink.linkToFl = d[i].Tpnach;
										objLink.linkToFlDesc = d[i].Fltxtt;
										objLink.linkObjFl = d[i].Tpkant;
										objLink.linkObjFlDesc = d[i].Fltxtl;
										objLink.linkFrmflLblV = true;
										objLink.linkFrmFlV = true;
										objLink.linkFrmFlDescV = true;
										objLink.linkToFlLblV = true;
										objLink.linkToFlV = true;
										objLink.linkToFlDescV = true;
										objLink.linkObjFlLblV = true;
										objLink.linkObjFlV = true;
										objLink.linkObjFlDescV = true;
										objLink.linkFrmEqLblV = false;
										objLink.linkFrmEqV = false;
										objLink.linkFrmEqDescV = false;
										objLink.linkToEqLblV = false;
										objLink.linkToEQV = false;
										objLink.linkToEqDescV = false;
										objLink.linkObjEqLblV = false;
										objLink.linkObjEqV = false;
										objLink.linkObjEqDescV = false;
										// readStatusProf(objLink.linkCat);
									}

									if (d[i].Bezarp === "2") {
										// objLink._oView.byId("twoWayRel").setSelected(true);
										objLink.twoWayRel = true;
										objLink.oneWayRel = false;
									} else if (d[i].Bezarp === "1") {
										// objLink._oView.byId("oneWayRel").setSelected(true);
										objLink.oneWayRel = true;
										objLink.twoWayRel = false;
									}

									if (d[i].Bezarl === "2") {
										// objLink._oView.byId("twoWayUsd").setSelected(true);
										objLink.twoWayUsd = true;
										objLink.oneWayUsd = false;
										objLink.relNotUsd = false;
									} else if (d[i].Bezarl === "1") {
										// objLink._oView.byId("oneWayUsd").setSelected(true);
										objLink.oneWayUsd = true;
										objLink.relNotUsd = false;
										objLink.twoWayUsd = false;
									} else if (d[i].Bezarl === "0") {
										// objLink._oView.byId("relNotUsd").setSelected(true);
										objLink.relNotUsd = true;
										objLink.oneWayUsd = false;
										objLink.twoWayUsd = false;
									}

									var lamData = results.OLLAM.results;
									if (lamData) {
										var lModel = new sap.ui.model.json.JSONModel();
										lModel.setData(lamData);
										objLink.LAM = lamData;
									}

									var classList = results.OLClass.results;
									if (classList) {
										if (classList.length > 0) {
											for (var h = 0; h < classList.length; h++) {
												if (objLink.link === classList[h].Objlink) {
													classList[h].ctEnable = true;
													classList[h].classEnable = true;
													classList[h].ClassTypeDesc = classList[h].Artxt;
													delete classList[h].Artxt;
													classList[h].ClassDesc = classList[h].Kltxt;
													delete classList[h].Kltxt;
													delete classList[h].Changerequestid;
													delete classList[h].Clint;
													delete classList[h].Service;
													objLink.Class.push(classList[h]);
												}
												/*var cModel = new sap.ui.model.json.JSONModel();
												cModel.setData(classList);
												g.class.setModel(cModel);*/
												// g.olData.Class = classList;
											}
										}

										var charList = results.OLVal.results;
										if (charList) {
											if (charList.length > 0) {
												for (var j = 0; j < charList.length; j++) {
													if (objLink.link === charList[j].Objlink) {
														charList[j].cNameEnable = true;
														charList[j].Textbz = charList[j].Atwtb;
														delete charList[j].Ataut;
														delete charList[j].Ataw1;
														delete charList[j].Atawe;
														delete charList[j].Atcod;
														delete charList[j].Atflb;
														delete charList[j].Atflv;
														delete charList[j].Atimb;
														delete charList[j].Atsrt;
														delete charList[j].Atvglart;
														delete charList[j].Atzis;
														delete charList[j].Changerequestid;
														// delete charList[j].CharName;
														delete charList[j].Charid;
														delete charList[j].Classtype;
														delete charList[j].Service;
														delete charList[j].Valcnt;
														charList[j].slNo = j + 1;
														charList[j].flag = charList[j].Class + "-" + charList[j].slNo;
														objLink.Char.push(charList[j]);
													}
													/*var _cModel = new sap.ui.model.json.JSONModel();
													_cModel.setData(charList);
													g.char.setModel(_cModel);*/
													// g.olData.Char = charList;
													// g.chData = charList;
												}
												for (var z = 0; z < objLink.Char.length; z++) {
													var count = 1;
													for (var y = 0; y < objLink.Char.length; y++) {
														if (z === y) {
															continue;
														}
														if (objLink.Char[y].Atnam === objLink.Char[z].Atnam && objLink.Char[y].Class ===
															objLink.Char[z].Class) {
															count++;
														}
													}
													if (count > 1) {
														objLink.Char[z].charDltEnable = true;
													} else {
														objLink.Char[z].charDltEnable = false;
													}

													if (objLink.Char[z].Atein === true) {
														objLink.Char[z].charAddEnable = false;
													}
												}
											}
										}
									}

									AIWListOLData.push(objLink);
									/*sap.ui.getCore().getModel("AIWListOLModel").setData(AIWListOLData);
									g.updateCount("objLink", AIWListOLData);
									sap.ui.getCore().getModel("AIWListOLModel").refresh();*/
								}
								readStatusProf(AIWListOLData[AIWListOLData.length - 1].linkCat, AIWListOLData.length);

							}
						}

					}
					// }

					// oMainData.tableBusy = false;
					// oMainModel.setData(oMainData);

				}
				g.readAIWModel("R");
				g.BusyDialog.close();
			};

			var fnSuccess = function (r) {
				g.BusyDialog.close();
				if (r.results.length > 0) {
					var results = r.results[0];
					var pApproveObject = {};

					if (results) {
						g.bindAttachmentData(results);
						g.bindNotesData(results);
						g.ChangeRequestType = results.ChangeRequestType;
						g.CreatedBy = results.CreatedBy;
						g.ChangedAt = results.ChangedAt;
						g.CrDescription = results.CrDescription;

						if (sType === "FLOCTab") {
							AIWFLOCModel = sap.ui.getCore().getModel(g.oModelAIWFLOC).getData();
							if (AIWFLOCModel.length > 0) {
								return;
							}

							var oAIWModel = {
								modelName: "",
								modelNameVS: "None",
								modelDesc: "",
								modelDescVS: "None",
								modelVer: "",
								modelParKey: "",
								modelParKeyVS: "None",
								modelEnable: false,
								crtEnable: false,
								delEnable: false
							};
							var mAIWModel = new JSONModel(oAIWModel);
							g.getView().setModel(mAIWModel, "AIWModel");

							if (results.FuncLoc) {
								var sFunctionalLoc = results.FuncLoc.results;
								if (sFunctionalLoc) {
									for (var a = 0; a < sFunctionalLoc.length; a++) {
										pApproveObject = {
											intlAddr: [],
											classItems: [],
											characteristics: [],
											linearChar: [],
											emailAddress: [],
											urlAddress: [],
											telephoneData: [],
											faxData: []
										};
										sObject = {
											altlbl: [],
											Partners: [], // Partners
											Permits: [], // Permit
											attachmentCount: "0", // Attachment Count
											Guids: "", // Attachment
											TplnrEnabled: true,
											MaintplantEnabled: false,
											BukrsEnabled: false,
											FunctionalLocEnabled: false,
											FlocCatEnabled: false,
											StrucIndEnabled: false
										};
										sObject.Tplnr = sFunctionalLoc[a].Tplnr;
										sObject.Functionallocation = sFunctionalLoc[a].FlocRef;
										sObject.Flocdescription = sFunctionalLoc[a].Txtmi; // Floc Description
										sObject.EditMask = sFunctionalLoc[a].EditMask;
										sObject.Hierarchy = sFunctionalLoc[a].Hierarchy;
										sObject.Floccategory = sFunctionalLoc[a].Fltyp;
										sObject.FlocCategoryDesc = sFunctionalLoc[a].Flttx;
										sObject.Strucindicator = sFunctionalLoc[a].TplkzFlc;
										sObject.StrucIndicatorDesc = sFunctionalLoc[a].Tplxt;
										sObject.Lvorm = sFunctionalLoc[a].Lvorm;
										sObject.Deact = sFunctionalLoc[a].Deact;
										sObject.Trpnr = sFunctionalLoc[a].Trpnr;
										sObject.Refflocdesc = sFunctionalLoc[a].Refflocdesc;
										sObject.SupFunctionallocation = sFunctionalLoc[a].Tplma; // Sup FuncLoc
										sObject.SupFlocdescription = sFunctionalLoc[a].Supflocdesc; // Sup FlocDescription
										sObject.Stattext = sFunctionalLoc[a].Stattext; // System Status
										sObject.UstaEqui = sFunctionalLoc[a].UstaFloc; // User Status
										sObject.StsmEqui = sFunctionalLoc[a].StsmFloc; // Status Profile
										sObject.StsmEquiDesc = sFunctionalLoc[a].Statproftxt; // Status Profile Description
										sObject.UstwEqui = sFunctionalLoc[a].UstwFloc; // Status with Status Number
										sObject.UswoEqui = sFunctionalLoc[a].UswoFloc; // Status without Status Number
										sObject.TechnicalObjectTyp = sFunctionalLoc[a].Eqart; // TechnicalObjectTyp
										sObject.Description = sFunctionalLoc[a].Eartx; // TechnicalObjectTyp Description
										sObject.Begru = sFunctionalLoc[a].Begru;
										sObject.Begtx = sFunctionalLoc[a].Begtx;
										sObject.Brgew = sFunctionalLoc[a].Brgew;
										sObject.Gewei = sFunctionalLoc[a].Gewei;
										sObject.Invnr = sFunctionalLoc[a].Invnr;
										sObject.Groes = sFunctionalLoc[a].Groes;
										sObject.Inbdt = sFunctionalLoc[a].Inbdt;
										sObject.Answt = sFunctionalLoc[a].Answt;
										sObject.Waers = sFunctionalLoc[a].Waers;
										sObject.Ansdt = sFunctionalLoc[a].Ansdt;
										sObject.Herst = sFunctionalLoc[a].Herst;
										sObject.Typbz = sFunctionalLoc[a].Typbz;
										sObject.Mapar = sFunctionalLoc[a].Mapar;
										sObject.Serge = sFunctionalLoc[a].Serge;
										sObject.Herld = sFunctionalLoc[a].Herld;
										sObject.Baujj = sFunctionalLoc[a].Baujj;
										sObject.Baumm = sFunctionalLoc[a].Baumm;
										sObject.MonthName = sFunctionalLoc[a].MonthName;
										sObject.Maintplant = sFunctionalLoc[a].Swerk;
										sObject.MaintplantDesc = sFunctionalLoc[a].Plantname;
										sObject.Location = sFunctionalLoc[a].StorFloc; // Location
										sObject.Locationdesc = sFunctionalLoc[a].Locationdesc; // Location Description
										sObject.Msgrp = sFunctionalLoc[a].Msgrp;
										sObject.BeberFl = sFunctionalLoc[a].BeberFl; // Plant Section
										sObject.Fing = sFunctionalLoc[a].Fing; // Person responsible
										sObject.Tele = sFunctionalLoc[a].Tele; // Phone
										sObject.Eqfnr = sFunctionalLoc[a].Eqfnr;
										sObject.Abckz = sFunctionalLoc[a].Abckzfloc;
										sObject.Abctx = sFunctionalLoc[a].Abctx;
										sObject.Bukrs = sFunctionalLoc[a].Bukrsfloc;
										sObject.Butxt = sFunctionalLoc[a].Butxt;
										sObject.City = sFunctionalLoc[a].City;
										sObject.GsbeFloc = sFunctionalLoc[a].GsbeFloc;
										sObject.Gtext = sFunctionalLoc[a].Gtext;
										sObject.Anln1Fl = sFunctionalLoc[a].Anln1Fl;
										sObject.AnlaFl = sFunctionalLoc[a].AnlaFl;
										sObject.Txt50 = sFunctionalLoc[a].Txt50;
										sObject.Kostl = sFunctionalLoc[a].KostFloc; // Cost Center
										sObject.Kokrs = sFunctionalLoc[a].KokrFloc; // ccPart1
										sObject.Mctxt = sFunctionalLoc[a].Contareaname; // Name
										sObject.Posid = sFunctionalLoc[a].Posid;
										sObject.Post1 = sFunctionalLoc[a].Post1;
										sObject.DaufFloc = sFunctionalLoc[a].DaufFloc;
										sObject.Standorderdesc = sFunctionalLoc[a].Standorderdesc;
										sObject.AufnFloc = sFunctionalLoc[a].AufnFloc;
										sObject.SettleOrdDesc = sFunctionalLoc[a].SettleOrdDesc;
										sObject.Werks = sFunctionalLoc[a].PlntFloc; // Planning Plant
										sObject.Planningplantdes = sFunctionalLoc[a].Planningplantdes; // Planning Plant Description
										sObject.Ingrp = sFunctionalLoc[a].Ingrp; // Planner Group
										sObject.Innam = sFunctionalLoc[a].Plannergrpdesc; // Planner Group Description
										sObject.Arbpl = sFunctionalLoc[a].Arbplfloc; // Work Center
										sObject.Ktext = sFunctionalLoc[a].Workcenterdesc; // Work Center Description
										sObject.WcWerks = sFunctionalLoc[a].Wergwfloc; // Work center Plant
										sObject.MainArbpl = sFunctionalLoc[a].Gewrkfloc; // Main Work Center
										sObject.MainKtext = sFunctionalLoc[a].MainWcDesc; // Plant Work Center
										sObject.MainWerks = sFunctionalLoc[a].MainWcPlant; // Name
										sObject.RbnrFloc = sFunctionalLoc[a].RbnrFloc;
										sObject.Rbnrx = sFunctionalLoc[a].Rbnrx;
										sObject.Tplma = sFunctionalLoc[a].Tplma;
										sObject.Supflocdesc = sFunctionalLoc[a].Supflocdesc;
										sObject.Posnr = sFunctionalLoc[a].Posnr;
										sObject.Trpnr = sFunctionalLoc[a].Trpnr;
										sObject.Refflocdesc = sFunctionalLoc[a].Refflocdesc;
										sObject.Iequi = sFunctionalLoc[a].Iequi;
										sObject.Einzl = sFunctionalLoc[a].Einzl;
										sObject.ConstrType = sFunctionalLoc[a].Submtiflo; // Construction Type
										sObject.ConstructionDesc = sFunctionalLoc[a].Constdesc; // Construction Description
										sObject.CgwldtFl = sFunctionalLoc[a].CgwldtFl;
										sObject.CgwlenFl = sFunctionalLoc[a].CgwlenFl;
										sObject.CmganrFl = sFunctionalLoc[a].CmganrFl;
										sObject.CwagetFl = sFunctionalLoc[a].CwagetFl;
										sObject.CgaerbFl = sFunctionalLoc[a].CgaerbFl;
										sObject.VgwldtFl = sFunctionalLoc[a].VgwldtFl;
										sObject.VgwlenFl = sFunctionalLoc[a].VgwlenFl;
										sObject.VmganrFl = sFunctionalLoc[a].VmganrFl;
										sObject.VwagetFl = sFunctionalLoc[a].VwagetFl;
										sObject.VgaerbFl = sFunctionalLoc[a].VgaerbFl;
										sObject.Vkorg = sFunctionalLoc[a].Vkorg;
										sObject.Vkorgtxt = sFunctionalLoc[a].Vkorgtxt;
										sObject.Vtweg = sFunctionalLoc[a].Vtweg;
										sObject.Vtwegtxt = sFunctionalLoc[a].Vtwegtxt;
										sObject.Spart = sFunctionalLoc[a].Spart;
										sObject.Sparttxt = sFunctionalLoc[a].Sparttxt;
										sObject.Vkbur = sFunctionalLoc[a].Vkbur;
										sObject.Vkburtxt = sFunctionalLoc[a].Vkburtxt;
										sObject.Vkgrp = sFunctionalLoc[a].Vkgrp;
										sObject.Vkgrptxt = sFunctionalLoc[a].Vkgrptxt;
										sObject.Modeldesc = sFunctionalLoc[a].Modeldesc;
										sObject.Modelref = sFunctionalLoc[a].Modelref;
										sObject.Modelrver = sFunctionalLoc[a].Modelrver;
										sObject.Modelext = sFunctionalLoc[a].Modelext;
										sObject.Modelname = sFunctionalLoc[a].Modelname;
										sObject.Modelver = sFunctionalLoc[a].Modelver;

										if (sFunctionalLoc[a].Fltyp === "L" && results.FLLAM) {
											var sLAM = results.FLLAM.results;
											if (sLAM) {
												for (var z = 0; z < sLAM.length; z++) {
													if (sLAM[z].Funcloc === sFunctionalLoc[a].Tplnr) {
														sObject.lam = sLAM[z];
														sObject.lam.LrpidDesc = sLAM[z].LrpDescr;
														sObject.lam.LinUnitDesc = sLAM[z].Uomtext;
														break;
													}
												}
											}
										}

										if (results.FLClass) {
											var sClassFloc = results.FLClass.results;
											if (sClassFloc) {
												if (sClassFloc.length > 0) {
													for (var b = 0; b < sClassFloc.length; b++) {
														if (sObject.Tplnr === sClassFloc[b].Funcloc) {
															sClassFloc[b].ctEnable = false;
															sClassFloc[b].classEnable = false;
															sClassFloc[b].ClassTypeDesc = sClassFloc[b].Artxt;
															delete sClassFloc[b].Artxt;
															sClassFloc[b].ClassDesc = sClassFloc[b].Kltxt;
															delete sClassFloc[b].Kltxt;
															delete sClassFloc[b].Changerequestid;
															delete sClassFloc[b].Clint;
															delete sClassFloc[b].Service;
															pApproveObject.classItems.push(sClassFloc[b]);
														}
													}
												}
											}
										}

										if (results.FLVal) {
											var sCharFLOC = results.FLVal.results;
											if (sCharFLOC) {
												if (sCharFLOC.length > 0) {
													for (var c = 0; c < sCharFLOC.length; c++) {
														if (sObject.Tplnr === sCharFLOC[c].Funcloc) {
															sCharFLOC[c].cNameEnable = false;
															sCharFLOC[c].Textbz = sCharFLOC[c].Atwtb;
															delete sCharFLOC[c].Ataut;
															delete sCharFLOC[c].Ataw1;
															delete sCharFLOC[c].Atawe;
															delete sCharFLOC[c].Atcod;
															delete sCharFLOC[c].Atflb;
															delete sCharFLOC[c].Atflv;
															delete sCharFLOC[c].Atimb;
															delete sCharFLOC[c].Atsrt;
															delete sCharFLOC[c].Atvglart;
															delete sCharFLOC[c].Atzis;
															delete sCharFLOC[c].Changerequestid;
															delete sCharFLOC[c].Charid;
															delete sCharFLOC[c].Classtype;
															delete sCharFLOC[c].Service;
															delete sCharFLOC[c].Valcnt;
															sCharFLOC[c].slNo = c + 1; // ()
															sCharFLOC[c].flag = sCharFLOC[c].Class + "-" + sCharFLOC[c].slNo; // ()
															pApproveObject.characteristics.push(sCharFLOC[c]);
														}
													}
												}
											}
										}

										if (results.FLLAMCH) {
											var alinearChar = results.FLLAMCH.results;
											if (alinearChar) {
												if (alinearChar.length > 0) {
													for (var j = 0; j < alinearChar.length; j++) {
														if (sObject.Functionallocation === alinearChar[j].Funcloc) {
															alinearChar[j].linCharEnable = true;
															pApproveObject.linearChar.push(alinearChar[j]);
														}
													}
													// if (g.linearChar && g.linearChar.getId().includes("detailFloc") === true) {
													// 	g.linearChar.setModel(new JSONModel(sModelData.linearChar));
													// }
												}
											}
										}

										if (results.FLPrtnr) {
											var sPartnerData = results.FLPrtnr.results;
											if (sPartnerData) {
												if (sPartnerData.length > 0) {
													for (var d = 0; d < sPartnerData.length; d++) {
														if (sObject.Tplnr === sPartnerData[d].Funcloc) {
															var sPartnerObj = {};
															sPartnerObj.Partnerfn = sPartnerData[d].Partnerfn;
															sPartnerObj.Partner = sPartnerData[d].Partner;
															sPartnerObj.Namedisp = sPartnerData[d].Namedisp;
															sPartnerObj.Addressfl = sPartnerData[d].Addressfl;
															sPartnerObj.Address = sPartnerData[d].Address;
															sPartnerObj.Partnrfuntxt = sPartnerData[d].Partnrfuntxt;
															sObject.Partners.push(sPartnerObj);
														}
													}
												}
											}
										}

										if (results.FLPermit) {
											var sPermitData = results.FLPermit.results;
											if (sPermitData) {
												if (sPermitData.length > 0) {
													for (var e = 0; e < sPermitData.length; e++) {
														if (sObject.Tplnr === sPermitData[e].Funcloc) {
															var sPermitObj = {};
															sPermitObj.Permit = sPermitData[e].Permit;
															sPermitObj.Permittxt = sPermitData[e].Permittxt;
															sPermitObj.Permitcat = sPermitData[e].Permitcat;
															sPermitObj.Ordercomp = sPermitData[e].Ordercomp;
															sPermitObj.Orderrel = sPermitData[e].Orderrel;
															sPermitObj.Printper = sPermitData[e].Printper;
															sPermitObj.Proposper = sPermitData[e].Proposper;
															sPermitObj.Ltxtper = sPermitData[e].Ltxtper;
															sPermitObj.Chbltyper = sPermitData[e].Chbltyper;
															sPermitObj.PermitLt = sPermitData[e].PermitLt;
															sObject.Permits.push(sPermitObj);
														}
													}
												}
											}
										}

										if (results.FLAddr) {
											if (results.FLAddr.results) {
												var sAddressFloc = results.FLAddr.results;
												if (sAddressFloc) {
													if (sAddressFloc.length > 0) {
														for (var f = 0; f < sAddressFloc.length; f++) {
															if (sObject.Tplnr === sAddressFloc[f].Funcloc) {
																pApproveObject.Title = sAddressFloc[f].Titletxt;
																pApproveObject.Name1 = sAddressFloc[f].Name1;
																pApproveObject.Name2 = sAddressFloc[f].Name2;
																pApproveObject.Name3 = sAddressFloc[f].Name3;
																pApproveObject.Name4 = sAddressFloc[f].Name4;
																pApproveObject.Sort1 = sAddressFloc[f].Sort1; // searchTerm1
																pApproveObject.Sort2 = sAddressFloc[f].Sort2; // searchTerm2
																pApproveObject.NameCo = sAddressFloc[f].NameCo; // Company 
																pApproveObject.Building = sAddressFloc[f].Building;
																pApproveObject.Floor = sAddressFloc[f].Floor;
																pApproveObject.Roomnum = sAddressFloc[f].Roomnum;
																pApproveObject.Street = sAddressFloc[f].Street;
																pApproveObject.HouseNr1 = sAddressFloc[f].HouseNr1;
																pApproveObject.HouseNr2 = sAddressFloc[f].HouseNr2;
																pApproveObject.Strsuppl1 = sAddressFloc[f].Strsuppl1;
																pApproveObject.Strsuppl2 = sAddressFloc[f].Strsuppl2;
																pApproveObject.Strsuppl3 = sAddressFloc[f].Strsuppl3;
																pApproveObject.AddrLocation = sAddressFloc[f].Location;
																pApproveObject.District = sAddressFloc[f].District;
																pApproveObject.PostCod1 = sAddressFloc[f].PostCod1;
																pApproveObject.City1 = sAddressFloc[f].City1; // City
																pApproveObject.RPostafl = sAddressFloc[f].RPostafl;
																pApproveObject.Landx = sAddressFloc[f].Landx;
																pApproveObject.RfePost = sAddressFloc[f].RPostFl;
																pApproveObject.Regiotxt = sAddressFloc[f].Regiotxt;
																pApproveObject.HomeCity = sAddressFloc[f].HomeCity;
																pApproveObject.TimeZone = sAddressFloc[f].TimeZone;
																pApproveObject.Taxjurcod = sAddressFloc[f].Taxjurcod;
																pApproveObject.Regiogrou = sAddressFloc[f].Regiogrou;
																pApproveObject.RfePostl = sAddressFloc[f].RfePostl;
																pApproveObject.Dontusestxt = sAddressFloc[f].Dontusestxt;
																pApproveObject.PoBox = sAddressFloc[f].PoBox;
																pApproveObject.PoboxNum = sAddressFloc[f].PoboxNum;
																pApproveObject.DlvsrvTy = sAddressFloc[f].DlvsrvTy;
																pApproveObject.DlvsrvNr = sAddressFloc[f].DlvsrvNr;
																pApproveObject.PostCod2 = sAddressFloc[f].PostCod2;
																pApproveObject.PoboxLoc = sAddressFloc[f].PoboxLoc;
																pApproveObject.PoboxLby = sAddressFloc[f].PoboxLby;
																pApproveObject.PoboxCty = sAddressFloc[f].PoboxCty;
																pApproveObject.LandxP = sAddressFloc[f].LandxP;
																pApproveObject.RfePstal = sAddressFloc[f].RPstaFl;
																pApproveObject.RegiotxtP = sAddressFloc[f].RegiotxtP;
																pApproveObject.Dontuseptxt = sAddressFloc[f].Dontuseptxt;
																pApproveObject.PostCod3 = sAddressFloc[f].PostCod3;
																pApproveObject.Remark = sAddressFloc[f].Remark;
															}
														}
													}
												}
											}
										}

										var aIntlAddr = results.FLAddrI.results;
										if (aIntlAddr) {
											for (var z = 0; z < aIntlAddr.length; z++) {
												if (aIntlAddr[z].Funcloc === sObject.Tplnr) {
													aIntlAddr[z].AdNationEnable = false;
													aIntlAddr[z].City1iVS = "None";
													aIntlAddr[z].StreetiVS = "None";
													pApproveObject.intlAddr.push(aIntlAddr[z]);
												}
											}
										}

										var aAltLbl = results.FLALTLBEL.results;
										if (aAltLbl) {
											for (var y = 0; y < aAltLbl.length; y++) {
												if (aAltLbl[y].Funcloc === sObject.Tplnr) {
													var oAltLbl = {
														"Funcloc": aAltLbl[y].Funcloc,
														"AltAlkey": aAltLbl[y].AltAlkey, // Labeling system
														"Altxt": aAltLbl[y].Altxt, // Labeling system descr
														"AltStrno": aAltLbl[y].AltStrno, // Alternative Label
														"AltTplkz": aAltLbl[y].AltTplkz, // Strycture Indicator
														"Tplxt": aAltLbl[y].Tplxt, // Structure Indicator Descr
														"Name1i": aAltLbl[y].Editm, // Edit Mask
														"Actvs": aAltLbl[y].Actvs, // Active
														"AltPrkey": aAltLbl[y].AltPrkey, // Primary
														"AltReuse": aAltLbl[y].AltReuse, // Reusable

														"enableLblSys": false,
														"enableAltLbl": false,
														"enableStrInd": false,

														"LblSysVS": "None",
														"AltLblVS": "None",
														"StrIndVS": "None"
													};
													sObject.altlbl.push(oAltLbl);
												}
											}
										}

										if (results.FLEmail) {
											if (results.FLEmail.results) {
												var sEmailData = results.FLEmail.results;
												if (sEmailData) {
													if (sEmailData.length > 0) {
														for (var h = 0; h < sEmailData.length; h++) {
															if (sObject.Tplnr === sEmailData[h].Funcloc) {
																var sEmailObj = {};
																sEmailObj.EAddress = sEmailData[h].EAddress;
																sEmailObj.EFlgdeft = sEmailData[h].EFlgdeft;
																sEmailObj.EFlgnous = sEmailData[h].EFlgnous;
																pApproveObject.emailAddress.push(sEmailObj);
															}
														}
													}
												}
											}
										}

										if (results.FLUrl) {
											if (results.FLUrl.results) {
												var sUrlData = results.FLUrl.results;
												if (sUrlData) {
													if (sUrlData.length > 0) {
														for (var l = 0; l < sUrlData.length; l++) {
															if (sObject.Tplnr === sUrlData[l].Funcloc) {
																var sUrlObj = {};
																sUrlObj.Uritypetxt = sUrlData[l].Uritypetxt;
																sUrlObj.UAddress = sUrlData[l].UAddress;
																sUrlObj.UFlgdeft = sUrlData[l].UFlgdeft;
																sUrlObj.UFlgnous = sUrlData[l].UFlgnous;
																pApproveObject.urlAddress.push(sUrlObj);
															}
														}
													}
												}
											}
										}

										if (results.FLTele) {
											if (results.FLTele.results) {
												var sTelData = results.FLTele.results;
												if (sTelData) {
													if (sTelData.length > 0) {
														for (var m = 0; m < sTelData.length; m++) {
															if (sObject.Tplnr === sTelData[m].Funcloc) {
																var sTelObj = {};
																sTelObj.Teltype = sTelData[m].Teltype;
																sTelObj.TCountry = sTelData[m].TCountry;
																sTelObj.Telefto = sTelData[m].Telefto;
																sTelObj.TNumber = sTelData[m].TNumber;
																sTelObj.TExtens = sTelData[m].TExtens;
																sTelObj.TFlgsms = sTelData[m].TFlgsms;
																sTelObj.TFlgdeft = sTelData[m].TFlgdeft;
																sTelObj.TFlgnous = sTelData[m].TFlgnous;
																pApproveObject.telephoneData.push(sTelObj);
															}
														}
													}
												}
											}
										}

										if (results.FLFax) {
											if (results.FLFax.results) {
												var sFaxData = results.FLFax.results;
												if (sFaxData) {
													if (sFaxData.length > 0) {
														for (var n = 0; n < sFaxData.length; n++) {
															if (sObject.Tplnr === sFaxData[n].Funcloc) {
																var sFaxObj = {};
																sFaxObj.FCountry = sFaxData[n].FCountry;
																sFaxObj.Telefto = sFaxData[n].Telefto;
																sFaxObj.FNumber = sFaxData[n].FNumber;
																sFaxObj.FExtens = sFaxData[n].FExtens;
																sFaxObj.FFlgdeft = sFaxData[n].FFlgdeft;
																sFaxObj.FFlgnous = sFaxData[n].FFlgnous;
																pApproveObject.faxData.push(sFaxObj);
															}
														}
													}
												}
											}
										}

										if (sFunctionalLoc[a].Modelname !== "") {
											oAIWModel.modelName = sFunctionalLoc[a].Modelname;
											oAIWModel.modelDesc = sFunctionalLoc[a].Modeldesc;
											oAIWModel.modelVer = sFunctionalLoc[a].Modelver;
											oAIWModel.modelParKey = sFunctionalLoc[a].FlocRef;

											var mAIWModel = new JSONModel(oAIWModel);
											g.getView().setModel(mAIWModel, "AIWModel");
										}

										g.setCommonApprovalData(g.oModelAIWFLOC, pApproveObject, true);
										g.handleCreatePress(g, sObject, g.oModelAIWFLOC);
									}
								}
							}
						}

						if (sType === "EQUITab") {
							AIWEQUIModel = sap.ui.getCore().getModel(g.oModelAIWEQUI).getData();
							if (AIWEQUIModel.length > 0) {
								return;
							}
							if (results.Equipment) {
								var sEquipment = results.Equipment.results;
								if (sEquipment) {
									for (var o = 0; o < sEquipment.length; o++) {
										pApproveObject = {
											intlAddr: [],
											classItems: [],
											characteristics: [],
											linearChar: [],
											emailAddress: [],
											urlAddress: [],
											telephoneData: [],
											faxData: []
										};
										sObject = {
											PRTInfo: {},
											dfps: {},
											FLEET: {},
											Stock: {},
											Partners: [], // Partners
											Permits: [], // Permit
											attachmentCount: "0", // Attachment Count
											Guids: "", // Attachment
											ConstrTypeMaxL: 0,
											charValueMaxL: 0,
											EqunrEnabled: false,
											EquipCatEnabled: false,
											MaintplantEnabled: false,
											BukrsEnabled: false,
											TplnrEnabled: false,
											SuperordinateEquipEnabled: false,
											DFPS: {}
										};

										sObject.Equnr = sEquipment[o].Equnr;
										sObject.Eqktx = sEquipment[o].Txtmi;
										// sObject.Eqktx = sEquipment[o].Eqktx;
										sObject.EquipmentCatogory = sEquipment[o].Eqtyp;
										sObject.EquipCatgDescription = sEquipment[o].Etytx;
										sObject.ValidFrom = sEquipment[o].DataEeqz;
										sObject.DatbEeqz = sEquipment[o].DatbEeqz;
										sObject.LvormEqi = sEquipment[o].LvormEqi;
										sObject.Deact = sEquipment[o].Deact;
										sObject.DeactEnable = false;
										sObject.Stattext = sEquipment[o].Stattext; // System Status
										sObject.UstaEqui = sEquipment[o].UstaEqui; // User Status
										sObject.StsmEqui = sEquipment[o].StsmEqui; // Status Profile
										sObject.StsmEquiDesc = sEquipment[o].Statproftxt; // Status Profile Description
										sObject.UstwEqui = sEquipment[o].UstwEqui; // Status with Status Number
										sObject.UswoEqui = sEquipment[o].UswoEqui; // Status without Status Number
										sObject.TechnicalObjectTyp = sEquipment[o].Eqart; // TechnicalObjectTyp
										sObject.Description = sEquipment[o].Eartx; // TechnicalObjectTyp Description
										sObject.AuthorizGroup = sEquipment[o].Begru;
										sObject.Begtx = sEquipment[o].Begtx;
										sObject.GrossWt = sEquipment[o].Brgew;
										sObject.Gewei = sEquipment[o].Gewei;
										sObject.Invnr = sEquipment[o].Invnr;
										sObject.GroesEqu = sEquipment[o].GroesEqu;
										sObject.Inbdt = sEquipment[o].Inbdt;
										sObject.Answt = sEquipment[o].Answt;
										sObject.Waers = sEquipment[o].Waers; // Currency
										sObject.Ansdt = sEquipment[o].Ansdt;
										sObject.Herst = sEquipment[o].Herst; // Manufacturer
										sObject.Typbz = sEquipment[o].Typbz; // Model Number
										sObject.MapaEeqz = sEquipment[o].MapaEeqz; // partNum
										sObject.Serge = sEquipment[o].Serge; // manfSerNo
										sObject.Herld = sEquipment[o].Herld;
										sObject.CountryName = sEquipment[o].CountryName;
										sObject.ConstructYear = sEquipment[o].Baujj;
										sObject.ConstructMth = sEquipment[o].BaummEqi;
										sObject.MonthName = sEquipment[o].MonthName;
										sObject.Maintplant = sEquipment[o].Swerk;
										sObject.MaintplantDesc = sEquipment[o].Name1;
										sObject.Location = sEquipment[o].StorEilo; // Location
										sObject.Locationdesc = sEquipment[o].Locationdesc; // Location Description
										sObject.MsgrEilo = sEquipment[o].MsgrEilo;
										sObject.Abckz = sEquipment[o].AbckEilo;
										sObject.Abctx = sEquipment[o].Abctx;
										sObject.BeberFl = sEquipment[o].BebeEilo; // Plant Section
										sObject.Fing = sEquipment[o].Fing; // Plant Section
										sObject.Tele = sEquipment[o].Tele; // Plant Section
										sObject.EqfnEilo = sEquipment[o].EqfnEilo;
										sObject.Bukrs = sEquipment[o].BukrEilo;
										sObject.Butxt = sEquipment[o].Butxt;
										sObject.GsbeEilo = sEquipment[o].GsbeEilo;
										sObject.Gtext = sEquipment[o].Gtext;
										sObject.Anl1Eilo = sEquipment[o].Anl1Eilo;
										sObject.Anl2Eilo = sEquipment[o].Anl2Eilo;
										sObject.AssesmentDesc = sEquipment[o].Txt50;
										sObject.Kostl = sEquipment[o].KostEilo; // Cost Center
										sObject.Kokrs = sEquipment[o].KokrEilo; // ccPart1
										sObject.Mctxt = sEquipment[o].Contareaname; // Name
										sObject.Posid = sEquipment[o].Posid;
										sObject.Post1 = sEquipment[o].Post1;
										sObject.DaufEilo = sEquipment[o].DaufEilo;
										sObject.Standorderdesc = sEquipment[o].Standorderdesc;
										sObject.Settlement = sEquipment[o].AufnEilo;
										sObject.SettleOrdDesc = sEquipment[o].SettleOrdDesc;
										sObject.Werks = sEquipment[o].PplaEeqz; // Planning Plant
										sObject.Planningplantdes = sEquipment[o].Planningplantdes; // Planning Plant Description
										sObject.Ingrp = sEquipment[o].IngrEeqz; // Planner Group
										sObject.Innam = sEquipment[o].Plannergrpdesc; // Planner Group Description
										sObject.Arbpl = sEquipment[o].ArbpEilo; // Work Center
										sObject.Ktext = sEquipment[o].Workcenterdesc; // Work Center Description
										sObject.WcWerks = sEquipment[o].WorkCenterPlant; // Work center Plant
										sObject.MainArbpl = sEquipment[o].ArbpEeqz; // Main Work Center
										sObject.MainKtext = sEquipment[o].MainWcDesc; // Plant Work Center
										sObject.MainWerks = sEquipment[o].MainWcPlant; // Name
										sObject.RbnrEeqz = sEquipment[o].RbnrEeqz;
										sObject.CatalogProfDesc = sEquipment[o].Rbnrx;
										sObject.SuperordinateEquip = sEquipment[o].HequEeqz; // Superord. Equipment
										sObject.SuperordinateEquipDesc = sEquipment[o].SuperordEqDes; // Superord. Equipment Description
										sObject.EquipPosition = sEquipment[o].HeqnEeqz; // Position
										sObject.Liznr = sEquipment[o].Liznr;

										sObject.TechIdNum = sEquipment[o].TidnEeqz; // techIndNo
										sObject.ConstrType = sEquipment[o].SubmEeqz; // Construction Type
										sObject.ConstructionDesc = sEquipment[o].Constdesc; // Construction Description

										if (sEquipment[o].Eqtyp !== "P") {
											sObject.Tplnr = sEquipment[o].TplnEilo; // Functional Location
											sObject.Pltxt = sEquipment[o].Flocdescription; // Functional Location Description
										} else {
											sObject.Tplnr = "";
											sObject.Pltxt = "";
										}

										// Serialization Data
										sObject.MatEqu = sEquipment[o].MatEqu;
										sObject.Materialdesc = sEquipment[o].Materialdesc;
										sObject.Sernr = sEquipment[o].Sernr;
										sObject.Lsernr = sEquipment[o].Lsernr;

										// Configuration Data
										sObject.Kmatn = sEquipment[o].Kmatn;
										sObject.Funcid = sEquipment[o].Funcid;
										sObject.Frcfit = sEquipment[o].Frcfit;
										sObject.Frcrmv = sEquipment[o].Frcrmv;
										sObject.SubmEeqz = sEquipment[o].SubmEeqz;

										// Sales and Distribution
										sObject.Vkorg = sEquipment[o].Vkorg;
										sObject.Vkorgtxt = sEquipment[o].Vkorgtxt;
										sObject.Vtweg = sEquipment[o].Vtweg;
										sObject.Vtwegtxt = sEquipment[o].Vtwegtxt;
										sObject.Spart = sEquipment[o].Spart;
										sObject.Sparttxt = sEquipment[o].Sparttxt;
										sObject.Vkbur = sEquipment[o].Vkbur;
										sObject.Vkburtxt = sEquipment[o].Vkburtxt;
										sObject.Vkgrp = sEquipment[o].Vkgrp;
										sObject.Vkgrptxt = sEquipment[o].Vkgrptxt;

										// Customer Warranty
										sObject.CgwldtEq = sEquipment[o].CgwldtEq;
										sObject.CgwlenEq = sEquipment[o].CgwlenEq;
										sObject.CmganrEq = sEquipment[o].CmganrEq;
										sObject.CwagetEq = sEquipment[o].CwagetEq;
										sObject.CgaerbEq = sEquipment[o].CgaerbEq;

										// Vendor/Manufacturer Warranty
										sObject.VgwldtEq = sEquipment[o].VgwldtEq;
										sObject.VgwlenEq = sEquipment[o].VgwlenEq;
										sObject.VmganrEq = sEquipment[o].VmganrEq;
										sObject.VwagetEq = sEquipment[o].VwagetEq;
										sObject.VgaerbEq = sEquipment[o].VgaerbEq;

										// Customer Vendor Information
										sObject.EliefEqi = sEquipment[o].EliefEqi;
										sObject.Kun1Eeqz = sEquipment[o].Kun1Eeqz;
										sObject.Pstlz1 = sEquipment[o].Pstlz1;
										sObject.City1 = sEquipment[o].City1;
										sObject.Kun2Eeqz = sEquipment[o].Kun2Eeqz;
										sObject.Pstlz2 = sEquipment[o].Pstlz2;
										sObject.City2 = sEquipment[o].City2;
										sObject.Kun3Eeqz = sEquipment[o].Kun3Eeqz;
										sObject.Pstlz3 = sEquipment[o].Pstlz3;
										sObject.City3 = sEquipment[o].City3;
										sObject.AuldtEqi = sEquipment[o].AuldtEqi;
										sObject.PstcdCcust = sEquipment[o].PstcdCcust;
										sObject.LocatCcust = sEquipment[o].LocatCcust;
										sObject.KundeEq = sEquipment[o].KundeEq;
										sObject.Insdate = sEquipment[o].Insdate === null ? "" : sEquipment[o].Insdate;
										sObject.Instime = formatter.getTime(sEquipment[o].Instime);

										sObject.Modelid = sEquipment[o].Modelid;
										sObject.Modelname = sEquipment[o].Modelnam;
										sObject.ModelDescription = sEquipment[o].ModelDescription;
										sObject.Template = sEquipment[o].Template;
										sObject.GlobalId = sEquipment[o].GlobalId;
										sObject.Manuf = sEquipment[o].Manuf;
										sObject.IsModel = sEquipment[o].IsModel;
										sObject.CopyFrom = sEquipment[o].CopyFrom;
										sObject.Modelid = sEquipment[o].Modelid;
										sObject.Ppeguid = sEquipment[o].Ppeguid;

										if (sEquipment[o].Eqtyp === "L" && results.EqLAM) {
											var sLAM = results.EqLAM.results;
											if (sLAM) {
												for (var z = 0; z < sLAM.length; z++) {
													if (sLAM[z].Equi === sEquipment[o].Equnr) {
														sObject.lam = sLAM[z];
														sObject.lam.LrpidDesc = sLAM[z].LrpDescr;
														sObject.lam.LinUnitDesc = sLAM[z].Uomtext;
														break;
													}
												}
											}
										}

										if (results.EqClass) {
											var sClassEqui = results.EqClass.results;
											if (sClassEqui) {
												if (sClassEqui.length > 0) {
													for (var p = 0; p < sClassEqui.length; p++) {
														if (sObject.Equnr === sClassEqui[p].Equi) {
															sClassEqui[p].ctEnable = false;
															sClassEqui[p].classEnable = false;
															sClassEqui[p].ClassTypeDesc = sClassEqui[p].Artxt;
															delete sClassEqui[p].Artxt;
															sClassEqui[p].ClassDesc = sClassEqui[p].Kltxt;
															delete sClassEqui[p].Kltxt;
															delete sClassEqui[p].Changerequestid;
															delete sClassEqui[p].Clint;
															delete sClassEqui[p].Service;
															pApproveObject.classItems.push(sClassEqui[p]);
														}
													}
												}
											}
										}

										if (results.EqVal) {
											var sCharEQUI = results.EqVal.results;
											if (sCharEQUI) {
												if (sCharEQUI.length > 0) {
													for (var q = 0; q < sCharEQUI.length; q++) {
														if (sObject.Equnr === sCharEQUI[q].Equi) {
															sCharEQUI[q].cNameEnable = false;
															sCharEQUI[q].Textbz = sCharEQUI[q].Atwtb;
															delete sCharEQUI[q].Ataut;
															delete sCharEQUI[q].Ataw1;
															delete sCharEQUI[q].Atawe;
															delete sCharEQUI[q].Atcod;
															delete sCharEQUI[q].Atflb;
															delete sCharEQUI[q].Atflv;
															delete sCharEQUI[q].Atimb;
															delete sCharEQUI[q].Atsrt;
															delete sCharEQUI[q].Atvglart;
															delete sCharEQUI[q].Atzis;
															delete sCharEQUI[q].Changerequestid;
															delete sCharEQUI[q].Charid;
															delete sCharEQUI[q].Classtype;
															delete sCharEQUI[q].Service;
															delete sCharEQUI[q].Valcnt;
															sCharEQUI[q].slNo = c + 1; // ()
															sCharEQUI[q].flag = sCharEQUI[q].Class + "-" + sCharEQUI[q].slNo; // ()
															pApproveObject.characteristics.push(sCharEQUI[q]);
														}
													}
												}
											}
										}

										if (results.EqLAMCH) {
											var alinearChar = results.EqLAMCH.results;
											if (alinearChar) {
												if (alinearChar.length > 0) {
													for (var j = 0; j < alinearChar.length; j++) {
														if (sObject.Equnr === alinearChar[j].Equi) {
															alinearChar[j].linCharEnable = true;
															pApproveObject.linearChar.push(alinearChar[j]);
														}
													}
													// if (g.linearChar && g.linearChar.getId().includes("detailFloc") === true) {
													// 	g.linearChar.setModel(new JSONModel(sModelData.linearChar));
													// }
												}
											}
										}

										if (results.EqPRTNR) {
											var sPartnerEqData = results.EqPRTNR.results;
											if (sPartnerEqData) {
												if (sPartnerEqData.length > 0) {
													for (var r = 0; r < sPartnerEqData.length; r++) {
														if (sObject.Equnr === sPartnerEqData[r].Equi) {
															var sPartnerEqObj = {};
															sPartnerEqObj.Partnrfun = sPartnerEqData[r].Partnrfun;
															sPartnerEqObj.Partnereq = sPartnerEqData[r].Partnereq;
															sPartnerEqObj.NameList = sPartnerEqData[r].NameList;
															sPartnerEqObj.Aadind = sPartnerEqData[r].Aadind;
															sPartnerEqObj.Address = sPartnerEqData[r].Address;
															sPartnerEqObj.Partnrfuntxt = sPartnerEqData[r].Partnrfuntxt;
															sObject.Partners.push(sPartnerEqObj);
														}
													}
												}
											}
										}

										if (results.EqPermt) {
											var sPermitEqData = results.EqPermt.results;
											if (sPermitEqData) {
												if (sPermitEqData.length > 0) {
													for (var s = 0; s < sPermitEqData.length; s++) {
														if (sObject.Equnr === sPermitEqData[s].Equi) {
															var sPermitEqObj = {};
															sPermitEqObj.Countereq = sPermitEqData[s].Countereq;
															sPermitEqObj.Pmsog = sPermitEqData[s].Pmsog;
															sPermitEqObj.KAa = sPermitEqData[s].KAa;
															sPermitEqObj.KAf = sPermitEqData[s].KAf;
															sPermitEqObj.KDruck = sPermitEqData[s].KDruck;
															sPermitEqObj.KPro = sPermitEqData[s].KPro;
															sPermitEqObj.PmtLtext = sPermitEqData[s].PmtLtext;
															sObject.Permits.push(sPermitEqObj);
														}
													}
												}
											}
										}

										if (results.EqPRT) {
											if (results.EqPRT.results) {
												var sPrtData = results.EqPRT.results;
												if (sPrtData) {
													if (sPrtData.length > 0) {
														for (var t = 0; t < sPrtData.length; t++) {
															if (sObject.Equnr === sPrtData[t].Equi) {
																sObject.PRTInfo.PlanvPrt = sPrtData[t].PlanvPrt;
																sObject.PRTInfo.PlanvPrttxt = sPrtData[t].PlanvPrttxt;
																sObject.PRTInfo.Fgru1 = sPrtData[t].Fgru1;
																sObject.PRTInfo.Fgru2 = sPrtData[t].Fgru2;
																sObject.PRTInfo.Kzkbl = sPrtData[t].Kzkbl;
																sObject.PRTInfo.SteufPrt = sPrtData[t].SteufPrt;
																sObject.PRTInfo.SteufPrttxt = sPrtData[t].SteufPrttxt;
																sObject.PRTInfo.SteufRef = sPrtData[t].SteufRef;
																sObject.PRTInfo.KtschPrt = sPrtData[t].KtschPrt;
																sObject.PRTInfo.KtschPrttxt = sPrtData[t].KtschPrttxt;
																sObject.PRTInfo.Ktschref = sPrtData[t].Ktschref;
																sObject.PRTInfo.Ewformprt = sPrtData[t].Ewformprt;
																sObject.PRTInfo.Ewformprttxt = sPrtData[t].Ewformprttxt;
																sObject.PRTInfo.Ewformref = sPrtData[t].Ewformref;
																sObject.PRTInfo.Bzoffbprt = sPrtData[t].Bzoffbprt;
																sObject.PRTInfo.Bzoffbprttxt = sPrtData[t].Bzoffbprttxt;
																sObject.PRTInfo.Bzoffbref = sPrtData[t].Bzoffbref;
																sObject.PRTInfo.Offstb = sPrtData[t].Offstb;
																sObject.PRTInfo.Ehoffbprt = sPrtData[t].Ehoffbprt;
																sObject.PRTInfo.Offstbref = sPrtData[t].Offstbref;
																sObject.PRTInfo.Bzoffeprt = sPrtData[t].Bzoffeprt;
																sObject.PRTInfo.Bzoffeprttxt = sPrtData[t].Bzoffeprttxt;
																sObject.PRTInfo.Offsteref = sPrtData[t].Offsteref;
																sObject.PRTInfo.Offste = sPrtData[t].Offste;
																sObject.PRTInfo.Ehoffeprt = sPrtData[t].Ehoffeprt;
																sObject.PRTInfo.Offsteref = sPrtData[t].Offsteref;
																sObject.PRTInfo.Warpl = sPrtData[t].Warpl;
																sObject.PRTInfo.PointEq = sPrtData[t].PointEq;
															}
														}
													}
												}
											}
										}
										if (results.EqFleet) {
											if (results.EqFleet.results) {
												var sFleet = results.EqFleet.results;
												if (sFleet) {
													if (sFleet.length > 0) {
														for (var uf = 0; uf < sFleet.length; uf++) {
															if (sObject.Equnr === sFleet[uf].Equi) {
																sObject.FLEET.FleetCat = sFleet[uf].FleetCat;
																sObject.FLEET.FleetNum = sFleet[uf].FleetNum;
																sObject.FLEET.LicenseN = sFleet[uf].LicenseN;
																sObject.FLEET.ValidityEndDate = formatter.getDateFormat(sFleet[uf].ExpiryDt);
																sObject.FLEET.FleetVin = sFleet[uf].FleetVin;
																sObject.FLEET.Chasisnum = sFleet[uf].Chasisnum;

																sObject.FLEET.FleetHgt = sFleet[uf].FleetHgt;
																sObject.FLEET.DimUnit = sFleet[uf].DimUnit;
																sObject.FLEET.FleetWid = sFleet[uf].FleetWid;
																sObject.FLEET.FleetLen = sFleet[uf].FleetLen;

																sObject.FLEET.BrgewFt = sFleet[uf].BrgewFt;
																sObject.FLEET.GeweiFt = sFleet[uf].GeweiFt;
																sObject.FLEET.GrossWgt = sFleet[uf].GrossWgt;
																sObject.FLEET.LoadWgt = sFleet[uf].LoadWgt;
																sObject.FLEET.LoadVol = sFleet[uf].LoadVol;
																sObject.FLEET.VolUnit = sFleet[uf].VolUnit;
																sObject.FLEET.LoadHgt = sFleet[uf].LoadHgt;
																sObject.FLEET.Lddimunit = sFleet[uf].Lddimunit;
																sObject.FLEET.LoadWid = sFleet[uf].LoadWid;
																sObject.FLEET.LoadLen = sFleet[uf].LoadLen;
																sObject.FLEET.Nocompart = sFleet[uf].Nocompart;

																sObject.FLEET.FleetUse = sFleet[uf].FleetUse;
																sObject.FLEET.CardNum = sFleet[uf].CardNum;
																sObject.FLEET.KeyNum = sFleet[uf].KeyNum;
																sObject.FLEET.NumAxle = sFleet[uf].NumAxle;
																sObject.FLEET.Maxoccupa = sFleet[uf].Maxoccupa;

																sObject.FLEET.FuelPri = sFleet[uf].FuelPri;
																sObject.FLEET.FuelSec = sFleet[uf].FuelSec;
																sObject.FLEET.OilType = sFleet[uf].OilType;
																sObject.FLEET.Consumpmv = sFleet[uf].Consumpmv;
																sObject.FLEET.Consumptl = sFleet[uf].Consumptl;
																sObject.FLEET.PriCalc = sFleet[uf].PriCalc;

																sObject.FLEET.Enginetyp = sFleet[uf].Enginetyp;
																sObject.FLEET.Enginesnr = sFleet[uf].Enginesnr;
																sObject.FLEET.SpeedMax = sFleet[uf].SpeedMax;
																sObject.FLEET.Enginepow = sFleet[uf].Enginepow;
																sObject.FLEET.Revlutons = sFleet[uf].Revlutons;
																sObject.FLEET.Enginecap = sFleet[uf].Enginecap;
																sObject.FLEET.Enginecyl = sFleet[uf].Enginecyl;

																sObject.FLEET.ReplaDt = formatter.getDateFormat(sFleet[uf].ReplaDt);
																sObject.FLEET.Enginecyl = sFleet[uf].Enginecyl;
																sObject.FLEET.Enginecyl = sFleet[uf].Enginecyl;
																sObject.FLEET.Replaodom = sFleet[uf].Replaodom;
																sObject.FLEET.ReplaOph = sFleet[uf].ReplaOph;
															}
														}
													}
												}
											}
										}

										if (results.EqDFPS) {
											if (results.EqDFPS.results) {
												var sDpfs = results.EqDFPS.results;
												if (sDpfs) {
													if (sDpfs.length > 0) {
														for (var ud = 0; ud < sDpfs.length; ud++) {
															if (sObject.Equnr === sDpfs[ud].Equi) {
																sObject.DFPS.MeOwner = sDpfs[ud].MeOwner;
																sObject.DFPS.MeUser = sDpfs[ud].MeUser;
																sObject.DFPS.DeviceId = sDpfs[ud].DeviceId;
																sObject.DFPS.Topsiteid = sDpfs[ud].Topsiteid;
																sObject.DFPS.Topsitede = sDpfs[ud].Topsitede;
																sObject.DFPS.SiteId = sDpfs[ud].SiteId;
																sObject.DFPS.SiteDesc = sDpfs[ud].SiteDesc;
																sObject.DFPS.MpoId = sDpfs[ud].MpoId;
																sObject.DFPS.MpoDescr = sDpfs[ud].MpoDescr;
																sObject.DFPS.RicId = sDpfs[ud].RicId;
																sObject.DFPS.RicDescr = sDpfs[ud].RicDescr;
																sObject.DFPS.ModelId = sDpfs[ud].ModelId;
																sObject.DFPS.ModelDes = sDpfs[ud].ModelDes;
																sObject.DFPS.Foreignob = sDpfs[ud].Foreignob;
																sObject.DFPS.TecState = sDpfs[ud].TecState;
																sObject.DFPS.DepState = sDpfs[ud].DepState;
																sObject.DFPS.DfpsRmrk = sDpfs[ud].DfpsRmrk;
															}
														}
													}
												}
											}
										}
										// if (results.EqDFPS) {
										// 	if (results.EqDFPS.results) {
										// 		var sDpfs = results.EqDFPS.results;
										// 		if (sDpfs) {
										// 			if (sDpfs.length > 0) {
										// 				for (var ud = 0; ud < sDpfs.length; ud++) {
										// 					if (sObject.Equnr === sDpfs[ud].Equi) {
										// 						sObject.dfps.MeOwner = sDpfs[ud].MeOwner;
										// 						sObject.dfps.MeUser = sDpfs[ud].MeUser;
										// 						sObject.dfps.Tailno = sDpfs[ud].DeviceId;
										// 						sObject.dfps.Area = sDpfs[ud].Topsiteid;
										// 						sObject.dfps.AreaDesc = sDpfs[ud].Topsitede;
										// 						sObject.dfps.AreaPro = sDpfs[ud].AreaPrfl;
										// 						sObject.dfps.Site = sDpfs[ud].SiteId;
										// 						sObject.dfps.SiteDesc = sDpfs[ud].SiteDesc;
										// 						sObject.dfps.MPO = sDpfs[ud].MpoId;
										// 						sObject.dfps.MPODesc = sDpfs[ud].MpoDescr;
										// 						sObject.dfps.RIC = sDpfs[ud].RicId;
										// 						sObject.dfps.RICDesc = sDpfs[ud].RicDescr;
										// 						sObject.dfps.ModelId = sDpfs[ud].ModelId;
										// 						sObject.dfps.ModelIdDesc = sDpfs[ud].ModelDes;
										// 						sObject.dfps.ForeignEq = formatter.XtoTrue(sDpfs[ud].Foreignob);
										// 						sObject.dfps.TechSts = sDpfs[ud].TecState;
										// 						sObject.dfps.OperSts = sDpfs[ud].DepState;
										// 						sObject.dfps.Remark = sDpfs[ud].DfpsRmrk;
										// 					}
										// 				}
										// 			}
										// 		}
										// 	}
										// }

										if (results.EqStock) {
											if (results.EqStock.results) {
												var sStock = results.EqStock.results[0];
												if (sStock) {
													if (sStock.length > 0) {
														for (var u = 0; u < sStock.length; u++) {
															if (sObject.Equnr === sStock[u].Equi) {
																sObject.Stock.Equilbbsa = sStock[u].Equilbbsa;
																sObject.Stock.BWerk = sStock[u].BWerk;
																sObject.Stock.BukrrsSk = sStock[u].BukrrsSk;
																sObject.Stock.Sloc2equi = sStock[u].Sloc2equi;
																sObject.Stock.Chrg2stk = sStock[u].Chrg2stk;
																sObject.Stock.Sobk2stk = sStock[u].Sobk2stk;
																sObject.Stock.Datlwb = formatter.getDateFormat(sStock[u].Datlwb);
																sObject.Stock.Kunnr = sStock[u].Kunnr;
																sObject.Stock.LifnrStc = sStock[u].LifnrStc;
																sObject.Stock.Kdauf = sStock[u].Kdauf;
																sObject.Stock.Kdpos = sStock[u].Kdpos;
																sObject.Stock.PsPspPn = sStock[u].PsPspPn;
															}
														}
													}
												}
											}
										}

										if (results.EqAddr) {
											if (results.EqAddr.results) {
												var sAddressEqui = results.EqAddr.results;
												if (sAddressEqui) {
													if (sAddressEqui.length > 0) {
														for (var v = 0; v < sAddressEqui.length; v++) {
															if (sObject.Equnr === sAddressEqui[v].Equi) {
																pApproveObject.Title = sAddressEqui[v].Titletxt;
																pApproveObject.Name1 = sAddressEqui[v].Name1;
																pApproveObject.Name2 = sAddressEqui[v].Name2;
																pApproveObject.Name3 = sAddressEqui[v].Name3;
																pApproveObject.Name4 = sAddressEqui[v].Name4;
																pApproveObject.Sort1 = sAddressEqui[v].Sort1; // searchTerm1
																pApproveObject.Sort2 = sAddressEqui[v].Sort2; // searchTerm2
																pApproveObject.NameCo = sAddressEqui[v].NameCo; // Company 
																pApproveObject.Building = sAddressEqui[v].Building;
																pApproveObject.Floor = sAddressEqui[v].Floor;
																pApproveObject.Roomnum = sAddressEqui[v].Roomnum;
																pApproveObject.Street = sAddressEqui[v].Street;
																pApproveObject.HouseNr1 = sAddressEqui[v].HouseNr1;
																pApproveObject.HouseNr2 = sAddressEqui[v].HouseNr2;
																pApproveObject.Strsuppl1 = sAddressEqui[v].Strsuppl1;
																pApproveObject.Strsuppl2 = sAddressEqui[v].Strsuppl2;
																pApproveObject.Strsuppl3 = sAddressEqui[v].Strsuppl3;
																pApproveObject.AddrLocation = sAddressEqui[v].Location;
																pApproveObject.District = sAddressEqui[v].District;
																pApproveObject.PostCod1 = sAddressEqui[v].PostCod1;
																pApproveObject.City1 = sAddressEqui[v].City1; // City
																pApproveObject.RPostafl = sAddressEqui[v].RefPosta;
																pApproveObject.Landx = sAddressEqui[v].Landx;
																pApproveObject.RfePost = sAddressEqui[v].RfePost;
																pApproveObject.Regiotxt = sAddressEqui[v].Regiotxt;
																pApproveObject.HomeCity = sAddressEqui[v].HomeCity;
																pApproveObject.TimeZone = sAddressEqui[v].TimeZone;
																pApproveObject.Taxjurcod = sAddressEqui[v].Taxjurcod;
																pApproveObject.Regiogrou = sAddressEqui[v].Regiogrou;
																pApproveObject.RfePostl = sAddressEqui[v].RfePostl;
																pApproveObject.Dontusestxt = sAddressEqui[v].Dontusestxt;
																pApproveObject.PoBox = sAddressEqui[v].PoBox;
																pApproveObject.PoboxNum = sAddressEqui[v].PoboxNum;
																pApproveObject.DlvsrvTy = sAddressEqui[v].DlvsrvTy;
																pApproveObject.DlvsrvNr = sAddressEqui[v].DlvsrvNr;
																pApproveObject.PostCod2 = sAddressEqui[v].PostCod2;
																pApproveObject.PoboxLoc = sAddressEqui[v].PoboxLoc;
																pApproveObject.PoboxLby = sAddressEqui[v].PoboxLby;
																pApproveObject.PoboxCty = sAddressEqui[v].PoboxCty;
																pApproveObject.LandxP = sAddressEqui[v].LandxP;
																pApproveObject.RfePstal = sAddressEqui[v].RfePstal;
																pApproveObject.RegiotxtP = sAddressEqui[v].RegiotxtP;
																pApproveObject.Dontuseptxt = sAddressEqui[v].Dontuseptxt;
																pApproveObject.PostCod3 = sAddressEqui[v].PostCod3;
																pApproveObject.Remark = sAddressEqui[v].Remark;
															}
														}
													}
												}
											}
										}

										var aIntlAddr = results.EqAddrI.results;
										if (aIntlAddr) {
											for (var z = 0; z < aIntlAddr.length; z++) {
												if (aIntlAddr[z].Equi === sObject.Equnr) {
													aIntlAddr[z].AdNationEnable = false;
													aIntlAddr[z].City1iVS = "None";
													aIntlAddr[z].StreetiVS = "None";
													pApproveObject.intlAddr.push(aIntlAddr[z]);
												}
											}
										}

										var ainResults = results.AINHeaderinfo.results;
										if (ainResults) {
											for (var ai = 0; ai < ainResults.length; ai++) {
												var ainData = ainResults[0];
												// g.isAin = true;
												var oAin = {};
												oAin.Name = ainData.Name;
												oAin.Modelid = ainData.Modelid;
												oAin.Description = ainData.Description;
												oAin.Manufacturer = ainData.Manufacturer;
												oAin.Modeltemplate = ainData.Modeltemplate;
												oAin.Globalid = ainData.Globalid;
												oAin.moreInfo = true;
												oAin.linkVisible = false;
												oAin.deLinkVisible = false;
												oAin.equiCreate = sEquipment.AineqInd; //r.results[0].AineqInd;
												oAin.AinEqunr = sEquipment.AinEqunr; //data.results[0].AinEqunr;

												sap.ui.getCore().getModel("ainMOP").getData().push({
													key: sObject.Equnr,
													AIN: oAin
												});
											}
										}

										if (results.EqEmail) {
											if (results.EqEmail.results) {
												var sEmailEqData = results.EqEmail.results;
												if (sEmailEqData) {
													if (sEmailEqData.length > 0) {
														for (var w = 0; w < sEmailEqData.length; w++) {
															if (sObject.Equnr === sEmailEqData[w].Equi) {
																var sEmailEqObj = {};
																sEmailEqObj.EAddress = sEmailEqData[w].EAddress;
																sEmailEqObj.EFlgdeft = sEmailEqData[w].EFlgdeft;
																sEmailEqObj.EFlgnous = sEmailEqData[w].EFlgnous;
																pApproveObject.emailAddress.push(sEmailEqObj);
															}
														}
													}
												}
											}
										}

										if (results.EqUrl) {
											if (results.EqUrl.results) {
												var sUrlEqData = results.EqUrl.results;
												if (sUrlEqData) {
													if (sUrlEqData.length > 0) {
														for (var x = 0; x < sUrlEqData.length; x++) {
															if (sObject.Equnr === sUrlEqData[x].Equi) {
																var sUrlEqObj = {};
																sUrlEqObj.Uritypetxt = sUrlEqData[x].Uritypetxt;
																sUrlEqObj.UAddress = sUrlEqData[x].UAddress;
																sUrlEqObj.UFlgdeft = sUrlEqData[x].UFlgdeft;
																sUrlEqObj.UFlgnous = sUrlEqData[x].UFlgnous;
																pApproveObject.urlAddress.push(sUrlEqObj);
															}
														}
													}
												}
											}
										}

										if (results.EqTel) {
											if (results.EqTel.results) {
												var sTelEqData = results.EqTel.results;
												if (sTelEqData) {
													if (sTelEqData.length > 0) {
														for (var y = 0; y < sTelEqData.length; y++) {
															if (sObject.Equnr === sTelEqData[y].Equi) {
																var sTelEqObj = {};
																sTelEqObj.Teltype = sTelEqData[y].Teltype;
																sTelEqObj.TCountry = sTelEqData[y].TCountry;
																sTelEqObj.Telefto = sTelEqData[y].Telefto;
																sTelEqObj.TNumber = sTelEqData[y].TNumber;
																sTelEqObj.TExtens = sTelEqData[y].TExtens;
																sTelEqObj.TFlgsms = sTelEqData[y].TFlgsms;
																sTelEqObj.TFlgdeft = sTelEqData[y].TFlgdeft;
																sTelEqObj.TFlgnous = sTelEqData[y].TFlgnous;
																pApproveObject.telephoneData.push(sTelEqObj);
															}
														}
													}
												}
											}
										}

										if (results.EqFax) {
											if (results.EqFax.results) {
												var sFaxEqData = results.EqFax.results;
												if (sFaxEqData) {
													if (sFaxEqData.length > 0) {
														for (var z = 0; z < sFaxEqData.length; z++) {
															if (sObject.Equnr === sFaxEqData[z].Equi) {
																var sFaxEqObj = {};
																sFaxEqObj.FCountry = sFaxEqData[z].FCountry;
																sFaxEqObj.Telefto = sFaxEqData[z].Telefto;
																sFaxEqObj.FNumber = sFaxEqData[z].FNumber;
																sFaxEqObj.FExtens = sFaxEqData[z].FExtens;
																sFaxEqObj.FFlgdeft = sFaxEqData[z].FFlgdeft;
																sFaxEqObj.FFlgnous = sFaxEqData[z].FFlgnous;
																pApproveObject.faxData.push(sFaxEqObj);
															}
														}
													}
												}
											}
										}

										g.setCommonApprovalData(g.oModelAIWEQUI, pApproveObject, true);
										g.handleCreatePress(g, sObject, g.oModelAIWEQUI);
									}
								}
							}
						}

						if (sType === "MSPTTab") {
							AIWMSPTModel = sap.ui.getCore().getModel(g.oModelAIWMSPT).getData();
							if (AIWMSPTModel.length > 0) {
								return;
							}
							if (results.MSPoint) {
								var sMsPoint = results.MSPoint.results;
								if (sMsPoint) {
									for (var i = 0; i < sMsPoint.length; i++) {
										pApproveObject = {
											classItems: [],
											characteristics: []
										};
										sObject = {
											attachmentCount: "0", // Attachment Count
											Guids: "", // Attachment
											MspointEnabled: false,
											ObtypMsEnabled: false,
											EqunrEnabled: false,
											TplnrEnabled: false,
											MptypEnabled: false,
											AtnamMsEnabled: false,
											countEnable: true,
											tEnable: true,
											valCodeStuffSel: false
										};
										sObject.Mspoint = sMsPoint[i].Point;
										sObject.Psort = sMsPoint[i].Psort;
										sObject.Pttxt = sMsPoint[i].Pttxt;
										sObject.ObtypMs = sMsPoint[i].ObtypMs;
										sObject.Txt = sMsPoint[i].Objtypetxt;
										sObject.Equnr = sMsPoint[i].Equnr;
										sObject.Eqktx = sMsPoint[i].Eqktx;
										sObject.Tplnr = sMsPoint[i].Tplnr;
										sObject.Pltxt = sMsPoint[i].Floctxt;
										sObject.Mptyp = sMsPoint[i].Mptyp;
										sObject.Mpttx = sMsPoint[i].Mpttx;
										sObject.Inact = sMsPoint[i].Inact;
										sObject.AtnamMs = sMsPoint[i].AtnamMs;
										sObject.Atbez = sMsPoint[i].Atbez;
										sObject.Mseh6 = sMsPoint[i].Mseh6;
										sObject.Msehl = sMsPoint[i].Msehl;
										sObject.Decim = sMsPoint[i].Decim.toString();
										sObject.Codgr = sMsPoint[i].Codgr;
										sObject.Codgrtxt = sMsPoint[i].Codgrtxt;
										sObject.Locas = sMsPoint[i].Locas;
										sObject.Maktx = sMsPoint[i].Maktx;
										sObject.Begru = sMsPoint[i].Begru;
										sObject.Begtx = sMsPoint[i].Begtx;
										sObject.Indct = sMsPoint[i].Indct;
										sObject.Expon = sMsPoint[i].Expon;
										sObject.Cdsuf = sMsPoint[i].Cdsuf;
										sObject.Cjumc = sMsPoint[i].Cjumc;
										sObject.Pyeac = sMsPoint[i].Pyeac;
										sObject.Desir = sMsPoint[i].Desir;
										sObject.Mrngu = sMsPoint[i].Mrngu;
										sObject.Dstxt = sMsPoint[i].Dstxt;
										sObject.Indrv = sMsPoint[i].Indrv;
										sObject.Mrmax = sMsPoint[i].Mrmax;
										sObject.Mrmin = sMsPoint[i].Mrmin;
										sObject.Deact = sMsPoint[i].Inact;
										sObject.DeactEnable = false;
										sObject.readTransfSel = sMsPoint[i].Indtr;
										sObject.readTransf = sMsPoint[i].Trans;

										if (sMsPoint[i].Equnr !== "") {
											sObject.EqunrLblVis = true;
											sObject.EqunrInpVis = true;
											sObject.EqktxInpVis = true;
											sObject.TplnrLblVis = false;
											sObject.TplnrInpVis = false;
											sObject.PltxtInpVis = false;
										} else {
											sObject.EqunrLblVis = false;
											sObject.EqunrInpVis = false;
											sObject.EqktxInpVis = false;
											sObject.TplnrLblVis = true;
											sObject.TplnrInpVis = true;
											sObject.PltxtInpVis = true;
										}

										if (sMsPoint[i].Mptyp === "L" && results.MSLAM.results.length > 0) {
											var sLAM = results.MSLAM.results;
											if (sLAM) {
												for (var z = 0; z < sLAM.length; z++) {
													if (sLAM[z].Mspoint === sMsPoint[i].Point) {
														sObject.lam = sLAM[z];
														sObject.lam.LrpidDesc = sLAM[z].LrpDescr;
														sObject.lam.LinUnitDesc = sLAM[z].Uomtext;
														break;
													}
												}
											}
										}

										if (results.MSClass) {
											var sClassList = results.MSClass.results;
											if (sClassList) {
												if (sClassList.length > 0) {
													for (var j = 0; j < sClassList.length; j++) {
														if (sObject.Mspoint === sClassList[j].Mspoint) {
															sClassList[j].ctEnable = false;
															sClassList[j].classEnable = false;
															sClassList[j].ClassTypeDesc = sClassList[j].Artxt;
															delete sClassList[j].Artxt;
															sClassList[j].ClassDesc = sClassList[j].Kltxt;
															delete sClassList[j].Kltxt;
															delete sClassList[j].Changerequestid;
															delete sClassList[j].Clint;
															delete sClassList[j].Service;
															pApproveObject.classItems.push(sClassList[j]);
														}
													}
												}
											}
										}

										if (results.MSVal) {
											var sCharList = results.MSVal.results;
											if (sCharList) {
												if (sCharList.length > 0) {
													for (var k = 0; k < sCharList.length; k++) {
														if (sObject.Mspoint === sCharList[k].Mspoint) {
															sCharList[k].cNameEnable = false;
															sCharList[k].Textbz = sCharList[k].Atwtb;
															delete sCharList[k].Ataut;
															delete sCharList[k].Ataw1;
															delete sCharList[k].Atawe;
															delete sCharList[k].Atcod;
															delete sCharList[k].Atflb;
															delete sCharList[k].Atflv;
															delete sCharList[k].Atimb;
															delete sCharList[k].Atsrt;
															delete sCharList[k].Atvglart;
															delete sCharList[k].Atzis;
															delete sCharList[k].Changerequestid;
															delete sCharList[k].Charid;
															delete sCharList[k].Classtype;
															delete sCharList[k].Service;
															delete sCharList[k].Valcnt;
															sCharList[k].slNo = k + 1; // ()
															sCharList[k].flag = sCharList[k].Class + "-" + sCharList[k].slNo; // ()
															pApproveObject.characteristics.push(sCharList[k]);
														}
													}
												}
											}
										}

										g.setCommonApprovalData(g.oModelAIWMSPT, pApproveObject);
										g.handleCreatePress(g, sObject, g.oModelAIWMSPT);
									}
								}
							}
						}

						if (sType === "MPMITab") {
							AIWMPMIModel = sap.ui.getCore().getModel(g.oModelAIWMPMI).getData();
							if (AIWMPMIModel.length > 0) {
								return;
							}
							if (results.MPLAN) {
								var sMaintenance = results.MPLAN.results;
								if (sMaintenance) {
									for (var ai = 0; ai < sMaintenance.length; ai++) {
										pApproveObject = {
											classItems: [],
											characteristics: []
										};
										sObject = {
											// MPMIpmentsDetail
											attachmentCount: "0", // Attachment Count
											Guids: "", // Attachment
											cycleModel: [],
											itemModel: [],
											cycleIndSingle: false, // RBSC
											cycleIndStrategy: false, // RBS
											cycleIndMultCntr: false, // RBMC

											// Fields Enability
											WarplEnabled: false,
											StratEnabled: false,
											WsetEnabled: false,
											MehrfachEnabled: false,
											ScheIndRbTimeEnabled: false,
											ScheIndRbTimeKeyDateEnabled: false,
											ScheIndRbTimeFactCalEnabled: false,
											ScheIndRbPerformanceEnabled: false,
											MptypEnabled: false,
											cycleIndSingleEnabled: false,
											cycleIndStrategyEnabled: false,
											cycleIndMultCntrEnabled: false,
											FabklLBLReq: false,
											ButtonNewCycleEnabled: false,
											FabklEnabled: false,

											// Label Visibility
											OPText: false,
											OPTitle: false,
											OPLBL: false,
											MpcyclenoLBL: false,
											FabklLBL: true,
											AbrhoLBL: true,
											MehrfachLBL: false, // Multiple counter Label
											ScheIndText: true,
											ScheIndTitle: true,
											ScheIndLBL: true,
											StratLBL: false,
											StratDescLBL: false,
											WsetLBL: false,
											SzaehLBL: false,
											StadtLBL: true,

											// Fields Visibility
											HorizVisible: false,
											cycleSetSeqColVis: false,
											OROPVis: false,
											AndOPvis: false,
											ScheIndRbTimeVis: true,
											ScheIndRbTimeKeyDateVis: true,
											ScheIndRbTimeFactCalVis: true,
											ScheIndRbPerformanceVis: true,
											MpcyclenoVis: false,
											HunitVis: true,
											AbrhoVis: true,
											MehrfachVis: false,
											StratVis: false, // Strategy Visibility
											StratDescVis: false,
											WsetVis: false,
											KtextVis: false,
											SzaehVis: false,
											UnitcVis: false,
											StadtVis: true,

											MaintenanceCycleMode: "None"
										};

										if (sMaintenance[ai].Stich !== "" || sMaintenance[ai].Stich === undefined) {
											sObject.Stich = parseInt(sMaintenance[ai].Stich);
										} else {
											sObject.Stich = 0;
										}
										sObject.Warpl = sMaintenance[ai].Warpl;
										sObject.Wptxt = sMaintenance[ai].Wptxt;
										sObject.Mptyp = sMaintenance[ai].Mptyp;
										sObject.Txt = sMaintenance[ai].Mplancatdesc;
										sObject.Strat = sMaintenance[ai].Strat;
										sObject.StratDesc = sMaintenance[ai].StratDesc;
										sObject.Puffp = sMaintenance[ai].Puffp;
										sObject.Deact = sMaintenance[ai].InactMp;
										sObject.DeactEnable = false;

										if (sMaintenance[ai].Mehrfach === "X" || sMaintenance[ai].Stich === "4") {
											sObject.cycleType = 2;
											sObject.cycleSetSeqColVis = true;
											sObject.CycleSetSeqVis = true;
											sObject.ScheIndText = false;
											sObject.ScheIndTitle = false;
											sObject.ScheIndLBL = false;
											sObject.ScheIndRbTimeEnabled = false;
											sObject.ScheIndRbTimeKeyDateEnabled = false;
											sObject.ScheIndRbTimeFactCalEnabled = false;
											sObject.ScheIndRbPerformanceEnabled = false;
											sObject.ScheIndRbTimeVis = false;
											sObject.ScheIndRbTimeKeyDateVis = false;
											sObject.ScheIndRbTimeFactCalVis = false;
											sObject.ScheIndRbPerformanceVis = false;
											// sObject.AbrhoLBL = false;
											// sObject.AbrhoVis = false;
											// sObject.HunitVis = false;
											sObject.FabklLBL = false;
											sObject.FabklVis = false;
											sObject.FabklDescVis = false;
											sObject.OPText = true;
											sObject.OPTitle = true;
											sObject.OPLBL = true;
											sObject.OROPVis = true;
											sObject.AndOPvis = true;
											sObject.WsetLBL = true;
											sObject.WsetVis = true;
											sObject.KtextVis = true;
											sObject.StratLBL = true;
											sObject.StratVis = true;
											sObject.StratDescVis = true;
											sObject.MehrfachLBL = true;
											sObject.MehrfachVis = true;
											sObject.Mehrfach = true;
											sObject.StadtLBL = true;
											sObject.StadtVis = true;
											sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_STDATE");
											sObject.SzaehLBL = false;
											sObject.SzaehVis = false;
											sObject.UnitcVis = false;
											sObject.MpcyclenoLBL = false;
											sObject.MpcyclenoVis = false;
											sObject.cycleIndMultCntr = true;
										} else if (sMaintenance[ai].Strat === "" && (sMaintenance[ai].Stich === "" || sMaintenance[ai].Stich === "1" ||
												sMaintenance[
													ai].Stich === "2")) {
											sObject.cycleType = 0;
											sObject.cycleSetSeqColVis = false;
											sObject.CycleSetSeqVis = false;
											sObject.ScheIndText = true;
											sObject.ScheIndTitle = true;
											sObject.ScheIndLBL = true;
											sObject.AbrhoLBL = true;
											sObject.AbrhoVis = true;
											sObject.HunitVis = true;
											sObject.FabklLBL = true;
											sObject.FabklVis = true;
											sObject.FabklDescVis = true;
											sObject.StadtLBL = true;
											sObject.StadtVis = true;
											sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
											sObject.SzaehLBL = false;
											sObject.SzaehVis = false;
											sObject.UnitcVis = false;
											sObject.MpcyclenoLBL = false;
											sObject.MpcyclenoVis = false;
											sObject.cycleIndSingle = true;
										} else if (sMaintenance[ai].Strat !== "" && sMaintenance[ai].Stich === "3") {
											sObject.cycleType = 1;
											sObject.cycleSetSeqColVis = false;
											sObject.CycleSetSeqVis = false;
											sObject.ScheIndText = false;
											sObject.ScheIndTitle = false;
											sObject.ScheIndLBL = false;
											sObject.ScheIndRbTimeEnabled = false;
											sObject.ScheIndRbTimeKeyDateEnabled = false;
											sObject.ScheIndRbTimeFactCalEnabled = false;
											sObject.ScheIndRbPerformanceEnabled = false;
											sObject.ScheIndRbTimeVis = false;
											sObject.ScheIndRbTimeKeyDateVis = false;
											sObject.ScheIndRbTimeFactCalVis = false;
											sObject.ScheIndRbPerformanceVis = false;
											sObject.AbrhoLBL = false;
											sObject.AbrhoVis = false;
											sObject.HunitVis = false;
											sObject.FabklLBL = false;
											sObject.FabklVis = false;
											sObject.FabklDescVis = false;
											sObject.StratLBL = true;
											sObject.StratVis = true;
											sObject.StratDescVis = true;
											sObject.StadtLBL = false;
											sObject.StadtVis = false;
											sObject.SzaehLBL = true;
											sObject.SzaehVis = true;
											sObject.UnitcVis = true;
											sObject.MpcyclenoLBL = true;
											sObject.MpcyclenoVis = true;
											sObject.cycleIndStrateg = true;
											g.readScheduling(sMaintenance[ai], sMaintenance[ai].Strat, g.oModelAIWMPMI);
										} else if (sMaintenance[ai].Strat.indexOf("TIME") > -1 && sMaintenance[ai].Mehrfach === "" && sMaintenance[ai].Stich !==
											"3") {
											sObject.cycleType = 1;
											sObject.ScheIndText = true;
											sObject.ScheIndTitle = true;
											sObject.ScheIndLBL = true;
											sObject.ScheIndRbTimeVis = true;
											sObject.ScheIndRbTimeKeyDateVis = true;
											sObject.ScheIndRbTimeFactCalVis = true;
											sObject.ScheIndRbPerformanceVis = true;
											sObject.AbrhoLBL = true;
											sObject.AbrhoVis = true;
											sObject.HunitVis = true;
											sObject.FabklLBL = true;
											sObject.FabklVis = true;
											sObject.FabklDescVis = true;
											sObject.StratLBL = true;
											sObject.StratVis = true;
											sObject.StratDescVis = true;
											sObject.Strat = sMaintenance[ai].Strat;
											sObject.StadtLBL = true;
											sObject.StadtVis = true;
											sObject.Stadt = formatter.getDateFormat(sMaintenance[ai].Startdate);
											sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
											sObject.SzaehLBL = false;
											sObject.SzaehVis = false;
											sObject.UnitcVis = false;
											sObject.MpcyclenoLBL = false;
											sObject.MpcyclenoVis = false;
											sObject.cycleIndStrateg = true;
											g.readScheduling(sMaintenance[ai], sMaintenance[ai].Strat, g.oModelAIWMPMI);
										} else if (sMaintenance[ai].Strat === "" && sMaintenance[ai].Stich === "3" && sMaintenance[ai].Mehrfach === "") {
											sObject.cycleIndSingle = true;
											sObject.cycleType = 0;
											sObject.ScheIndText = true;
											sObject.ScheIndTitle = true;
											sObject.ScheIndLBL = true;
											sObject.ScheIndRbTimeVis = true;
											sObject.ScheIndRbTimeKeyDateVis = true;
											sObject.ScheIndRbTimeFactCalVis = true;
											sObject.ScheIndRbPerformanceVis = true;
											sObject.AbrhoLBL = false;
											sObject.AbrhoVis = false;
											sObject.HunitVis = false;
											sObject.FabklLBL = true;
											sObject.FabklVis = true;
											sObject.FabklDescVis = true;
											sObject.StratLBL = false;
											sObject.StratVis = false;
											sObject.StratDescVis = false;
											sObject.StadtLBL = false;
											sObject.StadtVis = false;
											sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
											sObject.SzaehLBL = true;
											sObject.SzaehVis = true;
											sObject.UnitcVis = true;
											sObject.Unitc = " ";
											sObject.MpcyclenoLBL = true;
											sObject.MpcyclenoVis = true;
										}

										sObject.Stadt = formatter.getDateFormat(sMaintenance[ai].Startdate);
										sObject.Unitc = sMaintenance[ai].Unitc;
										sObject.Fabkl = sMaintenance[ai].Fabkl;
										sObject.FabklDesc = sMaintenance[ai].FabklDesc;

										if (sMaintenance[ai].Stich === "1") {
											sObject.ScheIndRbTimeKeyDate = true;
										} else if (sMaintenance[ai].Stich === "2") {
											sObject.ScheIndRbTimeFactCal = true;
										} else if (sMaintenance[ai].Stich === "3") {
											sObject.ScheIndRbPerformance = true;
										} else if (sMaintenance[ai].Stich === "" || sMaintenance[ai].Stich === " ") {
											sObject.ScheIndRbTime = true;
										}

										sObject.Wset = sMaintenance[ai].Wset;
										sObject.Ktext = sMaintenance[ai].Ktext;
										sObject.Sfakt = sMaintenance[ai].Sfakt;
										sObject.Abrho = sMaintenance[ai].Abrho;
										sObject.Hunit = sMaintenance[ai].Hunit;
										sObject.StratDesc = sMaintenance[ai].StratDesc;
										sObject.Szaeh = sMaintenance[ai].Szaeh;
										sObject.Mpcycleno = sMaintenance[ai].PointStp;
										sObject.Andor = sMaintenance[ai].Andor;

										if (sMaintenance[ai].PointStp !== "") {
											sObject.Unitc = sMaintenance[ai].Unitc;
											// g.readCounterData(sMaintenance[ai], sMaintenance[ai].PointStp, "counterUnit");
										}
										if (sMaintenance[ai].Andor === "X") {
											sObject.AndOP = true;
										} else {
											sObject.OROP = true;
										}

										if (sObject.Mehrfach === true || (sObject.Wset !== "" || sObject !== undefined)) {
											sObject.HorizVisible = false;
										} else {
											sObject.HorizVisible = true;
										}
										sObject.Vspos = sMaintenance[ai].Vspos;
										sObject.Topos = sMaintenance[ai].Topos;
										sObject.Vsneg = sMaintenance[ai].Vsneg;
										sObject.Toneg = sMaintenance[ai].Toneg;
										sObject.Horiz = sMaintenance[ai].Horiz;
										sObject.CallConf = sMaintenance[ai].CallConf;
										sObject.PlanSort = sMaintenance[ai].PlanSort;
										sObject.Begru = sMaintenance[ai].Begru;

										if (results.MPCycle) {
											var sCycle = results.MPCycle.results;
											if (sCycle) {
												for (var ci = 0; ci < sCycle.length; ci++) {
													if (sObject.Warpl === sCycle[ci].Mplan) {
														sCycle[ci].Psort = sCycle[ci].PointTxt;
														sObject.cycleModel.push(sCycle[ci]);
													}
												}
											}
										}

										if (results.MPItem) {
											var items = results.MPItem.results;
											if (items) {
												var temp = [];
												for (var bi = 0; bi < items.length; bi++) {
													if (sObject.Warpl === items[bi].Mplan) {
														var obj = {};
														obj.Mitemnumb = items[bi].Mitemnumb; // maint item 
														obj.Pstxt = items[bi].Pstxt; // maint item desc
														obj.Cycleseq = items[bi].Cycleseq;
														obj.Tplnr = items[bi].TplnrMi; // floc
														obj.Pltxt = items[bi].Flocdesc; // floc desc
														obj.Equnr = items[bi].Equnr; // equip
														obj.Eqktx = items[bi].Equipdesc; // equip desc
														obj.AsmblyOb = items[bi].Bautl; // assembly
														obj.Assemblydesc = items[bi].Assemblydesc; // assembly
														obj.Serialnr = items[bi].Serialnr;
														obj.Sermat = items[bi].Sermat;
														obj.UiiMitem = items[bi].UiiMitem;
														obj.Deviceid = items[bi].Deviceid;
														obj.Werks = items[bi].PlntMi; // planning plant
														obj.Planningplantdes = items[bi].Planningplantdes; // planning plant desc
														obj.Auart = items[bi].Auart; // order type 
														obj.oTypeTxt = items[bi].Ordertypedesc; // order type desc
														obj.Qmart = items[bi].Qmart; // notif type
														obj.nTypeTxt = items[bi].Qmartx; // notif type desc
														obj.ArbpMi = items[bi].ArbpMi; // main wc
														obj.WergwMi = items[bi].WergwMi; // main wc desc
														obj.Ingrp = items[bi].IngrpMi; // planner grp
														obj.Innam = items[bi].Plannergrpdesc; // planner grp desc

														// Approve Fields
														var sItmPriotxt = items[bi].ItmPriotxt;
														sItmPriotxt = sItmPriotxt.substr(sItmPriotxt.indexOf(" ") + 1);
														obj.Zeieh = items[bi].Zeieh;
														obj.Priok = items[bi].Priok;
														obj.ItmPriotxt = sItmPriotxt;
														obj.GsberMi = items[bi].GsberMi;
														obj.Gtext = items[bi].Gtext;
														obj.TaskDet = items[bi].TaskDet;
														obj.Ilart = items[bi].Ilart;
														obj.Ilatx = items[bi].Ilatx;
														obj.PlntyMi = items[bi].PlntyMi;
														obj.ApfktMi = items[bi].ApfktMi;
														obj.PlnnrMi = items[bi].PlnnrMi;
														obj.PlnalMi = items[bi].PlnalMi;
														obj.Gpcounterdesc = items[bi].Gpcounterdesc;
														obj.AnlzuMi = items[bi].AnlzuMi;
														obj.Anlzux = items[bi].Anlzux;
														obj.SwerkMil = items[bi].SwerkMil;
														obj.Name1 = items[bi].Name1;
														obj.StortMil = items[bi].StortMil;
														obj.Locationdesc = items[bi].Locationdesc;
														obj.MsgrpIl = items[bi].MsgrpIl;
														obj.BeberMil = items[bi].BeberMil;
														obj.Fing = items[bi].Fing;
														obj.Tele = items[bi].Tele;
														obj.ArbplIl = items[bi].ArbplIl;
														obj.Workcenterdesc = items[bi].Workcenterdesc;
														obj.AbckzIl = items[bi].AbckzIl;
														obj.Abctx = items[bi].Abctx;
														obj.EqfnrIl = items[bi].EqfnrIl;
														obj.BukrsMil = items[bi].BukrsMil;
														obj.Butxt = items[bi].Butxt;
														obj.City = items[bi].City;
														obj.Anln1Mil = items[bi].Anln1Mil;
														obj.Anln2Mil = items[bi].Anln2Mil;
														obj.Txt50 = items[bi].Txt50;
														obj.GsberIl = items[bi].GsberIl;
														obj.KostlMil = items[bi].KostlMil;
														obj.Contareaname = items[bi].Contareaname;
														obj.KokrsMil = items[bi].KokrsMil;
														obj.Posid = items[bi].Posid;
														obj.Post1 = items[bi].Post1;
														obj.AufnrIl = items[bi].AufnrIl;
														obj.SettleOrdDesc = items[bi].SettleOrdDesc;
														obj.PlnnrMi = items[bi].PlnnrMi;
														obj.PlntyMi = items[bi].PlntyMi;
														obj.PlnalMi = items[bi].PlnalMi;
														obj.enableLoc = false;

														obj.QmartLBL = true;
														obj.QmartVis = true;
														obj.nTypetxtVis = true;
														obj.AuartLBL = true;
														obj.AuartVis = true;
														obj.oTypeTxtVis = true;
														obj.CycleseqLBL = false;
														obj.CycleseqVis = false;

														obj.AsmblyObMaxLength = 0;
														obj.maintItemE = false;
														obj.cycleSetE = false;
														obj.TplnrEnabled = false;
														obj.equiE = false;
														obj.assemblyE = false;

														obj.CycleseqVS = "None";
														obj.CycleseqVST = "";
														obj.TplnrVS = "None";
														obj.TplnrVST = "";
														obj.EqunrVS = "None";
														obj.EqunrVST = "";
														obj.AsmblyObVS = "None";
														obj.AsmblyObVST = "";
														obj.WerksVS = "None";
														obj.WerksVST = "";
														obj.AuartVS = "None";
														obj.AuartVST = "";
														obj.QmartVS = "None";
														obj.QmartVST = "";
														obj.ArbpMiVS = "None";
														obj.ArbpMiVST = "";
														obj.WergwMiVS = "None";
														obj.WergwMiVST = "";
														obj.IngrpVS = "None";
														obj.IngrpVST = "";
														obj.enableLoc = false;

														var aMPLAM = results.MPLAM.results;
														if (aMPLAM) {
															for (var z = 0; z < aMPLAM.length; z++) {
																if (aMPLAM[z].Mplan === items[bi].Mplan && aMPLAM[z].Mitemnumb === items[bi].Mitemnumb) {
																	var oMPLAM = aMPLAM[z];
																	oMPLAM.LrpidDesc = aMPLAM[z].LrpDescr;
																	oMPLAM.LinUnitDesc = aMPLAM[z].Uomtext;
																	obj.lam = oMPLAM;
																	break;
																}
															}
														}
														temp.push(obj);
													}
												}
												sObject.itemModel = temp;
											}
										}

										if (results.MPOBList) {
											var aObjListItems = results.MPOBList.results;
											if (aObjListItems) {
												var temp2 = [];
												for (var i = 0; i < aObjListItems.length; i++) {
													if (sObject.Warpl === aObjListItems[i].Mplan) {
														var obj = {};
														obj.Warpl = aObjListItems[i].Mplan;
														obj.Mitemnumb = aObjListItems[i].Mitemnumb;
														obj.MatnrObj = aObjListItems[i].MatnrObj;
														obj.FlocObj = aObjListItems[i].FlocObj;
														obj.EquiObj = aObjListItems[i].EquiObj;
														obj.AsmblyOb = aObjListItems[i].AsmblyOb;
														obj.Matnrtxt = aObjListItems[i].Matnrtxt;
														obj.Equnrtxt = aObjListItems[i].Equnrtxt;
														obj.Tplnrtxt = aObjListItems[i].Tplnrtxt;
														obj.Bautltxt = aObjListItems[i].Bautltxt;
														obj.Enable = false;
														temp2.push(obj);
													}
												}
												sObject.ObjListItems = temp2;
											}
										}

										if (results.ClassMpl) {
											var sClassList = results.ClassMpl.results;
											if (sClassList) {
												if (sClassList.length > 0) {
													for (var j = 0; j < sClassList.length; j++) {
														if (sObject.Warpl === sClassList[j].Mplan) {
															sClassList[j].ctEnable = false;
															sClassList[j].classEnable = false;
															sClassList[j].ClassTypeDesc = sClassList[j].Artxt;
															delete sClassList[j].Artxt;
															sClassList[j].ClassDesc = sClassList[j].Kltxt;
															delete sClassList[j].Kltxt;
															delete sClassList[j].Changerequestid;
															delete sClassList[j].Clint;
															delete sClassList[j].Service;
															pApproveObject.classItems.push(sClassList[j]);
														}
													}
												}
											}
										}

										if (results.ValuaMpl) {
											var sCharList = results.ValuaMpl.results;
											if (sCharList) {
												if (sCharList.length > 0) {
													for (var k = 0; k < sCharList.length; k++) {
														if (sObject.Warpl === sCharList[k].Mplan) {
															sCharList[k].cNameEnable = false;
															sCharList[k].Textbz = sCharList[k].Atwtb;
															delete sCharList[k].Ataut;
															delete sCharList[k].Ataw1;
															delete sCharList[k].Atawe;
															delete sCharList[k].Atcod;
															delete sCharList[k].Atflb;
															delete sCharList[k].Atflv;
															delete sCharList[k].Atimb;
															delete sCharList[k].Atsrt;
															delete sCharList[k].Atvglart;
															delete sCharList[k].Atzis;
															delete sCharList[k].Changerequestid;
															delete sCharList[k].Charid;
															delete sCharList[k].Classtype;
															delete sCharList[k].Service;
															delete sCharList[k].Valcnt;
															sCharList[k].slNo = k + 1; // ()
															sCharList[k].flag = sCharList[k].Class + "-" + sCharList[k].slNo; // ()
															pApproveObject.characteristics.push(sCharList[k]);
														}
													}
												}
											}
										}

										g.setCommonApprovalData(g.oModelAIWMPMI, pApproveObject);
										g.handleCreatePress(g, sObject, g.oModelAIWMPMI);
									}
								}
							}
						}

						// oMainData.tableBusy = false;
						// oMainModel.setData(oMainData);

						//BOM ON
						if (sType === "MBOMTab") {
							var AIWListMatData = sap.ui.getCore().getModel("AIWListMatModel").getData();
							if (AIWListMatData.length > 0) {
								return;
							}

							var matHeader = r.results[0].MRBHeader.results;
							for (var i = 0; i < matHeader.length; i++) {
								var matObj = {};
								matObj.Matnr = matHeader[i].Matnr;
								matObj.Werks = matHeader[i].Werks;
								matObj.Stlan = matHeader[i].Stlan;
								matObj.Stalt = matHeader[i].Stalt;
								matObj.Bomstatus = matHeader[i].Bomstatus;
								matObj.Lngtxt = matHeader[i].Txtmi;
								matObj.Validfrom = g.getDateFormat(matHeader[i].Validfrom);
								matObj.BaseQty = matHeader[i].Baseqty;
								matObj.BaseUom = matHeader[i].Baseuom;
								matObj.Validtoda = g.getDateFormat(matHeader[i].Validtoda);

								matObj.MatDesc = matHeader[i].Maktx;
								matObj.WerksDesc = matHeader[i].Plantname;
								matObj.StlanDesc = matHeader[i].Bomusagetxt;
								matObj.BomstatusText = matHeader[i].Bomstatustxt;
								matObj.Stktx = matHeader[i].Stktx;
								matObj.matEnable = false;
								matObj.plantEnable = false;
								matObj.usageEnable = false;
								matObj.altbomEnable = false;
								matObj.LngtxtEnable = false;
								matObj.BomstatusEnable = false;
								matObj.BaseQtyEnable = false;
								matObj.fromDateEnable = false; //new
								matObj.addItemEnable = false;
								matObj.modeFlag = "None";

								matObj.Authgroup = matHeader[i].Authgroup;
								matObj.Sizdim = matHeader[i].Sizdim;
								matObj.Labofc = matHeader[i].Labofc;
								matObj.Labortxt = matHeader[i].Labortxt;
								matObj.Stalt = matHeader[i].Stalt;

								matObj.Flbomsub = ""; //matHeader[i].Flbomsub;
								matObj.Delflg = ""; //matHeader[i].Delflg;
								matObj.Invnr = ""; //matHeader[i].Invnr;
								matObj.Herst = ""; //matHeader[i].Herst;
								matObj.Htypb = ""; //matHeader[i].Htypb;
								matObj.Serge = ""; //matHeader[i].Serge;
								// matObj.Stktx = ""; //matHeader[i].Stktx;

								matObj.matItem = [];
								matObj.matSubItem = [];

								var MATITEM = r.results[0].MRBItem.results;
								if (MATITEM.length > 0) {
									for (var j = 0; j < MATITEM.length; j++) {
										if (MATITEM[j].Matnr === matObj.Matnr && MATITEM[j].Werks === matObj.Werks && MATITEM[j].Stlan === matObj.Stlan) {
											MATITEM[j].addSubItmEnable = false;
											MATITEM[j].Pmper = "-";
											MATITEM[j].Pmpka = "-";
											MATITEM[j].Pmprv = "-";
											MATITEM[j].Pmpfe = "-";
											MATITEM[j].Pmpin = "-";
											MATITEM[j].Pmpko = "-";
											matObj.matItem.push(MATITEM[j]);
										}
									}
								} else {
									matObj.matItem = [];
								}

								var MATSUBITEM = r.results[0].MRBSBIT.results;
								if (MATSUBITEM.length > 0) {
									for (var k = 0; k < MATSUBITEM.length; k++) {
										if (MATSUBITEM[k].Matnr === matObj.Matnr && MATSUBITEM[k].Werks === matObj.Werks && MATSUBITEM[k].Stlan ===
											matObj.Stlan) {
											MATSUBITEM[k].intPointEnable = false;
											MATSUBITEM[k].subQtyEnable = false;
											MATSUBITEM[k].subTextEnable = false;
											matObj.matSubItem.push(MATSUBITEM[k]);
										}
									}
								} else {
									matObj.matSubItem = [];
								}
								AIWListMatData.push(matObj);
							}
							sap.ui.getCore().getModel("AIWListMatModel").setSizeLimit(AIWListMatData.length);
							sap.ui.getCore().getModel("AIWListMatModel").refresh();
							g.updateCount("MaterialBom", AIWListMatData);
						}
						if (sType === "EBOMTab") {
							var AIWListEqData = sap.ui.getCore().getModel("AIWListEqModel").getData();
							if (AIWListEqData.length > 0) {
								return;
							}

							var eqHeader = r.results[0].EBHeader.results;
							for (var i = 0; i < eqHeader.length; i++) {
								var eqObj = {};
								eqObj.Eqnrbom = eqHeader[i].Eqnrbom;
								eqObj.Werks = eqHeader[i].Werks;
								eqObj.Stlan = eqHeader[i].Stlan;
								eqObj.Bomstatus = eqHeader[i].Bomstatus;
								eqObj.Lngtxt = eqHeader[i].Txtmi;
								eqObj.Validfrom = g.getDateFormat(eqHeader[i].Validfrom);
								eqObj.BaseQty = eqHeader[i].Baseqty;
								eqObj.BaseUom = eqHeader[i].Baseuom;
								eqObj.Validtoda = g.getDateFormat(eqHeader[i].Validtoda);

								eqObj.EquiDesc = eqHeader[i].Eqktx;
								eqObj.WerksDesc = eqHeader[i].Plantname;
								eqObj.StlanDesc = eqHeader[i].Bomusagetxt;
								eqObj.BomstatusText = eqHeader[i].Bomstatustxt;
								eqObj.equipEnable = false;
								eqObj.plantEnable = false;
								eqObj.usageEnable = false;
								eqObj.LngtxtEnable = false;
								eqObj.fromDateEnable = false; //new
								eqObj.BomstatusEnable = false;
								eqObj.BaseQtyEnable = false;
								eqObj.addItemEnable = false;
								eqObj.modeFlag = "None";

								eqObj.Authgroup = eqHeader[i].Authgroup;
								eqObj.Sizdim = eqHeader[i].Sizdim;
								eqObj.Labofc = eqHeader[i].Labofc;
								eqObj.Labortxt = eqHeader[i].Labortxt;
								eqObj.Delflg = eqHeader[i].Delflg;
								eqObj.Invnr = eqHeader[i].Invnr;
								eqObj.Herst = eqHeader[i].Herst;
								eqObj.Htypb = eqHeader[i].Htypb;
								eqObj.Serge = eqHeader[i].Serge;

								eqObj.Flbomsub = ""; //eqHeader[i].Flbomsub;
								eqObj.Stalt = ""; //eqHeader[i].Stalt;
								eqObj.Stktx = ""; //eqHeader[i].Stktx;

								eqObj.eqItem = [];
								eqObj.eqSubItem = [];

								var EQITEM = r.results[0].EBItem.results;
								if (EQITEM.length > 0) {
									for (var j = 0; j < EQITEM.length; j++) {
										if (EQITEM[j].Eqnrbom === eqObj.Eqnrbom && EQITEM[j].Werks === eqObj.Werks && EQITEM[j].Stlan === eqObj.Stlan) {
											EQITEM[j].addSubItmEnable = false;
											EQITEM[j].Pmper = "-";
											EQITEM[j].Pmpka = "-";
											EQITEM[j].Pmprv = "-";
											EQITEM[j].Pmpfe = "-";
											EQITEM[j].Pmpin = "-";
											EQITEM[j].Pmpko = "-";
											eqObj.eqItem.push(EQITEM[j]);
										}
									}
								} else {
									eqObj.eqItem = [];
								}

								var EQSUBITEM = r.results[0].EBSBIT.results;
								if (EQSUBITEM.length > 0) {
									for (var k = 0; k < EQSUBITEM.length; k++) {
										if (EQSUBITEM[k].Eqnrbom === eqObj.Eqnrbom && EQSUBITEM[k].Werks === eqObj.Werks && EQSUBITEM[k].Stlan ===
											eqObj.Stlan) {
											EQSUBITEM[k].intPointEnable = false;
											EQSUBITEM[k].subQtyEnable = false;
											EQSUBITEM[k].subTextEnable = false;
											eqObj.eqSubItem.push(EQSUBITEM[k]);
										}
									}
								} else {
									eqObj.eqSubItem = [];
								}
								AIWListEqData.push(eqObj);
							}
							sap.ui.getCore().getModel("AIWListEqModel").setSizeLimit(AIWListEqData.length);
							sap.ui.getCore().getModel("AIWListEqModel").refresh();
							g.updateCount("EquipmentBom", AIWListEqData);
						}
						if (sType === "FLBOMTab") {
							var AIWListFLData = sap.ui.getCore().getModel("AIWListFLModel").getData();
							if (AIWListFLData.length > 0) {
								return;
							}

							var flHeader = r.results[0].FBHeader.results;
							for (var i = 0; i < flHeader.length; i++) {
								var flObj = {};
								flObj.Tplnrbom = flHeader[i].Tplnrbom;
								flObj.Werks = flHeader[i].Werks;
								flObj.Stlan = flHeader[i].Stlan;
								flObj.Bomstatus = flHeader[i].Bomstatus;
								flObj.Lngtxt = flHeader[i].Txtmi;
								flObj.Validfrom = g.getDateFormat(flHeader[i].Validfrom);
								flObj.BaseQty = flHeader[i].Baseqty;
								flObj.BaseUom = flHeader[i].Baseuom;
								flObj.Validtoda = g.getDateFormat(flHeader[i].Validtoda);

								flObj.FLDesc = flHeader[i].Pltxt;
								flObj.WerksDesc = flHeader[i].Plantname;
								flObj.StlanDesc = flHeader[i].Bomusagetxt;
								flObj.BomstatusText = flHeader[i].Bomstatustxt;
								flObj.FLEnable = false;
								flObj.plantEnable = false;
								flObj.usageEnable = false;
								flObj.LngtxtEnable = false;
								flObj.fromDateEnable = false; //new
								flObj.BomstatusEnable = false;
								flObj.BaseQtyEnable = false;
								flObj.addItemEnable = false;
								flObj.modeFlag = "None";

								flObj.Authgroup = flHeader[i].Authgroup;
								flObj.Sizdim = flHeader[i].Sizdim;
								flObj.Flbomsub = flHeader[i].Flbomsub;
								flObj.Labofc = flHeader[i].Labofc;
								flObj.Labortxt = flHeader[i].Labortxt;

								flObj.Stalt = ""; //flHeader[i].Stalt;
								flObj.Delflg = ""; //flHeader[i].Delflg;
								flObj.Invnr = ""; //flHeader[i].Invnr;
								flObj.Herst = ""; //flHeader[i].Herst;
								flObj.Htypb = ""; //flHeader[i].Htypb;
								flObj.Serge = ""; //flHeader[i].Serge;
								flObj.Stktx = ""; //flHeader[i].Stktx;

								flObj.flItem = [];
								flObj.flSubItem = [];

								var FLITEM = r.results[0].FBItem.results;
								if (FLITEM.length > 0) {
									for (var j = 0; j < FLITEM.length; j++) {
										if (FLITEM[j].Tplnrbom === flObj.Tplnrbom && FLITEM[j].Werks === flObj.Werks && FLITEM[j].Stlan === flObj.Stlan) {
											FLITEM[j].addSubItmEnable = false;
											FLITEM[j].Pmper = "-";
											FLITEM[j].Pmpka = "-";
											FLITEM[j].Pmprv = "-";
											FLITEM[j].Pmpfe = "-";
											FLITEM[j].Pmpin = "-";
											FLITEM[j].Pmpko = "-";
											flObj.flItem.push(FLITEM[j]);
										}
									}
								} else {
									flObj.flItem = [];
								}

								var FLSUBITEM = r.results[0].FBSBIT.results;
								if (FLSUBITEM.length > 0) {
									for (var k = 0; k < FLSUBITEM.length; k++) {
										if (FLSUBITEM[k].Tplnrbom === flObj.Tplnrbom && FLSUBITEM[k].Werks === flObj.Werks && FLSUBITEM[k].Stlan ===
											flObj.Stlan) {
											FLSUBITEM[k].intPointEnable = false;
											FLSUBITEM[k].subQtyEnable = false;
											FLSUBITEM[k].subTextEnable = false;
											flObj.flSubItem.push(FLSUBITEM[k]);
										}
									}
								} else {
									flObj.flSubItem = [];
								}
								AIWListFLData.push(flObj);
							}
							sap.ui.getCore().getModel("AIWListFLModel").setSizeLimit(AIWListFLData.length);
							sap.ui.getCore().getModel("AIWListFLModel").refresh();
							g.updateCount("FLBom", AIWListFLData);
						}
						if (sType === "WBSBOMTab") {
							var AIWListWBSData = sap.ui.getCore().getModel("AIWListWBSModel").getData();
							if (AIWListWBSData.length > 0) {
								return;
							}

							var wbsHeader = r.results[0].WBHeader.results;
							for (var i = 0; i < wbsHeader.length; i++) {
								var wbsObj = {};
								wbsObj.WbsExt = wbsHeader[i].WbsExt;
								wbsObj.Matnr = wbsHeader[i].MatnrWbs;
								wbsObj.Werks = wbsHeader[i].Werks;
								wbsObj.Stlan = wbsHeader[i].Stlan;
								wbsObj.Bomstatus = wbsHeader[i].Bomstatus;
								wbsObj.Lngtxt = wbsHeader[i].Txtmi;
								wbsObj.Validfrom = g.getDateFormat(wbsHeader[i].Validfrom);
								wbsObj.BaseQty = wbsHeader[i].Baseqty;
								wbsObj.BaseUom = wbsHeader[i].Baseuom;
								wbsObj.Validtoda = g.getDateFormat(wbsHeader[i].Validtoda);

								wbsObj.WbsDesc = wbsHeader[i].Post1;
								wbsObj.MatDesc = wbsHeader[i].Maktx;
								wbsObj.WerksDesc = wbsHeader[i].Plantname;
								wbsObj.StlanDesc = wbsHeader[i].Bomusagetxt;
								wbsObj.BomstatusText = wbsHeader[i].Bomstatustxt;
								wbsObj.wbsEnable = false;
								wbsObj.matEnable = false;
								wbsObj.plantEnable = false;
								wbsObj.usageEnable = false;
								wbsObj.LngtxtEnable = false;
								wbsObj.fromDateEnable = false; //new
								wbsObj.BomstatusEnable = false;
								wbsObj.BaseQtyEnable = false;
								wbsObj.addItemEnable = false;
								wbsObj.modeFlag = "None";

								wbsObj.Authgroup = wbsHeader[i].Authgroup;
								wbsObj.Sizdim = wbsHeader[i].Sizdim;
								wbsObj.Labofc = wbsHeader[i].Labofc;
								wbsObj.Labortxt = wbsHeader[i].Labortxt;

								wbsObj.Stalt = ""; //wbsHeader[i].Stalt;
								wbsObj.Flbomsub = ""; //wbsHeader[i].Flbomsub;
								wbsObj.Delflg = ""; //wbsHeader[i].Delflg;
								wbsObj.Invnr = ""; //wbsHeader[i].Invnr;
								wbsObj.Herst = ""; //wbsHeader[i].Herst;
								wbsObj.Htypb = ""; //wbsHeader[i].Htypb;
								wbsObj.Serge = ""; //wbsHeader[i].Serge;
								wbsObj.Stktx = ""; //wbsHeader[i].Stktx;

								wbsObj.wbsItem = [];
								wbsObj.wbsSubItem = [];

								var WBSITEM = r.results[0].WBItem.results;
								if (WBSITEM.length > 0) {
									for (var j = 0; j < WBSITEM.length; j++) {
										if (WBSITEM[j].MatnrWbs === wbsObj.Matnr && WBSITEM[j].Werks === wbsObj.Werks && WBSITEM[j].Stlan === wbsObj.Stlan) {
											WBSITEM[j].addSubItmEnable = false;
											WBSITEM[j].Pmper = "-";
											WBSITEM[j].Pmpka = "-";
											WBSITEM[j].Pmprv = "-";
											WBSITEM[j].Pmpfe = "-";
											WBSITEM[j].Pmpin = "-";
											WBSITEM[j].Pmpko = "-";
											wbsObj.wbsItem.push(WBSITEM[j]);
										}
									}
								} else {
									wbsObj.wbsItem = [];
								}

								var WBSSUBITEM = r.results[0].WBSBIT.results;
								if (WBSSUBITEM.length > 0) {
									for (var k = 0; k < WBSSUBITEM.length; k++) {
										if (WBSSUBITEM[k].MatnrWbs === wbsObj.Matnr && WBSSUBITEM[k].Werks === wbsObj.Werks && WBSSUBITEM[k].Stlan ===
											wbsObj.Stlan) {
											WBSSUBITEM[k].intPointEnable = false;
											WBSSUBITEM[k].subQtyEnable = false;
											WBSSUBITEM[k].subTextEnable = false;
											wbsObj.wbsSubItem.push(WBSSUBITEM[k]);
										}
									}
								} else {
									wbsObj.wbsSubItem = [];
								}
								AIWListWBSData.push(wbsObj);
							}
							sap.ui.getCore().getModel("AIWListWBSModel").setSizeLimit(AIWListWBSData.length);
							sap.ui.getCore().getModel("AIWListWBSModel").refresh();
							g.updateCount("WbsBom", AIWListWBSData);
						}
						if (sType === "ON") {
							var AIWListONData = sap.ui.getCore().getModel("AIWListONModel").getData();
							if (AIWListONData.length > 0) {
								return;
							}
							var onObj = {};
							var ONHeader = r.results[0].ONetwork.results;
							for (var i = 0; i < ONHeader.length; i++) {
								onObj = {};
								onObj.Objnetwrk = ONHeader[i].Objnetwrk; //obj.Objnetwrk;
								onObj.Netgrp = ONHeader[i].Netgrp;
								onObj.Netwtyp = ONHeader[i].Netwtyp;
								onObj.Netxt = ONHeader[i].Netxt;
								onObj.NetgrpDesc = ONHeader[i].NetgroupTxt;
								onObj.NetwtypDesc = ONHeader[i].NettypeTxt;
								onObj.NetIDEnable = false; //new
								onObj.Ntobjtyp = ONHeader[i].Ntobjtyp;

								var ONLAM = r.results[0].ONLAM.results;
								if (ONLAM) {
									for (var j = 0; j < ONLAM.length; j++) {
										if (ONLAM[j].Objnetwrk === ONHeader[i].Objnetwrk) {
											onObj.lam = ONLAM[j];
											onObj.lam.LrpidDesc = ONLAM[j].LrpDescr;
											onObj.lam.LinUnitDesc = ONLAM[j].Uomtext;
											break;
										}
									}
								}
								AIWListONData.push(onObj);
							}
							sap.ui.getCore().getModel("AIWListONModel").setSizeLimit(AIWListONData.length);
							sap.ui.getCore().getModel("AIWListONModel").refresh();
							g.updateCount("ObjNet", AIWListONData);
							g.disableFields(sType);
						}

						//TL WC
						if (sType === "WCTab") {
							if (results.Workcenter) {
								var wcData = results.Workcenter.results;

								if (wcData) {
									for (var w = 0; w < wcData.length; w++) {
										var pApproveObject = {
											classItems: [],
											characteristics: []
										};
										var wcObj = {};
										wcObj = wcData[w];
										wcObj.wc = wcData[w].Arbpl;
										wcObj.wcDesc = wcData[w].Txtmi;
										wcObj.plant = wcData[w].Werks;
										wcObj.plantDesc = wcData[w].Plantdesc;
										wcObj.wcCat = wcData[w].Verwe;
										wcObj.wcCatDesc = wcData[w].Ktext;
										wcObj.person = wcData[w].Crveran;
										wcObj.personDesc = wcData[w].Persresptxt;
										wcObj.usg = wcData[w].Planv;
										wcObj.usgDesc = wcData[w].UsageTxt;
										wcObj.stdVal = wcData[w].Vgwts;
										wcObj.stdValDesc = wcData[w].Vgwtx;
										wcObj.ctrlKey = wcData[w].Crsteus;
										wcObj.ctrlKeyDesc = wcData[w].Steutxt;

										wcObj.wcValueState = "None";
										wcObj.wcDescValueState = "None";
										wcObj.plantValueState = "None";
										wcObj.wcCatValueState = "None";
										wcObj.personResValueState = "None";
										wcObj.usgValueState = "None";
										wcObj.stdValueState = "None";
										wcObj.cntrlKeyValueState = "None";
										wcObj.wcValueStateTxt = "";
										wcObj.wcDescValueStateTxt = "";
										wcObj.plantValueStateTxt = "";
										wcObj.wcCatValueStateTxt = "";
										wcObj.personResValueStateTxt = "";
										wcObj.usgValueStateTxt = "";
										wcObj.stdValueStateTxt = "";
										wcObj.cntrlKeyValueStateTxt = "";
										wcObj.enable = false;
										wcObj.wcEnable = false;
										wcObj.plEnable = false;
										wcObj.wcatEnable = false;
										wcObj.cost = [];
										wcObj.capacity = [];

										var cost = results.WCCost.results;
										if (cost) {
											if (cost.length > 0) {
												var costArr = [];
												for (var c = 0; c < cost.length; c++) {
													if (wcObj.wc === cost[c].Arbpl) {
														costArr.push(cost[c]);
													}
												}
												var cModel = new sap.ui.model.json.JSONModel();
												cModel.setData(cost);
												// g.cost.setModel(cModel);
												wcObj.cost = costArr;

											}
										}
										var capacity = results.WCCapa.results;
										if (capacity) {
											var capArr = [];
											if (capacity.length > 0) {
												for (var ca = 0; ca < capacity.length; ca++) {
													if (wcObj.wc === capacity[ca].Arbpl) {
														capArr.push(capacity[ca]);
													}
												}
												var capModel = new sap.ui.model.json.JSONModel();
												capModel.setData(capacity);
												wcObj.capacity = capacity;
											}
										}
										var classList = results.ClassWC.results;
										if (classList) {
											if (classList.length > 0) {
												for (var i = 0; i < classList.length; i++) {
													classList[i].ctEnable = false;
													classList[i].classEnable = false;
													classList[i].ClassTypeDesc = classList[i].Artxt;
													delete classList[i].Artxt;
													classList[i].ClassDesc = classList[i].Kltxt;
													delete classList[i].Kltxt;
													delete classList[i].Changerequestid;
													delete classList[i].Clint;
													delete classList[i].Service;
													pApproveObject.classItems.push(classList[i]);
												}
												// var cModel = new sap.ui.model.json.JSONModel();
												// cModel.setData(classList);
												// g.class.setModel(cModel);
											}
										}

										var charList = results.ValueWC.results;
										if (charList) {
											if (charList.length > 0) {
												for (var j = 0; j < charList.length; j++) {
													charList[j].cNameEnable = false;
													delete charList[j].Ataut;
													delete charList[j].Ataw1;
													delete charList[j].Atawe;
													delete charList[j].Atcod;
													delete charList[j].Atflb;
													delete charList[j].Atflv;
													delete charList[j].Atimb;
													delete charList[j].Atsrt;
													delete charList[j].Atvglart;
													delete charList[j].Atzis;
													delete charList[j].Changerequestid;
													delete charList[j].CharName;
													delete charList[j].Charid;
													delete charList[j].Classtype;
													delete charList[j].Service;
													delete charList[j].Valcnt;
													charList[j].slNo = j + 1;
													charList[j].flag = charList[j].Class + "-" + charList[j].slNo;
													pApproveObject.characteristics.push(charList[j]);
												}
												// var _cModel = new sap.ui.model.json.JSONModel();
												// _cModel.setData(charList);
												// g.char.setModel(_cModel);
												// g.chData = charList;
												// wcObj.Char = charList;
											}
										}
										AIWListWCData.push(wcObj);
										g.setCommonApprovalData("AIWListWCModel", pApproveObject);
									}
								}
								sap.ui.getCore().getModel("AIWListWCModel").setSizeLimit(AIWListWCData.length);
								sap.ui.getCore().getModel("AIWListWCModel").setData(AIWListWCData);
								g.updateCount("workCenter", AIWListWCData);
							}
						} else if (sType === "GTLTab") {
							// var header = d.GTList.results[0];
							var basic = results.GTList.results; //GTHdr
							if (basic) {
								for (var gtl = 0; gtl < basic.length; gtl++) {
									var gtlData = {
										validFrm: formatter.getDateFormat(basic[gtl].Datuv),
										grp: basic[gtl].Tlgnhdr,
										vEquiLbl: false,
										vEqui: false,
										vEquiDesc: false,
										vFlocLbl: false,
										vFloc: false,
										vFlocDesc: false,
										flocEnb: false,
										equiEnb: false,
										bAddComponent: true,
										enable: false,
										KDenable: false,
										header: [],

										operation: [],
										component: [],
										Class: [],
										Char: [],
										MaintPckg: [],
										// PRT: [],
										// OprRel: [],
										// SrvPckgOvrw: [],
										// InspChar: [],
									};
									var header = results.GTList.results;
									if (header.length > 0) {
										// gtlData.header = header;
										for (var h = 0; h < header.length; h++) {
											if (gtlData.grp === header[h].Tlgnhdr) {
												var gtheader = {};
												gtheader.PPenable = false;
												gtheader.Grpenable = false;
												gtheader.pPlantDesc = header[h].Iwerktxt;
												gtheader.usageDesc = header[h].TlUsgTxt;
												gtheader.plGrpDesc = header[h].Plnnrgrptxt;
												gtheader.statusDesc = header[h].Statustxt;
												gtheader.sysCondDesc = header[h].Anlzux;
												gtheader.stratDesc = header[h].Strattxt;
												gtheader.Plnal = header[h].Tplnal;
												gtheader.Verwe = header[h].Tverwe;
												// gtheader.usg = header[h].Tverwe;
												gtheader.plEnable = false;
												gtheader.valueStateT = "None";
												gtheader.valueStatePP = "None";
												gtheader.valueStateU = "None";
												gtheader.valueStateS = "None";
												gtheader.groupCounter = header[h].Tplnal;
												gtheader.Ktext = header[h].Ktext;
												gtheader.profile = header[h].Profident;
												// gtheader.Ktext = header[h].Werks2gtl;
												gtheader.wc = header[h].Tarbpl;
												gtheader.keydate = header[h].Keydate;
												gtheader.plant = header[h].Wcplant;
												gtheader.Iwerk = header[h].Werks;
												gtheader.usage = header[h].Tverwe;
												gtheader.plannerGrp = header[h].Vagrp;
												gtheader.Statu = header[h].Statu;
												gtheader.systemCond = header[h].Anlzu;
												gtheader.groupVal = header[h].Tlgnhdr;
												gtheader.groupCounterDesc = header[h].Ktext;
												gtheader.wcDesc = header[h].Wcdescription;
												gtheader.assembly = header[h].Istru;
												gtheader.deletion = header[h].Delkz;
												gtheader.Plnnrgrptxt = header[h].Plnnrgrptxt;
												gtheader.Statustxt = header[h].Statustxt;
												gtheader.Anlzux = header[h].Anlzux;
												gtheader.Istrux = header[h].Istrux;
												// added
												gtheader.insPtDesc = header[h].Slwbeztxt;
												gtheader.insPt = header[h].Slwbez;
												gtheader.extNum = header[h].Extnumtxt;
												gtheader.tlusg = header[h].Tverwe;
												gtheader.grp = header[h].Tlgnhdr;
												gtheader.assmbly = header[h].Istru;
												gtheader.assmblyDesc = header[h].Istrux;
												gtheader.Strat = header[h].Strat;
												gtlData.header.push(gtheader);
											}
										}
									}
									var operation = results.GTOprs.results;
									if (operation.length > 0) {
										// gtlData.operation = operation;
										for (var o = 0; o < operation.length; o++) {
											if (gtlData.grp === operation[o].Tlgnhdr) {
												var gtoperation = {};
												gtoperation = operation[o];
												gtoperation.calcKeyDesc = "";
												gtoperation.actTypDesc = "";
												gtoperation.Vornr = operation[o].Vornr;
												gtoperation.flag = operation[o].Tplnal + "-" + operation[o].Vornr;
												gtoperation.Arbpl = operation[o].TlArbpl;
												gtoperation.Plnal = operation[o].Tplnal;
												gtoperation.opState = "None";
												gtoperation.opDescState = "None";
												gtoperation.wcState = "None";
												gtoperation.plantState = "None";
												gtoperation.ctrlKeyState = "None";

												gtoperation.operation = operation[o].Gvornr2op;
												gtoperation.subOp = operation[o].Uvorn;
												gtoperation.workCenter = operation[o].TlArbpl;
												gtoperation.plant = operation[o].Werks2gop;
												gtoperation.controlKey = operation[o].Steus2gop;
												gtoperation.Steus = operation[o].Steus2gop;
												gtoperation.shortText = operation[o].Ltxa1;
												gtoperation.work = operation[o].Arbei;
												gtoperation.unitForWork = operation[o].Arbeh;
												gtoperation.number = operation[o].Anzzl;
												gtoperation.calcKey = operation[o].Indet;
												gtoperation.normDuration = operation[o].Dauno;
												gtoperation.uomDuration = operation[o].Daune;
												gtoperation.workPerc = operation[o].Prznt.toString();
												gtoperation.exeFactor = operation[o].Aufkt;
												gtoperation.Werks = operation[o].Werks2gop;
												gtoperation.actType = operation[o].Larnt2gop;
												gtoperation.stdTextKey = operation[o].Ktsch;
												gtoperation.assembly = operation[o].Tistru;
												gtoperation.noOfTime = operation[o].Loanz;
												gtoperation.sutability = operation[o].Qualf2gop;
												gtoperation.wageGroup = operation[o].Logrp2gop;
												gtoperation.wageType = operation[o].Loart;
												gtoperation.sysCondition = operation[o].Tanlzu;
												gtoperation.orderQty = operation[o].Bmvrg;
												gtoperation.ordQtyUnit = operation[o].Bmeih;
												gtoperation.netPrice = operation[o].Opreis;
												gtoperation.currency = operation[o].Owaers;
												gtoperation.priceUnit = operation[o].Opeinh;
												gtoperation.planDelTime = operation[o].Plifz;
												gtoperation.costElement = operation[o].Sakto2gop;
												gtoperation.materialGrp = operation[o].Omatkl;
												gtoperation.puchGroup = operation[o].Oekgrp;
												gtoperation.vendor = operation[o].Lifnr;
												gtoperation.purchOrg = operation[o].Ekorg;
												gtoperation.shortTerm = operation[o].Sortl;
												gtoperation.purchInfo = operation[o].Infnr;
												gtoperation.fieldKey = operation[o].Slwid;
												gtoperation.purchDoc = operation[o].Ebeln;
												gtoperation.purchDocItem = operation[o].Ebelp2gop;
												gtoperation.userFld = operation[o].Slwid;
												gtoperation.capCat = operation[o].Qlkapar;
												gtoperation.capCatDesc = operation[o].Kapartxt;
												gtoperation.quantity1_ = operation[o].Use04;
												gtoperation.quantity1 = operation[o].Usr04;
												gtoperation.quantity2 = operation[o].Usr05;
												gtoperation.quantity2_ = operation[o].Use05;
												gtoperation.value3 = operation[o].Usr06;
												gtoperation.value4 = operation[o].Usr07;
												gtoperation.value3_ = operation[o].Use06;
												gtoperation.value4_ = operation[o].Use07;
												gtoperation.text1 = operation[o].Usr00;
												gtoperation.text2 = operation[o].Usr01;
												gtoperation.text3 = operation[o].Usr03;
												gtoperation.text4 = operation[o].Usr04;
												gtoperation.date1 = operation[o].Usr08;
												gtoperation.date2 = operation[o].Usr09;
												gtoperation.indicator1 = operation[o].Usr10;
												gtoperation.indicator2 = operation[o].Usr11;
												gtoperation.Usrtxtname1 = operation[o].Usrtxtname1;
												gtoperation.Usrtxtflg1 = operation[o].Usrtxtflg1;
												gtoperation.Usrtxtname2 = operation[o].Usrtxtname2;
												gtoperation.Usrtxtflg2 = operation[o].Usrtxtflg2;
												gtoperation.Usrtxtname3 = operation[o].Usrtxtname3;
												gtoperation.Usrtxtflg3 = operation[o].Usrtxtflg3;
												gtoperation.Usrtxtname4 = operation[o].Usrtxtname4;
												gtoperation.Usrtxtflg4 = operation[o].Usrtxtflg4;
												gtoperation.Usrqtyname1 = operation[o].Usrqtyname1;
												gtoperation.Usrqtyflg1 = operation[o].Usrqtyflg1;
												gtoperation.Usrqtyname2 = operation[o].Usrqtyname2;
												gtoperation.Usrqtyflg2 = operation[o].Usrqtyflg2;
												gtoperation.Usrvalname1 = operation[o].Usrvalname1;
												gtoperation.Usrvalflg1 = operation[o].Usrvalflg1;
												gtoperation.Usrvalname2 = operation[o].Usrvalname2;
												gtoperation.Usrvalflg2 = operation[o].Usrvalflg2;
												gtoperation.Usrdatename1 = operation[o].Usrdatename1;
												gtoperation.Usrdatflg1 = operation[o].Usrdatflg1;
												gtoperation.Usrdatename2 = operation[o].Usrdatename2;
												gtoperation.Usrdatflg2 = operation[o].Usrdatflg2;
												gtoperation.Usrindname1 = operation[o].Usrindname1;
												gtoperation.Usrindflag1 = operation[o].Usrindflag1;
												gtoperation.Usrindname2 = operation[o].Usrindname2;
												gtoperation.Usrindflag2 = operation[o].Usrindflag2;
												gtoperation.qual = operation[o].Qlotype;
												gtoperation.search = operation[o].Qsearchtm;
												gtoperation.groupCounter = operation[o].Tplnal;
												gtoperation.VornrEnable = false;
												gtoperation.UvornEnable = false;
												gtoperation.equi = operation[o].EqunrGop
												gtoperation.floc = operation[o].TplnrGop
													// gtoperation.Component = [];
												gtoperation.PRT = [];
												gtoperation.OprRel = [];
												gtoperation.SrvPckgOvrw = [];
												gtoperation.InspChar = [];

												var aGtOpRel = results.GTRel.results;
												if (aGtOpRel && aGtOpRel.length > 0) {
													for (var c in aGtOpRel) {
														if (gtlData.grp === aGtOpRel[c].Tlgnhdr && gtoperation.Plnal === aGtOpRel[c].Tplnal && gtoperation ===
															aGtOpRel[c].Vorn2) {
															var objOprRel = {
																Plnal: aGtOpRel[c].Tplnal,
																Vornr: aGtOpRel[c].Vorn2,
																OperationOR: aGtOpRel[c].Vornrgrel,
																Offset: aGtOpRel[c].Dauer,
																OUn: aGtOpRel[c].Zeinh,
																RelType: aGtOpRel[c].Aobar,
																PO: aGtOpRel[c].Gprznt,
																OI: aGtOpRel[c].Provg,
																ID: aGtOpRel[c].Gkalid,
																WrkCtrOR: aGtOpRel[c].Arbplgrel,
																PlantOR: aGtOpRel[c].Werksgrel,
															}
															gtoperation.OprRel.push(objOprRel);
														}
													}
												}
												var aGtPrt = results.GTPRT.results;
												if (aGtPrt && aGtPrt.length > 0) {
													for (var c = 0; c < aGtPrt.length; c++) {
														if (gtlData.grp === aGtPrt[c].Tlgnhdr && gtoperation.Plnal === aGtPrt[c].Tplnal && gtoperation.Vornr === aGtPrt[c].Vornrgprt) {
															var objPRT = {
																grp: aGtPrt[c].Tlgnhdr,
																Plnal: aGtPrt[c].Tplnal,
																Vornr: aGtPrt[c].Vornrgprt,
																ItmNum: aGtPrt[c].Psnfh,
																ItmCat: aGtPrt[c].Fhmar,
																PRT: aGtPrt[c].Fhmnr,
																// PRTDesc: aGtPrt[c].Fhwrk,
																Qty: aGtPrt[c].Mgvgw,
																UOM: aGtPrt[c].Mgeinh,
																QtyFrmla: aGtPrt[c].Mgform,
																PRTCtrl: aGtPrt[c].Steuf,
																PRTCtrlDesc: aGtPrt[c].Stftxt,
																StdUsgVal: aGtPrt[c].Ewvgw,
																StdUsgUOM: aGtPrt[c].Eweinh,
																UsgValFrmla: aGtPrt[c].Ewform,
																Plant: aGtPrt[c].Fhwrk,
																docType: aGtPrt[c].Dokareprt,
																docTypeDesc: "",
																docPart: aGtPrt[c].Doktleprt,
																docVersion: aGtPrt[c].Dokvreprt,
																prtEnable: false,
															}

															if (objPRT.ItmCat === "M") {
																objPRT.title = "Material";
																objPRT.matEnable = true;
																objPRT.eqEnable = false;
																objPRT.msptEnable = false;
																objPRT.docEnable = false;
																objPRT.othEnable = false;
															} else if (objPRT.ItmCat === "E") {
																objPRT.title = "Equipment";
																objPRT.matEnable = false;
																objPRT.eqEnable = true;
																objPRT.msptEnable = false;
																objPRT.docEnable = false;
																objPRT.othEnable = false;
															} else if (objPRT.ItmCat === "P") {
																objPRT.title = "Measuring Point";
																objPRT.matEnable = false;
																objPRT.eqEnable = false;
																objPRT.msptEnable = true;
																objPRT.docEnable = false;
																objPRT.othEnable = false;
															} else if (objPRT.ItmCat === "D") {
																objPRT.title = "Document";
																objPRT.matEnable = false;
																objPRT.eqEnable = false;
																objPRT.msptEnable = false;
																objPRT.docEnable = true;
																objPRT.othEnable = false;
															} else if (objPRT.ItmCat === "O") {
																objPRT.title = "Others";
																objPRT.matEnable = false;
																objPRT.eqEnable = false;
																objPRT.msptEnable = false;
																objPRT.docEnable = false;
																objPRT.othEnable = true;
															}
															gtoperation.PRT.push(objPRT);
														}
													}
												}
												var aGtInsp = results.GTInsp.results;
												if (aGtInsp && aGtInsp.length > 0) {
													for (var c = 0; c < aGtInsp.length; c++) {
														if (gtlData.grp === aGtInsp[c].Tlgnhdr && gtoperation.Plnal === aGtInsp[c].Tplnal && gtoperation.Vornr === aGtInsp[c].Vornrgins) {
															var objInsp = {
																group: aGtInsp[c].Tlgnhdr,
																Plnal: aGtInsp[c].Tplnal,
																Vornr: aGtInsp[c].Vornrgins,

																InspChar: aGtInsp[c].Merknr,
																PrstInd: aGtInsp[c].Vste2gins,
																QuanChar: formatter.statusSel(aGtInsp[c].Quantitat),
																QualChar: formatter.statusSel(aGtInsp[c].QpmkRef),
																MastInspChar: aGtInsp[c].Verw2gins,
																Plant: aGtInsp[c].Uzae2tlgn,
																Version: aGtInsp[c].Ver2tlgni,
																ShrtTxt: aGtInsp[c].Kurztext,
																InspMthd: aGtInsp[c].Pmth2gins,
																InspMthdPlnt: aGtInsp[c].Qwe2tlgni,
																TolKey: aGtInsp[c].Toleranzs,
																VrsnInspMthd: aGtInsp[c].Pmtversio,
																SampProc: aGtInsp[c].Stichprve,
																SampUOM: aGtInsp[c].Probemgeh,
																BaseSampQty: aGtInsp[c].Pruefeinh.toString(),
																CodeGrp: aGtInsp[c].Auswmenge,
																InspEnable: false
															};
															gtoperation.InspChar.push(objInsp);
														}
													}
												}
												var aGtSpack = results.GTSpack.results;
												if (aGtSpack && aGtSpack.length > 0) {
													for (var c = 0; c < aGtSpack.length; c++) {
														if (gtlData.grp === aGtSpack[c].Tlgnhdr && gtoperation.Plnal === aGtSpack[c].Tplnal &&
															gtoperation.Vornr === aGtSpack[c].Vornrr) {
															var oSPO = {
																group: aGtSpack[c].Tlgnhdr,
																Plnal: aGtSpack[c].Tplnal,
																Vornr: aGtSpack[c].Vornrr,
																LineNum: aGtSpack[c].SrvLine,
																DelIndSP: formatter.statusSel(aGtSpack[c].Del),
																ActNum: aGtSpack[c].Srvpos,
																ShrtTxt: aGtSpack[c].Ktext1,
																Qty: aGtSpack[c].Mengegspk,
																BUomSP: aGtSpack[c].Meinsgspk,
																GrossPrc: aGtSpack[c].Tbtwr,
																CurKey: aGtSpack[c].Waersgspk,
																Work: aGtSpack[c].IntWork,
																UnitOfWork: aGtSpack[c].Iwein,
																SPEnabled: false,
																DelIndSPEnabled: false
															};
															gtoperation.SrvPckgOvrw.push(oSPO);
														}
													}
												}

												gtlData.operation.push(gtoperation);

												var maintPckgDefault = results.GTMpackRead.results;
												var currReadMpack = [];
												if (maintPckgDefault.length > 0) {
													for (var w in maintPckgDefault) {
														if (gtlData.grp === maintPckgDefault[w].Tlgnhdr && gtoperation.Plnal === maintPckgDefault[w].Tplnal) {
															currReadMpack.push(maintPckgDefault[w]);
														}
													}
												}

												var maintPckg = results.GTMPack.results;
												var currSelMpack = [];
												if (maintPckg && maintPckg.length > 0) {
													for (var x in maintPckg) {
														if (gtlData.grp === maintPckg[x].Tlgnhdr && gtoperation.Plnal === maintPckg[x].Tplnal &&
															gtoperation.Vornr === maintPckg[x].Vorn2gmpk) {
															currSelMpack.push(maintPckg[x]);
														}
													}
												}

												var oMaintPckg = {};
												if (currReadMpack.length > 0) {
													oMaintPckg = {
														Plnal: currReadMpack[0].Tplnal,
														Vornr: gtoperation.Vornr,
														Strat: currReadMpack[0].Startgmpk,
														SOp: "",
														Ltxa1: gtoperation.Ltxa1,
														flag: currReadMpack[0].Tplnal + "-" + gtoperation.Vornr,
														MPArr: [],
													};
													for (var f in currReadMpack) {
														var currReadObj = currReadMpack[f];
														oMaintPckg[currReadObj.Paketgmpk] = false;
													}
												}

												if (currSelMpack.length > 0) {
													for (var z in currSelMpack) {
														currSelMpack[z].Vornr = currSelMpack[z].Vorn2gmpk;
														currSelMpack[z].Strat = currSelMpack[z].Startgmpk;
														currSelMpack[z].Paket = currSelMpack[z].Paketgmpk;
														currSelMpack[z].MPEnable = false;

														var currSelObj = currSelMpack[z];
														// if (currSelMpack[z].IsSelected === 'X') {
														oMaintPckg[currSelObj.Paketgmpk] = true;
														// }
													}
													oMaintPckg.MPArr = currSelMpack;
												}
												gtlData.MaintPckg.push(oMaintPckg);
											}
										}
									}
									var component = results.GTComp.results;
									if (component.length > 0) {
										// gtlData.component = component;
										for (var c = 0; c < component.length; c++) {
											if (gtlData.grp === component[c].Tlgnhdr) {
												var gtcomponent = {};
												gtcomponent = component[c];
												gtcomponent.matDesc = component[c].Maktx;
												gtcomponent.slNo = c + 1;
												gtcomponent.Plnal = component[c].Tplnal;
												gtcomponent.Vornr = component[c].Vornr;
												gtcomponent.activity = component[c].Vornr;
												gtcomponent.flag = component[c].Tplnal + "-" + component[c].Vornr + "-" + gtcomponent.slNo;
												gtcomponent.hFlag = component[c].Tplnal + "-" + component[c].Vornr;
												gtcomponent.group = component[c].Tlgnhdr;
												gtcomponent.grp = component[c].Tlgnhdr;
												gtcomponent.groupCounter = component[c].Tplnal;
												gtcomponent.activity = component[c].Vorn2gcmp;
												gtcomponent.Idnrk = component[c].Idnrk;
												gtcomponent.component = component[c].Idnrk;
												gtcomponent.compDesc = component[c].Maktx;
												gtcomponent.Menge = component[c].Menge;
												gtcomponent.compQty = component[c].Menge;
												gtcomponent.MeinsGcp = component[c].MeinsGcp;
												gtcomponent.compUnit = component[c].MeinsGcp;
												gtcomponent.backFlush = component[c].RgekzGcp;
												//gtcomponent.resv = component[c].Disp;
												gtcomponent.resv = component[c].Disp === "" ? component[c].Disptxt : component[c].Disp;
												gtcomponent.resvDesc = component[c].Disptxt;
												gtcomponent.storageLoc = component[c].Lgortgcmp;
												gtcomponent.costElement = component[c].Saktogcmp;
												gtcomponent.bom = component[c].Stlnrgcmp;
												gtcomponent.bomCat = component[c].Stltygcmp;
												gtcomponent.bomCatDesc = component[c].Stltygcmptxt;
												gtcomponent.itCat = component[c].Postp;
												gtcomponent.assembly = component[c].Istru;
												gtcomponent.sortStr = component[c].Sortf;
												gtcomponent.itemNo = component[c].Posnr;
												gtcomponent.plantMaint = component[c].Sanin;
												gtcomponent.relSales = component[c].Rvrel;
												gtcomponent.relCost = component[c].Sanka;
												gtcomponent.pmAssembly = component[c].Stkkz;
												gtcomponent.spare = component[c].Erskz;
												gtcomponent.matProv = component[c].Beikz;
												gtcomponent.isPlant = component[c].Pswrk;
												gtcomponent.bulkMat = component[c].Schgt;
												gtcomponent.plant = component[c].Werksgcmp;
												gtcomponent.purchGrp = component[c].Ekgrp;
												gtcomponent.price = component[c].Preis;
												gtcomponent.currency = component[c].Waers;
												gtcomponent.prUnit = component[c].Peinh;
												gtcomponent.delTimeD = component[c].Lifzt;
												gtcomponent.matGrp = component[c].Matkl;
												gtcomponent.qtyFix = component[c].Fmeng;
												gtcomponent.altBom = component[c].Stlal;
												gtcomponent.cmpCompEnable = false;
												gtcomponent.cmpEnable = false;
												gtcomponent.cmpVisible = true;
												gtlData.component.push(gtcomponent);
											}
										}
										g.cmpData = component;
									}
									var classList = results.GTClass.results;
									if (classList) {
										if (classList.length > 0) {
											for (var i = 0; i < classList.length; i++) {
												if (gtlData.grp === classList[i].Tlgnhdr) {
													classList[i].ctEnable = false;
													classList[i].classEnable = false;
													classList[i].ClassTypeDesc = classList[i].Artxt;
													delete classList[i].Artxt;
													classList[i].ClassDesc = classList[i].Kltxt;
													delete classList[i].Kltxt;
													delete classList[i].Changerequestid;
													delete classList[i].Clint;
													delete classList[i].Service;
													classList[i].slNo = i + 1;
													classList[i].Plnal = classList[i].Tplnal;
													classList[i].flag = classList[i].Tplnal + "-" + classList[i].slNo;
													gtlData.Class.push(classList[i]);
												}
											}
											g.cData = classList;
											// gtlData.Class = classList;
											/*cModel = new sap.ui.model.json.JSONModel();
											cModel.setData(classList);
											g.class.setModel(cModel);*/
											// g.getView().byId("newClass").setEnabled(true); // check
										}
									}
									var charList = results.GTVal.results;
									if (charList) {
										if (charList.length > 0) {
											for (var j = 0; j < charList.length; j++) {
												if (gtlData.grp === charList[j].Tlgnhdr) {
													charList[j].cNameEnable = false;
													delete charList[j].Ataut;
													delete charList[j].Ataw1;
													delete charList[j].Atawe;
													delete charList[j].Atcod;
													delete charList[j].Atflb;
													delete charList[j].Atflv;
													delete charList[j].Atimb;
													delete charList[j].Atsrt;
													delete charList[j].Atvglart;
													delete charList[j].Atzis;
													delete charList[j].Changerequestid;
													// delete charList[j].CharName;
													delete charList[j].Charid;
													delete charList[j].Classtype;
													delete charList[j].Service;
													delete charList[j].Valcnt;
													charList[j].slNo = j + 1;
													charList[j].Plnal = charList[j].Tplnal;
													charList[j].flag = charList[j].Tplnal + "-" + charList[j].Class + "-" + charList[j].slNo;
													gtlData.Char.push(charList[j]);
												}
												g.chData = charList;
												/*_cModel = new sap.ui.model.json.JSONModel();
												_cModel.setData(charList);
												g.char.setModel(_cModel);*/
												// gtlData.Char = charList;
											}
										}
									}
									// g.getView().setModel(tlDetailModel, "tlDetailModel");
									AIWListGTLData.push(gtlData);
								}
							}
							sap.ui.getCore().getModel("AIWListGTLModel").setSizeLimit(AIWListGTLData.length);
							sap.ui.getCore().getModel("AIWListGTLModel").setData(AIWListGTLData);
							g.updateCount("generalTL", AIWListGTLData);

						} else if (sType === "EqTLTab") {
							if (results.ETList.results.length > 0) {
								var basic = results.ETList.results; //ETHdr
								for (var etl = 0; etl < basic.length; etl++) {
									var etlData = {
										validFrm: formatter.getDateFormat(basic[etl].Datuv),
										grp: basic[etl].Tleqhdr,
										vEquiLbl: true,
										vEqui: true,
										vEquiDesc: true,
										vFlocLbl: false,
										vFloc: false,
										vFlocDesc: false,
										flocEnb: false,
										bAddComponent: true,
										enable: false,
										KDenable: false,
										equiEnb: false,
										header: [],
										operation: [],
										component: [],
										Class: [],
										Char: [],
										MaintPckg: [],
									};
									var header = results.ETList.results;
									if (header.length > 0) {
										for (var h = 0; h < header.length; h++) {
											if (etlData.grp === header[h].Tleqhdr) {
												var etheader = {};
												etheader.pPlantDesc = header[h].Iwerktxt;
												etheader.Grpenable = false;
												etheader.usageDesc = header[h].TlUsgTxt;
												etheader.plGrpDesc = header[h].Plnnrgrptxt;
												etheader.statusDesc = header[h].Statustxt;
												etheader.sysCondDesc = header[h].Anlzux;
												etheader.stratDesc = header[h].Strattxt;
												etheader.Plnal = header[h].Tplnal;
												etheader.Verwe = header[h].Tverwe;
												etheader.plEnable = false;
												etheader.Ktext = header[h].Ktext;
												etheader.valueStateT = "None";
												etheader.valueStatePP = "None";
												etheader.valueStateU = "None";
												etheader.valueStateS = "None";

												// etheader.groupCounter = header[h].Plnal;
												etheader.profile = header[h].Profident;
												// etheader.Ktext = header[h].Eqktx;
												etheader.keydate = header[h].Keydate;
												// etheader.Ktext = header[h].Werks2etl;
												etheader.wc = header[h].Tarbpl;
												etheader.plant = header[h].Wcplant;
												etheader.Iwerk = header[h].Werks;
												etheader.usage = header[h].Tverwe;
												etheader.plannerGrp = header[h].Vagrp;
												etheader.Statu = header[h].Statu;
												etheader.systemCond = header[h].Anlzu;
												etheader.groupVal = header[h].Tleqhdr;
												etheader.groupCounterDesc = header[h].Eqktx;
												etheader.wcDesc = header[h].Wcdescription;
												// etheader.assembly = header[h].Istru;
												etheader.equipment = header[h].Eq2tl;
												etheader.equipmentDesc = header[h].Eqktx;
												etheader.deletion = header[h].Delkz;
												etheader.TlUsgTxt = header[h].TlUsgTxt;
												etheader.Plnnrgrptxt = header[h].Plnnrgrptxt;
												etheader.Statustxt = header[h].Statustxt;
												etheader.Anlzux = header[h].Anlzux;
												// etheader.Istrux = header[h].Istrux;
												etheader.insPtDesc = header[h].Slwbeztxt;
												etheader.insPt = header[h].Slwbez;
												etheader.extNum = header[h].Extnumtxt;
												etheader.tlusg = header[h].Tverwe;
												etheader.grp = header[h].Tlgnhdr;
												etheader.assmbly = header[h].Istru;
												etheader.assmblyDesc = header[h].Istrux;
												etlData.Strat = header[h].Strat;
												etlData.equipment = header[h].Eq2tl; // Equipment of Group
												etlData.equipmentDesc = header[h].Eqktx; // Equipment description of Group
												etlData.header.push(etheader);
											}
										}
										/*var oModel = new sap.ui.model.json.JSONModel();
										oModel.setData(etlData.header);*/
									}
									var operation = results.ETOprs.results;
									if (operation.length > 0) {
										// etlData.operation = operation;
										for (var o = 0; o < operation.length; o++) {
											if (etlData.grp === operation[o].Tleqhdr) {
												var etOperation = {};
												etOperation = operation[o];
												etOperation.calcKeyDesc = "";
												etOperation.actTypDesc = "";
												etOperation.flag = operation[o].Tplnal + "-" + operation[o].Vornr;
												etOperation.Arbpl = operation[o].TlArbpl;
												etOperation.Plnal = operation[o].Tplnal;
												etOperation.Vornr = operation[o].Vornr;
												etOperation.opState = "None";
												etOperation.opDescState = "None";
												etOperation.wcState = "None";
												etOperation.plantState = "None";
												etOperation.ctrlKeyState = "None";

												etOperation.operation = operation[o].Evornr2op;
												etOperation.groupCounter = operation[o].Tplnal;
												etOperation.subOp = operation[o].Uvorn;
												etOperation.workCenter = operation[o].TlArbpl;
												etOperation.Werks = operation[o].Werks2eop;
												etOperation.plant = operation[o].Werks2eop;
												etOperation.controlKey = operation[o].Steus2eop;
												etOperation.Steus = operation[o].Steus2gop;
												etOperation.shortText = operation[o].Ltxa1;
												etOperation.work = operation[o].Arbei;
												etOperation.unitForWork = operation[o].Arbeh;
												etOperation.number = operation[o].Anzzl;
												etOperation.calcKey = operation[o].Indet;
												etOperation.normDuration = operation[o].Dauno;
												etOperation.uomDuration = operation[o].Daune;
												etOperation.workPerc = operation[o].Prznt.toString();
												etOperation.exeFactor = operation[o].Aufkt;
												etOperation.actType = operation[o].Larnt2eop;
												etOperation.stdTextKey = operation[o].Ktsch;
												etOperation.assembly = operation[o].Tistru;
												etOperation.noOfTime = operation[o].Loanz;
												etOperation.sutability = operation[o].Qualf2eop;
												etOperation.wageGroup = operation[o].Logrp2eop;
												etOperation.wageType = operation[o].Loart;
												etOperation.sysCondition = operation[o].Tanlzu;
												etOperation.orderQty = operation[o].Bmvrg;
												etOperation.ordQtyUnit = operation[o].Bmeih;
												etOperation.netPrice = operation[o].Opreis;
												etOperation.currency = operation[o].Owaers;
												etOperation.priceUnit = operation[o].Opeinh;
												etOperation.planDelTime = operation[o].Plifz;
												etOperation.costElement = operation[o].Sakto2eop;
												etOperation.materialGrp = operation[o].Omatkl;
												etOperation.puchGroup = operation[o].Oekgrp;
												etOperation.vendor = operation[o].Lifnr;
												etOperation.purchOrg = operation[o].Ekorg;
												etOperation.shortTerm = operation[o].Sortl;
												etOperation.purchInfo = operation[o].Infnr;
												etOperation.fieldKey = operation[o].Slwid;
												etOperation.purchDoc = operation[o].Ebeln;
												etOperation.purchDocItem = operation[o].Ebelp2eop;
												etOperation.userFld = operation[o].Slwid;
												etOperation.capCat = operation[o].Qlkapar;
												etOperation.capCatDesc = operation[o].Kapartxt;
												etOperation.quantity1_ = operation[o].Use04;
												etOperation.quantity1 = operation[o].Usr04;
												etOperation.quantity2 = operation[o].Usr05;
												etOperation.quantity2_ = operation[o].Use05;
												etOperation.value3 = operation[o].Usr06;
												etOperation.value4 = operation[o].Usr07;
												etOperation.value3_ = operation[o].Use06;
												etOperation.value4_ = operation[o].Use07;
												etOperation.text1 = operation[o].Usr00;
												etOperation.text2 = operation[o].Usr01;
												etOperation.text3 = operation[o].Usr03;
												etOperation.text4 = operation[o].Usr04;
												etOperation.date1 = operation[o].Usr08;
												etOperation.date2 = operation[o].Usr09;
												etOperation.indicator1 = operation[o].Usr10;
												etOperation.indicator2 = operation[o].Usr11;
												etOperation.Usrtxtname1 = operation[o].Usrtxtname1;
												etOperation.Usrtxtflg1 = operation[o].Usrtxtflg1;
												etOperation.Usrtxtname2 = operation[o].Usrtxtname2;
												etOperation.Usrtxtflg2 = operation[o].Usrtxtflg2;
												etOperation.Usrtxtname3 = operation[o].Usrtxtname3;
												etOperation.Usrtxtflg3 = operation[o].Usrtxtflg3;
												etOperation.Usrtxtname4 = operation[o].Usrtxtname4;
												etOperation.Usrtxtflg4 = operation[o].Usrtxtflg4;
												etOperation.Usrqtyname1 = operation[o].Usrqtyname1;
												etOperation.Usrqtyflg1 = operation[o].Usrqtyflg1;
												etOperation.Usrqtyname2 = operation[o].Usrqtyname2;
												etOperation.Usrqtyflg2 = operation[o].Usrqtyflg2;
												etOperation.Usrvalname1 = operation[o].Usrvalname1;
												etOperation.Usrvalflg1 = operation[o].Usrvalflg1;
												etOperation.Usrvalname2 = operation[o].Usrvalname2;
												etOperation.Usrvalflg2 = operation[o].Usrvalflg2;
												etOperation.Usrdatename1 = operation[o].Usrdatename1;
												etOperation.Usrdatflg1 = operation[o].Usrdatflg1;
												etOperation.Usrdatename2 = operation[o].Usrdatename2;
												etOperation.Usrdatflg2 = operation[o].Usrdatflg2;
												etOperation.Usrindname1 = operation[o].Usrindname1;
												etOperation.Usrindflag1 = operation[o].Usrindflag1;
												etOperation.Usrindname2 = operation[o].Usrindname2;
												etOperation.Usrindflag2 = operation[o].Usrindflag2;
												etOperation.qual = operation[o].Qlotype;
												etOperation.search = operation[o].Qsearchtm;
												etOperation.VornrEnable = false;
												etOperation.UvornEnable = false;
												etOperation.equi = operation[o].EqunrEop
												etOperation.floc = operation[o].TplnrEop
												etOperation.PRT = [];
												etOperation.OprRel = [];
												etOperation.SrvPckgOvrw = [];
												etOperation.InspChar = [];

												var aEtOpRel = results.ETRel.results;
												if (aEtOpRel && aEtOpRel.length > 0) {
													for (var c = 0; c < aEtOpRel.length; c++) {
														if (etlData.grp === aEtOpRel[c].Tleqhdr && etOperation.Plnal === aEtOpRel[c].Tplnal && etOperation.Vornr ===
															aEtOpRel[c].Vorn2) {
															var objOprRel = {
																Plnal: aEtOpRel[c].Tplnal,
																Vornr: aEtOpRel[c].Vorn2,
																OperationOR: aEtOpRel[c].Vornrerel,
																Offset: aEtOpRel[c].Dauer,
																OUn: aEtOpRel[c].Zeinh,
																RelType: aEtOpRel[c].Aobar,
																PO: aEtOpRel[c].Eprznt,
																OI: aEtOpRel[c].Provg,
																ID: aEtOpRel[c].Ekalid,
																WrkCtrOR: aEtOpRel[c].Arbplerel,
																PlantOR: aEtOpRel[c].Werkserel,
															}
															etOperation.OprRel.push(objOprRel);
														}
													}
												}
												var aEtInsp = results.ETInsp.results;
												if (aEtInsp && aEtInsp.length > 0) {
													for (var c = 0; c < aEtInsp.length; c++) {
														if (etlData.grp === aEtInsp[c].Tleqhdr && etOperation.Plnal === aEtInsp[c].Tplnal && etOperation.Vornr === aEtInsp[c].Vornreins) {
															var objInsp = {
																group: aEtInsp[c].Tlgnhdr,
																Plnal: aEtInsp[c].Tplnal,
																Vornr: aEtInsp[c].Vornreins,
																InspChar: aEtInsp[c].Merknr,
																PrstInd: aEtInsp[c].Vste2eins,
																QuanChar: formatter.statusSel(aEtInsp[c].Quantitat),
																QualChar: formatter.statusSel(aEtInsp[c].QpmkRef),
																MastInspChar: aEtInsp[c].Verw2eins,
																Plant: aEtInsp[c].Uzae2tlen,
																Version: aEtInsp[c].Ver2tleqi,
																ShrtTxt: aEtInsp[c].Kurztext,
																InspMthd: aEtInsp[c].Pmth2eins,
																InspMthdPlnt: aEtInsp[c].Qwe2tleqi,
																TolKey: aEtInsp[c].Toleranzs,
																VrsnInspMthd: aEtInsp[c].Pmtversio,
																SampProc: aEtInsp[c].Stichprve,
																SampUOM: aEtInsp[c].Probemgeh,
																BaseSampQty: aEtInsp[c].Pruefeinh.toString(),
																CodeGrp: aEtInsp[c].Auswmenge,
																InspEnable: false
															};
															etOperation.InspChar.push(objInsp);
														}
													}
												}
												var aEtSpack = results.ETSpack.results;
												if (aEtSpack && aEtSpack.length > 0) {
													for (var c = 0; c < aEtSpack.length; c++) {
														if (etlData.grp === aEtSpack[c].Tleqhdr && etOperation.Plnal === aEtSpack[c].Tplnal &&
															etOperation.Vornr === aEtSpack[c].Vornrr) {
															var oSPO = {
																group: aEtSpack[c].Tleqhdr,
																Plnal: aEtSpack[c].Tplnal,
																Vornr: aEtSpack[c].Vornrr,
																LineNum: aEtSpack[c].SrvLine,
																DelIndSP: formatter.statusSel(aEtSpack[c].Del),
																ActNum: aEtSpack[c].Srvpos,
																ShrtTxt: aEtSpack[c].Ktext1,
																Qty: aEtSpack[c].Mengeespk,
																BUomSP: aEtSpack[c].Meinsespk,
																GrossPrc: aEtSpack[c].Tbtwr,
																CurKey: aEtSpack[c].Waersespk,
																Work: aEtSpack[c].IntWork,
																UnitOfWork: aEtSpack[c].Iwein,
																DelIndSPEnabled: false,
																SPEnabled: false,
															};
															etOperation.SrvPckgOvrw.push(oSPO);
														}
													}
												}
												var aEtPrt = results.ETPRT.results;
												if (aEtPrt && aEtPrt.length > 0) {
													for (var c = 0; c < aEtPrt.length; c++) {
														if (etlData.grp === aEtPrt[c].Tleqhdr && etOperation.Plnal === aEtPrt[c].Tplnal && etOperation.Vornr === aEtPrt[c].Vornreprt) {
															var objPRT = {
																grp: aEtPrt[c].Tleqhdr,
																Plnal: aEtPrt[c].Tplnal,
																Vornr: aEtPrt[c].Vornreprt,

																ItmNum: aEtPrt[c].Psnfh,
																ItmCat: aEtPrt[c].Fhmar,
																PRT: aEtPrt[c].Fhmnr,
																// PRTDesc: aEtPrt[c].Fhwrk,
																Qty: aEtPrt[c].Mgvgw,
																UOM: aEtPrt[c].Mgeinh,
																QtyFrmla: aEtPrt[c].Mgform,
																PRTCtrl: aEtPrt[c].Steuf,
																PRTCtrlDesc: aEtPrt[c].Stftxt,
																StdUsgVal: aEtPrt[c].Ewvgw,
																StdUsgUOM: aEtPrt[c].Eweinh,
																UsgValFrmla: aEtPrt[c].Ewform,
																Plant: aEtPrt[c].Fhwrk,
																docType: aEtPrt[c].Dokareprt,
																docTypeDesc: "",
																docPart: aEtPrt[c].Doktleprt,
																docVersion: aEtPrt[c].Dokvreprt,
																prtEnable: false,
															}

															if (objPRT.ItmCat === "M") {
																objPRT.title = "Material";
																objPRT.matEnable = true;
																objPRT.eqEnable = false;
																objPRT.msptEnable = false;
																objPRT.docEnable = false;
																objPRT.othEnable = false;
															} else if (objPRT.ItmCat === "E") {
																objPRT.title = "Equipment";
																objPRT.matEnable = false;
																objPRT.eqEnable = true;
																objPRT.msptEnable = false;
																objPRT.docEnable = false;
																objPRT.othEnable = false;
															} else if (objPRT.ItmCat === "P") {
																objPRT.title = "Measuring Point";
																objPRT.matEnable = false;
																objPRT.eqEnable = false;
																objPRT.msptEnable = true;
																objPRT.docEnable = false;
																objPRT.othEnable = false;
															} else if (objPRT.ItmCat === "D") {
																objPRT.title = "Document";
																objPRT.matEnable = false;
																objPRT.eqEnable = false;
																objPRT.msptEnable = false;
																objPRT.docEnable = true;
																objPRT.othEnable = false;
															} else if (objPRT.ItmCat === "O") {
																objPRT.title = "Others";
																objPRT.matEnable = false;
																objPRT.eqEnable = false;
																objPRT.msptEnable = false;
																objPRT.docEnable = false;
																objPRT.othEnable = true;
															}
															etOperation.PRT.push(objPRT);
														}
													}
												}

												etlData.operation.push(etOperation);

												var maintPckgDefault = results.ETMpackRead.results;
												var currReadMpack = [];
												if (maintPckgDefault.length > 0) {
													for (var w in maintPckgDefault) {
														if (etlData.grp === maintPckgDefault[w].Tleqhdr && etOperation.Plnal === maintPckgDefault[w].Tplnal) {
															currReadMpack.push(maintPckgDefault[w]);
														}
													}
												}

												var maintPckg = results.ETMPack.results;
												var currSelMpack = [];
												if (maintPckg.length > 0) {
													for (var x in maintPckg) {
														if (etlData.grp === maintPckg[x].Tleqhdr && etOperation.Plnal === maintPckg[x].Tplnal &&
															etOperation.Vornr === maintPckg[x].Vorn2empk) {
															currSelMpack.push(maintPckg[x]);
														}
													}
												}

												var oMaintPckg = {};
												if (currReadMpack.length > 0) {
													oMaintPckg = {
														Plnal: currReadMpack[0].Tplnal,
														Vornr: etOperationVornr,
														Strat: currReadMpack[0].Startempk,
														SOp: "",
														Ltxa1: etOperation.Ltxa1,
														flag: currReadMpack[0].Tplnal + "-" + etOperation.Vornr,
														MPArr: [],
													};
													for (var f in currReadMpack) {
														var currReadObj = currReadMpack[f];
														oMaintPckg[currReadObj.Paketempk] = false;
													}
												}

												if (currSelMpack.length > 0) {
													for (var z in currSelMpack) {
														currSelMpack[z].Vornr = currSelMpack[z].Vorn2empk;
														currSelMpack[z].Strat = currSelMpack[z].Startempk;
														currSelMpack[z].Paket = currSelMpack[z].Paketempk;
														currSelMpack[z].MPEnable = false;

														var currSelObj = currSelMpack[z];
														if (currSelMpack[z].IsSelected === 'X') {
															oMaintPckg[currSelObj.Paketempk] = true;
														}
													}
													oMaintPckg.MPArr = currSelMpack;
												}
												etlData.MaintPckg.push(oMaintPckg);

											}
										}
										g.oData = etlData.operation;
									}
									component = results.ETComp.results;
									if (component.length > 0) {
										// etlData.component = component;
										for (var e = 0; e < component.length; e++) {
											if (etlData.grp === component[e].Tleqhdr) {
												var etComponent = {};
												etComponent = component[e];
												etComponent.matDesc = component[e].Maktx;
												etComponent.slNo = e + 1;
												etComponent.flag = component[e].Tplnal + "-" + component[e].Vornr + "-" + component[e].slNo;
												etComponent.hFlag = component[e].Tplnal + "-" + component[e].Vornr;
												etComponent.Vornr = component[e].Vornr;
												etComponent.activity = component[e].Vornr;
												etComponent.group = component[e].Tleqhdr;
												etComponent.grp = component[e].Tleqhdr;
												etComponent.groupCounter = component[e].Tplnal;
												//etComponent.activity = component[e].Vorn2ecmp;
												etComponent.component = component[e].Idnrk;
												etComponent.compDesc = component[e].Maktx;
												etComponent.compQty = component[e].Menge;
												etComponent.compUnit = component[e].MeinsEcp;
												etComponent.backFlush = component[e].RgekzEcp;
												//etComponent.resv = component[e].Disp;
												etComponent.resv = component[e].Disp === "" ? component[e].Disptxt : component[e].Disp;
												etComponent.resvDesc = component[e].Disptxt;
												etComponent.storageLoc = component[e].Lgortecmp;
												etComponent.costElement = component[e].Saktoecmp;
												etComponent.bom = component[e].Stlnrecmp;
												etComponent.bomCat = component[e].Stltyecmp;
												etComponent.bomCatDesc = component[e].Stltyecmptxt;
												etComponent.itCat = component[e].Postp;
												etComponent.assembly = component[e].Istru;
												etComponent.sortStr = component[e].Sortf;
												etComponent.itemNo = component[e].Posnr;
												etComponent.plantMaint = component[e].Sanin;
												etComponent.relSales = component[e].Rvrel;
												etComponent.relCost = component[e].Sanka;
												etComponent.pmAssembly = component[e].Stkkz;
												etComponent.spare = component[e].Erskz;
												etComponent.matProv = component[e].Beikz;
												etComponent.isPlant = component[e].Pswrk;
												etComponent.bulkMat = component[e].Schgt;
												etComponent.plant = component[e].Werksecmp;
												etComponent.purchGrp = component[e].Ekgrp;
												etComponent.price = component[e].Preis;
												etComponent.currency = component[e].Waers;
												etComponent.prUnit = component[e].Peinh;
												etComponent.delTimeD = component[e].Lifzt;
												etComponent.matGrp = component[e].Matkl;
												etComponent.qtyFix = component[e].Fmeng;
												etComponent.altBom = component[e].Stlal;
												etComponent.cmpCompEnable = false;
												etComponent.cmpEnable = false;
												etComponent.cmpVisible = true;
												etlData.component.push(etComponent);

											}
										}
										g.cmpData = component;
									}
									var classList = results.ETClass.results;
									if (classList) {
										if (classList.length > 0) {
											for (var i = 0; i < classList.length; i++) {
												if (etlData.grp === classList[i].Tleqhdr) {
													classList[i].ctEnable = false;
													classList[i].classEnable = false;
													classList[i].ClassTypeDesc = classList[i].Artxt;
													delete classList[i].Artxt;
													classList[i].ClassDesc = classList[i].Kltxt;
													delete classList[i].Kltxt;
													delete classList[i].Changerequestid;
													delete classList[i].Clint;
													delete classList[i].Service;
													classList[i].slNo = i + 1;
													classList[i].Plnal = classList[i].Tplnal;
													classList[i].flag = classList[i].Tplnal + "-" + classList[i].slNo;
													etlData.Class.push(classList[i]);

												}
											}
											g.cData = classList;
											/*cModel = new sap.ui.model.json.JSONModel();
											cModel.setData(classList);
											g.class.setModel(cModel);*/
											// etlData.Class = classList;
										}
									}
									var charList = results.ETVal.results;
									if (charList) {
										if (charList.length > 0) {
											for (var j = 0; j < charList.length; j++) {
												if (etlData.grp === charList[j].Tleqhdr) {
													charList[j].cNameEnable = false;
													delete charList[j].Ataut;
													delete charList[j].Ataw1;
													delete charList[j].Atawe;
													delete charList[j].Atcod;
													delete charList[j].Atflb;
													delete charList[j].Atflv;
													delete charList[j].Atimb;
													delete charList[j].Atsrt;
													delete charList[j].Atvglart;
													delete charList[j].Atzis;
													delete charList[j].Changerequestid;
													// delete charList[j].CharName;
													delete charList[j].Charid;
													delete charList[j].Classtype;
													delete charList[j].Service;
													delete charList[j].Valcnt;
													charList[j].slNo = j + 1;
													charList[j].Plnal = charList[j].Tplnal;
													charList[j].flag = charList[j].Tplnal + "-" + charList[j].Class + "-" + charList[j].slNo;
													etlData.Char.push(charList[j]);

												}
												g.chData = charList;
												/*_cModel = new sap.ui.model.json.JSONModel();
												_cModel.setData(charList);
												g.char.setModel(_cModel);*/
												// etlData.Char = charList;
											}
										}
									}
									AIWListETLData.push(etlData);
								}
								sap.ui.getCore().getModel("AIWListETLModel").setSizeLimit(AIWListETLData.length);
								sap.ui.getCore().getModel("AIWListETLModel").setData(AIWListETLData);
								g.updateCount("equiTL", AIWListETLData);
							}
							// g.updateCount("equiTL", AIWListETLData);
						} else if (sType === "FLOCTLTab") {
							if (results.FTList.results.length > 0) {
								var basic = results.FTList.results; //FTHdr
								for (var ftl = 0; ftl < basic.length; ftl++) {
									var ftlData = {
										validFrm: formatter.getDateFormat(basic[ftl].Datuv),
										grp: basic[ftl].Tlflhdr,
										vEquiLbl: false,
										vEqui: false,
										vEquiDesc: false,
										/*floc: basic.Fl2tl,
										flocDesc: basic.Ftxt2tlR,*/
										vFlocLbl: true,
										vFloc: true,
										vFlocDesc: true,
										flocEnb: false,
										equiEnb: false,
										bAddComponent: true,
										enable: false,
										KDenable: false,
										header: [],
										operation: [],
										component: [],
										Class: [],
										Char: [],
										MaintPckg: [],
									};
									var header = results.FTList.results;
									if (header.length > 0) {
										for (var h = 0; h < header.length; h++) {
											if (ftlData.grp === header[h].Tlflhdr) {
												var ftHeader = {};
												ftHeader.Grpenable = false;
												ftHeader.pPlantDesc = header[h].Iwerktxt;
												ftHeader.usageDesc = header[h].TlUsgTxt;
												ftHeader.plGrpDesc = header[h].Plnnrgrptxt;
												ftHeader.statusDesc = header[h].Statustxt;
												ftHeader.sysCondDesc = header[h].Anlzux;
												ftHeader.stratDesc = header[h].Strattxt;
												ftHeader.Plnal = header[h].Tplnal;
												ftHeader.Verwe = header[h].Tverwe;
												ftHeader.plEnable = false;
												ftHeader.Ktext = header[h].Ktext;
												ftHeader.valueStateT = "None";
												ftHeader.valueStatePP = "None";
												ftHeader.valueStateU = "None";
												ftHeader.valueStateS = "None";

												// ftHeader.groupCounter = header[h].Plnal;
												// ftHeader.Ktext = header[h].Pltxt;
												ftHeader.profile = header[h].Profident;
												ftHeader.keydate = header[h].Keydate;
												// ftHeader.Ktext = header[h].Werks2ftl;
												ftHeader.wc = header[h].Tarbpl;
												ftHeader.Iwerk = header[h].Werks;
												ftHeader.plant = header[h].Wcplant;
												ftHeader.tlusg = header[h].Tverwe;
												ftHeader.plannerGrp = header[h].Vagrp;
												ftHeader.Statu = header[h].Statu;
												ftHeader.systemCond = header[h].Anlzu;
												ftHeader.groupVal = header[h].Tlflhdr;
												ftHeader.groupCounterDesc = header[h].Pltxt;
												ftHeader.wcDesc = header[h].Wcdescription;
												ftHeader.assembly = header[h].Istru;
												ftHeader.floc = header[h].Fl2tl;
												ftHeader.flocDesc = header[h].Pltxt;
												ftHeader.deletion = header[h].Delkz;
												ftHeader.TlUsgTxt = header[h].TlUsgTxt;
												ftHeader.Plnnrgrptxt = header[h].Plnnrgrptxt;
												ftHeader.Statustxt = header[h].Statustxt;
												ftHeader.Anlzux = header[h].Anlzux;
												// ftHeader.Istrux = header[h].Istrux;
												ftHeader.insPtDesc = header[h].Slwbeztxt;
												ftHeader.insPt = header[h].Slwbez;
												ftHeader.extNum = header[h].Extnumtxt;
												ftHeader.grp = header[h].Tlgnhdr;
												ftHeader.assmbly = header[h].Istru;
												ftHeader.assmblyDesc = header[h].Istrux;
												etlData.Strat = header[h].Strat;
												ftlData.floc = header[h].Fl2tl; // FLOC of Group
												ftlData.flocDesc = header[h].Pltxt; // FLOC description of Group
												ftlData.header.push(ftHeader);
											}
										}
										/*var oModel = new sap.ui.model.json.JSONModel();
										oModel.setData(ftlData.header);*/
										/*g.getView().byId("taskListHeaderOverview").setModel(oModel, "tlDetailModel");
										g.getModel("tlDetailModel").setProperty("/header", header);*/
									}
									var operation = results.FTOprs.results;
									if (operation.length > 0) {
										// ftlData.operation = operation;
										for (var o = 0; o < operation.length; o++) {
											if (ftlData.grp === operation[o].Tlflhdr) {
												var ftOperation = {};
												ftOperation = operation[o];
												ftOperation.calcKeyDesc = "";
												ftOperation.actTypDesc = "";
												ftOperation.flag = operation[o].Tplnal + "-" + operation[o].Vornr;
												ftOperation.Arbpl = operation[o].TlArbpl;
												ftOperation.Plnal = operation[o].Tplnal;
												ftOperation.Vornr = operation[o].Vornr;
												ftOperation.opState = "None";
												ftOperation.opDescState = "None";
												ftOperation.wcState = "None";
												ftOperation.plantState = "None";
												ftOperation.ctrlKeyState = "None";

												ftOperation.groupCounter = operation[o].Tplnal;
												ftOperation.operation = operation[o].Fvornr2op;
												ftOperation.subOp = operation[o].Uvorn;
												ftOperation.workCenter = operation[o].TlArbpl;
												ftOperation.plant = operation[o].Werks2fop;
												ftOperation.controlKey = operation[o].Steus2fop;
												ftOperation.Steus = operation[o].Steus2gop;
												ftOperation.shortText = operation[o].Ltxa1;
												ftOperation.work = operation[o].Arbei;
												ftOperation.unitForWork = operation[o].Arbeh;
												ftOperation.number = operation[o].Anzzl;
												ftOperation.calcKey = operation[o].Indet;
												ftOperation.Werks = operation[o].Werks2fop;
												ftOperation.normDuration = operation[o].Dauno;
												ftOperation.uomDuration = operation[o].Daune;
												ftOperation.workPerc = operation[o].Prznt.toString();
												ftOperation.exeFactor = operation[o].Aufkt;
												ftOperation.actType = operation[o].Larnt2fop;
												ftOperation.stdTextKey = operation[o].Ktsch;
												ftOperation.assembly = operation[o].Tistru;
												ftOperation.noOfTime = operation[o].Loanz;
												ftOperation.sutability = operation[o].Qualf2fop;
												ftOperation.wageGroup = operation[o].Logrp2fop;
												ftOperation.wageType = operation[o].Loart;
												ftOperation.sysCondition = operation[o].Tanlzu;
												ftOperation.orderQty = operation[o].Bmvrg;
												ftOperation.ordQtyUnit = operation[o].Bmeih;
												ftOperation.netPrice = operation[o].Opreis;
												ftOperation.currency = operation[o].Owaers;
												ftOperation.priceUnit = operation[o].Opeinh;
												ftOperation.planDelTime = operation[o].Plifz;
												ftOperation.costElement = operation[o].Sakto2fop;
												ftOperation.materialGrp = operation[o].Omatkl;
												ftOperation.puchGroup = operation[o].Oekgrp;
												ftOperation.vendor = operation[o].Lifnr;
												ftOperation.purchOrg = operation[o].Ekorg;
												ftOperation.shortTerm = operation[o].Sortl;
												ftOperation.purchInfo = operation[o].Infnr;
												ftOperation.fieldKey = operation[o].Slwid;
												ftOperation.purchDoc = operation[o].Ebeln;
												ftOperation.purchDocItem = operation[o].Ebelp2fop;
												ftOperation.userFld = operation[o].Slwid;
												ftOperation.capCat = operation[o].Qlkapar;
												ftOperation.capCatDesc = operation[o].Kapartxt;
												ftOperation.quantity1_ = operation[o].Use04;
												ftOperation.quantity1 = operation[o].Usr04;
												ftOperation.quantity2 = operation[o].Usr05;
												ftOperation.quantity2_ = operation[o].Use05;
												ftOperation.value3 = operation[o].Usr06;
												ftOperation.value4 = operation[o].Usr07;
												ftOperation.value3_ = operation[o].Use06;
												ftOperation.value4_ = operation[o].Use07;
												ftOperation.text1 = operation[o].Usr00;
												ftOperation.text2 = operation[o].Usr01;
												ftOperation.text3 = operation[o].Usr03;
												ftOperation.text4 = operation[o].Usr04;
												ftOperation.date1 = operation[o].Usr08;
												ftOperation.date2 = operation[o].Usr09;
												ftOperation.indicator1 = operation[o].Usr10;
												ftOperation.indicator2 = operation[o].Usr11;
												ftOperation.Usrtxtname1 = operation[o].Usrtxtname1;
												ftOperation.Usrtxtflg1 = operation[o].Usrtxtflg1;
												ftOperation.Usrtxtname2 = operation[o].Usrtxtname2;
												ftOperation.Usrtxtflg2 = operation[o].Usrtxtflg2;
												ftOperation.Usrtxtname3 = operation[o].Usrtxtname3;
												ftOperation.Usrtxtflg3 = operation[o].Usrtxtflg3;
												ftOperation.Usrtxtname4 = operation[o].Usrtxtname4;
												ftOperation.Usrtxtflg4 = operation[o].Usrtxtflg4;
												ftOperation.Usrqtyname1 = operation[o].Usrqtyname1;
												ftOperation.Usrqtyflg1 = operation[o].Usrqtyflg1;
												ftOperation.Usrqtyname2 = operation[o].Usrqtyname2;
												ftOperation.Usrqtyflg2 = operation[o].Usrqtyflg2;
												ftOperation.Usrvalname1 = operation[o].Usrvalname1;
												ftOperation.Usrvalflg1 = operation[o].Usrvalflg1;
												ftOperation.Usrvalname2 = operation[o].Usrvalname2;
												ftOperation.Usrvalflg2 = operation[o].Usrvalflg2;
												ftOperation.Usrdatename1 = operation[o].Usrdatename1;
												ftOperation.Usrdatflg1 = operation[o].Usrdatflg1;
												ftOperation.Usrdatename2 = operation[o].Usrdatename2;
												ftOperation.Usrdatflg2 = operation[o].Usrdatflg2;
												ftOperation.Usrindname1 = operation[o].Usrindname1;
												ftOperation.Usrindflag1 = operation[o].Usrindflag1;
												ftOperation.Usrindname2 = operation[o].Usrindname2;
												ftOperation.Usrindflag2 = operation[o].Usrindflag2;
												ftOperation.qual = operation[o].Qlotype;
												ftOperation.search = operation[o].Qsearchtm;
												ftOperation.VornrEnable = false;
												ftOperation.UvornEnable = false;
												ftOperation.equi = operation[o].EqunrFop
												ftOperation.floc = operation[o].TplnrFop
												ftOperation.PRT = [];
												ftOperation.OprRel = [];
												ftOperation.SrvPckgOvrw = [];
												ftOperation.InspChar = [];

												var aFtRel = results.FTRel.results;
												if (aFtRel && aFtRel.length > 0) {
													for (var c = 0; c < aFtRel.length; c++) {
														if (ftlData.grp === aFtRel[c].Tlflhdr && ftOperation.Plnal === aFtRel[c].Tplnal && ftOperation.Vornr ===
															aFtRel[c].Vorn2) {
															var objOprRel = {
																Plnal: aFtRel[c].Tplnal,
																Vornr: aFtRel[c].Vorn2,
																OperationOR: aFtRel[c].Vornrfrel,
																Offset: aFtRel[c].Dauer,
																OUn: aFtRel[c].Zeinh,
																RelType: aFtRel[c].Aobar,
																PO: aFtRel[c].Fprznt,
																OI: aFtRel[c].Provg,
																ID: aFtRel[c].Fkalid,
																WrkCtrOR: aFtRel[c].Arbplfrel,
																PlantOR: aFtRel[c].Werksfrel,
															}
															ftOperation.OprRel.push(objOprRel);
														}
													}
												}
												var aFtInsp = results.FTInsp.results;
												if (aFtInsp && aFtInsp.length > 0) {
													for (var c = 0; c < aFtInsp.length; c++) {
														if (ftlData.grp === aFtInsp[c].Tlflhdr && ftOperation.Plnal === aFtInsp[c].Tplnal && ftOperation.Vornr === aFtInsp[c].Vornrfins) {
															var objInsp = {
																group: aFtInsp[c].Tlflhdr,
																Plnal: aFtInsp[c].Tplnal,
																Vornr: aFtInsp[c].Vornrfins,
																InspChar: aFtInsp[c].Merknr,
																PrstInd: aFtInsp[c].Vste2fins,
																QuanChar: formatter.statusSel(aFtInsp[c].Quantitat),
																QualChar: formatter.statusSel(aFtInsp[c].QpmkRef),
																MastInspChar: aFtInsp[c].Verw2fins,
																Plant: aFtInsp[c].Uzae2tlfn,
																Version: aFtInsp[c].Ver2tlfli,
																ShrtTxt: aFtInsp[c].Kurztext,
																InspMthd: aFtInsp[c].Pmth2fins,
																InspMthdPlnt: aFtInsp[c].Qwe2tlfli,
																TolKey: aFtInsp[c].Toleranzs,
																VrsnInspMthd: aFtInsp[c].Pmtversio,
																SampProc: aFtInsp[c].Stichprve,
																SampUOM: aFtInsp[c].Probemgeh,
																BaseSampQty: aFtInsp[c].Pruefeinh.toString(),
																CodeGrp: aFtInsp[c].Auswmenge,
																InspEnable: false
															};
															ftOperation.InspChar.push(objInsp);
														}
													}
												}
												var aFtSpack = results.FTSpack.results;
												if (aFtSpack && aFtSpack.length > 0) {
													for (var c = 0; c < aFtSpack.length; c++) {
														if (ftlData.grp === aFtSpack[c].Tlflhdr && ftOperation.Plnal === aFtSpack[c].Tplnal &&
															ftOperation.Vornr === aFtSpack[c].Vornrr) {
															var oSPO = {
																group: aFtSpack[c].Tlflhdr,
																Plnal: aFtSpack[c].Tplnal,
																Vornr: aFtSpack[c].Vornrr,
																LineNum: aFtSpack[c].SrvLine,
																DelIndSP: formatter.statusSel(aFtSpack[c].Del),
																ActNum: aFtSpack[c].Srvpos,
																ShrtTxt: aFtSpack[c].Ktext1,
																Qty: aFtSpack[c].Mengefspk,
																BUomSP: aFtSpack[c].Meinsfspk,
																GrossPrc: aFtSpack[c].Tbtwr,
																CurKey: aFtSpack[c].Waersfspk,
																Work: aFtSpack[c].IntWork,
																UnitOfWork: aFtSpack[c].Iwein,
																DelIndSPEnabled: false,
																SPEnabled: false
															};
															ftOperation.SrvPckgOvrw.push(oSPO);
														}
													}
												}
												var aFtPrt = results.FTPRT.results;
												if (aFtPrt && aFtPrt.length > 0) {
													for (var c = 0; c < aFtPrt.length; c++) {
														if (ftlData.grp === aFtPrt[c].Tlflhdr && ftOperation.Plnal === aFtPrt[c].Tplnal && ftOperation.Vornr === aFtPrt[c].Vornrfprt) {
															var objPRT = {
																grp: aFtPrt[c].Tlflhdr,
																Plnal: aFtPrt[c].Tplnal,
																Vornr: aFtPrt[c].Vornrfprt,
																ItmNum: aFtPrt[c].Psnfh,
																ItmCat: aFtPrt[c].Fhmar,
																PRT: aFtPrt[c].Fhmnr,
																// PRTDesc: aFtPrt[c].Fhwrk,
																Qty: aFtPrt[c].Mgvgw,
																UOM: aFtPrt[c].Mgeinh,
																QtyFrmla: aFtPrt[c].Mgform,
																PRTCtrl: aFtPrt[c].Steuf,
																PRTCtrlDesc: aFtPrt[c].Stftxt,
																StdUsgVal: aFtPrt[c].Ewvgw,
																StdUsgUOM: aFtPrt[c].Eweinh,
																UsgValFrmla: aFtPrt[c].Ewform,
																Plant: aFtPrt[c].Fhwrk,
																docType: aFtPrt[c].Dokareprt,
																docTypeDesc: "",
																docPart: aFtPrt[c].Doktleprt,
																docVersion: aFtPrt[c].Dokvreprt,
																prtEnable: false,
															}

															if (objPRT.ItmCat === "M") {
																objPRT.title = "Material";
																objPRT.matEnable = true;
																objPRT.eqEnable = false;
																objPRT.msptEnable = false;
																objPRT.docEnable = false;
																objPRT.othEnable = false;
															} else if (objPRT.ItmCat === "E") {
																objPRT.title = "Equipment";
																objPRT.matEnable = false;
																objPRT.eqEnable = true;
																objPRT.msptEnable = false;
																objPRT.docEnable = false;
																objPRT.othEnable = false;
															} else if (objPRT.ItmCat === "P") {
																objPRT.title = "Measuring Point";
																objPRT.matEnable = false;
																objPRT.eqEnable = false;
																objPRT.msptEnable = true;
																objPRT.docEnable = false;
																objPRT.othEnable = false;
															} else if (objPRT.ItmCat === "D") {
																objPRT.title = "Document";
																objPRT.matEnable = false;
																objPRT.eqEnable = false;
																objPRT.msptEnable = false;
																objPRT.docEnable = true;
																objPRT.othEnable = false;
															} else if (objPRT.ItmCat === "O") {
																objPRT.title = "Others";
																objPRT.matEnable = false;
																objPRT.eqEnable = false;
																objPRT.msptEnable = false;
																objPRT.docEnable = false;
																objPRT.othEnable = true;
															}
															ftOperation.PRT.push(objPRT);
														}
													}
												}
												ftlData.operation.push(ftOperation);

												var maintPckgDefault = results.FTMpackRead.results;
												var currReadMpack = [];
												if (maintPckgDefault.length > 0) {
													for (var w in maintPckgDefault) {
														if (ftlData.grp === maintPckgDefault[w].Tlflhdr && ftOperation.Plnal === maintPckgDefault[w].Tplnal) {
															currReadMpack.push(maintPckgDefault[w]);
														}
													}
												}

												var maintPckg = results.FTMPack.results;
												var currSelMpack = [];
												if (maintPckg.length > 0) {
													for (var x in maintPckg) {
														if (ftlData.grp === maintPckg[x].Tlflhdr && ftOperation.Plnal === maintPckg[x].Tplnal &&
															ftOperation.Vornr === maintPckg[x].Vorn2fmpk) {
															currSelMpack.push(maintPckg[x]);
														}
													}
												}

												var oMaintPckg = {};
												if (currReadMpack.length > 0) {
													oMaintPckg = {
														Plnal: currReadMpack[0].Tplnal,
														Vornr: ftOperation.Vornr,
														Strat: currReadMpack[0].Startfmpk,
														SOp: "",
														Ltxa1: ftOperation.Ltxa1,
														flag: currReadMpack[0].Tplnal + "-" + ftOperation.Vornr,
														MPArr: [],
													};
													for (var f in currReadMpack) {
														var currReadObj = currReadMpack[f];
														oMaintPckg[currReadObj.Paketfmpk] = false;
													}
												}

												if (currSelMpack.length > 0) {
													for (var z in currSelMpack) {
														currSelMpack[z].Vornr = currSelMpack[z].Vorn2fmpk;
														currSelMpack[z].Strat = currSelMpack[z].Startfmpk;
														currSelMpack[z].Paket = currSelMpack[z].Paketfmpk;
														currSelMpack[z].MPEnable = true;

														var currSelObj = currSelMpack[z];
														if (currSelMpack[z].IsSelected === 'X') {
															oMaintPckg[currSelObj.Paketfmpk] = true;
														}
													}
													oMaintPckg.MPArr = currSelMpack;
												}
												ftlData.MaintPckg.push(oMaintPckg);
											}
										}
									}
									component = results.FTComp.results;
									if (component.length > 0) {
										//ftlData.component = component;
										for (var f = 0; f < component.length; f++) {
											if (ftlData.grp === component[f].Tlflhdr) {
												var ftComponent = {};
												ftComponent = component[f];
												ftComponent.matDesc = component[f].Maktx;
												ftComponent.slNo = e + 1;
												ftComponent.flag = component[f].Tplnal + "-" + component[f].Vornr + "-" + component[f].slNo;
												ftComponent.hFlag = component[f].Tplnal + "-" + component[f].Vornr;

												ftComponent.group = component[f].Tlflhdr;
												ftComponent.grp = component[f].Tlflhdr;
												ftComponent.groupCounter = component[f].Tplnal;
												ftComponent.activity = component[f].Vornr;
												ftComponent.Vornr = component[f].Vornr;
												// ftComponent.activity = component[f].Vorn2fcmp;
												ftComponent.component = component[f].Idnrk;
												ftComponent.compDesc = component[f].Maktx;
												ftComponent.compQty = component[f].Menge;
												ftComponent.compUnit = component[f].MeinsFcp;
												ftComponent.backFlush = component[f].RgekzFcp;
												//ftComponent.resv = component[f].Disp;
												ftComponent.resv = component[f].Disp === "" ? component[f].Disptxt : component[f].Disp;
												ftComponent.resvDesc = component[f].Disptxt;
												ftComponent.storageLoc = component[f].Lgortfcmp;
												ftComponent.costElement = component[f].Saktofcmp;
												ftComponent.bom = component[f].Stlnrfcmp;
												ftComponent.bomCat = component[f].Stltyfcmp;
												ftComponent.bomCatDesc = component[f].Stltyfcmptxt;
												ftComponent.itCat = component[f].Postp;
												ftComponent.assembly = component[f].Istru;
												ftComponent.sortStr = component[f].Sortf;
												ftComponent.itemNo = component[f].Posnr;
												ftComponent.plantMaint = component[f].Sanin;
												ftComponent.relSales = component[f].Rvrel;
												ftComponent.relCost = component[f].Sanka;
												ftComponent.pmAssembly = component[f].Stkkz;
												ftComponent.spare = component[f].Erskz;
												ftComponent.matProv = component[f].Beikz;
												ftComponent.isPlant = component[f].Pswrk;
												ftComponent.bulkMat = component[f].Schgt;
												ftComponent.plant = component[f].Werksfcmp;
												ftComponent.purchGrp = component[f].Ekgrp;
												ftComponent.price = component[f].Preis;
												ftComponent.currency = component[f].Waers;
												ftComponent.prUnit = component[f].Peinh;
												ftComponent.delTimeD = component[f].Lifzt;
												ftComponent.matGrp = component[f].Matkl;
												ftComponent.qtyFix = component[f].Fmeng;
												ftComponent.altBom = component[f].Stlal;
												ftComponent.cmpCompEnable = false;
												ftComponent.cmpEnable = false;
												ftComponent.cmpVisible = true;
												ftlData.component.push(ftComponent);

											}
										}
										g.cmpData = component;
										/*compModel = new sap.ui.model.json.JSONModel();
										compModel.setData(ftlData.component);*/
									}
									var classList = results.FTClass.results;
									if (classList) {
										if (classList.length > 0) {
											for (var i = 0; i < classList.length; i++) {
												if (ftlData.grp === classList[i].Tlflhdr) {
													classList[i].ctEnable = false;
													classList[i].classEnable = false;
													classList[i].ClassTypeDesc = classList[i].Artxt;
													delete classList[i].Artxt;
													classList[i].ClassDesc = classList[i].Kltxt;
													delete classList[i].Kltxt;
													delete classList[i].Changerequestid;
													delete classList[i].Clint;
													delete classList[i].Service;
													classList[i].slNo = i + 1;
													classList[i].Plnal = classList[i].Tplnal;
													classList[i].flag = classList[i].Tplnal + "-" + classList[i].slNo;
													ftlData.Class.push(classList[i]);

												}
											}
											g.cData = classList;
											/*cModel = new sap.ui.model.json.JSONModel();
											cModel.setData(classList);
											g.class.setModel(cModel);*/
											// ftlData.Class = classList;
										}
									}
									var charList = results.FTVal.results;
									if (charList) {
										if (charList.length > 0) {
											for (var j = 0; j < charList.length; j++) {
												if (ftlData.grp === charList[j].Tlflhdr) {
													charList[j].cNameEnable = false;
													delete charList[j].Ataut;
													delete charList[j].Ataw1;
													delete charList[j].Atawe;
													delete charList[j].Atcod;
													delete charList[j].Atflb;
													delete charList[j].Atflv;
													delete charList[j].Atimb;
													delete charList[j].Atsrt;
													delete charList[j].Atvglart;
													delete charList[j].Atzis;
													delete charList[j].Changerequestid;
													// delete charList[j].CharName;
													delete charList[j].Charid;
													delete charList[j].Classtype;
													delete charList[j].Service;
													delete charList[j].Valcnt;
													charList[j].slNo = j + 1;
													charList[j].Plnal = charList[j].Tplnal;
													charList[j].flag = charList[j].Tplnal + "-" + charList[j].Class + "-" + charList[j].slNo;
													ftlData.Char.push(charList[j]);

												}
												g.chData = charList;
												/*_cModel = new sap.ui.model.json.JSONModel();
												_cModel.setData(charList);
												g.char.setModel(_cModel);*/
												// ftlData.Char = charList;
											}
										}
									}
									AIWListFTLData.push(ftlData);
								}
								sap.ui.getCore().getModel("AIWListFTLModel").setSizeLimit(AIWListFTLData.length);
								sap.ui.getCore().getModel("AIWListFTLModel").setData(AIWListFTLData);
								g.updateCount("flocTL", AIWListFTLData);
							}
						} else if (sType === "OLTab") {
							if (results.Olink) {
								var d = results.Olink.results;
								// g.olData = d;
								if (d !== null) {
									for (var i = 0; i < d.length; i++) {
										var pApproveObject = {
											classItems: [],
											characteristics: []
										};
										var objLink = {};
										objLink.lenable = false;
										objLink.linkCat = d[i].Netyp;
										objLink.objCat = d[i].Kantyp;
										objLink.link = d[i].Objlink;
										// Netyp: d[i].Netyp,
										// objLink.linkCat = d[i].Netyp;
										objLink.linkCatDesc = d[i].Netyptxt;
										// Kantyp= d[i].Kantyp;
										objLink.objCat = d[i].Kantyp;
										objLink.objCatDesc = d[i].Kantyptxt;
										objLink.linkDesc = d[i].Kanxt;
										objLink.netId = d[i].Netid;
										objLink.netIdDesc = d[i].Netidtxt;
										objLink.linkNum = d[i].Lfdknr;
										objLink.autGrp = d[i].Begru;
										objLink.autGrpDesc = d[i].Begtx;
										objLink.validFrm = formatter.getDateFormat(d[i].Datva);
										objLink.timeFrm = formatter.getTime(d[i].Zeitva);
										objLink.validTo = formatter.getDateFormat(d[i].Datvb);
										objLink.timeTo = formatter.getTime(d[i].Zeitvb);
										objLink.medium = d[i].Mediu;
										objLink.mediumDesc = d[i].Medkxt;
										objLink.linkFrmFlEn = false;
										objLink.linkToFlEn = false;
										objLink.linkObjFlEn = false;
										objLink.linkFromEQEn = false;
										objLink.linkToEQEn = false;
										objLink.linkObjEqEn = false;
										objLink.linkCatEn = false;
										objLink.linkCatVS = "None";
										objLink.objCatEn = false;
										objLink.objCatVS = "None";
										objLink.linkFEqLblRQ = true;
										objLink.linkToEqLblRQ = true;
										objLink.linkFrmEq = "";
										objLink.linkFrmEqDesc = "";
										objLink.linkToEq = "";
										objLink.linkToEqDesc = "";
										objLink.linkObjEq = "";
										objLink.linkObjEqDesc = "";
										objLink.linkFrmflLblV = false;
										objLink.linkFrmFlV = false;
										objLink.linkFrmFlDescV = false;
										objLink.linkToFlLblV = false;
										objLink.linkToFlV = false;
										objLink.linkToFlDescV = false;
										objLink.linkObjFlLblV = false;
										objLink.linkObjFlV = false;
										objLink.linkObjFlDescV = false;
										objLink.linkFrmEqLblV = true;
										objLink.linkFrmEqV = true;
										objLink.linkFrmEqDescV = true;
										objLink.linkToEqLblV = true;
										objLink.linkToEQV = true;
										objLink.linkToEqDescV = true;
										objLink.linkObjEqLblV = true;
										objLink.linkObjEqV = true;
										objLink.linkObjEqDescV = true;
										objLink.enable = false;
										objLink.LAM = [];
										objLink.Class = [];
										objLink.Char = [];
										if (objLink.objCat === "E") {
											objLink.linkCatEn = false;
											objLink.linkFrmFlEn = false;
											objLink.linkToFlEn = false;
											objLink.linkObjFlEn = false;
											objLink.linkFEqLblRQ = true;
											objLink.linkToEqLblRQ = true;
											objLink.linkFrmflLblV = false;
											objLink.linkFrmFlV = false;
											objLink.linkFrmFlDescV = false;
											objLink.linkToFlLblV = false;
											objLink.linkToFlV = false;
											objLink.linkToFlDescV = false;
											objLink.linkObjFlLblV = false;
											objLink.linkObjFlV = false;
											objLink.linkObjFlDescV = false;
											objLink.linkCatVS = "None";
											objLink.objCatEn = false;
											objLink.objCatVS = "None";
											objLink.linkFEqLblRQ = true;
											objLink.linkToEqLblRQ = true;
											objLink.linkFrmEq = d[i].Eqvon;
											objLink.linkFrmEqDesc = d[i].Eqtxtf;
											objLink.linkToEq = d[i].Eqnach;
											objLink.linkToEqDesc = d[i].Eqtxtt;
											objLink.linkObjEq = d[i].Eqkant;
											objLink.linkObjEqDesc = d[i].Eqtxtl;
											objLink.linkFrmflLblV = false;
											objLink.linkFrmFlV = false;
											objLink.linkFrmFlDescV = false;
											objLink.linkToFlLblV = false;
											objLink.linkToFlV = false;
											objLink.linkToFlDescV = false;
											objLink.linkObjFlLblV = false;
											objLink.linkObjFlV = false;
											objLink.linkObjFlDescV = false;
											objLink.linkFrmEqLblV = true;
											objLink.linkFrmEqV = true;
											objLink.linkFrmEqDescV = true;
											objLink.linkToEqLblV = true;
											objLink.linkToEQV = true;
											objLink.linkToEqDescV = true;
											objLink.linkObjEqLblV = true;
											objLink.linkObjEqV = true;
											objLink.linkObjEqDescV = true;
											// readStatusProf(objLink.linkCat);
										} else if (objLink.objCat === "T") {
											objLink.linkCatEn = false;
											objLink.linkFromEQEn = false;
											objLink.linkToEQEn = false;
											objLink.linkObjEqEn = false;
											objLink.linkFrmflLblRQ = true;
											objLink.linkToFlLblRQ = true;
											objLink.linkFrmEqLblV = false;
											objLink.linkFrmEqV = false;
											objLink.linkFrmEqDescV = false;
											objLink.linkToEqLblV = false;
											objLink.linkToEQV = false;
											objLink.linkToEqDescV = false;
											objLink.linkObjEqLblV = false;
											objLink.linkObjEqV = false;
											objLink.linkObjEqDescV = false;
											objLink.linkCatVS = "None";
											objLink.objCatEn = false;
											objLink.objCatVS = "None";
											objLink.linkFrmflLblRQ = true;
											objLink.linkToFlLblRQ = true;
											objLink.linkFrmFl = d[i].Tpvon;
											objLink.linkFrmFlDesc = d[i].Fltxtf;
											objLink.linkToFl = d[i].Tpnach;
											objLink.linkToFlDesc = d[i].Fltxtt;
											objLink.linkObjFl = d[i].Tpkant;
											objLink.linkObjFlDesc = d[i].Fltxtl;
											objLink.linkFrmflLblV = true;
											objLink.linkFrmFlV = true;
											objLink.linkFrmFlDescV = true;
											objLink.linkToFlLblV = true;
											objLink.linkToFlV = true;
											objLink.linkToFlDescV = true;
											objLink.linkObjFlLblV = true;
											objLink.linkObjFlV = true;
											objLink.linkObjFlDescV = true;
											objLink.linkFrmEqLblV = false;
											objLink.linkFrmEqV = false;
											objLink.linkFrmEqDescV = false;
											objLink.linkToEqLblV = false;
											objLink.linkToEQV = false;
											objLink.linkToEqDescV = false;
											objLink.linkObjEqLblV = false;
											objLink.linkObjEqV = false;
											objLink.linkObjEqDescV = false;
											// readStatusProf(objLink.linkCat);
										}

										if (d[i].Bezarp === "2") {
											// objLink._oView.byId("twoWayRel").setSelected(true);
											objLink.twoWayRel = true;
											objLink.oneWayRel = false;
										} else if (d[i].Bezarp === "1") {
											// objLink._oView.byId("oneWayRel").setSelected(true);
											objLink.oneWayRel = true;
											objLink.twoWayRel = false;
										}

										if (d[i].Bezarl === "2") {
											// objLink._oView.byId("twoWayUsd").setSelected(true);
											objLink.twoWayUsd = true;
											objLink.oneWayUsd = false;
											objLink.relNotUsd = false;
										} else if (d[i].Bezarl === "1") {
											// objLink._oView.byId("oneWayUsd").setSelected(true);
											objLink.oneWayUsd = true;
											objLink.relNotUsd = false;
											objLink.twoWayUsd = false;
										} else if (d[i].Bezarl === "0") {
											// objLink._oView.byId("relNotUsd").setSelected(true);
											objLink.relNotUsd = true;
											objLink.oneWayUsd = false;
											objLink.twoWayUsd = false;
										}

										var lamData = results.OLLAM.results;
										if (lamData) {
											var lModel = new sap.ui.model.json.JSONModel();
											lModel.setData(lamData);
											objLink.LAM = lamData;
										}

										var classList = results.OLClass.results;
										if (classList) {
											if (classList.length > 0) {
												for (var h = 0; h < classList.length; h++) {
													if (objLink.link === classList[h].Objlink) {
														classList[h].ctEnable = false;
														classList[h].classEnable = false;
														classList[h].ClassTypeDesc = classList[h].Artxt;
														delete classList[h].Artxt;
														classList[h].ClassDesc = classList[h].Kltxt;
														delete classList[h].Kltxt;
														delete classList[h].Changerequestid;
														delete classList[h].Clint;
														delete classList[h].Service;
														// objLink.Class.push(classList[h]);
														pApproveObject.classItems.push(classList[h]);
													}
													/*var cModel = new sap.ui.model.json.JSONModel();
													cModel.setData(classList);
													g.class.setModel(cModel);*/
													// g.olData.Class = classList;
												}
											}

											var charList = results.OLVal.results;
											if (charList) {
												if (charList.length > 0) {
													for (var j = 0; j < charList.length; j++) {
														if (objLink.link === charList[j].Objlink) {
															charList[j].cNameEnable = false;
															delete charList[j].Ataut;
															delete charList[j].Ataw1;
															delete charList[j].Atawe;
															delete charList[j].Atcod;
															delete charList[j].Atflb;
															delete charList[j].Atflv;
															delete charList[j].Atimb;
															delete charList[j].Atsrt;
															delete charList[j].Atvglart;
															delete charList[j].Atzis;
															delete charList[j].Changerequestid;
															// delete charList[j].CharName;
															delete charList[j].Charid;
															delete charList[j].Classtype;
															delete charList[j].Service;
															delete charList[j].Valcnt;
															charList[j].slNo = j + 1;
															charList[j].flag = charList[j].Class + "-" + charList[j].slNo;
															// objLink.Char.push(charList[j]);
															pApproveObject.characteristics.push(charList[j]);
														}
														/*var _cModel = new sap.ui.model.json.JSONModel();
														_cModel.setData(charList);
														g.char.setModel(_cModel);*/
														// g.olData.Char = charList;
														// g.chData = charList;
													}
												}
											}
										}

										AIWListOLData.push(objLink);
										g.setCommonApprovalData("AIWListOLModel", pApproveObject);
										/*sap.ui.getCore().getModel("AIWListOLModel").setData(AIWListOLData);
										g.updateCount("objLink", AIWListOLData);
										sap.ui.getCore().getModel("AIWListOLModel").refresh();*/
									}
									readStatusProf(AIWListOLData[AIWListOLData.length - 1].linkCat, AIWListOLData.length);
								}
							}
						}
					}
				}
				// oMainData.tableBusy = false;
				// oMainModel.setData(oMainData);
			};

			var fnError = function (err) {
				var error = [];
				// oMainData.tableBusy = false;
				// oMainModel.setData(oMainData);
				if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
					.errordetails
					.length === 0) {
					error[0] = JSON.parse(err.responseText).error.message.value;
				} else {
					for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
						error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
					}
				}
				var value = error.join("\n");
				g.invokeMessage(value);
				g.BusyDialog.close();
			};
			if (this.getState() === "MOCR") {
				this.BusyDialog.open();
				oModel.create(url, payload, {
					success: fnSuccessAll,
					error: fnError
				});
			} else {
				if (sType === "MBOMTab") {
					var AIWListMatData = sap.ui.getCore().getModel("AIWListMatModel").getData();
					if (AIWListMatData.length > 0) {
						return;
					}

					oExpand = ["MRBHeader", "MRBItem", "MRBSBIT", "CrAttachments", "Notes"];
				}
				if (sType === "EBOMTab") {
					var AIWListEqData = sap.ui.getCore().getModel("AIWListEqModel").getData();
					if (AIWListEqData.length > 0) {
						return;
					}

					oExpand = ["EBHeader", "EBItem", "EBSBIT", "CrAttachments", "Notes"];
				}
				if (sType === "FLBOMTab") {
					var AIWListFLData = sap.ui.getCore().getModel("AIWListFLModel").getData();
					if (AIWListFLData.length > 0) {
						return;
					}

					oExpand = ["FBHeader", "FBItem", "FBSBIT", "CrAttachments", "Notes"];
				}
				if (sType === "WBSBOMTab") {
					var AIWListWBSData = sap.ui.getCore().getModel("AIWListWBSModel").getData();
					if (AIWListWBSData.length > 0) {
						return;
					}

					oExpand = ["WBHeader", "WBSBIT", "WBItem", "CrAttachments", "Notes"];
				}
				if (sType === "ON") {
					var AIWListONData = sap.ui.getCore().getModel("AIWListONModel").getData();
					if (AIWListONData.length > 0) {
						return;
					}

					oExpand = ["ONALAM", "ONatevt", "ONattrp", "ONetwork", "ONLAM", "ONLink", "ONLLAM", "ONText", "ONVal", "ONWClass",
						"CrAttachments",
						"Notes"
					];
				}
				if (sType === "FLOCTab") {
					if (AIWFLOCModel.length > 0) {
						return;
					}
					oExpand = ["FLAddr", "FLAddrI", "FLClass", "FLEmail", "FLFax", "FLLAM", "FLLAMCH", "FLMltxt", "FLPermit", "FLPrtnr", "FLTele",
						"FLUrl", "FLVal", "FuncLoc", "CrAttachments", "Notes", "FLALTLBEL"
					];
				}
				if (sType === "EQUITab") {
					if (AIWEQUIModel.length > 0) {
						return;
					}
					oExpand = ["EqClass", "EqAddr", "EqAddrI", "EqEmail", "EqFax", "EqMltxt", "EqPermt", "Equipment", "EqLAM", "EqLAMCH", "EqPRT",
						"EqPRTNR", "EqStock", "EqTel", "EqUrl", "EqVal", "EqFleet", "EqDFPS", "CrAttachments", "Notes", "AINHeaderinfo",
						"AINAttachments", "AINCharacteristics", "AINAnnounce"
					];
				}
				if (sType === "MSPTTab") {
					if (AIWMSPTModel.length > 0) {
						return;
					}
					oExpand = ["MSClass", "MSLAM", "MSPoint", "MSVal", "CrAttachments", "Notes"];
				}
				if (sType === "MPMITab") {
					if (AIWMPMIModel.length > 0) {
						return;
					}
					oExpand = ["MPCycle", "MPItem", "MPLAM", "MPLAN", "ClassMpl", "ValuaMpl", "MPOBList", "CrAttachments", "Notes"];
				}

				if (sType === "WCTab") {
					var AIWListWCData = sap.ui.getCore().getModel("AIWListWCModel").getData();
					if (AIWListWCData.length > 0) {
						return;
					}

					oExpand = ["WCCapa", "WCCost", "Workcenter", "CrAttachments", "Notes", "ValueWC", "ClassWC"];
				} else if (sType === "GTLTab") {
					var AIWListGTLData = sap.ui.getCore().getModel("AIWListGTLModel").getData();
					if (AIWListGTLData.length > 0) {
						return;
					}

					oExpand = ["GTClass", "GTHdr", "GTComp", "GTInsp", "GTList", "GTMPack", "GTMpackRead", "GTOprs", "GTPRT", "GTRel", "GTSpack",
						"GTVal", "CrAttachments", "Notes"
					];
				} else if (sType === "EqTLTab") {
					var AIWListETLData = sap.ui.getCore().getModel("AIWListETLModel").getData();
					if (AIWListETLData.length > 0) {
						return;
					}

					oExpand = ["ETClass", "ETComp", "ETInsp", "ETList", "ETMPack", "ETMpackRead", "ETOprs", "ETPRT", "ETRel", "ETSpack", "ETVal",
						"ETHdr", "CrAttachments", "Notes"
					];
				} else if (sType === "FLOCTLTab") {
					var AIWListFTLData = sap.ui.getCore().getModel("AIWListFTLModel").getData();
					if (AIWListFTLData.length > 0) {
						return;
					}

					oExpand = ["FTHdr", "FTClass", "FTComp", "FTInsp", "FTList", "FTMPack", "FTMpackRead", "FTOprs", "FTPRT", "FTRel", "FTSpack",
						"FTVal", "CrAttachments", "Notes"
					];
				} else if (sType === "OLTab") {
					var AIWListOLData = sap.ui.getCore().getModel("AIWListOLModel").getData();
					if (AIWListOLData.length > 0) {
						return;
					}

					oExpand = ["OLClass", "Olink", "OLLAM", "OLVal", "CrAttachments", "Notes"];
				}

				this.BusyDialog.open();
				m.read(url, {
					filters: oFilter,
					urlParameters: {
						"$expand": oExpand
					},
					success: fnSuccess,
					error: fnError
				});
			}

			// var oMainModel = g.getView().getModel("mainView");
			// var oMainData = oMainModel.getData();
			// oMainData.tableBusy = true;
			// oMainModel.setData(oMainData);

		},
		/*
		 * Function to handle enabling of fields in Object link
		 * @param {string} o
		 */
		enableFields: function (o) {
			var g = this;
			if (o === "OL") {
				var AIWListOLModel = this.getView().getModel("AIWListOLModel");
				var AIWListOLData = AIWListOLModel.getData();

				for (var i = 0; i < AIWListOLData.length; i++) {
					AIWListOLData[i].linkCatEn = true;
					AIWListOLData[i].objCatEn = true;
					AIWListOLData[i].linkFromEQEn = true;
					AIWListOLData[i].linkToEQEn = true;
					AIWListOLData[i].linkObjEqEn = true;
					AIWListOLData[i].linkFrmFlEn = true;
					AIWListOLData[i].linkToFlEn = true;
					AIWListOLData[i].linkObjFlEn = true;
					AIWListOLData[i].enable = true;
				}

				AIWListOLModel.setData(AIWListOLData);
				this.getView().setModel(AIWListOLModel, "AIWListOLModel");
			} else if (o === "ON") {
				// var g = this;
				// var obj = {
				// 	enableON: true
				// };
				// var oModel = new sap.ui.model.json.JSONModel();
				// oModel.setData(obj);
				// g.getView().setModel(oModel, "mainView");

			}
		},
		/*
		 * Function to handle disabling of fields in Object link & Object network
		 * @param {string} o
		 */
		disableFields: function (o) {
			var g = this;
			if (o === "OL") {
				var AIWListOLModel = this.getView().getModel("AIWListOLModel");
				var AIWListOLData = AIWListOLModel.getData();

				for (var i = 0; i < AIWListOLData.length; i++) {
					AIWListOLData[i].linkCatEn = false;
					AIWListOLData[i].objCatEn = false;
					AIWListOLData[i].linkFromEQEn = false;
					AIWListOLData[i].linkToEQEn = false;
					AIWListOLData[i].linkObjEqEn = false;
					AIWListOLData[i].linkFrmFlEn = false;
					AIWListOLData[i].linkToFlEn = false;
					AIWListOLData[i].linkObjFlEn = false;
					AIWListOLData[i].enable = false;
				}

				AIWListOLModel.setData(AIWListOLData);
				this.getView().setModel(AIWListOLModel, "AIWListOLModel");
			} else if (o === "ON") {
				// var g = this;
				// var obj = {
				// 	enableON: false
				// };
				// var oModel = new sap.ui.model.json.JSONModel();
				// oModel.setData(obj);
				// g.getView().setModel(oModel, "mainView");

			}
		},
		/*
		 * Function to set hierarchy dialog to global variable
		 * @param {} oPopover
		 */
		setHierPopover: function (oPopover) {
			this._hFragment = oPopover;
		},

		/**
		 * Function to set manage hierarchy dialog to global variable
		 * @param {} oPopover
		 */
		setManageHierFragment: function (oPopover) {
			this._mhFragment = oPopover;
		},

		/**
		 * Function to set filter object dialog to global variable
		 * @param {} oPopover
		 */
		setFilterObjectFragment: function (oPopover) {
			this._ftrFragment = oPopover;
		},

		/**
		 * Function to get filter object dialog
		 * @return MemberExpression
		 */
		getFilterObjectFragment: function () {
			return this._ftrFragment;
		},

		/**
		 * Function to get hierarchy dialog
		 * @return MemberExpression
		 */
		getHierPopover: function () {
			return this._hFragment;
		},

		/**
		 * Function to get manage hierarchy dialog
		 * @return MemberExpression
		 */
		getManageHierFragment: function () {
			return this._mhFragment;
		},

		/*
		 * Function to handle Hierarchy press
		 */
		onHierarchyPress: function () {
			if (!this.getHierPopover()) {
				this.setHierPopover(sap.ui.xmlfragment("ugiaiwui.mdg.aiw.library.fragments.hr.Heirarchy", this));
				this.getView().addDependent(this.getHierPopover());
			}
			if (!this.oDialog) {
				this.oDialog = new Dialog({
					title: "{i18n>aiwHierarchy}",
					width: "100%",
					contentWidth: "100%",
					afterClose: function (ev) {
						this.oDialog.close();
					}.bind(this),
					endButton: [new sap.m.Button({
						text: "{i18n>done}",
						press: function (ev) {
							this.oDialog.close();
						}.bind(this)
					})],
					content: this.getHierPopover()
				});
				this.getView().addDependent(this.oDialog);
				sap.ui.getCore().byId("copyBtn").setVisible(false);
				sap.ui.getCore().byId("massProc").setVisible(false);
				sap.ui.getCore().byId("removeAll").setVisible(false);
				sap.ui.getCore().byId("typeCol").setVisible(false);
				sap.ui.getCore().byId("strIndCol").setVisible(false);
			}

			this.createHierarchy(this.oDialog);
			// this.oDialog.open();
		},
		/*
		 * Function to handle collapse all of the tree table
		 */
		onCollapseAll: function () {
			var oTreeTable = sap.ui.getCore().byId("hierarchyTab");
			oTreeTable.collapseAll();
		},
		/*
		 * Function to handle expand first level of the tree table
		 */
		onExpandFirstLevel: function () {
			var oTreeTable = sap.ui.getCore().byId("hierarchyTab");
			oTreeTable.expandToLevel(99);
		},
		/*
		 * Function to build payload of all objects
		 */
		buildPayload: function () {
			var g = this;
			var sPayload = {
				"ChangeRequestType": this.getCrType(),
				"CrDescription": this.getView().byId("Description").getValue(),
				"Reason": this.getView().byId("reasonForRequest").getSelectedKey(),
				"AiwHierarchy": true,
				"FuncLoc": [],
				"FLAddr": [],
				"FLClass": [],
				"FLVal": [],
				"Equipment": [],
				"EqAddr": [],
				"EqClass": [],
				"EqVal": [],
				"MSPoint": [],
				"MSClass": [],
				"MSVal": [],
				"MPLAN": [],
				"MPItem": [],
				"MPCycle": [],
				"MRBHeader": [],
				"MRBItem": [],
				"MRBSBIT": [],
				"EBHeader": [],
				"EBItem": [],
				"EBSBIT": [],
				"FBHeader": [],
				"FBItem": [],
				"FBSBIT": [],
				"WBHeader": [],
				"WBItem": [],
				"WBSBIT": [],
				"ONetwork": [],
				"ONLAM": [],
				"Workcenter": [],
				"WCCost": [],
				"GTList": [],
				"GTOprs": [],
				"GTComp": [],
				"GTClass": [],
				"GTVal": [],
				"ETList": [],
				"ETOprs": [],
				"ETComp": [],
				"ETClass": [],
				"ETVal": [],
				"FTList": [],
				"FTOprs": [],
				"FTComp": [],
				"FTClass": [],
				"FTVal": [],
				"Olink": [],
				"OLClass": [],
				"OLVal": [],
				"Hierarchy": []
			};
			var AIWFLOCModel = sap.ui.getCore().getModel(g.oModelAIWFLOC).getData();
			var AIWEQUIModel = sap.ui.getCore().getModel(g.oModelAIWEQUI).getData();
			var AIWMSPTModel = sap.ui.getCore().getModel(g.oModelAIWMSPT).getData();
			var AIWMPMIModel = sap.ui.getCore().getModel(g.oModelAIWMPMI).getData();
			var AIWListMatData = sap.ui.getCore().getModel("AIWListMatModel").getData();
			var AIWListEqData = sap.ui.getCore().getModel("AIWListEqModel").getData();
			var AIWListFLData = sap.ui.getCore().getModel("AIWListFLModel").getData();
			var AIWListWBSData = sap.ui.getCore().getModel("AIWListWBSModel").getData();
			var AIWListONData = sap.ui.getCore().getModel("AIWListONModel").getData();
			var AIWListWCData = sap.ui.getCore().getModel("AIWListWCModel").getData();
			var AIWListGTLData = sap.ui.getCore().getModel("AIWListGTLModel").getData();
			var AIWListETLData = sap.ui.getCore().getModel("AIWListETLModel").getData();
			var AIWListFTLData = sap.ui.getCore().getModel("AIWListFTLModel").getData();
			var AIWListOLData = sap.ui.getCore().getModel("AIWListOLModel").getData();

			if (AIWFLOCModel.length > 0) {
				for (var a = 0; a < AIWFLOCModel.length; a++) {
					var sFuncLoc = {
						"Tplnr": AIWFLOCModel[a].Functionallocation,
						"Txtmi": AIWFLOCModel[a].Flocdescription, // Floc Description
						"TplkzFlc": AIWFLOCModel[a].Strucindicator,
						"Tplxt": AIWFLOCModel[a].StrucIndicatorDesc,
						"EditMask": AIWFLOCModel[a].EditMask,
						"Hierarchy": AIWFLOCModel[a].Hierarchy,
						"Fltyp": AIWFLOCModel[a].Floccategory,
						"Flttx": AIWFLOCModel[a].FlocCategoryDesc,
						"Swerk": AIWFLOCModel[a].Maintplant,
						"Plantname": AIWFLOCModel[a].MaintplantDesc,
						"StorFloc": AIWFLOCModel[a].Location, // Location
						"Locationdesc": AIWFLOCModel[a].Locationdesc, // Location Description
						"Abckzfloc": AIWFLOCModel[a].Abckz,
						"Abctx": AIWFLOCModel[a].Abctx,
						"Bukrsfloc": AIWFLOCModel[a].Bukrs,
						"Butxt": AIWFLOCModel[a].Butxt,
						"City": AIWFLOCModel[a].City,
						"KostFloc": AIWFLOCModel[a].Kostl, // Cost Center
						"KokrFloc": AIWFLOCModel[a].Kokrs, // ccPart1
						"Contareaname": AIWFLOCModel[a].Mctxt, // Name
						"PlntFloc": AIWFLOCModel[a].Werks, // Planning Plant
						"Planningplantdes": AIWFLOCModel[a].Planningplantdes, // Planning Plant Description
						"Ingrp": AIWFLOCModel[a].Ingrp, // Planner Group
						"Plannergrpdesc": AIWFLOCModel[a].Innam, // Planner Group Description
						"Arbplfloc": AIWFLOCModel[a].Arbpl, // Work Center
						"Workcenterdesc": AIWFLOCModel[a].Ktext, // Plant Work Center
						"Wergwfloc": AIWFLOCModel[a].WcWerks, // Name
						"Gewrkfloc": AIWFLOCModel[a].MainArbpl, // Main Work Center
						"MainWcDesc": AIWFLOCModel[a].MainKtext, // Work center Plant
						"MainWcPlant": AIWFLOCModel[a].MainWerks, // Work Center Description
						"Tplma": AIWFLOCModel[a].SupFunctionallocation, // Sup FuncLoc
						"Supflocdesc": AIWFLOCModel[a].SupFlocdescription, // Sup FlocDescription
						"BeberFl": AIWFLOCModel[a].BeberFl, // Plant Section
						"Fing": AIWFLOCModel[a].Fing, // Person responsible
						"Tele": AIWFLOCModel[a].Tele, // Phone
						"Submtiflo": AIWFLOCModel[a].ConstrType, // Construction Type
						"Constdesc": AIWFLOCModel[a].ConstructionDesc, // Construction Description
						"Eqart": AIWFLOCModel[a].TechnicalObjectTyp, // TechnicalObjectTyp
						"Eartx": AIWFLOCModel[a].Description, // TechnicalObjectTyp Description
						"Stattext": AIWFLOCModel[a].Stattext, // System Status
						"StsmFloc": AIWFLOCModel[a].StsmEqui, // Status Profile
						"Statproftxt": AIWFLOCModel[a].StsmEquiDesc, // Status Profile Description
						"UstwFloc": AIWFLOCModel[a].UstwEqui, // Status with Status Number
						"UswoFloc": AIWFLOCModel[a].UswoEqui, // Status without Status Number
						"UstaFloc": AIWFLOCModel[a].UstaEqui // User Status
					};
					sPayload.FuncLoc.push(sFuncLoc);

					var sFLAddr = {
						"Funcloc": AIWFLOCModel[a].Functionallocation,
						"Sort1": AIWFLOCModel[a].Sort1,
						"Sort2": AIWFLOCModel[a].Sort1,
						"NameCo": AIWFLOCModel[a].NameCo,
						"PostCod1": AIWFLOCModel[a].PostCod1,
						"City1": AIWFLOCModel[a].City1,
						"Building": AIWFLOCModel[a].Building,
						"Floor": AIWFLOCModel[a].Floor,
						"Roomnum": AIWFLOCModel[a].Roomnum,
						"Street": AIWFLOCModel[a].Street,
						"Strsuppl1": AIWFLOCModel[a].Strsuppl1,
						"Strsuppl2": AIWFLOCModel[a].Strsuppl2,
						"Strsuppl3": AIWFLOCModel[a].Strsuppl3,
						"RPostafl": AIWFLOCModel[a].RefPosta,
						"Landx": AIWFLOCModel[a].Landx
					};
					sPayload.FLAddr.push(sFLAddr);

					var sFLClassList = AIWFLOCModel.classItems;
					if (sFLClassList) {
						if (sFLClassList.length > 0) {
							for (var b = 0; b < sFLClassList.length; b++) {
								var sFLClass = {
									"Funcloc": AIWFLOCModel[a].Functionallocation,
									"Classtype": sFLClassList[b].Classtype,
									"Class": sFLClassList[b].Class,
									"Clstatus1": sFLClassList[b].Clstatus1
								};
								sPayload.FLClass.push(sFLClass);
							}
						}
					}

					var sFLCharList = AIWFLOCModel.characteristics;
					if (sFLCharList) {
						if (sFLCharList.length > 0) {
							for (var c = 0; c < sFLCharList.length; c++) {
								var sFLVal = {
									"Funcloc": AIWFLOCModel[a].Functionallocation,
									"Atnam": sFLCharList[c].Atnam,
									"Textbez": sFLCharList[c].Textbez,
									"Atwrt": sFLCharList[c].Atwrt,
									"Class": sFLCharList[c].Class
								};
								sPayload.FLVal.push(sFLVal);
							}
						}
					}
				}
			}

			if (AIWEQUIModel.length > 0) {
				for (var d = 0; d < AIWEQUIModel.length; d++) {
					var sEquipment = {
						"Herst": AIWEQUIModel[d].Herst, // Manufacturer
						"Equnr": AIWEQUIModel[d].Equnr,
						"Txtmi": AIWEQUIModel[d].Eqktx,
						//"Eqktx" : AIWEQUIModel[d].Eqktx,
						"Swerk": AIWEQUIModel[d].Maintplant,
						"Name1": AIWEQUIModel[d].MaintplantDesc,
						"TplnEilo": AIWEQUIModel[d].Tplnr,
						"Flocdescription": AIWEQUIModel[d].Pltxt,
						"Eqtyp": AIWEQUIModel[d].EquipmentCatogory,
						"Etytx": AIWEQUIModel[d].EquipCatgDescription,
						"Eqart": AIWEQUIModel[d].TechnicalObjectTyp, // TechnicalObjectTyp
						"Eartx": AIWEQUIModel[d].Description, // TechnicalObjectTyp Description
						"Typbz": AIWEQUIModel[d].Typbz, // Model Number
						"SubmEeqz": AIWEQUIModel[d].ConstrType, // Construction Type
						"Constdesc": AIWEQUIModel[d].ConstructionDesc, // Construction Description
						"BukrEilo": AIWEQUIModel[d].Bukrs,
						"Butxt": AIWEQUIModel[d].Butxt,
						"HequEeqz": AIWEQUIModel[d].SuperordinateEquip, // Superord. Equipment
						"SuperordEqDes": AIWEQUIModel[d].SuperordinateEquipDesc, // Superord. Equipment Description
						"TidnEeqz": AIWEQUIModel[d].TechIdNum, // techIndNo
						"KostEilo": AIWEQUIModel[d].Kostl, // Cost Center
						"KokrEilo": AIWEQUIModel[d].Kokrs, // ccPart1
						"Contareaname": AIWEQUIModel[d].Mctxt, // Name
						"StorEilo": AIWEQUIModel[d].Location,
						"Locationdesc": AIWEQUIModel[d].Locationdesc,
						"AbckEilo": AIWEQUIModel[d].Abckz,
						"Abctx": AIWEQUIModel[d].Abctx,
						"PplaEeqz": AIWEQUIModel[d].Werks, // Planning Plant
						"Planningplantdes": AIWEQUIModel[d].Planningplantdes, // Planning Plant Description
						"IngrEeqz": AIWEQUIModel[d].Ingrp, // Planner Group
						"Plannergrpdesc": AIWEQUIModel[d].Innam, // Planner Group Description
						"Gernr": AIWEQUIModel[d].Serge, // manfSerNo
						"MapaEeqz": AIWEQUIModel[d].MapaEeqz, // partNum
						"Stattext": AIWEQUIModel[d].Stattext, // System Status
						"StsmEqui": AIWEQUIModel[d].StsmEqui, // Status Profile
						"Statproftxt": AIWEQUIModel[d].StsmEquiDesc, // Status Profile Description
						"UstwEqui": AIWEQUIModel[d].UstwEqui, // Status with Status Number
						"UswoEqui": AIWEQUIModel[d].UswoEqui, // Status without Status Number
						"UstaEqui": AIWEQUIModel[d].UstaEqui, // User Status
						"Waers": AIWEQUIModel[d].Waers, // Currency

						"ArbpEilo": AIWEQUIModel[d].Arbpl, // Work Center
						"Workcenterdesc": AIWEQUIModel[d].Ktext, // Plant Work Center
						"WorkCenterPlant": AIWEQUIModel[d].WcWerks, // Name
						"ArbpEeqz": AIWEQUIModel[d].MainArbpl, // Main Work Center
						"MainWcDesc": AIWEQUIModel[d].MainKtext, // Work Center Description
						"MainWcPlant": AIWEQUIModel[d].MainWerks, // Work center Plant

						"BebeEilo": AIWEQUIModel[d].BeberFl, // Plant Section
						"Fing": AIWEQUIModel[d].Fing, // Plant Section
						"Tele": AIWEQUIModel[d].Tele, // Plant Section
						"HeqnEeqz": AIWEQUIModel[d].EquipPosition // Position
					};
					sPayload.Equipment.push(sEquipment);

					var sEqAddr = {
						"Equi": AIWEQUIModel[d].Equnr,
						"Sort1": AIWEQUIModel[d].Sort1,
						"Sort2": AIWEQUIModel[d].Sort1,
						"NameCo": AIWEQUIModel[d].NameCo,
						"PostCod1": AIWEQUIModel[d].PostCod1,
						"City1": AIWEQUIModel[d].City1,
						"Building": AIWEQUIModel[d].Building,
						"Floor": AIWEQUIModel[d].Floor,
						"Roomnum": AIWEQUIModel[d].Roomnum,
						"Street": AIWEQUIModel[d].Street,
						"Strsuppl1": AIWEQUIModel[d].Strsuppl1,
						"Strsuppl2": AIWEQUIModel[d].Strsuppl2,
						"Strsuppl3": AIWEQUIModel[d].Strsuppl3,
						"RefPosta": AIWEQUIModel[d].RefPosta
					};
					sPayload.EqAddr.push(sEqAddr);

					var sEqClassList = AIWEQUIModel.classItems;
					if (sEqClassList) {
						if (sEqClassList.length > 0) {
							for (var e = 0; e < sEqClassList.length; e++) {
								var sEqClass = {
									"Equi": AIWEQUIModel[d].Equnr,
									"Classtype": sEqClassList[e].Classtype,
									"Class": sEqClassList[e].Class,
									"Clstatus1": sEqClassList[e].Clstatus1
								};
								sPayload.EqClass.push(sEqClass);
							}
						}
					}

					var sEqCharList = AIWEQUIModel.characteristics;
					if (sEqCharList) {
						if (sEqCharList.length > 0) {
							for (var f = 0; f < sEqCharList.length; f++) {
								var sEqVal = {
									"Equi": AIWEQUIModel[d].Equnr,
									"Atnam": sEqCharList[f].Atnam,
									"Textbez": sEqCharList[f].Textbez,
									"Atwrt": sEqCharList[f].Atwrt,
									"Class": sEqCharList[f].Class
								};
								sPayload.EqVal.push(sEqVal);
							}
						}
					}
				}
			}

			if (AIWMSPTModel.length > 0) {
				for (var j = 0; j < AIWMSPTModel.length; j++) {
					var sMsPoint = {
						"Point": AIWMSPTModel[j].Mspoint,
						"Equnr": AIWMSPTModel[j].Equnr,
						"Eqktx": AIWMSPTModel[j].Eqktx,
						"Tplnr": AIWMSPTModel[j].Tplnr,
						"Floctxt": AIWMSPTModel[j].Pltxt,
						"Mptyp": AIWMSPTModel[j].Mptyp,
						"Mpttx": AIWMSPTModel[j].Mpttx,
						"Codgr": AIWMSPTModel[j].Codgr,
						"Codgrtxt": AIWMSPTModel[j].Codgrtxt,
						"ObtypMs": AIWMSPTModel[j].ObtypMs,
						"Objtypetxt": AIWMSPTModel[j].Txt,
						"AtnamMs": AIWMSPTModel[j].AtnamMs,
						"Atbez": AIWMSPTModel[j].Atbez,
						"Indct": AIWMSPTModel[j].Indct,
						"Cdsuf": AIWMSPTModel[j].Cdsuf,
						"Cjumc": AIWMSPTModel[j].Cjumc,
						"Desir": AIWMSPTModel[j].Desir,
						"Pyeac": AIWMSPTModel[j].Pyeac,
						"Mrmin": AIWMSPTModel[j].Mrmin,
						"Mrmax": AIWMSPTModel[j].Mrmax,
						"Pttxt": AIWMSPTModel[j].Pttxt,
						"Psort": AIWMSPTModel[j].Psort,
						"Inact": AIWMSPTModel[j].Inact,
						"Mseh6": AIWMSPTModel[j].Mseh6,
						"Msehl": AIWMSPTModel[j].Msehl,
						"Decim": AIWMSPTModel[j].Decim.toString(),
						"Locas": AIWMSPTModel[j].Locas,
						"Maktx": AIWMSPTModel[j].Maktx,
						"Begru": AIWMSPTModel[j].Begru,
						"Begtx": AIWMSPTModel[j].Begtx,
						"Expon": AIWMSPTModel[j].Expon,
						"Mrngu": AIWMSPTModel[j].Mrngu,
						"Dstxt": AIWMSPTModel[j].Dstxt,
						"Indrv": AIWMSPTModel[j].Indrv
					};
					sPayload.MSPoint.push(sMsPoint);

					var sMsClassList = AIWMSPTModel.classItems;
					if (sMsClassList) {
						if (sMsClassList.length > 0) {
							for (var h = 0; h < sMsClassList.length; h++) {
								var sMsClass = {
									"Mspoint": AIWMSPTModel[j].Mspoint,
									"Classtype": sMsClassList[h].Classtype,
									"Class": sMsClassList[h].Class,
									"Clstatus1": sMsClassList[h].Clstatus1
								};
								sPayload.MsClass.push(sMsClass);
							}
						}
					}

					var sMsCharList = AIWMSPTModel.characteristics;
					if (sMsCharList) {
						if (sMsCharList.length > 0) {
							for (var i = 0; i < sMsCharList.length; i++) {
								var sMsVal = {
									"Mspoint": AIWMSPTModel[j].Mspoint,
									"Atnam": sMsCharList[i].Atnam,
									"Textbez": sMsCharList[i].Textbez,
									"Atwrt": sMsCharList[i].Atwrt,
									"Class": sMsCharList[i].Class
								};
								sPayload.MsVal.push(sMsVal);
							}
						}
					}
				}
			}

			if (AIWMPMIModel.length > 0) {
				for (var k = 0; k < AIWMPMIModel.length; k++) {
					var sMPLAN = {
						"Warpl": AIWMPMIModel[k].Warpl,
						"Abrho": AIWMPMIModel[k].Abrho,
						"Hunit": AIWMPMIModel[k].Hunit,
						"Mptyp": AIWMPMIModel[k].Mptyp,
						"Wptxt": AIWMPMIModel[k].Wptxt,
						"Stich": AIWMPMIModel[k].Stich,
						"Fabkl": AIWMPMIModel[k].Fabkl,
						"FabklDesc": AIWMPMIModel[k].FabklDesc,
						"Sfakt": AIWMPMIModel[k].Sfakt,
						"Andor": AIWMPMIModel[k].Andor,
						"Mehrfach": AIWMPMIModel[k].Mehrfach,
						"Strat": AIWMPMIModel[k].Strat,
						"StratDesc": AIWMPMIModel[k].StratDesc,
						"Wset": AIWMPMIModel[k].Wset,
						"Ktext": AIWMPMIModel[k].Ktext,
						"Startdate": AIWMPMIModel[k].Stadt,
						"Unitc": AIWMPMIModel[k].Unitc,
						"Szaeh": AIWMPMIModel[k].Szaeh,
						"PointStp": AIWMPMIModel[k].Mpcycleno,

						"Vspos": AIWMPMIModel[k].Vspos,
						"Topos": AIWMPMIModel[k].Topos,
						"Vsneg": AIWMPMIModel[k].Vsneg,
						"Toneg": AIWMPMIModel[k].Toneg,
						"Horiz": AIWMPMIModel[k].Horiz,
						"CallConf": AIWMPMIModel[k].CallConf,
						"PlanSort": AIWMPMIModel[k].PlanSort,
						"Begru": AIWMPMIModel[k].Begru,
					};
					sPayload.MPLAN.push(sMPLAN);

					var sItem = AIWMPMIModel.itemModel;
					if (sItem) {
						for (var l = 0; l < sItem.length; l++) {
							var sMPItem = {
								"Mplan": AIWMPMIModel[k].Warpl,
								"Qmart": sItem[l].Qmart, // notif type
								"Qmartx": sItem[l].nTypeTxt, // notif type desc
								"PlntMi": sItem[l].Werks, // planning plant
								"Planningplantdes": sItem[l].Planningplantdes, // planning plant desc
								"IngrpMi": sItem[l].Ingrp, // planner grp
								"Plannergrpdesc": sItem[l].Innam, // planner grp desc
								"Pstxt": sItem[l].Pstxt, // maint item desc
								"WergwMi": sItem[l].WergwMi, // main wc desc
								"ArbpMi": sItem[l].ArbpMi, // main wc
								"Auart": sItem[l].Auart, // order type 
								"Ordertypedesc": sItem[l].oTypeTxt, // order type desc
								"Bautl": sItem[l].AsmblyOb, // assembly
								"Cycleseq": sItem[l].Cycleseq,
								"Equnr": sItem[l].Equnr, // equip
								"Equipdesc": sItem[l].Eqktx, // equip desc
								"TplnrMi": sItem[l].Tplnr, // floc
								"Flocdesc": sItem[l].Pltxt, // floc desc
								"Mitemnumb": sItem[l].Mitemnumb, // maint item 
							};
							sPayload.MPItem.push(sMPItem);
						}
					}

					var sCycle = AIWMPMIModel.cycleModel;
					if (sCycle) {
						for (var m = 0; m < sCycle.length; m++) {
							var sMPCycle = {
								"Mplan": AIWMPMIModel[k].Warpl,
								"Point": sCycle[m].Point,
								"Ofsetunit": sCycle[m].Ofsetunit,
								"PakText": sCycle[m].PakText,
								"Zeieh": sCycle[m].Zeieh,
								"Zykl1": sCycle[m].Zykl1,
								"Cycleseqi": sCycle[m].Cycleseqi,
								"Mpcycleno": sCycle[m].Mpcycleno
							};
							sPayload.MPCycle.push(sMPCycle);
						}
					}
				}
			}

			// BOM/ON

			if (AIWListMatData.length > 0) {
				for (var i = 0; i < AIWListMatData.length; i++) {
					var mHeader = {
						"Matnr": AIWListMatData[i].Matnr,
						//"Stalt": "",
						"Stlan": AIWListMatData[i].Stlan,
						"Werks": AIWListMatData[i].Werks,
						"Bomstatus": AIWListMatData[i].Bomstatus,
						"Lngtxt": AIWListMatData[i].Lngtxt,
						"Txtmi": AIWListMatData[i].Lngtxt,
						"Validfrom": this.formatter._formatDate(AIWListMatData[i].Validfrom),
						"Baseqty": AIWListMatData[i].BaseQty,
						"Baseuom": AIWListMatData[i].BaseUom,
						"Validtoda": this.formatter._formatDate(AIWListMatData[i].Validtoda)
					};
					sPayload.MRBHeader.push(mHeader);

					for (var j = 0; j < AIWListMatData[i].matItem.length; j++) {
						var mItem = {
							"Matnr": AIWListMatData[i].Matnr,
							"Stlan": AIWListMatData[i].Stlan,
							"Werks": AIWListMatData[i].Werks,
							//"Bomitmnod": AIWListMatData[i].Bomitmnod, //13.08
							"Bomitmpos": AIWListMatData[i].matItem[j].Bomitmpos,
							"Itemcat": AIWListMatData[i].matItem[j].Itemcat,
							"Itemcomp": AIWListMatData[i].matItem[j].Itemcomp,
							"Compdesc": "",
							"Itmqty": AIWListMatData[i].matItem[j].Itmqty,
							"Itmuom": AIWListMatData[i].matItem[j].Itmuom,
							"Recurallo": AIWListMatData[i].matItem[j].Recurallo,
							"Erskz": AIWListMatData[i].matItem[j].Erskz,
							"Rvrel": AIWListMatData[i].matItem[j].Rvrel,
							"Sanfe": AIWListMatData[i].matItem[j].Sanfe,
							"Sanin": AIWListMatData[i].matItem[j].Sanin,
							"Sanko": AIWListMatData[i].matItem[j].Sanko,
							"Itmcmpdesc": AIWListMatData[i].matItem[j].Itmcmpdesc,
							"Costgrelv": AIWListMatData[i].matItem[j].Costgrelv
						};
						if (AIWListMatData[i].bomType === "Change") { //13.08
							mItem.Bomitmnod = AIWListMatData[i].matItem[j].Bomitmnod;
						}
						sPayload.MRBItem.push(mItem);
					}

					for (var k = 0; k < AIWListMatData[i].matSubItem.length; k++) {
						var mSubItem = {
							"Matnr": AIWListMatData[i].Matnr,
							"Stlan": AIWListMatData[i].Stlan,
							"Werks": AIWListMatData[i].Werks,
							"Bomitmnod": AIWListMatData[i].matSubItem[k].Bomitmnod,
							"Bomsubno": AIWListMatData[i].matSubItem[k].Bomsubno,
							"Ebort": AIWListMatData[i].matSubItem[k].Ebort,
							"Upmng": AIWListMatData[i].matSubItem[k].Upmng,
							"Uptxt": AIWListMatData[i].matSubItem[k].Uptxt
						};
						sPayload.MRBSBIT.push(mSubItem);
					}
				}
			}

			if (AIWListEqData.length > 0) {
				for (var i = 0; i < AIWListEqData.length; i++) {
					var eHeader = {
						"Eqnrbom": AIWListEqData[i].Eqnrbom,
						//"Stalt": "",
						"Stlan": AIWListEqData[i].Stlan,
						"Werks": AIWListEqData[i].Werks,
						"Bomstatus": AIWListEqData[i].Bomstatus,
						"Lngtxt": AIWListEqData[i].Lngtxt,
						"Txtmi": AIWListEqData[i].Lngtxt,
						"Validfrom": this.formatter._formatDate(AIWListEqData[i].Validfrom),
						"Baseqty": AIWListEqData[i].BaseQty,
						"Baseuom": AIWListEqData[i].BaseUom,
						"Validtoda": this.formatter._formatDate(AIWListEqData[i].Validtoda)
					};
					sPayload.EBHeader.push(eHeader);

					for (var j = 0; j < AIWListEqData[i].eqItem.length; j++) {
						var eItem = {
							"Eqnrbom": AIWListEqData[i].Eqnrbom,
							"Stlan": AIWListEqData[i].Stlan,
							"Werks": AIWListEqData[i].Werks,
							"Bomitmpos": AIWListEqData[i].eqItem[j].Bomitmpos,
							"Itemcat": AIWListEqData[i].eqItem[j].Itemcat,
							"Itemcomp": AIWListEqData[i].eqItem[j].Itemcomp,
							"Compdesc": "",
							"Itmqty": AIWListEqData[i].eqItem[j].Itmqty,
							"Itmuom": AIWListEqData[i].eqItem[j].Itmuom,
							"Recurallo": AIWListEqData[i].eqItem[j].Recurallo,
							"Erskz": AIWListEqData[i].eqItem[j].Erskz,
							"Rvrel": AIWListEqData[i].eqItem[j].Rvrel,
							"Sanfe": AIWListEqData[i].eqItem[j].Sanfe,
							"Sanin": AIWListEqData[i].eqItem[j].Sanin,
							"Sanko": AIWListEqData[i].eqItem[j].Sanko,
							"Itmcmpdesc": AIWListEqData[i].eqItem[j].Itmcmpdesc,
							"Costgrelv": AIWListEqData[i].eqItem[j].Costgrelv
						};
						if (AIWListEqData[i].bomType === "Change") { //13.08
							eItem.Bomitmnod = AIWListEqData[i].eqItem[j].Bomitmnod;
						}
						sPayload.EBItem.push(eItem);
					}

					for (var k = 0; k < AIWListEqData[i].eqSubItem.length; k++) {
						var eSubItem = {
							"Eqnrbom": AIWListEqData[i].Eqnrbom,
							"Stlan": AIWListEqData[i].Stlan,
							"Werks": AIWListEqData[i].Werks,
							"Bomitmnod": AIWListEqData[i].eqSubItem[k].Bomitmnod,
							"Bomsubno": AIWListEqData[i].eqSubItem[k].Bomsubno,
							"Ebort": AIWListEqData[i].eqSubItem[k].Ebort,
							"Upmng": AIWListEqData[i].eqSubItem[k].Upmng,
							"Uptxt": AIWListEqData[i].eqSubItem[k].Uptxt
						};
						sPayload.EBSBIT.push(eSubItem);
					}
				}
			}

			if (AIWListFLData.length > 0) {
				for (var i = 0; i < AIWListFLData.length; i++) {
					var flHeader = {
						"Tplnrbom": AIWListFLData[i].Tplnrbom,
						"Stlan": AIWListFLData[i].Stlan,
						"Werks": AIWListFLData[i].Werks,
						"Bomstatus": AIWListFLData[i].Bomstatus,
						"Lngtxt": AIWListFLData[i].Lngtxt,
						"Txtmi": AIWListFLData[i].Lngtxt,
						"Validfrom": this.formatter._formatDate(AIWListFLData[i].Validfrom),
						"Baseqty": AIWListFLData[i].BaseQty,
						"Baseuom": AIWListFLData[i].BaseUom,
						"Validtoda": this.formatter._formatDate(AIWListFLData[i].Validtoda)
							//"Stalt": ""
					};
					sPayload.FBHeader.push(flHeader);

					for (var j = 0; j < AIWListFLData[i].flItem.length; j++) {
						var flItem = {
							"Tplnrbom": AIWListFLData[i].Tplnrbom,
							"Stlan": AIWListFLData[i].Stlan,
							"Werks": AIWListFLData[i].Werks,
							"Bomitmpos": AIWListFLData[i].flItem[j].Bomitmpos,
							"Itemcat": AIWListFLData[i].flItem[j].Itemcat,
							"Itemcomp": AIWListFLData[i].flItem[j].Itemcomp,
							"Compdesc": "",
							"Itmqty": AIWListFLData[i].flItem[j].Itmqty,
							"Itmuom": AIWListFLData[i].flItem[j].Itmuom,
							"Recurallo": AIWListFLData[i].flItem[j].Recurallo,
							"Erskz": AIWListFLData[i].flItem[j].Erskz,
							"Rvrel": AIWListFLData[i].flItem[j].Rvrel,
							"Sanfe": AIWListFLData[i].flItem[j].Sanfe,
							"Sanin": AIWListFLData[i].flItem[j].Sanin,
							"Sanko": AIWListFLData[i].flItem[j].Sanko,
							"Itmcmpdesc": AIWListFLData[i].flItem[j].Itmcmpdesc,
							"Costgrelv": AIWListFLData[i].flItem[j].Costgrelv
						};
						if (AIWListFLData[i].bomType === "Change") { //13.08
							flItem.Bomitmnod = AIWListFLData[i].flItem[j].Bomitmnod;
						}
						sPayload.FBItem.push(flItem);
					}

					for (var k = 0; k < AIWListFLData[i].flSubItem.length; k++) {
						var flSubItem = {
							"Tplnrbom": AIWListFLData[i].Tplnrbom,
							"Stlan": AIWListFLData[i].Stlan,
							"Werks": AIWListFLData[i].Werks,
							"Bomitmnod": AIWListFLData[i].flSubItem[k].Bomitmnod,
							"Bomsubno": AIWListFLData[i].flSubItem[k].Bomsubno,
							"Ebort": AIWListFLData[i].flSubItem[k].Ebort,
							"Upmng": AIWListFLData[i].flSubItem[k].Upmng,
							"Uptxt": AIWListFLData[i].flSubItem[k].Uptxt
						};
						sPayload.FBSBIT.push(flSubItem);
					}
				}
			}

			if (AIWListWBSData.length > 0) {
				for (var i = 0; i < AIWListWBSData.length; i++) {
					var wbsHeader = {
						"WbsExt": AIWListWBSData[i].WbsExt,
						"MatnrWbs": AIWListWBSData[i].Matnr,
						"Stlan": AIWListWBSData[i].Stlan,
						"Werks": AIWListWBSData[i].Werks,
						"Bomstatus": AIWListWBSData[i].Bomstatus,
						"Lngtxt": AIWListWBSData[i].Lngtxt,
						"Txtmi": AIWListWBSData[i].Lngtxt,
						"Validfrom": this._formatDate(AIWListWBSData[i].Validfrom),
						"Baseqty": AIWListWBSData[i].BaseQty,
						"Baseuom": AIWListWBSData[i].BaseUom,
						"Validtoda": this._formatDate(AIWListWBSData[i].Validtoda)
							//"Stalt": ""
					};
					sPayload.WBHeader.push(wbsHeader);

					for (var j = 0; j < AIWListWBSData[i].wbsItem.length; j++) {
						var wbsItem = {
							"WbsExt": AIWListWBSData[i].WbsExt,
							"MatnrWbs": AIWListWBSData[i].Matnr,
							"Stlan": AIWListWBSData[i].Stlan,
							"Werks": AIWListWBSData[i].Werks,
							"Bomitmpos": AIWListWBSData[i].wbsItem[j].Bomitmpos,
							"Itemcat": AIWListWBSData[i].wbsItem[j].Itemcat,
							"Itemcomp": AIWListWBSData[i].wbsItem[j].Itemcomp,
							"Compdesc": "",
							"Itmqty": AIWListWBSData[i].wbsItem[j].Itmqty,
							"Itmuom": AIWListWBSData[i].wbsItem[j].Itmuom,
							"Recurallo": AIWListWBSData[i].wbsItem[j].Recurallo,
							"Erskz": AIWListWBSData[i].wbsItem[j].Erskz,
							"Rvrel": AIWListWBSData[i].wbsItem[j].Rvrel,
							"Sanfe": AIWListWBSData[i].wbsItem[j].Sanfe,
							"Sanin": AIWListWBSData[i].wbsItem[j].Sanin,
							"Sanko": AIWListWBSData[i].wbsItem[j].Sanko,
							"Itmcmpdesc": AIWListWBSData[i].wbsItem[j].Itmcmpdesc,
							"Costgrelv": AIWListWBSData[i].wbsItem[j].Costgrelv
						};
						if (AIWListWBSData[i].bomType === "Change") { //13.08
							wbsItem.Bomitmnod = AIWListWBSData[i].wbsItem[j].Bomitmnod;
						}
						sPayload.WBItem.push(wbsItem);
					}

					for (var k = 0; k < AIWListWBSData[i].wbsSubItem.length; k++) {
						var wbsSubItem = {
							"WbsExt": AIWListWBSData[i].WbsExt,
							"MatnrWbs": AIWListWBSData[i].Matnr,
							"Stlan": AIWListWBSData[i].Stlan,
							"Werks": AIWListWBSData[i].Werks,
							"Bomitmnod": AIWListWBSData[i].wbsSubItem[k].Bomitmnod,
							"Bomsubno": AIWListWBSData[i].wbsSubItem[k].Bomsubno,
							"Ebort": AIWListWBSData[i].wbsSubItem[k].Ebort,
							"Upmng": AIWListWBSData[i].wbsSubItem[k].Upmng,
							"Uptxt": AIWListWBSData[i].wbsSubItem[k].Uptxt
						};
						sPayload.WBSBIT.push(wbsSubItem);
					}
				}
			}

			if (AIWListONData.length > 0) {
				for (var i = 0; i < AIWListONData.length; i++) {
					var onNetwork = {
						"Objnetwrk": AIWListONData[i].Objnetwrk,
						"Netgrp": AIWListONData[i].Netgrp,
						"Netwtyp": AIWListONData[i].Netwtyp,
						"Netxt": AIWListONData[i].Netxt,
						"Ntobjtyp": AIWListONData[i].Ntobjtyp
					};
					sPayload.ONetwork.push(onNetwork);

					var onLAM = {
						"Objnetwrk": AIWListONData[i].Objnetwrk,
						"Lrpid": AIWListONData[i].Lrpid,
						"Strtptatr": AIWListONData[i].Strtptatr,
						"Endptatr": AIWListONData[i].Endptatr,
						"Length": AIWListONData[i].Length,
						"LinUnit": AIWListONData[i].LinUnit,
						"Startmrkr": AIWListONData[i].Startmrkr,
						"Endmrkr": AIWListONData[i].Endmrkr,
						"Mrkdisst": AIWListONData[i].Mrkdisst,
						"Mrkdisend": AIWListONData[i].Mrkdisend,
						"MrkrUnit": AIWListONData[i].MrkrUnit
					};
					sPayload.ONLAM.push(onLAM);
				}
			}

			//WC/TL/OL
			if (AIWListWCData.length > 0) {
				for (var i = 0; i < AIWListWCData.length; i++) {
					var mHeader = {
						"Werks": AIWListWCData[i].plant,
						"Arbpl": AIWListWCData[i].wc,
						"Txtmi": AIWListWCData[i].wcDesc,
						"Verwe": AIWListWCData[i].wcCat,
						"Crveran": AIWListWCData[i].person,
						"Planv": AIWListWCData[i].usg,
						"Vgwts": AIWListWCData[i].stdVal,
						"Crsteus": AIWListWCData[i].ctrlKey
					};
					sPayload.Workcenter.push(mHeader);

					if (AIWListWCData[i].cost) {
						for (var j = 0; j < AIWListWCData[i].cost.length; j++) {
							var mCost = {
								"Werks": AIWListWCData[i].cost[j].CrKokrs,
								"Arbpl": AIWListWCData[i].wc,
								"CrKostl": AIWListWCData[i].cost[j].CrKostl,
								"Costcentxt": AIWListWCData[i].cost[j].Costcentxt,
								"CrLstar": AIWListWCData[i].cost[j].CrLstar,
								"Forn1": AIWListWCData[i].cost[j].Forn1,
								"ActvttypeTxt": AIWListWCData[i].cost[j].ActvttypeTxt,
								"Frmltxt": AIWListWCData[i].cost[j].Frmltxt
							};
							sPayload.WCCost.push(mCost);
						}
					}

				}
			}

			if (AIWListGTLData.length > 0) {
				for (var i = 0; i < AIWListGTLData.length; i++) {
					if (AIWListGTLData[i].header) {
						for (var j = 0; j < AIWListGTLData[i].header.length; j++) {
							var gtList = {
								"Werks": AIWListGTLData[i].header[j].Iwerk,
								"Wcplant": AIWListGTLData[i].header[j].plant,
								"Statu": AIWListGTLData[i].header[j].Statu,
								"Tverwe": AIWListGTLData[i].header[j].usage,
								"Ktext": AIWListGTLData[i].header[j].Ktext,
								"Tarbpl": AIWListGTLData[i].header[j].workCenter,
								"Vagrp": AIWListGTLData[i].header[j].plannerGrp,
								"Anlzu": AIWListGTLData[i].header[j].systemCond,
								"Tplnal": AIWListGTLData[i].header[j].Plnal,
								"Tlgnhdr": AIWListGTLData[i].header[j].groupVal,
								"Strat": AIWListGTLData[i].header[j].stratDesc
							};
							sPayload.GTList.push(gtList);
						}
					}

					if (AIWListGTLData[i].operation) {
						for (var k = 0; k < AIWListGTLData[i].operation.length; k++) {
							var gtlOpr = {
								"Tlgnhdr": AIWListGTLData[i].operation[k].Tlgnhdr,
								"Vornr": AIWListGTLData[i].operation[k].Vornr,
								"TlArbpl": AIWListGTLData[i].operation[k].TlArbpl,
								"Werks2gop": AIWListGTLData[i].operation[k].Werks2gop,
								"Steus2gop": AIWListGTLData[i].operation[k].Steus2gop,
								"Ltxa1": AIWListGTLData[i].operation[k].ActvttypeTxt,
								"Arbei": AIWListGTLData[i].operation[k].Forn1,
								"Dauno": AIWListGTLData[i].operation[k].normDuration,
								"Arbeh": AIWListGTLData[i].operation[k].unitForWork,
								"Anzzl": AIWListGTLData[i].operation[k].number,
								"Daune": AIWListGTLData[i].operation[k].uomDuration,
								"Indet": AIWListGTLData[i].operation[k].calcKey,
								"Tplnal": AIWListGTLData[i].operation[k].Plnal
							};
							sPayload.GTOprs.push(gtlOpr);
						}
					}

					if (AIWListGTLData[i].component) {
						for (var l = 0; l < AIWListGTLData[i].component.length; l++) {
							var gtlComp = {
								"Tlgnhdr": AIWListGTLData[i].component[l].Tlgnhdr,
								"Idnrk": AIWListGTLData[i].component[l].component,
								"Menge": AIWListGTLData[i].component[l].compQty,
								"MeinsGcp": AIWListGTLData[i].component[l].compUnit,
								"Vornr": AIWListGTLData[i].component[l].activity,
								"Postp": AIWListGTLData[i].component[l].itCat,
								"Tplnal": AIWListGTLData[i].component[l].Plnal
							};
							sPayload.GTComp.push(gtlComp);
						}
					}

					if (AIWListGTLData[i].Class) {
						for (var m = 0; m < AIWListGTLData[i].Class.length; m++) {
							var gtlClass = {
								"Tlgnhdr": AIWListGTLData[i].Class[m].Tlgnhdr,
								"Classtype": AIWListGTLData[i].Class[m].Classtype,
								"Class": AIWListGTLData[i].Class[m].Class,
								"Clstatus1": AIWListGTLData[i].Class[m].Clstatus1,
								"Tplnal": AIWListGTLData[i].Class[m].Tplnal
							};
							sPayload.GTClass.push(gtlClass);
						}
					}

					if (AIWListGTLData[i].charList) {
						for (var n = 0; n < AIWListGTLData[i].charList.length; n++) {
							var gtlChar = {
								"Tlgnhdr": AIWListGTLData[i].charList[n].Tlgnhdr,
								"Atnam": AIWListGTLData[i].charList[n].Atnam,
								"Textbez": AIWListGTLData[i].charList[n].Textbez,
								"Atwrt": AIWListGTLData[i].charList[n].Atwrt,
								"Class": AIWListGTLData[i].charList[n].Class,
								"Tplnal": AIWListGTLData[i].charList[n].Tplnal
							};
							sPayload.GTVal.push(gtlChar);
						}
					}
				}
			}

			if (AIWListETLData.length > 0) {
				for (var i = 0; i < AIWListETLData.length; i++) {
					if (AIWListETLData[i].header) {
						for (var j = 0; j < AIWListETLData[i].header.length; j++) {
							var etList = {
								"Werks": AIWListETLData[i].header[j].Iwerk,
								"Wcplant": AIWListETLData[i].header[j].plant,
								"Statu": AIWListETLData[i].header[j].Statu,
								"Tverwe": AIWListETLData[i].header[j].usage,
								"Ktext": AIWListETLData[i].header[j].Ktext,
								"Tarbpl": AIWListETLData[i].header[j].workCenter,
								"Vagrp": AIWListETLData[i].header[j].plannerGrp,
								"Anlzu": AIWListETLData[i].header[j].systemCond,
								"Tplnal": AIWListETLData[i].header[j].Plnal,
								"Tlgnhdr": AIWListETLData[i].header[j].groupVal,
								"Strat": AIWListETLData[i].header[j].stratDesc
							};
							sPayload.ETList.push(etList);
						}
					}

					if (AIWListETLData[i].operation) {
						for (var k = 0; k < AIWListETLData[i].operation.length; k++) {
							var etlOpr = {
								"Tlgnhdr": AIWListETLData[i].operation[k].Tlgnhdr,
								"Vornr": AIWListETLData[i].operation[k].Vornr,
								"TlArbpl": AIWListETLData[i].operation[k].TlArbpl,
								"Werks2gop": AIWListETLData[i].operation[k].Werks2gop,
								"Steus2gop": AIWListETLData[i].operation[k].Steus2gop,
								"Ltxa1": AIWListETLData[i].operation[k].ActvttypeTxt,
								"Arbei": AIWListETLData[i].operation[k].Forn1,
								"Dauno": AIWListETLData[i].operation[k].normDuration,
								"Arbeh": AIWListETLData[i].operation[k].unitForWork,
								"Anzzl": AIWListETLData[i].operation[k].number,
								"Daune": AIWListETLData[i].operation[k].uomDuration,
								"Indet": AIWListETLData[i].operation[k].calcKey,
								"Tplnal": AIWListETLData[i].operation[k].Plnal
							};
							sPayload.ETOprs.push(etlOpr);
						}
					}

					if (AIWListETLData[i].component) {
						for (var l = 0; l < AIWListETLData[i].component.length; l++) {
							var etlComp = {
								"Tlgnhdr": AIWListETLData[i].component[l].Tlgnhdr,
								"Idnrk": AIWListETLData[i].component[l].component,
								"Menge": AIWListETLData[i].component[l].compQty,
								"MeinsGcp": AIWListETLData[i].component[l].compUnit,
								"Vornr": AIWListETLData[i].component[l].activity,
								"Postp": AIWListETLData[i].component[l].itCat,
								"Tplnal": AIWListETLData[i].component[l].Plnal
							};
							sPayload.ETComp.push(etlComp);
						}
					}

					if (AIWListETLData[i].Class) {
						for (var m = 0; m < AIWListETLData[i].Class.length; m++) {
							var etlClass = {
								"Tlgnhdr": AIWListETLData[i].Class[m].Tlgnhdr,
								"Classtype": AIWListETLData[i].Class[m].Classtype,
								"Class": AIWListETLData[i].Class[m].Class,
								"Clstatus1": AIWListETLData[i].Class[m].Clstatus1,
								"Tplnal": AIWListETLData[i].Class[m].Tplnal
							};
							sPayload.ETClass.push(etlClass);
						}
					}

					if (AIWListETLData[i].charList) {
						for (var n = 0; n < AIWListETLData[i].charList.length; n++) {
							var etlChar = {
								"Tlgnhdr": AIWListETLData[i].charList[n].Tlgnhdr,
								"Atnam": AIWListETLData[i].charList[n].Atnam,
								"Textbez": AIWListETLData[i].charList[n].Textbez,
								"Atwrt": AIWListETLData[i].charList[n].Atwrt,
								"Class": AIWListETLData[i].charList[n].Class,
								"Tplnal": AIWListETLData[i].charList[n].Tplnal
							};
							sPayload.ETVal.push(etlChar);
						}
					}
				}
			}

			if (AIWListFTLData.length > 0) {
				for (var i = 0; i < AIWListFTLData.length; i++) {
					if (AIWListFTLData[i].header) {
						for (var j = 0; j < AIWListFTLData[i].header.length; j++) {
							var ftList = {
								"Werks": AIWListFTLData[i].header[j].Iwerk,
								"Wcplant": AIWListFTLData[i].header[j].plant,
								"Statu": AIWListFTLData[i].header[j].Statu,
								"Tverwe": AIWListFTLData[i].header[j].usage,
								"Ktext": AIWListFTLData[i].header[j].Ktext,
								"Tarbpl": AIWListFTLData[i].header[j].workCenter,
								"Vagrp": AIWListFTLData[i].header[j].plannerGrp,
								"Anlzu": AIWListFTLData[i].header[j].systemCond,
								"Tplnal": AIWListFTLData[i].header[j].Plnal,
								"Tlgnhdr": AIWListFTLData[i].header[j].groupVal,
								"Strat": AIWListFTLData[i].header[j].stratDesc
							};
							sPayload.FTList.push(ftList);
						}
					}

					if (AIWListFTLData[i].operation) {
						for (var k = 0; k < AIWListFTLData[i].operation.length; k++) {
							var ftlOpr = {
								"Tlgnhdr": AIWListFTLData[i].operation[k].Tlgnhdr,
								"Vornr": AIWListFTLData[i].operation[k].Vornr,
								"TlArbpl": AIWListFTLData[i].operation[k].TlArbpl,
								"Werks2gop": AIWListFTLData[i].operation[k].Werks2gop,
								"Steus2gop": AIWListFTLData[i].operation[k].Steus2gop,
								"Ltxa1": AIWListFTLData[i].operation[k].ActvttypeTxt,
								"Arbei": AIWListFTLData[i].operation[k].Forn1,
								"Dauno": AIWListFTLData[i].operation[k].normDuration,
								"Arbeh": AIWListFTLData[i].operation[k].unitForWork,
								"Anzzl": AIWListFTLData[i].operation[k].number,
								"Daune": AIWListFTLData[i].operation[k].uomDuration,
								"Indet": AIWListFTLData[i].operation[k].calcKey,
								"Tplnal": AIWListFTLData[i].operation[k].Plnal
							};
							sPayload.FTOprs.push(ftlOpr);
						}
					}

					if (AIWListFTLData[i].component) {
						for (var l = 0; l < AIWListFTLData[i].component.length; l++) {
							var ftlComp = {
								"Tlgnhdr": AIWListFTLData[i].component[l].Tlgnhdr,
								"Idnrk": AIWListFTLData[i].component[l].component,
								"Menge": AIWListFTLData[i].component[l].compQty,
								"MeinsGcp": AIWListFTLData[i].component[l].compUnit,
								"Vornr": AIWListFTLData[i].component[l].activity,
								"Postp": AIWListFTLData[i].component[l].itCat,
								"Tplnal": AIWListFTLData[i].component[l].Plnal
							};
							sPayload.FTComp.push(ftlComp);
						}
					}

					if (AIWListFTLData[i].Class) {
						for (var m = 0; m < AIWListFTLData[i].Class.length; m++) {
							var ftlClass = {
								"Tlgnhdr": AIWListFTLData[i].Class[m].Tlgnhdr,
								"Classtype": AIWListFTLData[i].Class[m].Classtype,
								"Class": AIWListFTLData[i].Class[m].Class,
								"Clstatus1": AIWListFTLData[i].Class[m].Clstatus1,
								"Tplnal": AIWListFTLData[i].Class[m].Tplnal
							};
							sPayload.FTClass.push(ftlClass);
						}
					}

					if (AIWListFTLData[i].charList) {
						for (var n = 0; n < AIWListFTLData[i].charList.length; n++) {
							var ftlChar = {
								"Tlgnhdr": AIWListFTLData[i].charList[n].Tlgnhdr,
								"Atnam": AIWListFTLData[i].charList[n].Atnam,
								"Textbez": AIWListFTLData[i].charList[n].Textbez,
								"Atwrt": AIWListFTLData[i].charList[n].Atwrt,
								"Class": AIWListFTLData[i].charList[n].Class,
								"Tplnal": AIWListFTLData[i].charList[n].Tplnal
							};
							sPayload.FTVal.push(ftlChar);
						}
					}
				}
			}

			if (AIWListOLData.length > 0) {
				for (var i = 0; i < AIWListOLData.length; i++) {
					var olHeader = {
						"Begru": AIWListOLData[i].autGrp,
						"Objlink": AIWListOLData[i].link,
						"Kanxt": AIWListOLData[i].linkDesc,
						"Eqkant": AIWListOLData[i].linkObjEq,
						"Tpkant": AIWListOLData[i].linkObjFl,
						"Netyp": AIWListOLData[i].linkCat,
						"Eqvon": AIWListOLData[i].linkFrmEq,
						"Tpvon": AIWListOLData[i].linkFrmFl,
						"Eqnach": AIWListOLData[i].linkToEq,
						"Tpnach": AIWListOLData[i].linkToFl,
						"Mediu": AIWListOLData[i].medium,
						"Lfdknr": AIWListOLData[i].linkNum,
						"Kantyp": AIWListOLData[i].objCat,
						"Netid": AIWListOLData[i].netId,
						"Bezarp": AIWListOLData[i].Bezarp,
						"Bezarl": AIWListOLData[i].Bezarl,
						"Datva": formatter._formatDate(AIWListOLData[i].validFrm),
						"Zeitva": formatter._timeConvert(AIWListOLData[i].timeFrm),
						"Datvb": formatter._formatDate(AIWListOLData[i].validTo),
						"Zeitvb": formatter._timeConvert(AIWListOLData[i].timeTo),
						"Stattext": AIWListOLData[i].Stattext,
						"StsmOl": AIWListOLData[i].StsmOl,
						"UstwOl": AIWListOLData[i].UstwOl,
						"UswoOl": AIWListOLData[i].UswoOl,
						"UstaOl": AIWListOLData[i].UstaOl
					};
					sPayload.Olink.push(olHeader);

					if (AIWListOLData[i].Class) {
						for (var j = 0; j < AIWListOLData[i].Class.length; j++) {
							var mClass = {
								"Objlink": AIWListOLData[i].Class[j].Objlink,
								"Classtype": AIWListOLData[i].Class[j].Classtype,
								"Class": AIWListOLData[i].Class[j].Class,
								"Clstatus1": AIWListOLData[i].Class[j].Clstatus1
							};
							sPayload.OLClass.push(mClass);
						}
					}

					if (AIWListOLData[i].Char) {
						for (var k = 0; k < AIWListOLData[i].Char.length; k++) {
							var mChar = {
								"Objlink": AIWListOLData[i].Char[k].Objlink,
								"Atnam": AIWListOLData[i].Char[k].Atnam,
								"Textbez": AIWListOLData[i].Char[k].Textbez,
								"Atwrt": AIWListOLData[i].Char[k].Atwrt,
								"Class": AIWListOLData[i].Char[k].Class
							};
							sPayload.OLVal.push(mChar);
						}
					}

				}
			}

			return sPayload;
		},
		/*
		 * Function to transform tree data
		 * @param {array} nodesIn
		 */
		transformTreeData: function (nodesIn) {
			var nodes = []; //'deep' object structure
			var nodeMap = {}; //'map', each node is an attribute

			if (nodesIn) {

				var nodeOut;
				var parentId;

				for (var i = 0; i < nodesIn.length; i++) {
					var nodeIn = nodesIn[i];
					nodeOut = {
						RowKey: nodeIn.RowKey,
						Category: nodeIn.Category,
						Mplant: nodeIn.Mplant,
						Arbpl: nodeIn.Arbpl,
						Asset: nodeIn.Asset,
						Bukrs: nodeIn.Bukrs,
						ChildrenLoaded: nodeIn.ChildrenLoaded,
						CrEnt: nodeIn.CrEnt,
						CrExists: nodeIn.CrExists,
						Delind: nodeIn.Delind,
						EntKey: nodeIn.EntKey,
						Eqkant: nodeIn.Eqkant,
						Eqnach: nodeIn.Eqnach,
						Eqvon: nodeIn.Eqvon,
						Expanded: nodeIn.Expanded,
						Iloan: nodeIn.Iloan,
						Inact: nodeIn.Inact,
						IsLeaf: nodeIn.IsLeaf,
						IsChecked: nodeIn.IsChecked,
						Kantyp: nodeIn.Kantyp,
						Level: nodeIn.Level,
						Message: nodeIn.Message,
						Name: nodeIn.Name,
						Netid: nodeIn.Netid,
						NetidS: nodeIn.NetidS,
						Nodeid: nodeIn.Nodeid,
						Objnr: nodeIn.Objnr,
						ParentKey: nodeIn.ParentKey,
						ParentNodeid: nodeIn.ParentNodeid,
						Plnal: nodeIn.Plnal,
						Plnnr: nodeIn.Plnnr,
						Posnr: nodeIn.Posnr,
						Pplant: nodeIn.Pplant,
						SeqDis: nodeIn.SeqDis,
						Src40: nodeIn.Src40,
						StInd: nodeIn.StInd,
						Stalt: nodeIn.Stalt,
						State: nodeIn.State,
						Stlan: nodeIn.Stlan,
						Submt: nodeIn.Submt,
						Text: nodeIn.Text,
						Tpkant: nodeIn.Tpkant,
						Tplkz: nodeIn.Tplkz,
						Tpnach: nodeIn.Tpnach,
						Tpvon: nodeIn.Tpvon,
						Type: nodeIn.Type,
						Warpl: nodeIn.Warpl,
						Werks: nodeIn.Werks,
						WorkCtxt: nodeIn.WorkCtxt,
						children: []
					};

					parentId = nodeIn.ParentKey;

					if (parentId && parentId.length > 0) {
						//we have a parent, add the node there
						//NB because object references are used, changing the node
						//in the nodeMap changes it in the nodes array too
						//(we rely on parents always appearing before their children)
						var parent = nodeMap[nodeIn.ParentKey];

						if (parent) {
							parent.children.push(nodeOut);
						}
					} else {
						//there is no parent, must be top level
						nodes.push(nodeOut);
					}

					//add the node to the node map, which is a simple 1-level list of all nodes

					nodeMap[nodeOut.RowKey] = nodeOut;

				}

			}

			return nodes;
		},

		flat: function (array) {
			var g = this;
			var result = [];
			array.forEach(function (a) {
				result.push(a);
				if (Array.isArray(a.children)) {
					result = result.concat(g.flat(a.children));
				}
			});
			return result;
		},
		/*
		 * Function to create Hierarchy
		 * @param {} dialog
		 */
		createHierarchy: function (dialog) {
			var g = this;
			var bd = new sap.m.BusyDialog();
			bd.open();
			var oModel = this.getView().getModel();
			var sPath = "/ChangeRequestSet";
			var oPayload = this.buildPayload();

			var fnSuccess = function (r) {
				bd.close();
				var deepData = g.transformTreeData(r.Hierarchy.results);
				var oTable = sap.ui.getCore().byId("hierarchyTab");
				g.setModelData(deepData, oTable);
				dialog.open();
			};
			var fnError = function (err) {
				bd.close();
				dialog.open();
			};
			var h = {
				"X-Requested-With": "xmlHTTPrequest"
			};
			oModel.setHeaders(h);
			oModel.create(sPath, oPayload, {
				success: fnSuccess,
				error: fnError
			});
		},
		/*
		 * Function to set model data
		 * @param {} nodes
		 * @param {} oTable
		 */
		setModelData: function (nodes, oTable) {
			//store the nodes in the JSON model, so the view can access them
			var g = this;
			var nodesModel = new sap.ui.model.json.JSONModel();
			nodesModel.setData({
				nodeRoot: {
					children: nodes
				}
			});
			oTable.setModel(nodesModel);
			oTable.bindRows({
				path: '/nodeRoot',
				parameters: {
					arrayNames: ['children']
				}
			});
			// this.setModel(nodesModel, "nodeModel");
		},

		/*
		 * Method to handle Manage Hierarchy press
		 */
		onManageHierPress: function () {
			this.setManageHierFragment(sap.ui.xmlfragment("ugiaiwui.mdg.aiw.request.Fragments.Hierarchy.ManageHierarchies", this));
			this.getView().addDependent(this.getManageHierFragment());
			this.getManageHierFragment().open();
		},
		/**
		 * To handle Filter object dialog press
		 */
		onFilterObjDialogPress: function () {
			this.setFilterObjectFragment(sap.ui.xmlfragment("ugiaiwui.mdg.aiw.request.Fragments.Hierarchy.FilterObjects", this));
			this.getView().addDependent(this.getFilterObjectFragment());
			this.getFilterObjectFragment().open();
		},
		/**
		 * To handle Manage Hierarchy dialog OK press
		 */
		onMHOkPress: function (e) {
			this.getManageHierFragment().close();
		},
		/**
		 * To handle Manage Hierarchy dialog CANCEL press
		 */
		onMHCancelPress: function (e) {
			this.getManageHierFragment().close();
		},
		/**
		 * To handle Manage Hierarchy dialog CLOSE press
		 */
		onMHDialogClose: function (e) {
			this.getManageHierFragment().destroy();
		},
		/**
		 * To handle Filter dialog CLOSE press
		 */
		onFilterDialogClose: function () {
			this.getFilterObjectFragment().destroy();
		},
		/**
		 * To handle Filter dialog OK press
		 */
		onFilterOkPress: function () {
			this.getFilterObjectFragment().close();
		},
		/**
		 * To handle Filter dialog CANCEL press
		 */
		onFilterCancelPress: function () {
			this.getFilterObjectFragment().close();
		},

		/**
		 * To handle Settings press
		 */
		onSettingsPressed: function () {
			var objects = this._oComponent.getModel("objects");
			if (!this.oList) {
				this.oList = new sap.m.List({
					mode: "MultiSelect",
					includeItemInSelection: true,
					rememberSelections: true

				});

				var oListItem = new sap.m.StandardListItem({
					title: "{name}",
					// description: "{ProductId}",
					icon: "{nameUrl}",
					iconDensityAware: false,
					iconInset: false
				});
				this.oList.setModel(objects);
				this.oList.bindAggregation("items", "/objects", oListItem);
			}

			var g = this;
			var oDialog = new sap.m.Dialog({
				title: this.getView().getModel("i18n").getProperty("objectSelection"),
				beginButton: [new sap.m.Button({
					text: "OK",
					press: function () {
						var items = this.oList.getItems();
						for (var i = 0; i < items.length; i++) {
							var item = items[i];
							var context = item.getBindingContext();
							var object = g._oComponent.getModel("objects").getProperty(context.getPath());
							if (item.getProperty("selected")) {
								g.getView().getModel("EnableModel").setProperty("/" + object.name, true);
							} else {
								g.getView().getModel("EnableModel").setProperty("/" + object.name, false);
							}

						}
						oDialog.close();
						// oDialog.destroy();

					}.bind(this)
				})],
				content: this.oList
			});
			oDialog.open();
		},

		/**
		 * Function to clear data
		 */
		clearData: function () {
			var g = this;
			this.getView().byId("Description").setValue();
			this.getView().byId("reasonForRequest").setSelectedKey();
			g.getView().byId("idPriority").setSelectedKey();
			g.getView().byId("idDueDate").setDateValue(null);
			this.getView().setModel(new JSONModel([]), this.oModelAIWFLOC);
			this.getView().setModel(new JSONModel([]), this.oModelAIWEQUI);
			this.getView().setModel(new JSONModel([]), this.oModelAIWMSPT);
			this.getView().setModel(new JSONModel([]), this.oModelAIWMPMI);
			sap.ui.getCore().setModel(new JSONModel([]), this.oModelAIWFLOC);
			sap.ui.getCore().setModel(new JSONModel([]), this.oModelAIWEQUI);
			sap.ui.getCore().setModel(new JSONModel([]), this.oModelAIWMSPT);
			sap.ui.getCore().setModel(new JSONModel([]), this.oModelAIWMPMI);
			sap.ui.getCore().setModel(new JSONModel([]), "AIWAPPROVE");

			var AIWListMatModel = new JSONModel([]);
			sap.ui.getCore().setModel(AIWListMatModel, "AIWListMatModel");
			this.getView().setModel(AIWListMatModel, "AIWListMatModel");

			var AIWListEqModel = new JSONModel([]);
			sap.ui.getCore().setModel(AIWListEqModel, "AIWListEqModel");
			this.getView().setModel(AIWListEqModel, "AIWListEqModel");

			var AIWListFLModel = new JSONModel([]);
			sap.ui.getCore().setModel(AIWListFLModel, "AIWListFLModel");
			this.getView().setModel(AIWListFLModel, "AIWListFLModel");

			var AIWListWBSModel = new JSONModel([]);
			sap.ui.getCore().setModel(AIWListWBSModel, "AIWListWBSModel");
			this.getView().setModel(AIWListWBSModel, "AIWListWBSModel");

			var AIWListONModel = new JSONModel([]);
			sap.ui.getCore().setModel(AIWListONModel, "AIWListONModel");
			this.getView().setModel(AIWListONModel, "AIWListONModel");

			var AIWListWCModel = new JSONModel([]);
			sap.ui.getCore().setModel(AIWListWCModel, "AIWListWCModel");
			this.getView().setModel(AIWListWCModel, "AIWListWCModel");

			// For Task List
			var aCounterModel = new JSONModel([]);
			aCounterModel.getData().addGTLCounter = false;
			aCounterModel.getData().addETLCounter = false;
			aCounterModel.getData().addFTLCounter = false;
			this.getView().setModel(aCounterModel, "aCounterModel");

			var GTLHeaderModel = new JSONModel([]);
			this.getView().setModel(GTLHeaderModel, "GTLHeaderModel");

			var ETLHeaderModel = new JSONModel([]);
			this.getView().setModel(ETLHeaderModel, "ETLHeaderModel");

			var FTLHeaderModel = new JSONModel([]);
			this.getView().setModel(FTLHeaderModel, "FTLHeaderModel");

			var AIWListGTLModel = new JSONModel([]);
			AIWListGTLModel.getData().addCounter = false;
			sap.ui.getCore().setModel(AIWListGTLModel, "AIWListGTLModel");
			this.getView().setModel(AIWListGTLModel, "AIWListGTLModel");

			var AIWListETLModel = new JSONModel([]);
			AIWListETLModel.getData().addCounter = false;
			sap.ui.getCore().setModel(AIWListETLModel, "AIWListETLModel");
			this.getView().setModel(AIWListETLModel, "AIWListETLModel");

			var AIWListFTLModel = new JSONModel([]);
			AIWListFTLModel.getData().addCounter = false;
			sap.ui.getCore().setModel(AIWListFTLModel, "AIWListFTLModel");
			this.getView().setModel(AIWListFTLModel, "AIWListFTLModel");

			// for Object Link
			var AIWListOLModel = new JSONModel([]);
			sap.ui.getCore().setModel(AIWListOLModel, "AIWListOLModel");
			this.getView().setModel(AIWListOLModel, "AIWListOLModel");

			var dataOriginMOP = new JSONModel({
				EQ: [],
				FL: []
			});
			sap.ui.getCore().setModel(dataOriginMOP, "dataOriginMOP");
			this.readDOIList("EQUI");
			this.readDOIList("FUNCLOC");

			var ainMOP = new JSONModel([]);
			sap.ui.getCore().setModel(ainMOP, "ainMOP");

			this.AIWModelDelete = false;
			var oAIWModel = {
				modelName: "",
				modelNameVS: "None",
				modelDesc: "",
				modelDescVS: "None",
				modelVer: "000",
				modelParKey: "",
				modelParKeyVS: "None",
				modelEnable: true,
				crtEnable: true,
				delEnable: false
			};
			var mAIWModel = new JSONModel(oAIWModel);
			this.getView().setModel(mAIWModel, "AIWModel");
			sap.ui.getCore().setModel(mAIWModel, "AIWModel");

			this._initializeAttachments();
			this._onRouteMatched(undefined, "main", "clear");

			var aNotes = [];
			var mNotes = new JSONModel({
				items: aNotes
			});
			this.getView().setModel(mNotes, "notes");

			if (this.getMode() !== 'display') {
				this.readChangeRequestType();
			}
		},
		/**
		 * Function to handle CANCEL button click
		 */
		onCancel: function () {
			var g = this;
			var m = this.getView().getModel('i18n').getProperty("dataLoss");
			var a = this.getView().getModel('i18n').getProperty("WARNING");
			sap.m.MessageBox.show(m, sap.m.MessageBox.Icon.WARNING, a, [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL],
				function (A) {
					if (A === 'OK') {
						g.getView().byId("Description").setValue();
						g.getView().byId("reasonForRequest").setSelectedKey();
						window.history.back();
					}
				});
		},

		///////////////////////////////////// AIW MODEL //////////////////////
		onRootFlocVH: function (oEvent) {
			ValueHelpRequest.RootFlocVH(oEvent, this);
		},

		onRootFlocChange: function (oEvent) {
			ValueHelpRequest.RootFlocChange(oEvent, this);
		},

		onAIWModelActionPress: function (oEvent) {
			var g = this;
			var btntype = oEvent.getSource().getType();
			var AIWModel = this.getView().getModel("AIWModel");
			var AIWModelData = AIWModel.getData();
			// var modelName = this.getView().byId("idAMModelName");
			// var modelDesc = this.getView().byId("idAMModelDesc");
			// var modelVersion = this.getView().byId("idAMVersion");
			// var modelRootKey = this.getView().byId("idAMRootFl");
			if (AIWModelData.modelName === "" || AIWModelData.modelDesc === "" || AIWModelData.modelVer === "" || AIWModelData.modelParKey ===
				"") {
				if (AIWModelData.modelName === "") {
					AIWModelData.modelNameVS = "Error";
				}
				if (AIWModelData.modelDesc === "") {
					AIWModelData.modelDescVS = "Error";
				}
				// if(AIWModelData.modelVer === ""){
				// 	AIWModelData.modelNameVS ="Error";
				// }
				if (AIWModelData.modelParKey === "") {
					AIWModelData.modelParKeyVS = "Error";
				}
				AIWModel.setData(AIWModelData);
				return;
			}

			var flag = "";
			if (btntype === "Accept") {
				flag = "C";
			} else {
				flag = "D";
			}

			this.readAIWModel(flag);

		},

		readAIWModel: function (flag) {
			var g = this;
			var AIWModel = this.getView().getModel("AIWModel");
			var AIWModelData = AIWModel.getData();
			var AIWFLOCModel = sap.ui.getCore().getModel(g.oModelAIWFLOC).getData();
			var sPayload = {
				"ChangeRequestType": this.getCrType(),
				"CrDescription": this.getView().byId("Description").getValue(),
				"Reason": this.getView().byId("reasonForRequest").getSelectedKey(),
				"Guids": this.oAttach,
				"IsDraft": "C",
				"ModelOperation": flag,
				"Messages": [],
				"FuncLoc": [],
				"FLAddr": [],
				"FLAddrI": [],
				"FLALTLBEL": [],
				"FLLAM": [],
				"FLClass": [],
				"FLVal": [],
				"Equipment": [],
				"EqAddr": [],
				"EqAddrI": [],
				"EqPRT": [],
				"EqLAM": [],
				"EqDFPS": [],
				"EqClass": [],
				"EqVal": [],
				"MSPoint": [],
				"MSLAM": [],
				"MSClass": [],
				"MSVal": [],
				"MPLAN": [],
				"MPItem": [],
				"MPLAM": [],
				"MPOBList": [],
				"MPCycle": [],
				"ClassMpl": [],
				"ValuaMpl": [],
				"MRBHeader": [],
				"MRBItem": [],
				"MRBSBIT": [],
				"EBHeader": [],
				"EBItem": [],
				"EBSBIT": [],
				"FBHeader": [],
				"FBItem": [],
				"FBSBIT": [],
				"WBHeader": [],
				"WBItem": [],
				"WBSBIT": [],
				"ONetwork": [],
				"ONLAM": [],
				"Workcenter": [],
				"WCCost": [],
				"ClassWC": [],
				"ValueWC": [],
				"GTList": [],
				"GTOprs": [],
				"GTComp": [],
				"GTMPack": [],
				"GTRel": [],
				"GTSpack": [],
				"GTPRT": [],
				"GTInsp": [],
				"GTClass": [],
				"GTVal": [],
				"ETList": [],
				"ETOprs": [],
				"ETComp": [],
				"ETMPack": [],
				"ETRel": [],
				"ETSpack": [],
				"ETPRT": [],
				"ETInsp": [],
				"ETClass": [],
				"ETVal": [],
				"FTList": [],
				"FTOprs": [],
				"FTComp": [],
				"FTMPack": [],
				"FTRel": [],
				"FTSpack": [],
				"FTPRT": [],
				"FTInsp": [],
				"FTClass": [],
				"FTVal": [],
				"Olink": [],
				"OLClass": [],
				"OLVal": [],
				"AiwModel": [],
				"AiwModelRef": []
			};

			if (AIWFLOCModel.length > 0) {
				for (var a = 0; a < AIWFLOCModel.length; a++) {
					var sFuncLoc = {
						"Tplnr": AIWFLOCModel[a].Functionallocation,
						"Txtmi": AIWFLOCModel[a].Flocdescription,
						"TplkzFlc": AIWFLOCModel[a].Strucindicator,
						"Tplxt": AIWFLOCModel[a].StrucIndicatorDesc,
						"EditMask": AIWFLOCModel[a].EditMask,
						"Hierarchy": AIWFLOCModel[a].Hierarchy,
						"Fltyp": AIWFLOCModel[a].Floccategory,
						"Flttx": AIWFLOCModel[a].FlocCategoryDesc,
						"Swerk": AIWFLOCModel[a].Maintplant,
						"Plantname": AIWFLOCModel[a].MaintplantDesc,
						"StorFloc": AIWFLOCModel[a].Location,
						"Locationdesc": AIWFLOCModel[a].Locationdesc,
						"Abckzfloc": AIWFLOCModel[a].Abckz,
						"Abctx": AIWFLOCModel[a].Abctx,
						"Bukrsfloc": AIWFLOCModel[a].Bukrs,
						"Butxt": AIWFLOCModel[a].Butxt,
						"City": AIWFLOCModel[a].City,
						"KostFloc": AIWFLOCModel[a].Kostl,
						"KokrFloc": AIWFLOCModel[a].Kokrs,
						"Contareaname": AIWFLOCModel[a].Mctxt,
						"PlntFloc": AIWFLOCModel[a].Werks,
						"Planningplantdes": AIWFLOCModel[a].Planningplantdes,
						"Ingrp": AIWFLOCModel[a].Ingrp,
						"Plannergrpdesc": AIWFLOCModel[a].Innam,
						"Arbplfloc": AIWFLOCModel[a].Arbpl,
						"Wergwfloc": AIWFLOCModel[a].WcWerks,
						"Gewrkfloc": AIWFLOCModel[a].MainArbpl,
						"MainWcPlant": AIWFLOCModel[a].MainWerks,
						"Tplma": AIWFLOCModel[a].SupFunctionallocation,
						"Supflocdesc": AIWFLOCModel[a].SupFlocdescription,
						"BeberFl": AIWFLOCModel[a].BeberFl,
						"Fing": AIWFLOCModel[a].Fing,
						"Tele": AIWFLOCModel[a].Tele,
						"Submtiflo": AIWFLOCModel[a].ConstrType,
						"Constdesc": AIWFLOCModel[a].ConstructionDesc,
						"Eqart": AIWFLOCModel[a].TechnicalObjectTyp,
						"Eartx": AIWFLOCModel[a].Description,
						"Stattext": AIWFLOCModel[a].Stattext,
						"StsmFloc": AIWFLOCModel[a].StsmEqui,
						"Statproftxt": AIWFLOCModel[a].StsmEquiDesc,
						"UstwFloc": AIWFLOCModel[a].UstwEqui,
						"UswoFloc": AIWFLOCModel[a].UswoEqui,
						"UstaFloc": AIWFLOCModel[a].UstaEqui,
						"Adrnri": AIWFLOCModel[a].Adrnri,
						"Deact": AIWFLOCModel[a].Deact,
						"Type": AIWFLOCModel[a].viewParameter === "create" ? true : false,
						Modeldesc: AIWFLOCModel[a].Modeldesc,
						Modelref: AIWFLOCModel[a].Modelref,
						Modelrver: AIWFLOCModel[a].Modelrver,
						Modelext: AIWFLOCModel[a].Modelext,
						Modelname: AIWFLOCModel[a].Modelname,
						Modelver: AIWFLOCModel[a].Modelver,
					};
					sPayload.FuncLoc.push(sFuncLoc);

					var sFLAddr = {
						"Funcloc": AIWFLOCModel[a].Functionallocation,
					};
					sPayload.FLAddr.push(sFLAddr);

					var oAIWModel = {
						"Modelname": AIWModelData.modelName,
						"Version": AIWModelData.modelVer,
						"Parentkey": AIWModelData.modelParKey,
						"ModelnameRef": "",
						"VersionRef": "",
						"ParentkeyRef": "",
						"Modeldesc": AIWModelData.modelDesc
					};
					sPayload.AiwModel.push(oAIWModel);
				}
			}
			g.BusyDialog.open();
			var oModel = this.getView().getModel();
			oModel.create("/ChangeRequestSet", sPayload, {
				success: function (results) {
					g.BusyDialog.close();
					if (flag === "C") {
						// g.AIWModelDelete = true;
						// AIWModelData.crtEnable = false;
						AIWModelData.delEnable = true;
					} else if (flag === "D") {
						// g.AIWModelDelete = false;
						AIWModelData.crtEnable = true;
						AIWModelData.delEnable = false;
						AIWModelData.modelName = "";
						AIWModelData.modelDesc = "";
						AIWModelData.modelVer = "000";
						AIWModelData.modelParKey = "";
					} else if (flag === "R") {
						if (results.AiwModel.results.length > 0) {
							var oAiwModelResponse = results.AiwModel.results[0];
							AIWModelData.modelEnable = formatter.checkBooleanString(oAiwModelResponse.is_read_only);
							AIWModelData.crtEnable = formatter.checkBooleanString(oAiwModelResponse.is_read_only);
							AIWModelData.delEnable = formatter.checkBooleanString(oAiwModelResponse.is_read_only);
							AIWModelData.modelName = oAiwModelResponse.Modelname;
							AIWModelData.modelDesc = oAiwModelResponse.Modeldesc;
							AIWModelData.modelVer = oAiwModelResponse.Version;
							AIWModelData.modelParKey = oAiwModelResponse.Parentkey;
						}

						AIWModelData.AiwModelRef = results.AiwModelRef.results;
						// var oAiwModelRefResponse = results.AiwModelRef.results;
						// for(var i=0;i<oAiwModelRefResponse.length;i++){

						// }
					}
					AIWModel.setData(AIWModelData);
					var AIWFLOCModel = sap.ui.getCore().getModel(g.oModelAIWFLOC).getData();
					for (var i = 0; i < AIWFLOCModel.length; i++) {
						if (AIWFLOCModel[i].Functionallocation === results.FuncLoc.results[i].Tplnr) {
							AIWFLOCModel[i].Modeldesc = results.FuncLoc.results[i].Modeldesc;
							AIWFLOCModel[i].Modelref = results.FuncLoc.results[i].Modelref;
							AIWFLOCModel[i].Modelname = results.FuncLoc.results[i].Modelname;
							AIWFLOCModel[i].Modelver = results.FuncLoc.results[i].Modelver;
							AIWFLOCModel[i].Modelext = results.FuncLoc.results[i].Modelext;
						}
					}
				},
				error: function (err) {
					g.BusyDialog.close();
					var error = [];
					if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
						.errordetails
						.length === 0) {
						error[0] = JSON.parse(err.responseText).error.message.value;
					} else {
						for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
							error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
						}
					}

					var oMessageList = [];
					for (var e = 0; e < error.length; e++) {
						oMessageList.push({
							type: "Error",
							title: error[e]
						});
					}

					g.createMessagePopover(oMessageList, false);
				}
			});
		},

		onDrfatRefreshPress: function () {
			var g = this;
			var M = this.getView().getModel("valueHelp2");
			var aFilter = [new sap.ui.model.Filter("Object", "EQ", "AIW")];
			M.read("/DraftSearchSet", {
				filters: aFilter,
				success: function (r) {
					var aDrafts = r.results;
					var mDrafts = new JSONModel(aDrafts);
					g.getView().byId("draftRequests").setModel(mDrafts);
					g.getView().byId("idDraftTab").setText("Drafts(" + aDrafts.length + ")");
				},
				error: function (err) {}
			});
		},

		handleDraftItemPress: function (oEvent) {
			var g = this;
			var sCR = oEvent.getSource().getBindingContext().getObject().UsmdCrequest;
			var bCompact = !!g.getView().$().closest(".sapUiSizeCompact").length;
			sap.m.MessageBox.information(
				g.getView().getModel("i18n").getProperty("draft_check"), {
					actions: [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL],
					styleClass: bCompact ? "sapUiSizeCompact" : "",
					onClose: function (sAction) {
						if (sAction === "OK") {
							g.readDraftCRdata(sCR);
						}
					}
				}
			);
		},

		readDraftCRdata: function (changeRequest) {
			var g = this;

			var dataOriginMOP = new JSONModel({
				EQ: [],
				FL: []
			});
			sap.ui.getCore().setModel(dataOriginMOP, "dataOriginMOP");
			this.readDOIList("EQUI");
			this.readDOIList("FUNCLOC");

			var ainMOP = new JSONModel([]);
			sap.ui.getCore().setModel(ainMOP, "ainMOP");

			var oAIWModel = {
				modelName: "",
				modelNameVS: "None",
				modelDesc: "",
				modelDescVS: "None",
				modelVer: "000",
				modelParKey: "",
				modelParKeyVS: "None",
				modelEnable: true,
				crtEnable: true,
				delEnable: false
			};
			var mAIWModel = new JSONModel(oAIWModel);
			this.getView().setModel(mAIWModel, "AIWModel");
			sap.ui.getCore().setModel(mAIWModel, "AIWModel");

			this.onFirstObjectInit();
			this.onNextObjectInit();
			this.onLastObjectInit(true); //true

			var M = this.getView().getModel("ApprModel");

			function readStatusProf(d, l) {
				var q = "/DeriveOLstatusSet(Netyp='" + d + "',Lvorm=false)";
				g.BusyDialog.open();
				M.read(q, {
					success: function (r) {
						g.BusyDialog.close();
						var AIWListOLData = sap.ui.getCore().getModel("AIWListOLModel").getData();
						if (r.Statproftxt !== "" && (r.Ustw_oln !== "" || r.Uswo_oln !== "")) {
							AIWListOLData[l - 1].usrSts = r.Usta_oln;
							AIWListOLData[l - 1].stProfLblV = true;
							AIWListOLData[l - 1].stsProf = r.Stsm_oln;
							AIWListOLData[l - 1].stsProfV = true;
							AIWListOLData[l - 1].stsProfDesc = r.Statproftxt;
							AIWListOLData[l - 1].stsProfDescV = true;
							AIWListOLData[l - 1].stsObj = r.Ustw_oln;
							AIWListOLData[l - 1].stsObjLblV = true;
							AIWListOLData[l - 1].stsObjV = true;
							AIWListOLData[l - 1].stsWoLblV = true;
							AIWListOLData[l - 1].stsWoNoV = true;
							AIWListOLData[l - 1].stsWoNo = r.Uswo_oln;
							AIWListOLData[l - 1].sysSts = r.Stattext;
						} else {
							AIWListOLData[l - 1].stProfLblV = false;
							AIWListOLData[l - 1].stsProfV = false;
							AIWListOLData[l - 1].stsProfDescV = false;
							AIWListOLData[l - 1].stsObjLblV = false;
							AIWListOLData[l - 1].stsObjV = false;
							AIWListOLData[l - 1].stsWoLblV = false;
							AIWListOLData[l - 1].stsWoNoV = false;
							AIWListOLData[l - 1].usrSts = "";
							AIWListOLData[l - 1].stsProf = "";
							AIWListOLData[l - 1].stsProfDesc = "";
							AIWListOLData[l - 1].stsObj = "";
							AIWListOLData[l - 1].stsWoNo = "";
							AIWListOLData[l - 1].sysSts = "";
						}
						// AIWListOLData.push(objLink);
						// }
						if (l > 1) {
							l--;
							readStatusProf(AIWListOLData[l - 1].linkCat, l);
						}
						// sap.ui.getCore().getModel("AIWListOLModel").setSizeLimit(AIWListOLData.length);
						sap.ui.getCore().getModel("AIWListOLModel").setData(AIWListOLData);
						//g.updateCount("objLink", AIWListOLData);
						sap.ui.getCore().getModel("AIWListOLModel").refresh();
					},
					error: function (err) {
						g.BusyDialog.close();
						var error = [];
						if (JSON.parse(err.responseText).error.innererror.errordetails === undefined || JSON.parse(err.responseText).error.innererror
							.errordetails
							.length === 0) {
							error[0] = JSON.parse(err.responseText).error.message.value;
						} else {
							for (var n = 0; n < JSON.parse(err.responseText).error.innererror.errordetails.length; n++) {
								error[n] = JSON.parse(err.responseText).error.innererror.errordetails[n].message;
							}
						}
						var value = error.join("\n");
						g.invokeMessage(value);
					}
				});
			}

			var aFilter = [new sap.ui.model.Filter("Draft", "EQ", changeRequest)]; //19210 | 20066
			var aExpand = ["FLClass", "FLAddr", "FLAddrI", "FLEmail", "FLFax", "FLMltxt", "FLPermit", "FuncLoc", "FLLAM", "FLLAMCH", "FLPrtnr",
				"FLTele", "FLUrl", "FLVal",
				"FLALTLBEL", "EqClass", "EqAddr", "EqAddrI", "EqEmail", "EqFax", "EqMltxt", "EqPermt", "Equipment", "EqLAM", "EqLAMCH", "EqPRT",
				"EqPRTNR", "EqStock", "EqTel",
				"EqUrl", "EqVal", "Equi_DOI", "AINHeaderinfo", "AINAttachments", "AINCharacteristics", "AINAnnounce", "EqDFPS", "MRBHeader",
				"MRBItem", "MRBSBIT",
				"EBHeader", "EBItem", "EBSBIT", "FBHeader", "FBItem", "FBSBIT", "WBHeader", "WBItem", "WBSBIT", "MSClass", "MSLAM", "MSPoint",
				"MSVal", "DataOrigin_N",
				"Workcenter", "WCCapa", "WCCost", "ValueWC", "ClassWC", "GTClass", "GTComp", "GTInsp", "GTList", "GTMPack", "GTMpackRead",
				"GTOprs", "GTPRT", "GTRel",
				"GTSpack", "GTVal", "ETClass", "ETComp", "ETInsp", "ETList", "ETMPack", "ETMpackRead", "ETOprs", "ETPRT", "ETRel", "ETSpack",
				"ETVal", "FTClass", "FTComp",
				"FTInsp", "FTList", "FTMPack", "FTMpackRead", "FTOprs", "FTPRT", "FTRel", "FTSpack", "FTVal", "MPCycle", "MPItem", "MPLAM",
				"MPLAN", "MPOBList", "ClassMpl",
				"ValuaMpl", "OLClass", "OLVal", "Olink", "OLLAM", "ONLAM", "ONText", "ONetwork", "ONWClass", "ONVal", "ONALAM", "ONatevt",
				"ONattrp", "ONLink", "ONLLAM"
			];
			this.BusyDialog.open();
			M.read("/ChangeRequestSet", {
				filters: aFilter,
				urlParameters: {
					"$expand": aExpand
				},
				success: function (r) {
					g.BusyDialog.close();
					var results = r.results[0];
					g.getView().byId("reasonForRequest").setSelectedKey(results.Reason);
					g.getView().byId("Description").setValue(results.CrDescription);
					g.getView().byId("idPriority").setSelectedKey(results.Priority);
					g.getView().byId("idDueDate").setDateValue(results.Duedate);

					g.getView().byId("idDueDate").setDateValue();

					var oAIWModel = {
						modelName: "",
						modelNameVS: "None",
						modelDesc: "",
						modelDescVS: "None",
						modelVer: "000",
						modelParKey: "",
						modelParKeyVS: "None",
						modelEnable: true,
						crtEnable: true,
						delEnable: false
					};
					var mAIWModel = new JSONModel(oAIWModel);
					g.getView().setModel(mAIWModel, "AIWModel");

					if (results.FuncLoc) {
						var sFunctionalLoc = results.FuncLoc.results;
						if (sFunctionalLoc) {
							for (var a = 0; a < sFunctionalLoc.length; a++) {
								var sObject = {
									altlbl: [],
									attachmentCount: "0", // Attachment Count
									Guids: "", // Attachment
									TplnrEnabled: true,
									MaintplantEnabled: true,
									BukrsEnabled: true,
									FunctionalLocEnabled: true,
									FlocCatEnabled: true,
									StrucIndEnabled: true,
									charNewButton: true,

									intlAddr: [],
									classItems: [],
									characteristics: [],
									FunctionallocationVS: "None",
									FunctionallocationVST: "",
									FlocdescriptionVS: "None",
									FlocdescriptionVST: "",
									StrucindicatorVS: "None",
									StrucindicatorVST: "",
									FloccategoryVS: "None",
									FloccategoryVST: "",
									SupFunctionallocationVS: "None",
									SupFunctionallocationVST: "",
									MaintplantVS: "None",
									MaintplantVST: "",
									StsmEquiVS: "None",
									StsmEquiVST: "",
									UstwEquiVS: "None",
									UstwEquiVST: "",
									UswoEquiVS: "None",
									UswoEquiVST: "",
									TechnicalObjectTypVS: "None",
									TechnicalObjectTypVST: "",
									LocationVS: "None",
									LocationVST: "",
									AbckzVS: "None",
									AbckzVST: "",
									MainArbplVS: "None",
									MainArbplVST: "",
									BeberFlVS: "None",
									BeberFlVST: "",
									BukrsVS: "None",
									BukrsVST: "",
									KostlVS: "None",
									KostlVST: "",
									WerksVS: "None",
									WerksVST: "",
									IngrpVS: "None",
									IngrpVST: "",
									ArbplVS: "None",
									ArbplVST: "",
									ConstrTypeVS: "None",
									ConstrTypeVST: "",
									RefPostaVS: "None",
									RefPostaVST: "",
									LangucodeVS: "None",
									LangucodeVST: "",
									TimeZoneVS: "None",
									TimeZoneVST: "",

									TplnrEnabled: true,
									FunctionalLocEnabled: true,
									FlocCatEnabled: true,
									StrucIndEnabled: true,
									MaintplantEnabled: true,
									BukrsEnabled: true
								};

								sObject.lam = {
									Lrpid: "",
									LrpidDesc: "",
									Strtptatr: "",
									Endptatr: "",
									Length: "",
									LinUnit: "",
									LinUnitDesc: "",
									Startmrkr: "",
									Endmrkr: "",
									Mrkdisst: "",
									Mrkdisend: "",
									MrkrUnit: "",
									enableLrp: true,
									enableMarker: false,
									LrpidVS: "None",
									StrtptatrVS: "None",
									EndptatrVS: "None",
									LinUnitVS: "None",
									StartmrkrVS: "None",
									EndmrkrVS: "None",
									MrkdisstVS: "None",
									MrkdisendVS: "None",
									MrkrUnitVS: "None"
								};

								sObject.Title = sObject.Title ? sObject.Title : "";
								sObject.TitleCode = sObject.TitleCode ? sObject.TitleCode : "";
								sObject.Name1 = sObject.Name1 ? sObject.Name1 : "";
								sObject.Name2 = sObject.Name2 ? sObject.Name2 : "";
								sObject.Name3 = sObject.Name3 ? sObject.Name3 : "";
								sObject.Name4 = sObject.Name4 ? sObject.Name4 : "";
								sObject.Sort1 = sObject.Sort1 ? sObject.Sort1 : "";
								sObject.Sort2 = sObject.Sort2 ? sObject.Sort2 : "";
								sObject.NameCo = sObject.NameCo ? sObject.NameCo : "";
								sObject.PostCod1 = sObject.PostCod1 ? sObject.PostCod1 : "";
								sObject.City1 = sObject.City1 ? sObject.City1 : "";
								sObject.Building = sObject.Building ? sObject.Building : "";
								sObject.Floor = sObject.Floor ? sObject.Floor : "";
								sObject.Roomnum = sObject.Roomnum ? sObject.Roomnum : "";
								sObject.Strsuppl1 = sObject.Strsuppl1 ? sObject.Strsuppl1 : "";
								sObject.Strsuppl2 = sObject.Strsuppl2 ? sObject.Strsuppl2 : "";
								sObject.Strsuppl3 = sObject.Strsuppl3 ? sObject.Strsuppl3 : "";
								sObject.AddrLocation = sObject.AddrLocation ? sObject.AddrLocation : "";
								sObject.RefPosta = sObject.RefPosta ? sObject.RefPosta : "";
								sObject.Landx = sObject.Landx ? sObject.Landx : "";
								sObject.TimeZone = sObject.TimeZone ? sObject.TimeZone : "";
								sObject.Region = sObject.Region ? sObject.Region : "";
								sObject.RegionDesc = sObject.RegionDesc ? sObject.RegionDesc : "";

								sObject.Tplnr = sFunctionalLoc[a].Tplnr;
								sObject.Functionallocation = sFunctionalLoc[a].FlocRef;
								sObject.Flocdescription = sFunctionalLoc[a].Txtmi; // Floc Description
								sObject.EditMask = sFunctionalLoc[a].EditMask;
								sObject.Hierarchy = sFunctionalLoc[a].Hierarchy;
								sObject.Floccategory = sFunctionalLoc[a].Fltyp;
								sObject.FlocCategoryDesc = sFunctionalLoc[a].Flttx;
								sObject.Strucindicator = sFunctionalLoc[a].TplkzFlc;
								sObject.StrucIndicatorDesc = sFunctionalLoc[a].Tplxt;
								sObject.Lvorm = sFunctionalLoc[a].Lvorm;
								sObject.Deact = sFunctionalLoc[a].Deact;
								sObject.Trpnr = sFunctionalLoc[a].Trpnr;
								sObject.Refflocdesc = sFunctionalLoc[a].Refflocdesc;
								sObject.SupFunctionallocation = sFunctionalLoc[a].Tplma; // Sup FuncLoc
								sObject.SupFlocdescription = sFunctionalLoc[a].Supflocdesc; // Sup FlocDescription
								sObject.Stattext = sFunctionalLoc[a].Stattext; // System Status
								sObject.UstaEqui = sFunctionalLoc[a].UstaFloc; // User Status
								sObject.StsmEqui = sFunctionalLoc[a].StsmFloc; // Status Profile
								sObject.StsmEquiDesc = sFunctionalLoc[a].Statproftxt; // Status Profile Description
								sObject.UstwEqui = sFunctionalLoc[a].UstwFloc; // Status with Status Number
								sObject.UswoEqui = sFunctionalLoc[a].UswoFloc; // Status without Status Number
								sObject.TechnicalObjectTyp = sFunctionalLoc[a].Eqart; // TechnicalObjectTyp
								sObject.Description = sFunctionalLoc[a].Eartx; // TechnicalObjectTyp Description
								sObject.Begru = sFunctionalLoc[a].Begru;
								sObject.Begtx = sFunctionalLoc[a].Begtx;
								sObject.Brgew = sFunctionalLoc[a].Brgew;
								sObject.Gewei = sFunctionalLoc[a].Gewei;
								sObject.Invnr = sFunctionalLoc[a].Invnr;
								sObject.Groes = sFunctionalLoc[a].Groes;
								sObject.Inbdt = sFunctionalLoc[a].Inbdt;
								sObject.Answt = sFunctionalLoc[a].Answt;
								sObject.Waers = sFunctionalLoc[a].Waers;
								sObject.Ansdt = sFunctionalLoc[a].Ansdt;
								sObject.Herst = sFunctionalLoc[a].Herst;
								sObject.Typbz = sFunctionalLoc[a].Typbz;
								sObject.Mapar = sFunctionalLoc[a].Mapar;
								sObject.Serge = sFunctionalLoc[a].Serge;
								sObject.Herld = sFunctionalLoc[a].Herld;
								sObject.Baujj = sFunctionalLoc[a].Baujj;
								sObject.Baumm = sFunctionalLoc[a].Baumm;
								sObject.MonthName = sFunctionalLoc[a].MonthName;
								sObject.Maintplant = sFunctionalLoc[a].Swerk;
								sObject.MaintplantDesc = sFunctionalLoc[a].Plantname;
								sObject.Location = sFunctionalLoc[a].StorFloc; // Location
								sObject.Locationdesc = sFunctionalLoc[a].Locationdesc; // Location Description
								sObject.Msgrp = sFunctionalLoc[a].Msgrp;
								sObject.BeberFl = sFunctionalLoc[a].BeberFl; // Plant Section
								sObject.Fing = sFunctionalLoc[a].Fing; // Person responsible
								sObject.Tele = sFunctionalLoc[a].Tele; // Phone
								sObject.Eqfnr = sFunctionalLoc[a].Eqfnr;
								sObject.Abckz = sFunctionalLoc[a].Abckzfloc;
								sObject.Abctx = sFunctionalLoc[a].Abctx;
								sObject.Bukrs = sFunctionalLoc[a].Bukrsfloc;
								sObject.Butxt = sFunctionalLoc[a].Butxt;
								sObject.City = sFunctionalLoc[a].City;
								sObject.GsbeFloc = sFunctionalLoc[a].GsbeFloc;
								sObject.Gtext = sFunctionalLoc[a].Gtext;
								sObject.Anln1Fl = sFunctionalLoc[a].Anln1Fl;
								sObject.AnlaFl = sFunctionalLoc[a].AnlaFl;
								sObject.Txt50 = sFunctionalLoc[a].Txt50;
								sObject.Kostl = sFunctionalLoc[a].KostFloc; // Cost Center
								sObject.Kokrs = sFunctionalLoc[a].KokrFloc; // ccPart1
								sObject.Mctxt = sFunctionalLoc[a].Contareaname; // Name
								sObject.Posid = sFunctionalLoc[a].Posid;
								sObject.Post1 = sFunctionalLoc[a].Post1;
								sObject.DaufFloc = sFunctionalLoc[a].DaufFloc;
								sObject.Standorderdesc = sFunctionalLoc[a].Standorderdesc;
								sObject.AufnFloc = sFunctionalLoc[a].AufnFloc;
								sObject.SettleOrdDesc = sFunctionalLoc[a].SettleOrdDesc;
								sObject.Werks = sFunctionalLoc[a].PlntFloc; // Planning Plant
								sObject.Planningplantdes = sFunctionalLoc[a].Planningplantdes; // Planning Plant Description
								sObject.Ingrp = sFunctionalLoc[a].Ingrp; // Planner Group
								sObject.Innam = sFunctionalLoc[a].Plannergrpdesc; // Planner Group Description
								sObject.Arbpl = sFunctionalLoc[a].Arbplfloc; // Work Center
								sObject.Ktext = sFunctionalLoc[a].Workcenterdesc; // Work Center Description
								sObject.WcWerks = sFunctionalLoc[a].Wergwfloc; // Work center Plant
								sObject.MainArbpl = sFunctionalLoc[a].Gewrkfloc; // Main Work Center
								sObject.MainKtext = sFunctionalLoc[a].MainWcDesc; // Plant Work Center
								sObject.MainWerks = sFunctionalLoc[a].MainWcPlant; // Name
								sObject.RbnrFloc = sFunctionalLoc[a].RbnrFloc;
								sObject.Rbnrx = sFunctionalLoc[a].Rbnrx;
								sObject.Tplma = sFunctionalLoc[a].Tplma;
								sObject.SupFunctionallocation = sFunctionalLoc[a].Tplma;
								sObject.Supflocdesc = sFunctionalLoc[a].Supflocdesc;
								sObject.SupFlocdescription = sFunctionalLoc.Supflocdesc;
								sObject.Posnr = sFunctionalLoc[a].Posnr;
								sObject.Trpnr = sFunctionalLoc[a].Trpnr;
								sObject.Refflocdesc = sFunctionalLoc[a].Refflocdesc;
								sObject.Iequi = sFunctionalLoc[a].Iequi;
								sObject.Einzl = sFunctionalLoc[a].Einzl;
								sObject.ConstrType = sFunctionalLoc[a].Submtiflo; // Construction Type
								sObject.ConstructionDesc = sFunctionalLoc[a].Constdesc; // Construction Description
								sObject.CgwldtFl = sFunctionalLoc[a].CgwldtFl;
								sObject.CgwlenFl = sFunctionalLoc[a].CgwlenFl;
								sObject.CmganrFl = sFunctionalLoc[a].CmganrFl;
								sObject.CwagetFl = sFunctionalLoc[a].CwagetFl;
								sObject.CgaerbFl = sFunctionalLoc[a].CgaerbFl;
								sObject.VgwldtFl = sFunctionalLoc[a].VgwldtFl;
								sObject.VgwlenFl = sFunctionalLoc[a].VgwlenFl;
								sObject.VmganrFl = sFunctionalLoc[a].VmganrFl;
								sObject.VwagetFl = sFunctionalLoc[a].VwagetFl;
								sObject.VgaerbFl = sFunctionalLoc[a].VgaerbFl;
								sObject.Vkorg = sFunctionalLoc[a].Vkorg;
								sObject.Vkorgtxt = sFunctionalLoc[a].Vkorgtxt;
								sObject.Vtweg = sFunctionalLoc[a].Vtweg;
								sObject.Vtwegtxt = sFunctionalLoc[a].Vtwegtxt;
								sObject.Spart = sFunctionalLoc[a].Spart;
								sObject.Sparttxt = sFunctionalLoc[a].Sparttxt;
								sObject.Vkbur = sFunctionalLoc[a].Vkbur;
								sObject.Vkburtxt = sFunctionalLoc[a].Vkburtxt;
								sObject.Vkgrp = sFunctionalLoc[a].Vkgrp;
								sObject.Vkgrptxt = sFunctionalLoc[a].Vkgrptxt;
								sObject.Alkey = sFunctionalLoc[a].Alkey; //Labeling system
								sObject.Altxt = sFunctionalLoc[a].Altxt;
								sObject.viewParameter = sFunctionalLoc[a].Type ? "create" : "change";
								sObject.Modeldesc = sFunctionalLoc[a].Modeldesc;
								sObject.Modelref = sFunctionalLoc[a].Modelref;
								sObject.Modelrver = sFunctionalLoc[a].Modelrver;
								sObject.Modelext = sFunctionalLoc[a].Modelext;
								sObject.Modelname = sFunctionalLoc[a].Modelname;
								sObject.Modelver = sFunctionalLoc[a].Modelver;
								sObject.Adrnr = sFunctionalLoc[a].Adrnr;
								if (sFunctionalLoc[a].Swerk !== "") {
									// sObject.MaintplantEnabled = false;
									sObject.BukrsEnabled = false;
								} else {
									sObject.MaintplantEnabled = true;
									sObject.BukrsEnabled = true;
								}

								if (sFunctionalLoc[a].Fltyp === "L" && results.FLLAM) {
									var sLAM = results.FLLAM.results;
									if (sLAM) {
										for (var z = 0; z < sLAM.length; z++) {
											if (sLAM[z].Funcloc === sFunctionalLoc[a].Tplnr) {
												sObject.lam = sLAM[z];
												sObject.lam.LrpidDesc = sLAM[z].LrpDescr;
												sObject.lam.LinUnitDesc = sLAM[z].Uomtext;
												sObject.lam.enableLrp = true;
												sObject.lam.enableMarker = true;
												sObject.lam.LamDer = "D";
												break;
											}
										}
									}
								}

								if (results.FLClass) {
									// var sClassFloc = results.FLClass.results;
									var sClassFloc = $.map(results.FLClass.results, function (obj) {
										return $.extend(true, {}, obj);
									});
									if (sClassFloc) {
										if (sClassFloc.length > 0) {
											for (var b = 0; b < sClassFloc.length; b++) {
												if (sObject.Tplnr === sClassFloc[b].Funcloc) {
													sClassFloc[b].ctEnable = false;
													sClassFloc[b].classEnable = false;
													sClassFloc[b].ClassTypeDesc = sClassFloc[b].Artxt;
													delete sClassFloc[b].Artxt;
													sClassFloc[b].ClassDesc = sClassFloc[b].Kltxt;
													delete sClassFloc[b].Kltxt;
													delete sClassFloc[b].Changerequestid;
													delete sClassFloc[b].Clint;
													delete sClassFloc[b].Service;
													sClassFloc[b].classDelEnable = true;
													sObject.classItems.push(sClassFloc[b]);
												}
											}
										}
									}
								}

								if (results.FLVal) {
									// var sCharFLOC = results.FLVal.results;
									var sCharFLOC = $.map(results.FLVal.results, function (obj) {
										return $.extend(true, {}, obj);
									});
									if (sCharFLOC) {
										if (sCharFLOC.length > 0) {
											for (var c = 0; c < sCharFLOC.length; c++) {
												if (sObject.Tplnr === sCharFLOC[c].Funcloc) {
													sCharFLOC[c].cNameEnable = false;
													sCharFLOC[c].Textbz = sCharFLOC[c].Atwtb;
													delete sCharFLOC[c].Ataut;
													delete sCharFLOC[c].Ataw1;
													delete sCharFLOC[c].Atawe;
													delete sCharFLOC[c].Atcod;
													delete sCharFLOC[c].Atflb;
													delete sCharFLOC[c].Atflv;
													delete sCharFLOC[c].Atimb;
													delete sCharFLOC[c].Atsrt;
													delete sCharFLOC[c].Atvglart;
													delete sCharFLOC[c].Atzis;
													delete sCharFLOC[c].Changerequestid;
													delete sCharFLOC[c].Charid;
													delete sCharFLOC[c].Classtype;
													delete sCharFLOC[c].Service;
													delete sCharFLOC[c].Valcnt;
													sCharFLOC[c].slNo = c + 1; // ()
													sCharFLOC[c].flag = sCharFLOC[c].Class + "-" + sCharFLOC[c].slNo; // ()
													sObject.characteristics.push(sCharFLOC[c]);

													for (var z = 0; z < sObject.characteristics.length; z++) {
														var count = 1;
														for (var y = 0; y < sObject.characteristics.length; y++) {
															if (z === y) {
																continue;
															}
															if (sObject.characteristics[y].Atnam === sObject.characteristics[z].Atnam && sObject.characteristics[y].Class ===
																sObject.characteristics[z].Class) {
																count++;
															}
														}
														if (count > 1) {
															sObject.characteristics[z].charDltEnable = true;
														} else {
															sObject.characteristics[z].charDltEnable = false;
														}

														if (sObject.characteristics[z].Atein === true) {
															sObject.characteristics[z].charAddEnable = false;
														}
													}
												}
											}
										}
									}
								}

								if (results.FLAddr) {
									if (results.FLAddr.results) {
										var sAddressFloc = results.FLAddr.results;
										if (sAddressFloc) {
											if (sAddressFloc.length > 0) {
												for (var f = 0; f < sAddressFloc.length; f++) {
													if (sObject.Tplnr === sAddressFloc[f].Funcloc) {
														var oAddressModel = sap.ui.getCore().getModel("flocAddressView");
														var oAddressData = oAddressModel.getData();
														var mCountFlag = true;
														var sObj;
														if (oAddressData.length > 0) {
															for (var sa = 0; sa < oAddressData.length; sa++) {
																if (sObject.Functionallocation === oAddressData[sa].Functionallocation) {
																	mCountFlag = false;
																	break;
																}
															}
														}
														if (mCountFlag) {
															sObj = {
																Functionallocation: sObject.Functionallocation,
																IsEditable: sAddressFloc[f].IsEditable
															};
															oAddressData.push(sObj);
															oAddressModel.setData(oAddressData);
														}

														sObject.Title = sAddressFloc[f].Titletxt;
														sObject.Name1 = sAddressFloc[f].Name1;
														sObject.Name2 = sAddressFloc[f].Name2;
														sObject.Name3 = sAddressFloc[f].Name3;
														sObject.Name4 = sAddressFloc[f].Name4;
														sObject.Sort1 = sAddressFloc[f].Sort1; // searchTerm1
														sObject.Sort2 = sAddressFloc[f].Sort2; // searchTerm2
														sObject.NameCo = sAddressFloc[f].NameCo; // Company 
														sObject.Building = sAddressFloc[f].Building;
														sObject.Floor = sAddressFloc[f].Floor;
														sObject.Roomnum = sAddressFloc[f].Roomnum;
														sObject.Street = sAddressFloc[f].Street;
														sObject.HouseNr1 = sAddressFloc[f].HouseNr1;
														sObject.HouseNr2 = sAddressFloc[f].HouseNr2;
														sObject.Strsuppl1 = sAddressFloc[f].Strsuppl1;
														sObject.Strsuppl2 = sAddressFloc[f].Strsuppl2;
														sObject.Strsuppl3 = sAddressFloc[f].Strsuppl3;
														sObject.AddrLocation = sAddressFloc[f].Location;
														sObject.District = sAddressFloc[f].District;
														sObject.PostCod1 = sAddressFloc[f].PostCod1;
														sObject.City1 = sAddressFloc[f].City1; // City
														sObject.RPostafl = sAddressFloc[f].RPostafl;
														sObject.RefPosta = sAddressFloc[f].RPostafl;
														sObject.Landx = sAddressFloc[f].Landx;
														sObject.RfePost = sAddressFloc[f].RPostFl;
														sObject.Region = sAddressFloc[f].RPostFl;
														sObject.Regiotxt = sAddressFloc[f].Regiotxt;
														sObject.RegionDesc = sAddressFloc[f].Regiotxt;
														sObject.HomeCity = sAddressFloc[f].HomeCity;
														sObject.TimeZone = sAddressFloc[f].TimeZone;
														sObject.Taxjurcod = sAddressFloc[f].Taxjurcod;
														sObject.Regiogrou = sAddressFloc[f].Regiogrou;
														sObject.RfePostl = sAddressFloc[f].RfePostl;
														sObject.Dontusestxt = sAddressFloc[f].Dontusestxt;
														sObject.PoBox = sAddressFloc[f].PoBox;
														sObject.PoboxNum = sAddressFloc[f].PoboxNum;
														sObject.DlvsrvTy = sAddressFloc[f].DlvsrvTy;
														sObject.DlvsrvNr = sAddressFloc[f].DlvsrvNr;
														sObject.PostCod2 = sAddressFloc[f].PostCod2;
														sObject.PoboxLoc = sAddressFloc[f].PoboxLoc;
														sObject.PoboxLby = sAddressFloc[f].PoboxLby;
														sObject.PoboxCty = sAddressFloc[f].PoboxCty;
														sObject.LandxP = sAddressFloc[f].LandxP;
														sObject.RfePstal = sAddressFloc[f].RPstaFl;
														sObject.RegiotxtP = sAddressFloc[f].RegiotxtP;
														sObject.Dontuseptxt = sAddressFloc[f].Dontuseptxt;
														sObject.PostCod3 = sAddressFloc[f].PostCod3;
														sObject.Remark = sAddressFloc[f].Remark;
													}
												}
											}
										}
									}
								}

								var aIntlAddr = results.FLAddrI.results;
								if (aIntlAddr) {
									for (var z = 0; z < aIntlAddr.length; z++) {
										if (aIntlAddr[z].Funcloc === sObject.Tplnr) {
											aIntlAddr[z].AdNationEnable = false;
											aIntlAddr[z].City1iVS = "None";
											aIntlAddr[z].StreetiVS = "None";
											sObject.intlAddr.push(aIntlAddr[z]);
										}
									}
								}

								var aAltLbl = results.FLALTLBEL.results;
								if (aAltLbl) {
									for (var y = 0; y < aAltLbl.length; y++) {
										if (aAltLbl[y].Funcloc === sObject.Tplnr) {
											var oAltLbl = {
												"Funcloc": aAltLbl[y].Funcloc,
												"AltAlkey": aAltLbl[y].AltAlkey, // Labeling system
												"Altxt": aAltLbl[y].Altxt, // Labeling system descr
												"AltStrno": aAltLbl[y].AltStrno, // Alternative Label
												"AltTplkz": aAltLbl[y].AltTplkz, // Strycture Indicator
												"Tplxt": aAltLbl[y].Tplxt, // Structure Indicator Descr
												"Name1i": aAltLbl[y].Editm, // Edit Mask
												"Actvs": aAltLbl[y].Actvs, // Active
												"AltPrkey": aAltLbl[y].AltPrkey, // Primary
												"AltReuse": aAltLbl[y].AltReuse, // Reusable

												"enableLblSys": false,
												"enableAltLbl": false,
												"enableStrInd": false,

												"LblSysVS": "None",
												"AltLblVS": "None",
												"StrIndVS": "None"
											};
											sObject.altlbl.push(oAltLbl);
										}
									}
								}

								if (sFunctionalLoc[a].Modelname && sFunctionalLoc[a].Modelname !== "") {
									oAIWModel.modelName = sFunctionalLoc[a].Modelname;
									oAIWModel.modelDesc = sFunctionalLoc[a].Modeldesc;
									oAIWModel.modelVer = sFunctionalLoc[a].Modelver;
									oAIWModel.modelParKey = sFunctionalLoc[a].Tplnr;
									oAIWModel.crtEnable = true;
									oAIWModel.delEnable = true;

									var mAIWModel = new JSONModel(oAIWModel);
									g.getView().setModel(mAIWModel, "AIWModel");
								}

								// if (sObject.SupFunctionallocation !== "") {
								// 	g.DOIonReadFL(sObject.Functionallocation, sObject.SupFunctionallocation, "copy");
								// } else {
								var tempFLDOI = $.map(g.DOIarrayFL, function (obj) {
									return $.extend(true, {}, obj);
								});
								sap.ui.getCore().getModel("dataOriginMOP").getData().FL.push({
									key: sObject.Functionallocation,
									DOI: tempFLDOI
								});
								// }

								// g.setCommonApprovalData(g.oModelAIWFLOC, pApproveObject, true);
								g.handleCreatePress(g, sObject, g.oModelAIWFLOC);
							}

							var aFLDOIdata = sap.ui.getCore().getModel("dataOriginMOP").getData().FL;
							for (var i = 0; i < results.FuncLoc.results.length; i++) {
								var h = results.FuncLoc.results[i];
								for (var z = 0; z < aFLDOIdata.length; z++) {
									if (h.FlocRef === aFLDOIdata[z].key) {
										var aDOIFields = aFLDOIdata[z].DOI;
										if (h.Swerki === "") {
											aDOIFields[0].maintenance = false;
											aDOIFields[0].instLoc = false;
											aDOIFields[0].SupFlVal = "";
											aDOIFields[0].currentVal = "";
											aDOIFields[0].targetVal = "";
										} else if (h.Swerki === "D") {
											aDOIFields[0].maintenance = true;
											aDOIFields[0].instLoc = false;
											aDOIFields[0].SupFlVal = "";
											aDOIFields[0].currentVal = h.Swerk;
											aDOIFields[0].targetVal = h.Swerk;
										} else {
											aDOIFields[0].maintenance = false;
											aDOIFields[0].instLoc = true;
											aDOIFields[0].SupFlVal = h.Swerk;
											aDOIFields[0].currentVal = "";
											aDOIFields[0].targetVal = h.Swerk;
										}

										if (h.Storti === "") {
											aDOIFields[1].maintenance = false;
											aDOIFields[1].instLoc = false;
											aDOIFields[1].SupFlVal = "";
											aDOIFields[1].currentVal = "";
											aDOIFields[1].targetVal = "";
										} else if (h.Storti === "D") {
											aDOIFields[1].maintenance = true;
											aDOIFields[1].instLoc = false;
											aDOIFields[1].SupFlVal = "";
											aDOIFields[1].currentVal = h.StorFloc;
											aDOIFields[1].targetVal = h.StorFloc;
										} else {
											aDOIFields[1].maintenance = false;
											aDOIFields[1].instLoc = true;
											aDOIFields[1].SupFlVal = h.StorFloc;
											aDOIFields[1].currentVal = "";
											aDOIFields[1].targetVal = h.StorFloc;
										}

										if (h.Beberi === "") {
											aDOIFields[2].maintenance = false;
											aDOIFields[2].instLoc = false;
											aDOIFields[2].SupFlVal = "";
											aDOIFields[2].currentVal = "";
											aDOIFields[2].targetVal = "";
										} else if (h.Beberi === "D") {
											aDOIFields[2].maintenance = true;
											aDOIFields[2].instLoc = false;
											aDOIFields[2].SupFlVal = "";
											aDOIFields[2].currentVal = h.BeberFl;
											aDOIFields[2].targetVal = h.BeberFl;
										} else {
											aDOIFields[2].maintenance = false;
											aDOIFields[2].instLoc = true;
											aDOIFields[2].SupFlVal = h.BeberFl;
											aDOIFields[2].currentVal = "";
											aDOIFields[2].targetVal = h.BeberFl;
										}

										if (h.Ppsidi === "") {
											aDOIFields[3].maintenance = false;
											aDOIFields[3].instLoc = false;
											aDOIFields[3].SupFlVal = "";
											aDOIFields[3].currentVal = "";
											aDOIFields[3].targetVal = "";
										} else if (h.Ppsidi === "D") {
											aDOIFields[3].maintenance = true;
											aDOIFields[3].instLoc = false;
											aDOIFields[3].SupFlVal = "";
											aDOIFields[3].currentVal = h.Arbplfloc;
											aDOIFields[3].targetVal = h.Arbplfloc;
										} else {
											aDOIFields[3].maintenance = false;
											aDOIFields[3].instLoc = true;
											aDOIFields[3].SupFlVal = h.Arbplfloc;
											aDOIFields[3].currentVal = "";
											aDOIFields[3].targetVal = h.Arbplfloc;
										}

										if (h.Abckzi === "") {
											aDOIFields[4].maintenance = false;
											aDOIFields[4].instLoc = false;
											aDOIFields[4].SupFlVal = "";
											aDOIFields[4].currentVal = "";
											aDOIFields[4].targetVal = "";
										} else if (h.Abckzi === "D") {
											aDOIFields[4].maintenance = true;
											aDOIFields[4].instLoc = false;
											aDOIFields[4].SupFlVal = "";
											aDOIFields[4].currentVal = h.Abckzfloc;
											aDOIFields[4].targetVal = h.Abckzfloc;
										} else {
											aDOIFields[4].maintenance = false;
											aDOIFields[4].instLoc = true;
											aDOIFields[4].SupFlVal = h.Abckzfloc;
											aDOIFields[4].currentVal = "";
											aDOIFields[4].targetVal = h.Abckzfloc;
										}

										if (h.Bukrsi === "") {
											aDOIFields[5].maintenance = false;
											aDOIFields[5].instLoc = false;
											aDOIFields[5].SupFlVal = "";
											aDOIFields[5].currentVal = "";
											aDOIFields[5].targetVal = "";
										} else if (h.Bukrsi === "D") {
											aDOIFields[5].maintenance = true;
											aDOIFields[5].instLoc = false;
											aDOIFields[5].SupFlVal = "";
											aDOIFields[5].currentVal = h.Bukrsfloc;
											aDOIFields[5].targetVal = h.Bukrsfloc;
										} else {
											aDOIFields[5].maintenance = false;
											aDOIFields[5].instLoc = true;
											aDOIFields[5].SupFlVal = h.Bukrsfloc;
											aDOIFields[5].currentVal = "";
											aDOIFields[5].targetVal = h.Bukrsfloc;
										}

										if (h.Kostli === "") {
											aDOIFields[6].maintenance = false;
											aDOIFields[6].instLoc = false;
											aDOIFields[6].SupFlVal = "";
											aDOIFields[6].currentVal = "";
											aDOIFields[6].targetVal = "";
										} else if (h.Kostli === "D") {
											aDOIFields[6].maintenance = true;
											aDOIFields[6].instLoc = false;
											aDOIFields[6].SupFlVal = "";
											aDOIFields[6].currentVal = h.KostFloc;
											aDOIFields[6].targetVal = h.KostFloc;
										} else {
											aDOIFields[6].maintenance = false;
											aDOIFields[6].instLoc = true;
											aDOIFields[6].SupFlVal = h.KostFloc;
											aDOIFields[6].currentVal = "";
											aDOIFields[6].targetVal = h.KostFloc;
										}

										if (h.Kokrsi === "") {
											aDOIFields[7].maintenance = false;
											aDOIFields[7].instLoc = false;
											aDOIFields[7].SupFlVal = "";
											aDOIFields[7].currentVal = "";
											aDOIFields[7].targetVal = "";
										} else if (h.Kokrsi === "D") {
											aDOIFields[7].maintenance = true;
											aDOIFields[7].instLoc = false;
											aDOIFields[7].SupFlVal = "";
											aDOIFields[7].currentVal = h.KokrFloc;
											aDOIFields[7].targetVal = h.KokrFloc;
										} else {
											aDOIFields[7].maintenance = false;
											aDOIFields[7].instLoc = true;
											aDOIFields[7].SupFlVal = h.KokrFloc;
											aDOIFields[7].currentVal = "";
											aDOIFields[7].targetVal = h.KokrFloc;
										}

										if (h.Iwerki === "") {
											aDOIFields[8].maintenance = false;
											aDOIFields[8].instLoc = false;
											aDOIFields[8].SupFlVal = "";
											aDOIFields[8].currentVal = "";
											aDOIFields[8].targetVal = "";
										} else if (h.Iwerki === "D") {
											aDOIFields[8].maintenance = true;
											aDOIFields[8].instLoc = false;
											aDOIFields[8].SupFlVal = "";
											aDOIFields[8].currentVal = h.PlntFloc;
											aDOIFields[8].targetVal = h.PlntFloc;
										} else {
											aDOIFields[8].maintenance = false;
											aDOIFields[8].instLoc = true;
											aDOIFields[8].SupFlVal = h.PlntFloc;
											aDOIFields[8].currentVal = "";
											aDOIFields[8].targetVal = h.PlntFloc;
										}

										if (h.Ingrpi === "") {
											aDOIFields[9].maintenance = false;
											aDOIFields[9].instLoc = false;
											aDOIFields[9].SupFlVal = "";
											aDOIFields[9].currentVal = "";
											aDOIFields[9].targetVal = "";
										} else if (h.Ingrpi === "D") {
											aDOIFields[9].maintenance = true;
											aDOIFields[9].instLoc = false;
											aDOIFields[9].SupFlVal = "";
											aDOIFields[9].currentVal = h.Ingrp;
											aDOIFields[9].targetVal = h.Ingrp;
										} else {
											aDOIFields[9].maintenance = false;
											aDOIFields[9].instLoc = true;
											aDOIFields[9].SupFlVal = h.Ingrp;
											aDOIFields[9].currentVal = "";
											aDOIFields[9].targetVal = h.Ingrp;
										}

										if (h.Lgwidi === "") {
											aDOIFields[10].maintenance = false;
											aDOIFields[10].instLoc = false;
											aDOIFields[10].SupFlVal = "";
											aDOIFields[10].currentVal = "";
											aDOIFields[10].targetVal = "";
										} else if (h.Lgwidi === "D") {
											aDOIFields[10].maintenance = true;
											aDOIFields[10].instLoc = false;
											aDOIFields[10].SupFlVal = "";
											aDOIFields[10].currentVal = h.Gewrkfloc;
											aDOIFields[10].targetVal = h.Gewrkfloc;
										} else {
											aDOIFields[10].maintenance = false;
											aDOIFields[10].instLoc = true;
											aDOIFields[10].SupFlVal = h.Gewrkfloc;
											aDOIFields[10].currentVal = "";
											aDOIFields[10].targetVal = h.Gewrkfloc;
										}

										if (h.Adrnri === "") {
											aDOIFields[12].maintenance = false;
											aDOIFields[12].instLoc = false;
											aDOIFields[12].SupFlVal = "";
											aDOIFields[12].currentVal = "";
											aDOIFields[12].targetVal = "";
										} else if (h.Adrnri === "D") {
											aDOIFields[12].maintenance = true;
											aDOIFields[12].instLoc = false;
											aDOIFields[12].SupFlVal = "";
											aDOIFields[12].currentVal = h.Adrnr;
											aDOIFields[12].targetVal = h.Adrnr;
										} else {
											aDOIFields[12].maintenance = false;
											aDOIFields[12].instLoc = true;
											aDOIFields[12].SupFlVal = h.Adrnr;
											aDOIFields[12].currentVal = "";
											aDOIFields[12].targetVal = h.Adrnr;
										}
									}
								}
							}
						}
					}

					if (results.Equipment) {
						var sEquipment = results.Equipment.results;
						if (sEquipment) {
							for (var o = 0; o < sEquipment.length; o++) {
								var sObject = {
									intlAddr: [],
									classItems: [],
									characteristics: [],
									PRTInfo: {},
									dfps: {},
									attachmentCount: "0", // Attachment Count
									Guids: "", // Attachment
									ConstrTypeMaxL: 0,
									charValueMaxL: 0,
									EqunrEnabled: true,
									EquipCatEnabled: true,
									MaintplantEnabled: true,
									BukrsEnabled: true,
									TplnrEnabled: true,
									SuperordinateEquipEnabled: true,
									EqunrVS: "None",
									EqunrVST: "",
									EqktxVS: "None",
									EqktxVST: "",
									EquipmentCatogoryVS: "None",
									EquipmentCatogoryVST: "",
									MaintplantVS: "None",
									MaintplantVST: "",
									TplnrVS: "None",
									TplnrVST: "",
									SuperordinateEquipVS: "None",
									SuperordinateEquipVST: "",
									StsmEquiVS: "None",
									StsmEquiVST: "",
									UstwEquiVS: "None",
									UstwEquiVST: "",
									UswoEquiVS: "None",
									UswoEquiVST: "",
									TechnicalObjectTypVS: "None",
									TechnicalObjectTypVST: "",
									LocationVS: "None",
									LocationVSTL: "",
									AbckzVS: "None",
									AbckzVST: "",
									ArbplVS: "None",
									ArbplVST: "",
									BukrsVS: "None",
									BukrsVST: "",
									KostlVS: "None",
									KostlVST: "",
									WerksVS: "None",
									WerksVST: "",
									IngrpVS: "None",
									IngrpVST: "",
									ConstrTypeVS: "None",
									ConstrTypeVST: "",
									RefPostaVS: "None",
									RefPostaVST: "",
									MainArbplVS: "None",
									MainArbplVST: "",
									LangucodeVS: "None",
									LangucodeVST: "",
									TimeZoneVS: "None",
									TimeZoneVST: "",
									PlanvPrtVS: "None",
									PlanvPrtVST: "",
									SteufPrtVS: "None",
									SteufPrtVST: "",
									KtschPrtVS: "None",
									KtschPrtVST: "",
									EwformprtVS: "None",
									EwformprtVST: "",
									ConstrTypeMaxL: 0,
									charValueMaxL: 0,
									charNewButton: true,

									dfps: {
										Tailno: "",
										TailnoVS: "None",
										Area: "",
										AreaDesc: "",
										AreaPrfl: "",
										Site: "",
										SiteDesc: "",
										SiteVS: "None",
										SitePrfl: "",
										MPO: "",
										MPODesc: "",
										RIC: "",
										RICDesc: "",
										ModelId: "",
										ModelIdDesc: "",
										ModelIdVS: "None",
										ForeignEq: false,
										TechSts: "",
										OperSts: "0001",
										Remark: "",
										dfpsCrtEnabled: true,
										dfpsDltEnabled: false,
										dfpsEnabled: false,
										TailnoReq: false,
									}
								};

								sObject.Equnr = sEquipment[o].Equnr;
								sObject.Eqktx = sEquipment[o].Txtmi;
								// sObject.Eqktx = sEquipment[o].Eqktx;
								sObject.EquipmentCatogory = sEquipment[o].Eqtyp;
								sObject.EquipCatgDescription = sEquipment[o].Etytx;
								sObject.ValidFrom = sEquipment[o].DataEeqz;
								sObject.DatbEeqz = sEquipment[o].DatbEeqz;
								sObject.LvormEqi = sEquipment[o].LvormEqi;
								sObject.Deact = sEquipment[o].Deact;
								sObject.DeactEnable = false;
								sObject.Stattext = sEquipment[o].Stattext; // System Status
								sObject.UstaEqui = sEquipment[o].UstaEqui; // User Status
								sObject.StsmEqui = sEquipment[o].StsmEqui; // Status Profile
								sObject.StsmEquiDesc = sEquipment[o].Statproftxt; // Status Profile Description
								sObject.UstwEqui = sEquipment[o].UstwEqui; // Status with Status Number
								sObject.UswoEqui = sEquipment[o].UswoEqui; // Status without Status Number
								sObject.TechnicalObjectTyp = sEquipment[o].Eqart; // TechnicalObjectTyp
								sObject.Description = sEquipment[o].Eartx; // TechnicalObjectTyp Description
								sObject.AuthorizGroup = sEquipment[o].Begru;
								sObject.Begtx = sEquipment[o].Begtx;
								sObject.GrossWt = sEquipment[o].Brgew;
								sObject.Gewei = sEquipment[o].Gewei;
								sObject.Invnr = sEquipment[o].Invnr;
								sObject.GroesEqu = sEquipment[o].GroesEqu;
								sObject.Inbdt = sEquipment[o].Inbdt;
								sObject.Answt = sEquipment[o].Answt;
								sObject.Waers = sEquipment[o].Waers; // Currency
								sObject.Ansdt = sEquipment[o].Ansdt;
								sObject.Herst = sEquipment[o].Herst; // Manufacturer
								sObject.Typbz = sEquipment[o].Typbz; // Model Number
								sObject.MapaEeqz = sEquipment[o].MapaEeqz; // partNum
								sObject.Serge = sEquipment[o].Serge; // manfSerNo
								sObject.Herld = sEquipment[o].Herld;
								sObject.CountryName = sEquipment[o].CountryName;
								sObject.ConstructYear = sEquipment[o].Baujj;
								sObject.ConstructMth = sEquipment[o].BaummEqi;
								sObject.MonthName = sEquipment[o].MonthName;
								sObject.Maintplant = sEquipment[o].Swerk;
								sObject.MaintplantDesc = sEquipment[o].Name1;
								sObject.Location = sEquipment[o].StorEilo; // Location
								sObject.Locationdesc = sEquipment[o].Locationdesc; // Location Description
								sObject.MsgrEilo = sEquipment[o].MsgrEilo;
								sObject.Abckz = sEquipment[o].AbckEilo;
								sObject.Abctx = sEquipment[o].Abctx;
								sObject.BeberFl = sEquipment[o].BebeEilo; // Plant Section
								sObject.Fing = sEquipment[o].Fing; // Plant Section
								sObject.Tele = sEquipment[o].Tele; // Plant Section
								sObject.EqfnEilo = sEquipment[o].EqfnEilo;
								sObject.Bukrs = sEquipment[o].BukrEilo;
								sObject.Butxt = sEquipment[o].Butxt;
								sObject.GsbeEilo = sEquipment[o].GsbeEilo;
								sObject.Gtext = sEquipment[o].Gtext;
								sObject.Anl1Eilo = sEquipment[o].Anl1Eilo;
								sObject.Anl2Eilo = sEquipment[o].Anl2Eilo;
								sObject.AssesmentDesc = sEquipment[o].Txt50;
								sObject.Kostl = sEquipment[o].KostEilo; // Cost Center
								sObject.Kokrs = sEquipment[o].KokrEilo; // ccPart1
								sObject.Mctxt = sEquipment[o].Contareaname; // Name
								sObject.Posid = sEquipment[o].Posid;
								sObject.Post1 = sEquipment[o].Post1;
								sObject.DaufEilo = sEquipment[o].DaufEilo;
								sObject.Standorderdesc = sEquipment[o].Standorderdesc;
								sObject.Settlement = sEquipment[o].AufnEilo;
								sObject.SettleOrdDesc = sEquipment[o].SettleOrdDesc;
								sObject.Werks = sEquipment[o].PplaEeqz; // Planning Plant
								sObject.Planningplantdes = sEquipment[o].Planningplantdes; // Planning Plant Description
								sObject.Ingrp = sEquipment[o].IngrEeqz; // Planner Group
								sObject.Innam = sEquipment[o].Plannergrpdesc; // Planner Group Description
								sObject.Arbpl = sEquipment[o].ArbpEilo; // Work Center
								sObject.Ktext = sEquipment[o].Workcenterdesc; // Work Center Description
								sObject.WcWerks = sEquipment[o].WorkCenterPlant; // Work center Plant
								sObject.MainArbpl = sEquipment[o].ArbpEeqz; // Main Work Center
								sObject.MainKtext = sEquipment[o].MainWcDesc; // Plant Work Center
								sObject.MainWerks = sEquipment[o].MainWcPlant; // Name
								sObject.RbnrEeqz = sEquipment[o].RbnrEeqz;
								sObject.CatalogProfDesc = sEquipment[o].Rbnrx;
								sObject.SuperordinateEquip = sEquipment[o].HequEeqz; // Superord. Equipment
								sObject.SuperordinateEquipDesc = sEquipment[o].SuperordEqDes; // Superord. Equipment Description
								sObject.EquipPosition = sEquipment[o].HeqnEeqz; // Position
								sObject.Liznr = sEquipment[o].Liznr;
								sObject.Adrnr = sEquipment[o].Adrnr;

								sObject.TechIdNum = sEquipment[o].TidnEeqz; // techIndNo
								sObject.ConstrType = sEquipment[o].SubmEeqz; // Construction Type
								sObject.ConstructionDesc = sEquipment[o].Constdesc; // Construction Description
								sObject.viewParameter = sEquipment[o].Type ? "create" : "change";

								if (sEquipment.Swerk !== "") {
									sObject.BukrsEnabled = false;
								} else {
									sObject.BukrsEnabled = true;
								}
								if (sObject.SuperordinateEquip !== "" && sObject.SuperordinateEquip !== undefined) {
									sObject.TplnrEnabled = false;
									sObject.SuperordinateEquipEnabled = true;
								}
								if (sObject.SuperordinateEquip === "" && sObject.Tplnr !== "" && sObject.Tplnr !== undefined) {
									sObject.TplnrEnabled = true;
									sObject.SuperordinateEquipEnabled = false;
								}
								if ((sObject.SuperordinateEquip !== "" && sObject.SuperordinateEquip !== undefined) || (sObject.Tplnr !== "" && sObject.Tplnr !==
										undefined)) {
									sObject.MaintplantEnabled = false;
								} else {
									sObject.MaintplantEnabled = true;
								}
								if (sEquipment[o].Eqtyp !== "P") {
									sObject.Tplnr = sEquipment[o].TplnEilo; // Functional Location
									sObject.Pltxt = sEquipment[o].Flocdescription; // Functional Location Description
								} else {
									sObject.Tplnr = "";
									sObject.Pltxt = "";
								}

								// Serialization Data
								sObject.MatEqu = sEquipment[o].MatEqu;
								sObject.Materialdesc = sEquipment[o].Materialdesc;
								sObject.Sernr = sEquipment[o].Sernr;
								sObject.Lsernr = sEquipment[o].Lsernr;

								// Configuration Data
								sObject.Kmatn = sEquipment[o].Kmatn;
								sObject.Funcid = sEquipment[o].Funcid;
								sObject.Frcfit = sEquipment[o].Frcfit;
								sObject.Frcrmv = sEquipment[o].Frcrmv;
								sObject.SubmEeqz = sEquipment[o].SubmEeqz;

								// Sales and Distribution
								sObject.Vkorg = sEquipment[o].Vkorg;
								sObject.Vkorgtxt = sEquipment[o].Vkorgtxt;
								sObject.Vtweg = sEquipment[o].Vtweg;
								sObject.Vtwegtxt = sEquipment[o].Vtwegtxt;
								sObject.Spart = sEquipment[o].Spart;
								sObject.Sparttxt = sEquipment[o].Sparttxt;
								sObject.Vkbur = sEquipment[o].Vkbur;
								sObject.Vkburtxt = sEquipment[o].Vkburtxt;
								sObject.Vkgrp = sEquipment[o].Vkgrp;
								sObject.Vkgrptxt = sEquipment[o].Vkgrptxt;

								// Customer Warranty
								sObject.CgwldtEq = sEquipment[o].CgwldtEq;
								sObject.CgwlenEq = sEquipment[o].CgwlenEq;
								sObject.CmganrEq = sEquipment[o].CmganrEq;
								sObject.CwagetEq = sEquipment[o].CwagetEq;
								sObject.CgaerbEq = sEquipment[o].CgaerbEq;

								// Vendor/Manufacturer Warranty
								sObject.VgwldtEq = sEquipment[o].VgwldtEq;
								sObject.VgwlenEq = sEquipment[o].VgwlenEq;
								sObject.VmganrEq = sEquipment[o].VmganrEq;
								sObject.VwagetEq = sEquipment[o].VwagetEq;
								sObject.VgaerbEq = sEquipment[o].VgaerbEq;

								// Customer Vendor Information
								sObject.EliefEqi = sEquipment[o].EliefEqi;
								sObject.Kun1Eeqz = sEquipment[o].Kun1Eeqz;
								sObject.Pstlz1 = sEquipment[o].Pstlz1;
								sObject.City1 = sEquipment[o].City1;
								sObject.Kun2Eeqz = sEquipment[o].Kun2Eeqz;
								sObject.Pstlz2 = sEquipment[o].Pstlz2;
								sObject.City2 = sEquipment[o].City2;
								sObject.Kun3Eeqz = sEquipment[o].Kun3Eeqz;
								sObject.Pstlz3 = sEquipment[o].Pstlz3;
								sObject.City3 = sEquipment[o].City3;
								sObject.AuldtEqi = sEquipment[o].AuldtEqi;
								sObject.PstcdCcust = sEquipment[o].PstcdCcust;
								sObject.LocatCcust = sEquipment[o].LocatCcust;
								sObject.KundeEq = sEquipment[o].KundeEq;
								sObject.Insdate = sEquipment[o].Insdate === null ? "" : sEquipment[o].Insdate;
								sObject.Instime = formatter.getTime(sEquipment[o].Instime);

								sObject.Modelid = sEquipment[o].Modelid;
								sObject.Modelname = sEquipment[o].Modelnam;
								sObject.ModelDescription = sEquipment[o].ModelDescription;
								sObject.Template = sEquipment[o].Template;
								sObject.GlobalId = sEquipment[o].GlobalId;
								sObject.Manuf = sEquipment[o].Manuf;
								sObject.IsModel = sEquipment[o].IsModel;
								sObject.CopyFrom = sEquipment[o].CopyFrom;
								sObject.Modelid = sEquipment[o].Modelid;
								sObject.Ppeguid = sEquipment[o].Ppeguid;

								sObject.lam = {
									Lrpid: "",
									LrpidDesc: "",
									Strtptatr: "",
									Endptatr: "",
									Length: "",
									LinUnit: "",
									LinUnitDesc: "",
									Startmrkr: "",
									Endmrkr: "",
									Mrkdisst: "",
									Mrkdisend: "",
									MrkrUnit: "",
									enableLrp: true,
									enableMarker: false,
									LrpidVS: "None",
									StrtptatrVS: "None",
									EndptatrVS: "None",
									LinUnitVS: "None",
									StartmrkrVS: "None",
									EndmrkrVS: "None",
									MrkdisstVS: "None",
									MrkdisendVS: "None",
									MrkrUnitVS: "None"
								};

								sObject.Title = sObject.Title ? sObject.Title : "";
								sObject.TitleCode = sObject.TitleCode ? sObject.TitleCode : "";
								sObject.Name1 = sObject.Name1 ? sObject.Name1 : "";
								sObject.Name2 = sObject.Name2 ? sObject.Name2 : "";
								sObject.Name3 = sObject.Name3 ? sObject.Name3 : "";
								sObject.Name4 = sObject.Name4 ? sObject.Name4 : "";
								sObject.Sort1 = sObject.Sort1 ? sObject.Sort1 : "";
								sObject.Sort2 = sObject.Sort2 ? sObject.Sort2 : "";
								sObject.NameCo = sObject.NameCo ? sObject.NameCo : "";
								sObject.PostCod1 = sObject.PostCod1 ? sObject.PostCod1 : "";
								sObject.City1 = sObject.City1 ? sObject.City1 : "";
								sObject.Building = sObject.Building ? sObject.Building : "";
								sObject.Floor = sObject.Floor ? sObject.Floor : "";
								sObject.Roomnum = sObject.Roomnum ? sObject.Roomnum : "";
								sObject.Strsuppl1 = sObject.Strsuppl1 ? sObject.Strsuppl1 : "";
								sObject.Strsuppl2 = sObject.Strsuppl2 ? sObject.Strsuppl2 : "";
								sObject.Strsuppl3 = sObject.Strsuppl3 ? sObject.Strsuppl3 : "";
								sObject.AddrLocation = sObject.AddrLocation ? sObject.AddrLocation : "";
								sObject.RefPosta = sObject.RefPosta ? sObject.RefPosta : "";
								sObject.Landx = sObject.Landx ? sObject.Landx : "";
								sObject.TimeZone = sObject.TimeZone ? sObject.TimeZone : "";
								sObject.Region = sObject.Region ? sObject.Region : "";
								sObject.RegionDesc = sObject.RegionDesc ? sObject.RegionDesc : "";

								if (sEquipment[o].Eqtyp === "L" && results.EqLAM) {
									var sLAM = results.EqLAM.results;
									if (sLAM) {
										for (var z = 0; z < sLAM.length; z++) {
											if (sLAM[z].Equi === sEquipment[o].Equnr) {
												sObject.lam = sLAM[z];
												sObject.lam.LrpidDesc = sLAM[z].LrpDescr;
												sObject.lam.LinUnitDesc = sLAM[z].Uomtext;
												break;
											}
										}
									}
								}

								if (results.EqPRT) {
									if (results.EqPRT.results) {
										var sPrtData = results.EqPRT.results;
										if (sPrtData) {
											if (sPrtData.length > 0) {
												for (var t = 0; t < sPrtData.length; t++) {
													if (sObject.Equnr === sPrtData[t].Equi) {
														sObject.PRTInfo.PlanvPrt = sPrtData[t].PlanvPrt;
														sObject.PRTInfo.PlanvPrttxt = sPrtData[t].PlanvPrttxt;
														sObject.PRTInfo.Fgru1 = sPrtData[t].Fgru1;
														sObject.PRTInfo.Fgru2 = sPrtData[t].Fgru2;
														sObject.PRTInfo.Kzkbl = sPrtData[t].Kzkbl;
														sObject.PRTInfo.SteufPrt = sPrtData[t].SteufPrt;
														sObject.PRTInfo.SteufPrttxt = sPrtData[t].SteufPrttxt;
														sObject.PRTInfo.SteufRef = sPrtData[t].SteufRef;
														sObject.PRTInfo.KtschPrt = sPrtData[t].KtschPrt;
														sObject.PRTInfo.KtschPrttxt = sPrtData[t].KtschPrttxt;
														sObject.PRTInfo.Ktschref = sPrtData[t].Ktschref;
														sObject.PRTInfo.Ewformprt = sPrtData[t].Ewformprt;
														sObject.PRTInfo.Ewformprttxt = sPrtData[t].Ewformprttxt;
														sObject.PRTInfo.Ewformref = sPrtData[t].Ewformref;
														sObject.PRTInfo.Bzoffbprt = sPrtData[t].Bzoffbprt;
														sObject.PRTInfo.Bzoffbprttxt = sPrtData[t].Bzoffbprttxt;
														sObject.PRTInfo.Bzoffbref = sPrtData[t].Bzoffbref;
														sObject.PRTInfo.Offstb = sPrtData[t].Offstb;
														sObject.PRTInfo.Ehoffbprt = sPrtData[t].Ehoffbprt;
														sObject.PRTInfo.Offstbref = sPrtData[t].Offstbref;
														sObject.PRTInfo.Bzoffeprt = sPrtData[t].Bzoffeprt;
														sObject.PRTInfo.Bzoffeprttxt = sPrtData[t].Bzoffeprttxt;
														sObject.PRTInfo.Offsteref = sPrtData[t].Offsteref;
														sObject.PRTInfo.Offste = sPrtData[t].Offste;
														sObject.PRTInfo.Ehoffeprt = sPrtData[t].Ehoffeprt;
														sObject.PRTInfo.Offsteref = sPrtData[t].Offsteref;
														sObject.PRTInfo.Warpl = sPrtData[t].Warpl;
														sObject.PRTInfo.PointEq = sPrtData[t].PointEq;
													}
												}
											}
										}
									}
								}

								if (results.EqDFPS) {
									if (results.EqDFPS.results) {
										var sDpfs = results.EqDFPS.results;
										if (sDpfs) {
											if (sDpfs.length > 0) {
												for (var ud = 0; ud < sDpfs.length; ud++) {
													if (sObject.Equnr === sDpfs[ud].Equi) {
														sObject.dfps.MeOwner = sDpfs[ud].MeOwner;
														sObject.dfps.MeUser = sDpfs[ud].MeUser;
														sObject.dfps.Tailno = sDpfs[ud].DeviceId;
														sObject.dfps.Area = sDpfs[ud].Topsiteid;
														sObject.dfps.AreaDesc = sDpfs[ud].Topsitede;
														sObject.dfps.AreaPro = sDpfs[ud].AreaPrfl;
														sObject.dfps.Site = sDpfs[ud].SiteId;
														sObject.dfps.SiteDesc = sDpfs[ud].SiteDesc;
														sObject.dfps.MPO = sDpfs[ud].MpoId;
														sObject.dfps.MPODesc = sDpfs[ud].MpoDescr;
														sObject.dfps.RIC = sDpfs[ud].RicId;
														sObject.dfps.RICDesc = sDpfs[ud].RicDescr;
														sObject.dfps.ModelId = sDpfs[ud].ModelId;
														sObject.dfps.ModelIdDesc = sDpfs[ud].ModelDes;
														sObject.dfps.ForeignEq = formatter.XtoTrue(sDpfs[ud].Foreignob);
														sObject.dfps.TechSts = sDpfs[ud].TecState;
														sObject.dfps.OperSts = sDpfs[ud].DepState;
														sObject.dfps.Remark = sDpfs[ud].DfpsRmrk;
														if (sDpfs[ud].DeviceId !== "") {
															sObject.dfps.dfpsCrtEnabled = false;
															sObject.dfps.dfpsDltEnabled = true;
															sObject.dfps.dfpsEnabled = true;
															sObject.dfps.TailnoReq = true;
														}
													}
												}
											}
										}
									}
								}

								if (results.EqAddr) {
									if (results.EqAddr.results) {
										var sAddressEqui = results.EqAddr.results;
										if (sAddressEqui) {
											if (sAddressEqui.length > 0) {
												for (var v = 0; v < sAddressEqui.length; v++) {
													if (sObject.Equnr === sAddressEqui[v].Equi) {
														sObject.Title = sAddressEqui[v].Titletxt;
														sObject.Name1 = sAddressEqui[v].Name1;
														sObject.Name2 = sAddressEqui[v].Name2;
														sObject.Name3 = sAddressEqui[v].Name3;
														sObject.Name4 = sAddressEqui[v].Name4;
														sObject.Sort1 = sAddressEqui[v].Sort1; // searchTerm1
														sObject.Sort2 = sAddressEqui[v].Sort2; // searchTerm2
														sObject.NameCo = sAddressEqui[v].NameCo; // Company 
														sObject.Building = sAddressEqui[v].Building;
														sObject.Floor = sAddressEqui[v].Floor;
														sObject.Roomnum = sAddressEqui[v].Roomnum;
														sObject.Street = sAddressEqui[v].Street;
														sObject.HouseNr1 = sAddressEqui[v].HouseNr1;
														sObject.HouseNr2 = sAddressEqui[v].HouseNr2;
														sObject.Strsuppl1 = sAddressEqui[v].Strsuppl1;
														sObject.Strsuppl2 = sAddressEqui[v].Strsuppl2;
														sObject.Strsuppl3 = sAddressEqui[v].Strsuppl3;
														sObject.AddrLocation = sAddressEqui[v].Location;
														sObject.District = sAddressEqui[v].District;
														sObject.PostCod1 = sAddressEqui[v].PostCod1;
														sObject.City1 = sAddressEqui[v].City1; // City
														sObject.RPostafl = sAddressEqui[v].RefPosta;
														sObject.RefPosta = sAddressEqui[v].RefPosta;
														sObject.Landx = sAddressEqui[v].Landx;
														sObject.RfePost = sAddressEqui[v].RfePost;
														sObject.Regiotxt = sAddressEqui[v].Regiotxt;
														sObject.HomeCity = sAddressEqui[v].HomeCity;
														sObject.TimeZone = sAddressEqui[v].TimeZone;
														sObject.Taxjurcod = sAddressEqui[v].Taxjurcod;
														sObject.Regiogrou = sAddressEqui[v].Regiogrou;
														sObject.RfePostl = sAddressEqui[v].RfePostl;
														sObject.Dontusestxt = sAddressEqui[v].Dontusestxt;
														sObject.PoBox = sAddressEqui[v].PoBox;
														sObject.PoboxNum = sAddressEqui[v].PoboxNum;
														sObject.DlvsrvTy = sAddressEqui[v].DlvsrvTy;
														sObject.DlvsrvNr = sAddressEqui[v].DlvsrvNr;
														sObject.PostCod2 = sAddressEqui[v].PostCod2;
														sObject.PoboxLoc = sAddressEqui[v].PoboxLoc;
														sObject.PoboxLby = sAddressEqui[v].PoboxLby;
														sObject.PoboxCty = sAddressEqui[v].PoboxCty;
														sObject.LandxP = sAddressEqui[v].LandxP;
														sObject.RfePstal = sAddressEqui[v].RfePstal;
														sObject.RegiotxtP = sAddressEqui[v].RegiotxtP;
														sObject.Dontuseptxt = sAddressEqui[v].Dontuseptxt;
														sObject.PostCod3 = sAddressEqui[v].PostCod3;
														sObject.Remark = sAddressEqui[v].Remark;
													}
												}
											}
										}
									}
								}

								var aIntlAddr = results.EqAddrI.results;
								if (aIntlAddr) {
									for (var z = 0; z < aIntlAddr.length; z++) {
										if (aIntlAddr[z].Equi === sObject.Equnr) {
											aIntlAddr[z].AdNationEnable = false;
											aIntlAddr[z].City1iVS = "None";
											aIntlAddr[z].StreetiVS = "None";
											sObject.intlAddr.push(aIntlAddr[z]);
										}
									}
								}

								var ainResults = results.AINHeaderinfo.results;
								if (ainResults) {
									for (var ai = 0; ai < ainResults.length; ai++) {
										var ainData = ainResults[0];
										// g.isAin = true;
										var oAin = {};
										oAin.Name = ainData.Name;
										oAin.Modelid = ainData.Modelid;
										oAin.Description = ainData.Description;
										oAin.Manufacturer = ainData.Manufacturer;
										oAin.Modeltemplate = ainData.Modeltemplate;
										oAin.Globalid = ainData.Globalid;
										oAin.moreInfo = true;
										oAin.linkVisible = false;
										oAin.deLinkVisible = false;
										oAin.equiCreate = sEquipment.AineqInd; //r.results[0].AineqInd;
										oAin.AinEqunr = sEquipment.AinEqunr; //data.results[0].AinEqunr;

										sap.ui.getCore().getModel("ainMOP").getData().push({
											key: sObject.Equnr,
											AIN: oAin
										});
									}
								}

								if (results.EqClass) {
									// var sClassEqui = results.EqClass.results;
									var sClassEqui = $.map(results.EqClass.results, function (obj) {
										return $.extend(true, {}, obj);
									});
									if (sClassEqui) {
										if (sClassEqui.length > 0) {
											for (var p = 0; p < sClassEqui.length; p++) {
												if (sObject.Equnr === sClassEqui[p].Equi) {
													sClassEqui[p].ctEnable = false;
													sClassEqui[p].classEnable = false;
													sClassEqui[p].ClassTypeDesc = sClassEqui[p].Artxt;
													delete sClassEqui[p].Artxt;
													sClassEqui[p].ClassDesc = sClassEqui[p].Kltxt;
													delete sClassEqui[p].Kltxt;
													delete sClassEqui[p].Changerequestid;
													delete sClassEqui[p].Clint;
													delete sClassEqui[p].Service;
													sObject.classItems.push(sClassEqui[p]);
												}
											}
										}
									}
								}

								if (results.EqVal) {
									// var sCharEQUI = results.EqVal.results;
									var sCharEQUI = $.map(results.EqVal.results, function (obj) {
										return $.extend(true, {}, obj);
									});
									if (sCharEQUI) {
										if (sCharEQUI.length > 0) {
											for (var q = 0; q < sCharEQUI.length; q++) {
												if (sObject.Equnr === sCharEQUI[q].Equi) {
													sCharEQUI[q].cNameEnable = false;
													sCharEQUI[q].Textbz = sCharEQUI[q].Atwtb;
													delete sCharEQUI[q].Ataut;
													delete sCharEQUI[q].Ataw1;
													delete sCharEQUI[q].Atawe;
													delete sCharEQUI[q].Atcod;
													delete sCharEQUI[q].Atflb;
													delete sCharEQUI[q].Atflv;
													delete sCharEQUI[q].Atimb;
													delete sCharEQUI[q].Atsrt;
													delete sCharEQUI[q].Atvglart;
													delete sCharEQUI[q].Atzis;
													delete sCharEQUI[q].Changerequestid;
													delete sCharEQUI[q].Charid;
													delete sCharEQUI[q].Classtype;
													delete sCharEQUI[q].Service;
													delete sCharEQUI[q].Valcnt;
													sCharEQUI[q].slNo = c + 1; // ()
													sCharEQUI[q].flag = sCharEQUI[q].Class + "-" + sCharEQUI[q].slNo; // ()
													sObject.characteristics.push(sCharEQUI[q]);
												}
											}

											for (var z = 0; z < sObject.characteristics.length; z++) {
												var count = 1;
												for (var y = 0; y < sObject.characteristics.length; y++) {
													if (z === y) {
														continue;
													}
													if (sObject.characteristics[y].Atnam === sObject.characteristics[z].Atnam && sObject.characteristics[y].Class ===
														sObject.characteristics[z].Class) {
														count++;
													}
												}
												if (count > 1) {
													sObject.characteristics[z].charDltEnable = true;
												} else {
													sObject.characteristics[z].charDltEnable = false;
												}

												if (sObject.characteristics[z].Atein === true) {
													sObject.characteristics[z].charAddEnable = false;
												}
											}
										}
									}
								}

								// if (sObject.SuperordinateEquip !== "") {
								// 	g.DOIonReadEQ(sObject.Equnr, sObject.SuperordinateEquip, "copy");
								// } else {

								var tempEQDOI = $.map(g.DOIarrayEQ, function (obj) {
									return $.extend(true, {}, obj);
								});
								sap.ui.getCore().getModel("dataOriginMOP").getData().EQ.push({
									key: sObject.Equnr,
									DOI: tempEQDOI
								});
								// }
								// g.setCommonApprovalData(g.oModelAIWEQUI, pApproveObject, true);
								g.handleCreatePress(g, sObject, g.oModelAIWEQUI);
							}

							var aEQDOIdata = sap.ui.getCore().getModel("dataOriginMOP").getData().EQ;
							for (var i = 0; i < results.Equipment.results.length; i++) {
								var h = results.Equipment.results[i];
								for (var z = 0; z < aEQDOIdata.length; z++) {
									if (h.Equnr === aEQDOIdata[z].key) {
										var aDOIFields = aEQDOIdata[z].DOI;
										if (h.Swerki === "") {
											aDOIFields[0].maintenance = false;
											aDOIFields[0].instLoc = false;
											aDOIFields[0].SupFlVal = "";
											aDOIFields[0].currentVal = "";
											aDOIFields[0].targetVal = "";
										} else if (h.Swerki === "D") {
											aDOIFields[0].maintenance = true;
											aDOIFields[0].instLoc = false;
											aDOIFields[0].SupFlVal = "";
											aDOIFields[0].currentVal = h.Swerk;
											aDOIFields[0].targetVal = h.Swerk;
										} else {
											aDOIFields[0].maintenance = false;
											aDOIFields[0].instLoc = true;
											aDOIFields[0].SupFlVal = h.Swerk;
											aDOIFields[0].currentVal = "";
											aDOIFields[0].targetVal = h.Swerk;
										}

										if (h.Storti === "") {
											aDOIFields[1].maintenance = false;
											aDOIFields[1].instLoc = false;
											aDOIFields[1].SupFlVal = "";
											aDOIFields[1].currentVal = "";
											aDOIFields[1].targetVal = "";
										} else if (h.Storti === "D") {
											aDOIFields[1].maintenance = true;
											aDOIFields[1].instLoc = false;
											aDOIFields[1].SupFlVal = "";
											aDOIFields[1].currentVal = h.StorEilo;
											aDOIFields[1].targetVal = h.StorEilo;
										} else {
											aDOIFields[1].maintenance = false;
											aDOIFields[1].instLoc = true;
											aDOIFields[1].SupFlVal = h.StorEilo;
											aDOIFields[1].currentVal = "";
											aDOIFields[1].targetVal = h.StorEilo;
										}

										if (h.Beberi === "") {
											aDOIFields[2].maintenance = false;
											aDOIFields[2].instLoc = false;
											aDOIFields[2].SupFlVal = "";
											aDOIFields[2].currentVal = "";
											aDOIFields[2].targetVal = "";
										} else if (h.Beberi === "D") {
											aDOIFields[2].maintenance = true;
											aDOIFields[2].instLoc = false;
											aDOIFields[2].SupFlVal = "";
											aDOIFields[2].currentVal = h.BebeEilo;
											aDOIFields[2].targetVal = h.BebeEilo;
										} else {
											aDOIFields[2].maintenance = false;
											aDOIFields[2].instLoc = true;
											aDOIFields[2].SupFlVal = h.BebeEilo;
											aDOIFields[2].currentVal = "";
											aDOIFields[2].targetVal = h.BebeEilo;
										}

										if (h.Ppsidi === "") {
											aDOIFields[3].maintenance = false;
											aDOIFields[3].instLoc = false;
											aDOIFields[3].SupFlVal = "";
											aDOIFields[3].currentVal = "";
											aDOIFields[3].targetVal = "";
										} else if (h.Ppsidi === "D") {
											aDOIFields[3].maintenance = true;
											aDOIFields[3].instLoc = false;
											aDOIFields[3].SupFlVal = "";
											aDOIFields[3].currentVal = h.ArbpEilo;
											aDOIFields[3].targetVal = h.ArbpEilo;
										} else {
											aDOIFields[3].maintenance = false;
											aDOIFields[3].instLoc = true;
											aDOIFields[3].SupFlVal = h.ArbpEilo;
											aDOIFields[3].currentVal = "";
											aDOIFields[3].targetVal = h.ArbpEilo;
										}

										if (h.Abckzi === "") {
											aDOIFields[4].maintenance = false;
											aDOIFields[4].instLoc = false;
											aDOIFields[4].SupFlVal = "";
											aDOIFields[4].currentVal = "";
											aDOIFields[4].targetVal = "";
										} else if (h.Abckzi === "D") {
											aDOIFields[4].maintenance = true;
											aDOIFields[4].instLoc = false;
											aDOIFields[4].SupFlVal = "";
											aDOIFields[4].currentVal = h.AbckEilo;
											aDOIFields[4].targetVal = h.AbckEilo;
										} else {
											aDOIFields[4].maintenance = false;
											aDOIFields[4].instLoc = true;
											aDOIFields[4].SupFlVal = h.AbckEilo;
											aDOIFields[4].currentVal = "";
											aDOIFields[4].targetVal = h.AbckEilo;
										}

										if (h.Kostli === "") {
											aDOIFields[5].maintenance = false;
											aDOIFields[5].instLoc = false;
											aDOIFields[5].SupFlVal = "";
											aDOIFields[5].currentVal = "";
											aDOIFields[5].targetVal = "";
										} else if (h.Kostli === "D") {
											aDOIFields[5].maintenance = true;
											aDOIFields[5].instLoc = false;
											aDOIFields[5].SupFlVal = "";
											aDOIFields[5].currentVal = h.KostEilo;
											aDOIFields[5].targetVal = h.KostEilo;
										} else {
											aDOIFields[5].maintenance = false;
											aDOIFields[5].instLoc = true;
											aDOIFields[5].SupFlVal = h.KostEilo;
											aDOIFields[5].currentVal = "";
											aDOIFields[5].targetVal = h.KostEilo;
										}

										if (h.Iwerki === "") {
											aDOIFields[6].maintenance = false;
											aDOIFields[6].instLoc = false;
											aDOIFields[6].SupFlVal = "";
											aDOIFields[6].currentVal = "";
											aDOIFields[6].targetVal = "";
										} else if (h.Iwerki === "D") {
											aDOIFields[6].maintenance = true;
											aDOIFields[6].instLoc = false;
											aDOIFields[6].SupFlVal = "";
											aDOIFields[6].currentVal = h.PplaEeqz;
											aDOIFields[6].targetVal = h.PplaEeqz;
										} else {
											aDOIFields[6].maintenance = false;
											aDOIFields[6].instLoc = true;
											aDOIFields[6].SupFlVal = h.PplaEeqz;
											aDOIFields[6].currentVal = "";
											aDOIFields[6].targetVal = h.PplaEeqz;
										}

										if (h.Ingrpi === "") {
											aDOIFields[7].maintenance = false;
											aDOIFields[7].instLoc = false;
											aDOIFields[7].SupFlVal = "";
											aDOIFields[7].currentVal = "";
											aDOIFields[7].targetVal = "";
										} else if (h.Ingrpi === "D") {
											aDOIFields[7].maintenance = true;
											aDOIFields[7].instLoc = false;
											aDOIFields[7].SupFlVal = "";
											aDOIFields[7].currentVal = h.IngrEeqz;
											aDOIFields[7].targetVal = h.IngrEeqz;
										} else {
											aDOIFields[7].maintenance = false;
											aDOIFields[7].instLoc = true;
											aDOIFields[7].SupFlVal = h.IngrEeqz;
											aDOIFields[7].currentVal = "";
											aDOIFields[7].targetVal = h.IngrEeqz;
										}

										if (h.Gewrki === "") {
											aDOIFields[8].maintenance = false;
											aDOIFields[8].instLoc = false;
											aDOIFields[8].SupFlVal = "";
											aDOIFields[8].currentVal = "";
											aDOIFields[8].targetVal = "";
										} else if (h.Gewrki === "D") {
											aDOIFields[8].maintenance = true;
											aDOIFields[8].instLoc = false;
											aDOIFields[8].SupFlVal = "";
											aDOIFields[8].currentVal = h.ArbpEeqz;
											aDOIFields[8].targetVal = h.ArbpEeqz;
										} else {
											aDOIFields[8].maintenance = false;
											aDOIFields[8].instLoc = true;
											aDOIFields[8].SupFlVal = h.ArbpEeqz;
											aDOIFields[8].currentVal = "";
											aDOIFields[8].targetVal = h.ArbpEeqz;
										}

										if (h.Adrnri === "") {
											aDOIFields[10].maintenance = false;
											aDOIFields[10].instLoc = false;
											aDOIFields[10].SupFlVal = "";
											aDOIFields[10].currentVal = "";
											aDOIFields[10].targetVal = "";
										} else if (h.Adrnri === "D") {
											aDOIFields[10].maintenance = true;
											aDOIFields[10].instLoc = false;
											aDOIFields[10].SupFlVal = "";
											aDOIFields[10].currentVal = h.Adrnr;
											aDOIFields[10].targetVal = h.Adrnr;
										} else {
											aDOIFields[10].maintenance = false;
											aDOIFields[10].instLoc = true;
											aDOIFields[10].SupFlVal = h.Adrnr;
											aDOIFields[10].currentVal = "";
											aDOIFields[10].targetVal = h.Adrnr;
										}
									}
								}
							}
						}
					}

					if (results.MSPoint) {
						var sMsPoint = results.MSPoint.results;
						if (sMsPoint) {
							for (var i = 0; i < sMsPoint.length; i++) {
								sObject = {
									classItems: [],
									characteristics: [],
									attachmentCount: "0", // Attachment Count
									Guids: "", // Attachment
									MspointEnabled: true,
									ObtypMsEnabled: true,
									EqunrEnabled: true,
									TplnrEnabled: true,
									MptypEnabled: true,
									AtnamMsEnabled: true,
									countEnable: true,
									tEnable: true,
									valCodeStuffSel: false
								};
								sObject.Mspoint = sMsPoint[i].Point;
								sObject.Psort = sMsPoint[i].Psort;
								sObject.Pttxt = sMsPoint[i].Pttxt;
								sObject.ObtypMs = sMsPoint[i].ObtypMs;
								if (sObject.ObtypMs === "IFL") {
									sObject.EqunrEnabled = false;
									sObject.TplnrEnabled = true;
								} else if (sObject.ObtypMs === "IEQ") {
									sObject.EqunrEnabled = true;
									sObject.TplnrEnabled = false;
								}
								sObject.Txt = sMsPoint[i].Objtypetxt;
								sObject.Equnr = sMsPoint[i].Equnr;
								sObject.Eqktx = sMsPoint[i].Eqktx;
								sObject.Tplnr = sMsPoint[i].Tplnr;
								sObject.Pltxt = sMsPoint[i].Floctxt;
								sObject.Mptyp = sMsPoint[i].Mptyp;
								sObject.Mpttx = sMsPoint[i].Mpttx;
								sObject.Inact = sMsPoint[i].Inact;
								sObject.AtnamMs = sMsPoint[i].AtnamMs;
								sObject.Atbez = sMsPoint[i].Atbez;
								sObject.Mseh6 = sMsPoint[i].Mseh6;
								sObject.Msehl = sMsPoint[i].Msehl;
								sObject.Decim = sMsPoint[i].Decim.toString();
								sObject.Codgr = sMsPoint[i].Codgr;
								sObject.Codgrtxt = sMsPoint[i].Codgrtxt;
								sObject.Locas = sMsPoint[i].Locas;
								sObject.Maktx = sMsPoint[i].Maktx;
								sObject.Begru = sMsPoint[i].Begru;
								sObject.Begtx = sMsPoint[i].Begtx;
								sObject.Indct = sMsPoint[i].Indct;
								sObject.Expon = sMsPoint[i].Expon;
								sObject.Cdsuf = sMsPoint[i].Cdsuf;
								sObject.Cjumc = sMsPoint[i].Cjumc;
								sObject.Pyeac = sMsPoint[i].Pyeac;
								sObject.Desir = sMsPoint[i].Desir;
								sObject.Mrngu = sMsPoint[i].Mrngu;
								sObject.Dstxt = sMsPoint[i].Dstxt;
								sObject.Indrv = sMsPoint[i].Indrv;
								sObject.Mrmax = sMsPoint[i].Mrmax;
								sObject.Mrmin = sMsPoint[i].Mrmin;
								sObject.Deact = sMsPoint[i].Inact;
								sObject.DeactEnable = false;
								sObject.readTransfSel = sMsPoint[i].Indtr;
								sObject.readTransf = sMsPoint[i].Trans;
								sObject.viewParameter = sMsPoint[i].Type ? "create" : "change";

								if (sMsPoint[i].Equnr !== "") {
									sObject.EqunrLblVis = true;
									sObject.EqunrInpVis = true;
									sObject.EqktxInpVis = true;
									sObject.TplnrLblVis = false;
									sObject.TplnrInpVis = false;
									sObject.PltxtInpVis = false;
								} else {
									sObject.EqunrLblVis = false;
									sObject.EqunrInpVis = false;
									sObject.EqktxInpVis = false;
									sObject.TplnrLblVis = true;
									sObject.TplnrInpVis = true;
									sObject.PltxtInpVis = true;
								}

								if (results.DataOrigin_N.results.length > 0) {
									var DOobj = results.DataOrigin_N.results[0];
									// sObject.readTransfSel = true;
									// sObject.readTransf = DOobj.Trans;
									sObject.RT = {
										readTransfSel: true,
										readTransf: DOobj.Trans,
										RTValidFrom: formatter.dateFormat(DOobj.Datlo),
										RTTime: formatter.getTime(DOobj.Timlo),
										RTMeasPos: DOobj.Psort,
										RTMpDesc: DOobj.Pttxt,
										RTFloc: DOobj.Tplnr,
										RTFlocDesc: DOobj.Pltxt,
										RTEqui: DOobj.Equnr,
										RTEquiDesc: DOobj.Eqktx,
									};
								} else {
									// sObject.readTransfSel = false;
									// sObject.readTransf = "";
									sObject.RT = {
										readTransfSel: false,
										readTransf: "",
										RTValidFrom: "",
										RTTime: "",
										RTMeasPos: "",
										RTMpDesc: "",
										RTFloc: "",
										RTFlocDesc: "",
										RTEqui: "",
										RTEquiDesc: "",
									};
								}

								sObject.lam = {
									Lrpid: "",
									LrpidDesc: "",
									Strtptatr: "",
									Endptatr: "",
									Length: "",
									LinUnit: "",
									LinUnitDesc: "",
									Startmrkr: "",
									Endmrkr: "",
									Mrkdisst: "",
									Mrkdisend: "",
									MrkrUnit: "",
									enableLrp: true,
									enableMarker: false,
									LrpidVS: "None",
									StrtptatrVS: "None",
									EndptatrVS: "None",
									LinUnitVS: "None",
									StartmrkrVS: "None",
									EndmrkrVS: "None",
									MrkdisstVS: "None",
									MrkdisendVS: "None",
									MrkrUnitVS: "None"
								};

								if (sMsPoint[i].Mptyp === "L" && results.MSLAM.results.length > 0) {
									var sLAM = results.MSLAM.results;
									if (sLAM) {
										for (var z = 0; z < sLAM.length; z++) {
											if (sLAM[z].Mspoint === sMsPoint[i].Point) {
												sObject.lam = sLAM[z];
												sObject.lam.LrpidDesc = sLAM[z].LrpDescr;
												sObject.lam.LinUnitDesc = sLAM[z].Uomtext;
												break;
											}
										}
									}
								}

								if (results.MSClass) {
									// var sClassList = results.MSClass.results;
									var sClassList = $.map(results.MSClass.results, function (obj) {
										return $.extend(true, {}, obj);
									});
									if (sClassList) {
										if (sClassList.length > 0) {
											for (var j = 0; j < sClassList.length; j++) {
												if (sObject.Mspoint === sClassList[j].Mspoint) {
													sClassList[j].ctEnable = false;
													sClassList[j].classEnable = false;
													sClassList[j].ClassTypeDesc = sClassList[j].Artxt;
													delete sClassList[j].Artxt;
													sClassList[j].ClassDesc = sClassList[j].Kltxt;
													delete sClassList[j].Kltxt;
													delete sClassList[j].Changerequestid;
													delete sClassList[j].Clint;
													delete sClassList[j].Service;
													sObject.classItems.push(sClassList[j]);
												}
											}
										}
									}
								}

								if (results.MSVal) {
									// var sCharList = results.MSVal.results;
									var sCharList = $.map(results.MSVal.results, function (obj) {
										return $.extend(true, {}, obj);
									});
									if (sCharList) {
										if (sCharList.length > 0) {
											for (var k = 0; k < sCharList.length; k++) {
												if (sObject.Mspoint === sCharList[k].Mspoint) {
													sCharList[k].cNameEnable = false;
													sCharList[k].Textbz = sCharList[k].Atwtb;
													delete sCharList[k].Ataut;
													delete sCharList[k].Ataw1;
													delete sCharList[k].Atawe;
													delete sCharList[k].Atcod;
													delete sCharList[k].Atflb;
													delete sCharList[k].Atflv;
													delete sCharList[k].Atimb;
													delete sCharList[k].Atsrt;
													delete sCharList[k].Atvglart;
													delete sCharList[k].Atzis;
													delete sCharList[k].Changerequestid;
													delete sCharList[k].Charid;
													delete sCharList[k].Classtype;
													delete sCharList[k].Service;
													delete sCharList[k].Valcnt;
													sCharList[k].slNo = k + 1; // ()
													sCharList[k].flag = sCharList[k].Class + "-" + sCharList[k].slNo; // ()
													sObject.characteristics.push(sCharList[k]);
												}
											}

											for (var z = 0; z < sObject.characteristics.length; z++) {
												var count = 1;
												for (var y = 0; y < sObject.characteristics.length; y++) {
													if (z === y) {
														continue;
													}
													if (sObject.characteristics[y].Atnam === sObject.characteristics[z].Atnam && sObject.characteristics[y].Class ===
														sObject.characteristics[z].Class) {
														count++;
													}
												}
												if (count > 1) {
													sObject.characteristics[z].charDltEnable = true;
												} else {
													sObject.characteristics[z].charDltEnable = false;
												}

												if (sObject.characteristics[z].Atein === true) {
													sObject.characteristics[z].charAddEnable = false;
												}
											}

										}
									}
								}

								// g.setCommonApprovalData(g.oModelAIWMSPT, pApproveObject);
								g.handleCreatePress(g, sObject, g.oModelAIWMSPT);
							}
						}
					}

					if (results.MPLAN) {
						var sMaintenance = results.MPLAN.results;
						if (sMaintenance) {
							for (var ai = 0; ai < sMaintenance.length; ai++) {
								sObject = {
									classItems: [],
									characteristics: [],
									// MPMIpmentsDetail
									attachmentCount: "0", // Attachment Count
									Guids: "", // Attachment
									cycleModel: [],
									itemModel: [],
									cycleIndSingle: false, // RBSC
									cycleIndStrategy: false, // RBS
									cycleIndMultCntr: false, // RBMC

									// Fields Enability
									WarplEnabled: false,
									StratEnabled: false,
									WsetEnabled: false,
									MehrfachEnabled: false,
									ScheIndRbTimeEnabled: false,
									ScheIndRbTimeKeyDateEnabled: false,
									ScheIndRbTimeFactCalEnabled: false,
									ScheIndRbPerformanceEnabled: false,
									MptypEnabled: false,
									cycleIndSingleEnabled: false,
									cycleIndStrategyEnabled: false,
									cycleIndMultCntrEnabled: false,
									FabklLBLReq: false,
									ButtonNewCycleEnabled: false,
									FabklEnabled: false,

									// Label Visibility
									OPText: false,
									OPTitle: false,
									OPLBL: false,
									MpcyclenoLBL: false,
									FabklLBL: true,
									AbrhoLBL: true,
									MehrfachLBL: false, // Multiple counter Label
									ScheIndText: true,
									ScheIndTitle: true,
									ScheIndLBL: true,
									StratLBL: false,
									StratDescLBL: false,
									WsetLBL: false,
									SzaehLBL: false,
									StadtLBL: true,

									// Fields Visibility
									HorizVisible: false,
									cycleSetSeqColVis: false,
									OROPVis: false,
									AndOPvis: false,
									ScheIndRbTimeVis: true,
									ScheIndRbTimeKeyDateVis: true,
									ScheIndRbTimeFactCalVis: true,
									ScheIndRbPerformanceVis: true,
									MpcyclenoVis: false,
									HunitVis: true,
									AbrhoVis: true,
									MehrfachVis: false,
									StratVis: false, // Strategy Visibility
									StratDescVis: false,
									WsetVis: false,
									KtextVis: false,
									SzaehVis: false,
									UnitcVis: false,
									StadtVis: true,

									MaintenanceCycleMode: "None"
								};

								if (sMaintenance[ai].Stich !== "" || sMaintenance[ai].Stich === undefined) {
									sObject.Stich = parseInt(sMaintenance[ai].Stich);
								} else {
									sObject.Stich = 0;
								}
								sObject.Warpl = sMaintenance[ai].Warpl;
								sObject.Wptxt = sMaintenance[ai].Wptxt;
								sObject.Mptyp = sMaintenance[ai].Mptyp;
								sObject.Txt = sMaintenance[ai].Mplancatdesc;
								sObject.Strat = sMaintenance[ai].Strat;
								sObject.StratDesc = sMaintenance[ai].StratDesc;
								sObject.Puffp = sMaintenance[ai].Puffp;
								sObject.Deact = sMaintenance[ai].InactMp;
								sObject.DeactEnable = false;

								if (sMaintenance[ai].Mehrfach === "X" || sMaintenance[ai].Stich === "4") {
									sObject.cycleType = 2;
									sObject.cycleSetSeqColVis = true;
									sObject.CycleSetSeqVis = true;
									sObject.ScheIndText = false;
									sObject.ScheIndTitle = false;
									sObject.ScheIndLBL = false;
									sObject.ScheIndRbTimeEnabled = false;
									sObject.ScheIndRbTimeKeyDateEnabled = false;
									sObject.ScheIndRbTimeFactCalEnabled = false;
									sObject.ScheIndRbPerformanceEnabled = false;
									sObject.ScheIndRbTimeVis = false;
									sObject.ScheIndRbTimeKeyDateVis = false;
									sObject.ScheIndRbTimeFactCalVis = false;
									sObject.ScheIndRbPerformanceVis = false;
									// sObject.AbrhoLBL = false;
									// sObject.AbrhoVis = false;
									// sObject.HunitVis = false;
									sObject.FabklLBL = false;
									sObject.FabklVis = false;
									sObject.FabklDescVis = false;
									sObject.OPText = true;
									sObject.OPTitle = true;
									sObject.OPLBL = true;
									sObject.OROPVis = true;
									sObject.AndOPvis = true;
									sObject.WsetLBL = true;
									sObject.WsetVis = true;
									sObject.KtextVis = true;
									sObject.StratLBL = true;
									sObject.StratVis = true;
									sObject.StratDescVis = true;
									sObject.MehrfachLBL = true;
									sObject.MehrfachVis = true;
									sObject.Mehrfach = true;
									sObject.StadtLBL = true;
									sObject.StadtVis = true;
									sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_STDATE");
									sObject.SzaehLBL = false;
									sObject.SzaehVis = false;
									sObject.UnitcVis = false;
									sObject.MpcyclenoLBL = false;
									sObject.MpcyclenoVis = false;
									sObject.cycleIndMultCntr = true;
								} else if (sMaintenance[ai].Strat === "" && (sMaintenance[ai].Stich === "" || sMaintenance[ai].Stich === "1" ||
										sMaintenance[
											ai].Stich === "2")) {
									sObject.cycleType = 0;
									sObject.cycleSetSeqColVis = false;
									sObject.CycleSetSeqVis = false;
									sObject.ScheIndText = true;
									sObject.ScheIndTitle = true;
									sObject.ScheIndLBL = true;
									sObject.AbrhoLBL = true;
									sObject.AbrhoVis = true;
									sObject.HunitVis = true;
									sObject.FabklLBL = true;
									sObject.FabklVis = true;
									sObject.FabklDescVis = true;
									sObject.StadtLBL = true;
									sObject.StadtVis = true;
									sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
									sObject.SzaehLBL = false;
									sObject.SzaehVis = false;
									sObject.UnitcVis = false;
									sObject.MpcyclenoLBL = false;
									sObject.MpcyclenoVis = false;
									sObject.cycleIndSingle = true;
								} else if (sMaintenance[ai].Strat !== "" && sMaintenance[ai].Stich === "3") {
									sObject.cycleType = 1;
									sObject.cycleSetSeqColVis = false;
									sObject.CycleSetSeqVis = false;
									sObject.ScheIndText = false;
									sObject.ScheIndTitle = false;
									sObject.ScheIndLBL = false;
									sObject.ScheIndRbTimeEnabled = false;
									sObject.ScheIndRbTimeKeyDateEnabled = false;
									sObject.ScheIndRbTimeFactCalEnabled = false;
									sObject.ScheIndRbPerformanceEnabled = false;
									sObject.ScheIndRbTimeVis = false;
									sObject.ScheIndRbTimeKeyDateVis = false;
									sObject.ScheIndRbTimeFactCalVis = false;
									sObject.ScheIndRbPerformanceVis = false;
									sObject.AbrhoLBL = false;
									sObject.AbrhoVis = false;
									sObject.HunitVis = false;
									sObject.FabklLBL = false;
									sObject.FabklVis = false;
									sObject.FabklDescVis = false;
									sObject.StratLBL = true;
									sObject.StratVis = true;
									sObject.StratDescVis = true;
									sObject.StadtLBL = false;
									sObject.StadtVis = false;
									sObject.SzaehLBL = true;
									sObject.SzaehVis = true;
									sObject.UnitcVis = true;
									sObject.MpcyclenoLBL = true;
									sObject.MpcyclenoVis = true;
									sObject.cycleIndStrateg = true;
									g.readScheduling(sMaintenance[ai], sMaintenance[ai].Strat, g.oModelAIWMPMI);
								} else if (sMaintenance[ai].Strat.indexOf("TIME") > -1 && sMaintenance[ai].Mehrfach === "" && sMaintenance[ai].Stich !==
									"3") {
									sObject.cycleType = 1;
									sObject.ScheIndText = true;
									sObject.ScheIndTitle = true;
									sObject.ScheIndLBL = true;
									sObject.ScheIndRbTimeVis = true;
									sObject.ScheIndRbTimeKeyDateVis = true;
									sObject.ScheIndRbTimeFactCalVis = true;
									sObject.ScheIndRbPerformanceVis = true;
									sObject.AbrhoLBL = true;
									sObject.AbrhoVis = true;
									sObject.HunitVis = true;
									sObject.FabklLBL = true;
									sObject.FabklVis = true;
									sObject.FabklDescVis = true;
									sObject.StratLBL = true;
									sObject.StratVis = true;
									sObject.StratDescVis = true;
									sObject.Strat = sMaintenance[ai].Strat;
									sObject.StadtLBL = true;
									sObject.StadtVis = true;
									sObject.Stadt = formatter.getDateFormat(sMaintenance[ai].Startdate);
									sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
									sObject.SzaehLBL = false;
									sObject.SzaehVis = false;
									sObject.UnitcVis = false;
									sObject.MpcyclenoLBL = false;
									sObject.MpcyclenoVis = false;
									sObject.cycleIndStrateg = true;
									g.readScheduling(sMaintenance[ai], sMaintenance[ai].Strat, g.oModelAIWMPMI);
								} else if (sMaintenance[ai].Strat === "" && sMaintenance[ai].Stich === "3" && sMaintenance[ai].Mehrfach === "") {
									sObject.cycleIndSingle = true;
									sObject.cycleType = 0;
									sObject.ScheIndText = true;
									sObject.ScheIndTitle = true;
									sObject.ScheIndLBL = true;
									sObject.ScheIndRbTimeVis = true;
									sObject.ScheIndRbTimeKeyDateVis = true;
									sObject.ScheIndRbTimeFactCalVis = true;
									sObject.ScheIndRbPerformanceVis = true;
									sObject.AbrhoLBL = false;
									sObject.AbrhoVis = false;
									sObject.HunitVis = false;
									sObject.FabklLBL = true;
									sObject.FabklVis = true;
									sObject.FabklDescVis = true;
									sObject.StratLBL = false;
									sObject.StratVis = false;
									sObject.StratDescVis = false;
									sObject.StadtLBL = false;
									sObject.StadtVis = false;
									sObject.StadtLBLText = g.getView().getModel("i18n").getProperty("CYCLE_START_TXT");
									sObject.SzaehLBL = true;
									sObject.SzaehVis = true;
									sObject.UnitcVis = true;
									sObject.Unitc = " ";
									sObject.MpcyclenoLBL = true;
									sObject.MpcyclenoVis = true;
								}

								sObject.Stadt = formatter.getDateFormat(sMaintenance[ai].Startdate);
								sObject.Unitc = sMaintenance[ai].Unitc;
								sObject.Fabkl = sMaintenance[ai].Fabkl;
								sObject.FabklDesc = sMaintenance[ai].FabklDesc;

								if (sMaintenance[ai].Stich === "1") {
									sObject.ScheIndRbTimeKeyDate = true;
									sObject.FabklEnabled = true;
									sObject.Fabkl = sMaintenance.Fabkl;
									sObject.FabklDesc = sMaintenance.FabklDesc;
								} else if (sMaintenance[ai].Stich === "2") {
									sObject.ScheIndRbTimeFactCal = true;
									sObject.FabklEnabled = true;
									sObject.Fabkl = sMaintenance.Fabkl;
									sObject.FabklDesc = sMaintenance.FabklDesc;
								} else if (sMaintenance[ai].Stich === "3") {
									sObject.ScheIndRbPerformance = true;
									sObject.FabklEnabled = false;
								} else if (sMaintenance[ai].Stich === "" || sMaintenance[ai].Stich === " ") {
									sObject.ScheIndRbTime = true;
									sObject.FabklEnabled = false;
									sObject.Fabkl = sMaintenance.Fabkl;
									sObject.FabklDesc = sMaintenance.FabklDesc;
								}

								if (sMaintenance.Stich) {
									sObject.Stich = parseInt(sMaintenance.Stich);
								} else {
									sObject.Stich = 0;
								}

								sObject.Wset = sMaintenance[ai].Wset;
								sObject.Ktext = sMaintenance[ai].Ktext;
								sObject.Sfakt = sMaintenance[ai].Sfakt;
								sObject.Abrho = sMaintenance[ai].Abrho;
								sObject.Hunit = sMaintenance[ai].Hunit;
								sObject.StratDesc = sMaintenance[ai].StratDesc;
								sObject.Szaeh = sMaintenance[ai].Szaeh;
								sObject.Mpcycleno = sMaintenance[ai].PointStp;
								sObject.Andor = sMaintenance[ai].Andor;

								if (sMaintenance[ai].PointStp !== "") {
									sObject.Unitc = sMaintenance[ai].Unitc;
									// g.readCounterData(sMaintenance[ai], sMaintenance[ai].PointStp, "counterUnit");
								}
								if (sMaintenance[ai].Andor === "X") {
									sObject.AndOP = true;
								} else {
									sObject.OROP = true;
								}

								if (sObject.Mehrfach === true || (sObject.Wset !== "" || sObject !== undefined)) {
									sObject.HorizVisible = false;
								} else {
									sObject.HorizVisible = true;
								}
								sObject.Vspos = sMaintenance[ai].Vspos;
								sObject.Topos = sMaintenance[ai].Topos;
								sObject.Vsneg = sMaintenance[ai].Vsneg;
								sObject.Toneg = sMaintenance[ai].Toneg;
								sObject.Horiz = sMaintenance[ai].Horiz;
								sObject.CallConf = sMaintenance[ai].CallConf;
								sObject.PlanSort = sMaintenance[ai].PlanSort;
								sObject.Begru = sMaintenance[ai].Begru;

								switch (sObject.cycleType) {
								case 0:
									sObject.cycleType = 0;
									sObject.cycleIndSingle = true;
									sObject.cycleIndStrategyEnabled = false;
									sObject.cycleIndMultCntrEnabled = false;
									sObject.Strat = " ";
									sObject.StratDesc = " ";
									sObject.StratLBL = false;
									sObject.StratVis = false;
									sObject.StratDescVis = false;
									sObject.Wset = " ";
									sObject.Ktext = " ";
									sObject.WsetLBL = false;
									sObject.WsetVis = false;
									sObject.KtextVis = false;
									sObject.Mehrfach = false;
									sObject.MehrfachLBL = false;
									sObject.MehrfachVis = false;
									sObject.ButtonNewCycleEnabled = true;

									if (sObject.ScheIndRbPerformance === true) {
										sObject.SzaehLBL = true;
										sObject.SzaehVis = true;
										sObject.UnitcVis = true;
										sObject.StadtLBL = false;
										sObject.StadtVis = false;
									}
									break;
								case 1:
									sObject.cycleType = 1;
									sObject.cycleIndStrategy = true;
									sObject.cycleIndSingleEnabled = false;
									sObject.cycleIndMultCntrEnabled = false;
									sObject.StratLBL = true;
									sObject.StratVis = true;
									sObject.StratDescVis = true;
									sObject.StratEnabled = true;
									sObject.Mehrfach = false;
									sObject.MehrfachLBL = false;
									sObject.MehrfachVis = false;
									sObject.Wset = " ";
									sObject.Ktext = " ";
									sObject.WsetLBL = false;
									sObject.WsetVis = false;
									sObject.KtextVis = false;
									sObject.ButtonNewCycleEnabled = false;
									break;
								case 2:
									sObject.cycleType = 2;
									sObject.cycleIndMultCntr = true;
									sObject.cycleIndStrategyEnabled = false;
									sObject.cycleIndSingleEnabled = false;
									sObject.Strat = " ";
									sObject.StratDesc = " ";
									sObject.StratLBL = false;
									sObject.StratVis = false;
									sObject.StratDescVis = false;
									sObject.MehrfachLBL = true;
									sObject.MehrfachVis = true;
									sObject.MehrfachEnabled = true;
									sObject.WsetLBL = true;
									sObject.WsetVis = true;
									sObject.WsetEnabled = true;
									sObject.KtextVis = true;
									sObject.ButtonNewCycleEnabled = true;
									sObject.cycleSetSeqColVis = true;
									break;
								}

								if (results.MPCycle) {
									var sCycle = results.MPCycle.results;
									if (sCycle) {
										for (var ci = 0; ci < sCycle.length; ci++) {
											if (sObject.Warpl === sCycle[ci].Mplan) {
												sCycle[ci].Psort = sCycle[ci].PointTxt;
												sObject.cycleModel.push(sCycle[ci]);
											}
										}
									}
								}

								if (results.MPItem) {
									var items = results.MPItem.results;
									if (items) {
										var temp = [];
										for (var bi = 0; bi < items.length; bi++) {
											if (sObject.Warpl === items[bi].Mplan) {
												var obj = {};
												obj.Mitemnumb = items[bi].Mitemnumb; // maint item 
												obj.Pstxt = items[bi].Pstxt; // maint item desc
												obj.Cycleseq = items[bi].Cycleseq;
												obj.Tplnr = items[bi].TplnrMi; // floc
												obj.Pltxt = items[bi].Flocdesc; // floc desc
												obj.Equnr = items[bi].Equnr; // equip
												obj.Eqktx = items[bi].Equipdesc; // equip desc
												obj.AsmblyOb = items[bi].Bautl; // assembly
												obj.Assemblydesc = items[bi].Assemblydesc; // assembly
												obj.Serialnr = items[bi].Serialnr;
												obj.Sermat = items[bi].Sermat;
												obj.UiiMitem = items[bi].UiiMitem;
												obj.Deviceid = items[bi].Deviceid;
												obj.Werks = items[bi].PlntMi; // planning plant
												obj.Planningplantdes = items[bi].Planningplantdes; // planning plant desc
												obj.Auart = items[bi].Auart; // order type 
												obj.oTypeTxt = items[bi].Ordertypedesc; // order type desc
												obj.Qmart = items[bi].Qmart; // notif type
												obj.nTypeTxt = items[bi].Qmartx; // notif type desc
												obj.ArbpMi = items[bi].ArbpMi; // main wc
												obj.WergwMi = items[bi].WergwMi; // main wc desc
												obj.Ingrp = items[bi].IngrpMi; // planner grp
												obj.Innam = items[bi].Plannergrpdesc; // planner grp desc

												// Approve Fields
												var sItmPriotxt = items[bi].ItmPriotxt;
												sItmPriotxt = sItmPriotxt.substr(sItmPriotxt.indexOf(" ") + 1);
												obj.Zeieh = items[bi].Zeieh;
												obj.Priok = items[bi].Priok;
												obj.ItmPriotxt = sItmPriotxt;
												obj.GsberMi = items[bi].GsberMi;
												obj.Gtext = items[bi].Gtext;
												obj.TaskDet = items[bi].TaskDet;
												obj.Ilart = items[bi].Ilart;
												obj.Ilatx = items[bi].Ilatx;
												obj.PlntyMi = items[bi].PlntyMi;
												obj.ApfktMi = items[bi].ApfktMi;
												obj.PlnnrMi = items[bi].PlnnrMi;
												obj.PlnalMi = items[bi].PlnalMi;
												obj.Gpcounterdesc = items[bi].Gpcounterdesc;
												obj.AnlzuMi = items[bi].AnlzuMi;
												obj.Anlzux = items[bi].Anlzux;
												obj.SwerkMil = items[bi].SwerkMil;
												obj.Name1 = items[bi].Name1;
												obj.StortMil = items[bi].StortMil;
												obj.Locationdesc = items[bi].Locationdesc;
												obj.MsgrpIl = items[bi].MsgrpIl;
												obj.BeberMil = items[bi].BeberMil;
												obj.Fing = items[bi].Fing;
												obj.Tele = items[bi].Tele;
												obj.ArbplIl = items[bi].ArbplIl;
												obj.Workcenterdesc = items[bi].Workcenterdesc;
												obj.AbckzIl = items[bi].AbckzIl;
												obj.Abctx = items[bi].Abctx;
												obj.EqfnrIl = items[bi].EqfnrIl;
												obj.BukrsMil = items[bi].BukrsMil;
												obj.Butxt = items[bi].Butxt;
												obj.City = items[bi].City;
												obj.Anln1Mil = items[bi].Anln1Mil;
												obj.Anln2Mil = items[bi].Anln2Mil;
												obj.Txt50 = items[bi].Txt50;
												obj.GsberIl = items[bi].GsberIl;
												obj.KostlMil = items[bi].KostlMil;
												obj.Contareaname = items[bi].Contareaname;
												obj.KokrsMil = items[bi].KokrsMil;
												obj.Posid = items[bi].Posid;
												obj.Post1 = items[bi].Post1;
												obj.AufnrIl = items[bi].AufnrIl;
												obj.SettleOrdDesc = items[bi].SettleOrdDesc;
												obj.PlnnrMi = items[bi].PlnnrMi;
												obj.PlntyMi = items[bi].PlntyMi;
												obj.PlnalMi = items[bi].PlnalMi;
												obj.enableLoc = false;

												obj.QmartLBL = true;
												obj.QmartVis = true;
												obj.nTypetxtVis = true;
												obj.AuartLBL = true;
												obj.AuartVis = true;
												obj.oTypeTxtVis = true;
												obj.CycleseqLBL = false;
												obj.CycleseqVis = false;

												obj.AsmblyObMaxLength = 0;
												obj.maintItemE = false;
												obj.cycleSetE = false;
												obj.TplnrEnabled = false;
												obj.equiE = false;
												obj.assemblyE = false;

												obj.CycleseqVS = "None";
												obj.CycleseqVST = "";
												obj.TplnrVS = "None";
												obj.TplnrVST = "";
												obj.EqunrVS = "None";
												obj.EqunrVST = "";
												obj.AsmblyObVS = "None";
												obj.AsmblyObVST = "";
												obj.WerksVS = "None";
												obj.WerksVST = "";
												obj.AuartVS = "None";
												obj.AuartVST = "";
												obj.QmartVS = "None";
												obj.QmartVST = "";
												obj.ArbpMiVS = "None";
												obj.ArbpMiVST = "";
												obj.WergwMiVS = "None";
												obj.WergwMiVST = "";
												obj.IngrpVS = "None";
												obj.IngrpVST = "";
												obj.enableLoc = false;

												var aMPLAM = results.MPLAM.results;
												if (aMPLAM) {
													for (var z = 0; z < aMPLAM.length; z++) {
														if (aMPLAM[z].Mplan === items[bi].Mplan && aMPLAM[z].Mitemnumb === items[bi].Mitemnumb) {
															var oMPLAM = aMPLAM[z];
															oMPLAM.LrpidDesc = aMPLAM[z].LrpDescr;
															oMPLAM.LinUnitDesc = aMPLAM[z].Uomtext;
															obj.lam = oMPLAM;
															break;
														}
													}
												}
												temp.push(obj);
											}
										}
										sObject.itemModel = temp;
									}
								}

								if (results.MPOBList) {
									var aObjListItems = results.MPOBList.results;
									if (aObjListItems) {
										var temp2 = [];
										for (var i = 0; i < aObjListItems.length; i++) {
											if (sObject.Warpl === aObjListItems[i].Mplan) {
												var obj = {};
												obj.Warpl = aObjListItems[i].Mplan;
												obj.Mitemnumb = aObjListItems[i].Mitemnumb;
												obj.MatnrObj = aObjListItems[i].MatnrObj;
												obj.FlocObj = aObjListItems[i].FlocObj;
												obj.EquiObj = aObjListItems[i].EquiObj;
												obj.AsmblyOb = aObjListItems[i].AsmblyOb;
												obj.Matnrtxt = aObjListItems[i].Matnrtxt;
												obj.Equnrtxt = aObjListItems[i].Equnrtxt;
												obj.Tplnrtxt = aObjListItems[i].Tplnrtxt;
												obj.Bautltxt = aObjListItems[i].Bautltxt;
												obj.Enable = false;
												temp2.push(obj);
											}
										}
										sObject.ObjListItems = temp2;
									}
								}

								if (results.ClassMpl) {
									// var sClassList = results.ClassMpl.results;
									var sClassList = $.map(results.ClassMpl.results, function (obj) {
										return $.extend(true, {}, obj);
									});
									if (sClassList) {
										if (sClassList.length > 0) {
											for (var j = 0; j < sClassList.length; j++) {
												if (sObject.Warpl === sClassList[j].Mplan) {
													sClassList[j].ctEnable = false;
													sClassList[j].classEnable = false;
													sClassList[j].ClassTypeDesc = sClassList[j].Artxt;
													delete sClassList[j].Artxt;
													sClassList[j].ClassDesc = sClassList[j].Kltxt;
													delete sClassList[j].Kltxt;
													delete sClassList[j].Changerequestid;
													delete sClassList[j].Clint;
													delete sClassList[j].Service;
													sObject.classItems.push(sClassList[j]);
												}
											}
										}
									}
								}

								if (results.ValuaMpl) {
									// var sCharList = results.ValuaMpl.results;
									var sCharList = $.map(results.ValuaMpl.results, function (obj) {
										return $.extend(true, {}, obj);
									});
									if (sCharList) {
										if (sCharList.length > 0) {
											for (var k = 0; k < sCharList.length; k++) {
												if (sObject.Warpl === sCharList[k].Mplan) {
													sCharList[k].cNameEnable = false;
													sCharList[k].Textbz = sCharList[k].Atwtb;
													delete sCharList[k].Ataut;
													delete sCharList[k].Ataw1;
													delete sCharList[k].Atawe;
													delete sCharList[k].Atcod;
													delete sCharList[k].Atflb;
													delete sCharList[k].Atflv;
													delete sCharList[k].Atimb;
													delete sCharList[k].Atsrt;
													delete sCharList[k].Atvglart;
													delete sCharList[k].Atzis;
													delete sCharList[k].Changerequestid;
													delete sCharList[k].Charid;
													delete sCharList[k].Classtype;
													delete sCharList[k].Service;
													delete sCharList[k].Valcnt;
													sCharList[k].slNo = k + 1; // ()
													sCharList[k].flag = sCharList[k].Class + "-" + sCharList[k].slNo; // ()
													sObject.characteristics.push(sCharList[k]);
												}
											}

											for (var z = 0; z < sObject.characteristics.length; z++) {
												var count = 1;
												for (var y = 0; y < sObject.characteristics.length; y++) {
													if (z === y) {
														continue;
													}
													if (sObject.characteristics[y].Atnam === sObject.characteristics[z].Atnam && sObject.characteristics[y].Class ===
														sObject.characteristics[z].Class) {
														count++;
													}
												}
												if (count > 1) {
													sObject.characteristics[z].charDltEnable = true;
												} else {
													sObject.characteristics[z].charDltEnable = false;
												}

												if (sObject.characteristics[z].Atein === true) {
													sObject.characteristics[z].charAddEnable = false;
												}
											}
										}
									}
								}

								// g.setCommonApprovalData(g.oModelAIWMPMI, pApproveObject);
								g.handleCreatePress(g, sObject, g.oModelAIWMPMI);
							}
						}
					}

					var AIWListMatData = sap.ui.getCore().getModel("AIWListMatModel").getData();
					var matHeader = r.results[0].MRBHeader.results;
					for (var i = 0; i < matHeader.length; i++) {
						var matObj = {};
						matObj.Matnr = matHeader[i].Matnr;
						matObj.Werks = matHeader[i].Werks;
						matObj.Stlan = matHeader[i].Stlan;
						matObj.Stalt = matHeader[i].Stalt;
						matObj.Bomstatus = matHeader[i].Bomstatus;
						matObj.Lngtxt = matHeader[i].Txtmi;
						matObj.Validfrom = g.getDateFormat(matHeader[i].Validfrom);
						matObj.BaseQty = matHeader[i].Baseqty;
						matObj.BaseUom = matHeader[i].Baseuom;
						matObj.Validtoda = g.getDateFormat(matHeader[i].Validtoda);

						matObj.MatDesc = matHeader[i].Maktx;
						matObj.WerksDesc = matHeader[i].Plantname;
						matObj.StlanDesc = matHeader[i].Bomusagetxt;
						matObj.BomstatusText = matHeader[i].Bomstatustxt;
						matObj.Stktx = matHeader[i].Stktx;
						matObj.matEnable = false;
						matObj.plantEnable = false;
						matObj.usageEnable = false;
						matObj.altbomEnable = true;
						matObj.LngtxtEnable = true;
						matObj.BomstatusEnable = true;
						matObj.BaseQtyEnable = true;
						matObj.fromDateEnable = true;
						matObj.addItemEnable = true;
						matObj.modeFlag = "Delete";

						matObj.Authgroup = matHeader[i].Authgroup;
						matObj.Sizdim = matHeader[i].Sizdim;
						matObj.Labofc = matHeader[i].Labofc;
						matObj.Labortxt = matHeader[i].Labortxt;
						// matObj.Stalt = matHeader[i].Stalt;
						if (matObj.Stalt !== "") {
							matObj.altbomEnable = false;
						}

						matObj.Flbomsub = ""; //matHeader[i].Flbomsub;
						matObj.Delflg = ""; //matHeader[i].Delflg;
						matObj.Invnr = ""; //matHeader[i].Invnr;
						matObj.Herst = ""; //matHeader[i].Herst;
						matObj.Htypb = ""; //matHeader[i].Htypb;
						matObj.Serge = ""; //matHeader[i].Serge;
						// matObj.Stktx = ""; //matHeader[i].Stktx;

						matObj.matItem = [];
						matObj.matSubItem = [];

						var MATITEM = r.results[0].MRBItem.results;
						if (MATITEM.length > 0) {
							for (var j = 0; j < MATITEM.length; j++) {
								if (MATITEM[j].Matnr === matObj.Matnr && MATITEM[j].Werks === matObj.Werks && MATITEM[j].Stlan === matObj.Stlan) {
									MATITEM[j].addSubItmEnable = true;
									// MATITEM[j].Pmper = "-";
									// MATITEM[j].Pmpka = "-";
									// MATITEM[j].Pmprv = "-";
									// MATITEM[j].Pmpfe = "-";
									// MATITEM[j].Pmpin = "-";
									// MATITEM[j].Pmpko = "-";
									matObj.matItem.push(MATITEM[j]);
								}
							}
						}

						var MATSUBITEM = r.results[0].MRBSBIT.results;
						if (MATSUBITEM.length > 0) {
							for (var k = 0; k < MATSUBITEM.length; k++) {
								if (MATSUBITEM[k].Matnr === matObj.Matnr && MATSUBITEM[k].Werks === matObj.Werks && MATSUBITEM[k].Stlan ===
									matObj.Stlan) {
									MATSUBITEM[k].intPointEnable = true;
									MATSUBITEM[k].subQtyEnable = true;
									MATSUBITEM[k].subTextEnable = true;
									matObj.matSubItem.push(MATSUBITEM[k]);
								}
							}
						}
						AIWListMatData.push(matObj);
					}
					sap.ui.getCore().getModel("AIWListMatModel").setSizeLimit(AIWListMatData.length);
					sap.ui.getCore().getModel("AIWListMatModel").refresh();
					g.updateCount("MaterialBom", AIWListMatData);

					var AIWListEqData = sap.ui.getCore().getModel("AIWListEqModel").getData();
					var eqHeader = r.results[0].EBHeader.results;
					for (var i = 0; i < eqHeader.length; i++) {
						var eqObj = {};
						eqObj.Eqnrbom = eqHeader[i].Eqnrbom;
						eqObj.Werks = eqHeader[i].Werks;
						eqObj.Stlan = eqHeader[i].Stlan;
						eqObj.Bomstatus = eqHeader[i].Bomstatus;
						eqObj.Lngtxt = eqHeader[i].Txtmi;
						eqObj.Validfrom = g.getDateFormat(eqHeader[i].Validfrom);
						eqObj.BaseQty = eqHeader[i].Baseqty;
						eqObj.BaseUom = eqHeader[i].Baseuom;
						eqObj.Validtoda = g.getDateFormat(eqHeader[i].Validtoda);

						eqObj.EquiDesc = eqHeader[i].Eqktx;
						eqObj.WerksDesc = eqHeader[i].Plantname;
						eqObj.StlanDesc = eqHeader[i].Bomusagetxt;
						eqObj.BomstatusText = eqHeader[i].Bomstatustxt;
						eqObj.equipEnable = false;
						eqObj.plantEnable = false;
						eqObj.usageEnable = false;
						eqObj.LngtxtEnable = true;
						eqObj.fromDateEnable = true; //new
						eqObj.BomstatusEnable = true;
						eqObj.BaseQtyEnable = true;
						eqObj.addItemEnable = true;
						eqObj.modeFlag = "Delete";

						eqObj.Authgroup = eqHeader[i].Authgroup;
						eqObj.Sizdim = eqHeader[i].Sizdim;
						eqObj.Labofc = eqHeader[i].Labofc;
						eqObj.Labortxt = eqHeader[i].Labortxt;
						eqObj.Delflg = eqHeader[i].Delflg;
						eqObj.Invnr = eqHeader[i].Invnr;
						eqObj.Herst = eqHeader[i].Herst;
						eqObj.Htypb = eqHeader[i].Htypb;
						eqObj.Serge = eqHeader[i].Serge;

						eqObj.Flbomsub = ""; //eqHeader[i].Flbomsub;
						eqObj.Stalt = ""; //eqHeader[i].Stalt;
						eqObj.Stktx = ""; //eqHeader[i].Stktx;

						eqObj.eqItem = [];
						eqObj.eqSubItem = [];

						var EQITEM = r.results[0].EBItem.results;
						if (EQITEM.length > 0) {
							for (var j = 0; j < EQITEM.length; j++) {
								if (EQITEM[j].Eqnrbom === eqObj.Eqnrbom && EQITEM[j].Werks === eqObj.Werks && EQITEM[j].Stlan === eqObj.Stlan) {
									EQITEM[j].addSubItmEnable = true;
									// EQITEM[j].Pmper = "-";
									// EQITEM[j].Pmpka = "-";
									// EQITEM[j].Pmprv = "-";
									// EQITEM[j].Pmpfe = "-";
									// EQITEM[j].Pmpin = "-";
									// EQITEM[j].Pmpko = "-";
									eqObj.eqItem.push(EQITEM[j]);
								}
							}
						}

						var EQSUBITEM = r.results[0].EBSBIT.results;
						if (EQSUBITEM.length > 0) {
							for (var k = 0; k < EQSUBITEM.length; k++) {
								if (EQSUBITEM[k].Eqnrbom === eqObj.Eqnrbom && EQSUBITEM[k].Werks === eqObj.Werks && EQSUBITEM[k].Stlan ===
									eqObj.Stlan) {
									EQSUBITEM[k].intPointEnable = true;
									EQSUBITEM[k].subQtyEnable = true;
									EQSUBITEM[k].subTextEnable = true;
									eqObj.eqSubItem.push(EQSUBITEM[k]);
								}
							}
						}
						AIWListEqData.push(eqObj);
					}
					sap.ui.getCore().getModel("AIWListEqModel").setSizeLimit(AIWListEqData.length);
					sap.ui.getCore().getModel("AIWListEqModel").refresh();
					g.updateCount("EquipmentBom", AIWListEqData);

					var AIWListFLData = sap.ui.getCore().getModel("AIWListFLModel").getData();
					var flHeader = r.results[0].FBHeader.results;
					for (var i = 0; i < flHeader.length; i++) {
						var flObj = {};
						flObj.Tplnrbom = flHeader[i].Tplnrbom;
						flObj.Werks = flHeader[i].Werks;
						flObj.Stlan = flHeader[i].Stlan;
						flObj.Bomstatus = flHeader[i].Bomstatus;
						flObj.Lngtxt = flHeader[i].Txtmi;
						flObj.Validfrom = g.getDateFormat(flHeader[i].Validfrom);
						flObj.BaseQty = flHeader[i].Baseqty;
						flObj.BaseUom = flHeader[i].Baseuom;
						flObj.Validtoda = g.getDateFormat(flHeader[i].Validtoda);

						flObj.FLDesc = flHeader[i].Pltxt;
						flObj.WerksDesc = flHeader[i].Plantname;
						flObj.StlanDesc = flHeader[i].Bomusagetxt;
						flObj.BomstatusText = flHeader[i].Bomstatustxt;
						flObj.FLEnable = false;
						flObj.plantEnable = false;
						flObj.usageEnable = false;
						flObj.LngtxtEnable = true;
						flObj.fromDateEnable = true; //new
						flObj.BomstatusEnable = true;
						flObj.BaseQtyEnable = true;
						flObj.addItemEnable = true;
						flObj.modeFlag = "Delete";

						flObj.Authgroup = flHeader[i].Authgroup;
						flObj.Sizdim = flHeader[i].Sizdim;
						flObj.Flbomsub = flHeader[i].Flbomsub;
						flObj.Labofc = flHeader[i].Labofc;
						flObj.Labortxt = flHeader[i].Labortxt;

						flObj.Stalt = ""; //flHeader[i].Stalt;
						flObj.Delflg = ""; //flHeader[i].Delflg;
						flObj.Invnr = ""; //flHeader[i].Invnr;
						flObj.Herst = ""; //flHeader[i].Herst;
						flObj.Htypb = ""; //flHeader[i].Htypb;
						flObj.Serge = ""; //flHeader[i].Serge;
						flObj.Stktx = ""; //flHeader[i].Stktx;

						flObj.flItem = [];
						flObj.flSubItem = [];

						var FLITEM = r.results[0].FBItem.results;
						if (FLITEM.length > 0) {
							for (var j = 0; j < FLITEM.length; j++) {
								if (FLITEM[j].Tplnrbom === flObj.Tplnrbom && FLITEM[j].Werks === flObj.Werks && FLITEM[j].Stlan === flObj.Stlan) {
									FLITEM[j].addSubItmEnable = true;
									// FLITEM[j].Pmper = "-";
									// FLITEM[j].Pmpka = "-";
									// FLITEM[j].Pmprv = "-";
									// FLITEM[j].Pmpfe = "-";
									// FLITEM[j].Pmpin = "-";
									// FLITEM[j].Pmpko = "-";
									flObj.flItem.push(FLITEM[j]);
								}
							}
						}

						var FLSUBITEM = r.results[0].FBSBIT.results;
						if (FLSUBITEM.length > 0) {
							for (var k = 0; k < FLSUBITEM.length; k++) {
								if (FLSUBITEM[k].Tplnrbom === flObj.Tplnrbom && FLSUBITEM[k].Werks === flObj.Werks && FLSUBITEM[k].Stlan ===
									flObj.Stlan) {
									FLSUBITEM[k].intPointEnable = true;
									FLSUBITEM[k].subQtyEnable = true;
									FLSUBITEM[k].subTextEnable = true;
									flObj.flSubItem.push(FLSUBITEM[k]);
								}
							}
						}
						AIWListFLData.push(flObj);
					}
					sap.ui.getCore().getModel("AIWListFLModel").setSizeLimit(AIWListFLData.length);
					sap.ui.getCore().getModel("AIWListFLModel").refresh();
					g.updateCount("FLBom", AIWListFLData);

					var AIWListWBSData = sap.ui.getCore().getModel("AIWListWBSModel").getData();
					var wbsHeader = r.results[0].WBHeader.results;
					for (var i = 0; i < wbsHeader.length; i++) {
						var wbsObj = {};
						wbsObj.WbsExt = wbsHeader[i].WbsExt;
						wbsObj.Matnr = wbsHeader[i].MatnrWbs;
						wbsObj.Werks = wbsHeader[i].Werks;
						wbsObj.Stlan = wbsHeader[i].Stlan;
						wbsObj.Bomstatus = wbsHeader[i].Bomstatus;
						wbsObj.Lngtxt = wbsHeader[i].Txtmi;
						wbsObj.Validfrom = g.getDateFormat(wbsHeader[i].Validfrom);
						wbsObj.BaseQty = wbsHeader[i].Baseqty;
						wbsObj.BaseUom = wbsHeader[i].Baseuom;
						wbsObj.Validtoda = g.getDateFormat(wbsHeader[i].Validtoda);

						wbsObj.WbsDesc = wbsHeader[i].Post1;
						wbsObj.MatDesc = wbsHeader[i].Maktx;
						wbsObj.WerksDesc = wbsHeader[i].Plantname;
						wbsObj.StlanDesc = wbsHeader[i].Bomusagetxt;
						wbsObj.BomstatusText = wbsHeader[i].Bomstatustxt;
						wbsObj.wbsEnable = false;
						wbsObj.matEnable = false;
						wbsObj.plantEnable = false;
						wbsObj.usageEnable = false;
						wbsObj.LngtxtEnable = true;
						wbsObj.fromDateEnable = true; //new
						wbsObj.BomstatusEnable = true;
						wbsObj.BaseQtyEnable = true;
						wbsObj.addItemEnable = true;
						wbsObj.modeFlag = "Delete";

						wbsObj.Authgroup = wbsHeader[i].Authgroup;
						wbsObj.Sizdim = wbsHeader[i].Sizdim;
						wbsObj.Labofc = wbsHeader[i].Labofc;
						wbsObj.Labortxt = wbsHeader[i].Labortxt;

						wbsObj.Stalt = ""; //wbsHeader[i].Stalt;
						wbsObj.Flbomsub = ""; //wbsHeader[i].Flbomsub;
						wbsObj.Delflg = ""; //wbsHeader[i].Delflg;
						wbsObj.Invnr = ""; //wbsHeader[i].Invnr;
						wbsObj.Herst = ""; //wbsHeader[i].Herst;
						wbsObj.Htypb = ""; //wbsHeader[i].Htypb;
						wbsObj.Serge = ""; //wbsHeader[i].Serge;
						wbsObj.Stktx = ""; //wbsHeader[i].Stktx;

						wbsObj.wbsItem = [];
						wbsObj.wbsSubItem = [];

						var WBSITEM = r.results[0].WBItem.results;
						if (WBSITEM.length > 0) {
							for (var j = 0; j < WBSITEM.length; j++) {
								if (WBSITEM[j].MatnrWbs === wbsObj.Matnr && WBSITEM[j].Werks === wbsObj.Werks && WBSITEM[j].Stlan === wbsObj.Stlan) {
									WBSITEM[j].addSubItmEnable = true;
									// WBSITEM[j].Pmper = "-";
									// WBSITEM[j].Pmpka = "-";
									// WBSITEM[j].Pmprv = "-";
									// WBSITEM[j].Pmpfe = "-";
									// WBSITEM[j].Pmpin = "-";
									// WBSITEM[j].Pmpko = "-";
									wbsObj.wbsItem.push(WBSITEM[j]);
								}
							}
						}

						var WBSSUBITEM = r.results[0].WBSBIT.results;
						if (WBSSUBITEM.length > 0) {
							for (var k = 0; k < WBSSUBITEM.length; k++) {
								if (WBSSUBITEM[k].MatnrWbs === wbsObj.Matnr && WBSSUBITEM[k].Werks === wbsObj.Werks && WBSSUBITEM[k].Stlan ===
									wbsObj.Stlan) {
									WBSSUBITEM[k].intPointEnable = true;
									WBSSUBITEM[k].subQtyEnable = true;
									WBSSUBITEM[k].subTextEnable = true;
									wbsObj.wbsSubItem.push(WBSSUBITEM[k]);
								}
							}
						}
						AIWListWBSData.push(wbsObj);
					}
					sap.ui.getCore().getModel("AIWListWBSModel").setSizeLimit(AIWListWBSData.length);
					sap.ui.getCore().getModel("AIWListWBSModel").refresh();
					g.updateCount("WbsBom", AIWListWBSData);

					var AIWListONData = sap.ui.getCore().getModel("AIWListONModel").getData();
					var ONHeader = r.results[0].ONetwork.results;
					for (var i = 0; i < ONHeader.length; i++) {
						var onObj = {};
						onObj.Objnetwrk = ONHeader[i].Objnetwrk; //obj.Objnetwrk;
						onObj.Netgrp = ONHeader[i].Netgrp;
						onObj.Netwtyp = ONHeader[i].Netwtyp;
						onObj.Netxt = ONHeader[i].Netxt;
						onObj.NetgrpDesc = ONHeader[i].NetgroupTxt;
						onObj.NetwtypDesc = ONHeader[i].NettypeTxt;
						onObj.NetIDEnable = true;
						onObj.Ntobjtyp = ONHeader[i].Ntobjtyp;

						var ONLAM = r.results[0].ONLAM.results;
						if (ONLAM) {
							for (var j = 0; j < ONLAM.length; j++) {
								if (ONLAM[j].Objnetwrk === ONHeader[i].Objnetwrk) {
									onObj.lam = ONLAM[j];
									onObj.lam.LrpidDesc = ONLAM[j].LrpDescr;
									onObj.lam.LinUnitDesc = ONLAM[j].Uomtext;
									break;
								}
							}
						}
						AIWListONData.push(onObj);
					}
					sap.ui.getCore().getModel("AIWListONModel").setSizeLimit(AIWListONData.length);
					sap.ui.getCore().getModel("AIWListONModel").refresh();
					g.enableFields("ON");
					g.updateCount("ObjNet", AIWListONData);

					var AIWListWCData = sap.ui.getCore().getModel("AIWListWCModel").getData();
					var wcData = results.Workcenter.results;
					if (wcData) {
						for (var w = 0; w < wcData.length; w++) {
							var wcObj = {};
							wcObj = wcData[w];
							wcObj.wc = wcData[w].Arbpl;
							wcObj.wcDesc = wcData[w].Txtmi;
							wcObj.plant = wcData[w].Werks;
							wcObj.plantDesc = wcData[w].Plantdesc;
							wcObj.wcCat = wcData[w].Verwe;
							wcObj.wcCatDesc = wcData[w].Ktext;
							wcObj.person = wcData[w].Crveran;
							wcObj.personDesc = wcData[w].Persresptxt;
							wcObj.usg = wcData[w].Planv;
							wcObj.usgDesc = wcData[w].UsageTxt;
							wcObj.stdVal = wcData[w].Vgwts;
							wcObj.stdValDesc = wcData[w].Vgwtx;
							wcObj.ctrlKey = wcData[w].Crsteus;
							wcObj.ctrlKeyDesc = wcData[w].Steutxt;

							wcObj.wcValueState = "None";
							wcObj.wcDescValueState = "None";
							wcObj.plantValueState = "None";
							wcObj.wcCatValueState = "None";
							wcObj.personResValueState = "None";
							wcObj.usgValueState = "None";
							wcObj.stdValueState = "None";
							wcObj.cntrlKeyValueState = "None";
							wcObj.wcValueStateTxt = "";
							wcObj.wcDescValueStateTxt = "";
							wcObj.plantValueStateTxt = "";
							wcObj.wcCatValueStateTxt = "";
							wcObj.personResValueStateTxt = "";
							wcObj.usgValueStateTxt = "";
							wcObj.stdValueStateTxt = "";
							wcObj.cntrlKeyValueStateTxt = "";
							wcObj.enable = false;
							wcObj.wcEnable = false;
							wcObj.plEnable = false;
							wcObj.wcatEnable = false;
							wcObj.cost = [];
							wcObj.capacity = [];
							wcObj.classItems = [];
							wcObj.characteristics = [];

							var cost = results.WCCost.results;
							if (cost) {
								if (cost.length > 0) {
									var costArr = [];
									for (var c = 0; c < cost.length; c++) {
										if (wcObj.wc === cost[c].Arbpl) {
											costArr.push(cost[c]);
										}
									}
									var cModel = new sap.ui.model.json.JSONModel();
									cModel.setData(cost);
									// g.cost.setModel(cModel);
									wcObj.cost = costArr;

								}
							}
							var capacity = results.WCCapa.results;
							if (capacity) {
								var capArr = [];
								if (capacity.length > 0) {
									for (var ca = 0; ca < capacity.length; ca++) {
										if (wcObj.wc === capacity[ca].Arbpl) {
											capArr.push(capacity[ca]);
										}
									}
									var capModel = new sap.ui.model.json.JSONModel();
									capModel.setData(capacity);
									wcObj.capacity = capacity;
								}
							}
							var classList = results.ClassWC.results;
							if (classList) {
								if (classList.length > 0) {
									for (var i = 0; i < classList.length; i++) {
										classList[i].ctEnable = false;
										classList[i].classEnable = false;
										classList[i].ClassTypeDesc = classList[i].Artxt;
										delete classList[i].Artxt;
										classList[i].ClassDesc = classList[i].Kltxt;
										delete classList[i].Kltxt;
										delete classList[i].Changerequestid;
										delete classList[i].Clint;
										delete classList[i].Service;
										wcObj.classItems.push(classList[i]);
									}
									// var cModel = new sap.ui.model.json.JSONModel();
									// cModel.setData(classList);
									// g.class.setModel(cModel);
								}
							}

							var charList = results.ValueWC.results;
							if (charList) {
								if (charList.length > 0) {
									for (var j = 0; j < charList.length; j++) {
										charList[j].cNameEnable = false;
										delete charList[j].Ataut;
										delete charList[j].Ataw1;
										delete charList[j].Atawe;
										delete charList[j].Atcod;
										delete charList[j].Atflb;
										delete charList[j].Atflv;
										delete charList[j].Atimb;
										delete charList[j].Atsrt;
										delete charList[j].Atvglart;
										delete charList[j].Atzis;
										delete charList[j].Changerequestid;
										delete charList[j].CharName;
										delete charList[j].Charid;
										delete charList[j].Classtype;
										delete charList[j].Service;
										delete charList[j].Valcnt;
										charList[j].slNo = j + 1;
										charList[j].flag = charList[j].Class + "-" + charList[j].slNo;
										wcObj.characteristics.push(charList[j]);
									}

									for (var z = 0; z < charList.length; z++) {
										var count = 1;
										for (var y = 0; y < charList.length; y++) {
											if (z === y) {
												continue;
											}
											if (charList[y].Atnam === charList[z].Atnam && charList[y].Class ===
												charList[z].Class) {
												count++;
											}
										}
										if (count > 1) {
											charList[z].charDltEnable = true;
										} else {
											charList[z].charDltEnable = false;
										}

										if (charList[z].Atein === true) {
											charList[z].charAddEnable = false;
										}
									}
									// var _cModel = new sap.ui.model.json.JSONModel();
									// _cModel.setData(charList);
									// g.char.setModel(_cModel);
									// g.chData = charList;
									// wcObj.Char = charList;
								}
							}
							AIWListWCData.push(wcObj);
							// g.setCommonApprovalData("AIWListWCModel", pApproveObject);
						}
					}
					sap.ui.getCore().getModel("AIWListWCModel").setSizeLimit(AIWListWCData.length);
					sap.ui.getCore().getModel("AIWListWCModel").setData(AIWListWCData);
					g.updateCount("workCenter", AIWListWCData);

					var AIWListGTLData = sap.ui.getCore().getModel("AIWListGTLModel").getData();
					var basic = results.GTList.results; //GTHdr
					if (basic) {
						for (var gtl = 0; gtl < basic.length; gtl++) {
							var gtlData = {
								validFrm: formatter.getDateFormat(basic[gtl].Datuv),
								grp: basic[gtl].Tlgnhdr,
								// vEquiLbl: false,
								// vEqui: false,
								// vEquiDesc: false,
								// vFlocLbl: false,
								// vFloc: false,
								// vFlocDesc: false,
								// flocEnb: false,
								// equiEnb: false,
								// bAddComponent: true,
								enable: true,
								KDenable: true,
								header: [],
								operation: [],
								component: [],
								Class: [],
								Char: [],
								MaintPckg: [],
								// PRT: [],
								// OprRel: [],
								// SrvPckgOvrw: [],
								// InspChar: [],
							};
							var header = results.GTList.results;
							if (header.length > 0) {
								// gtlData.header = header;
								for (var h = 0; h < header.length; h++) {
									if (gtlData.grp === header[h].Tlgnhdr) {
										var gtheader = {};
										gtheader.PPenable = false;
										gtheader.Grpenable = false;
										gtheader.pPlantDesc = header[h].Iwerktxt;
										gtheader.usageDesc = header[h].TlUsgTxt;
										gtheader.plGrpDesc = header[h].Plnnrgrptxt;
										gtheader.statusDesc = header[h].Statustxt;
										gtheader.sysCondDesc = header[h].Anlzux;
										gtheader.stratDesc = header[h].Strattxt;
										gtheader.Plnal = header[h].Tplnal;
										gtheader.Verwe = header[h].Tverwe;
										// gtheader.usg = header[h].Tverwe;
										gtheader.plEnable = false;
										gtheader.valueStateT = "None";
										gtheader.valueStatePP = "None";
										gtheader.valueStateU = "None";
										gtheader.valueStateS = "None";
										gtheader.groupCounter = header[h].Tplnal;
										gtheader.Ktext = header[h].Ktext;
										gtheader.profile = header[h].Profident;
										// gtheader.Ktext = header[h].Werks2gtl;
										gtheader.wc = header[h].Tarbpl;
										gtheader.keydate = header[h].Keydate;
										gtheader.plant = header[h].Wcplant;
										gtheader.Iwerk = header[h].Werks;
										gtheader.usage = header[h].Tverwe;
										gtheader.plannerGrp = header[h].Vagrp;
										gtheader.Statu = header[h].Statu;
										gtheader.systemCond = header[h].Anlzu;
										gtheader.groupVal = header[h].Tlgnhdr;
										gtheader.groupCounterDesc = header[h].Ktext;
										gtheader.wcDesc = header[h].Wcdescription;
										gtheader.assembly = header[h].Istru;
										gtheader.deletion = header[h].Delkz;
										gtheader.Plnnrgrptxt = header[h].Plnnrgrptxt;
										gtheader.Statustxt = header[h].Statustxt;
										gtheader.Anlzux = header[h].Anlzux;
										gtheader.Istrux = header[h].Istrux;
										// added
										gtheader.insPtDesc = header[h].Slwbeztxt;
										gtheader.insPt = header[h].Slwbez;
										gtheader.extNum = header[h].Extnumtxt;
										gtheader.tlusg = header[h].Tverwe;
										gtheader.grp = header[h].Tlgnhdr;
										gtheader.assmbly = header[h].Istru;
										gtheader.assmblyDesc = header[h].Istrux;
										gtheader.Strat = header[h].Strat;
										gtheader.vEquiLbl = false;
										gtheader.vEqui = false;
										gtheader.vEquiDesc = false;
										gtheader.vFlocLbl = false;
										gtheader.vFloc = false;
										gtheader.vFlocDesc = false;
										gtheader.bAddComponent = true;
										// gtlData.modeflag = header[h].Type ? "Crt" : "Chg";
										gtlData.header.push(gtheader);
									}
								}
							}
							var operation = results.GTOprs.results;
							if (operation.length > 0) {
								// gtlData.operation = operation;
								for (var o = 0; o < operation.length; o++) {
									if (gtlData.grp === operation[o].Tlgnhdr) {
										var gtoperation = {};
										gtoperation = operation[o];
										gtoperation.calcKeyDesc = "";
										gtoperation.actTypDesc = "";
										gtoperation.Vornr = operation[o].Vornr;
										gtoperation.flag = operation[o].Tplnal + "-" + operation[o].Vornr;
										gtoperation.Arbpl = operation[o].TlArbpl;
										gtoperation.Plnal = operation[o].Tplnal;
										gtoperation.opState = "None";
										gtoperation.opDescState = "None";
										gtoperation.wcState = "None";
										gtoperation.plantState = "None";
										gtoperation.ctrlKeyState = "None";

										gtoperation.operation = operation[o].Gvornr2op;
										gtoperation.subOp = operation[o].Uvorn;
										gtoperation.workCenter = operation[o].TlArbpl;
										gtoperation.plant = operation[o].Werks2gop;
										gtoperation.controlKey = operation[o].Steus2gop;
										gtoperation.Steus = operation[o].Steus2gop;
										gtoperation.shortText = operation[o].Ltxa1;
										gtoperation.work = operation[o].Arbei;
										gtoperation.unitForWork = operation[o].Arbeh;
										gtoperation.number = operation[o].Anzzl;
										gtoperation.calcKey = operation[o].Indet;
										gtoperation.normDuration = operation[o].Dauno;
										gtoperation.uomDuration = operation[o].Daune;
										gtoperation.workPerc = operation[o].Prznt.toString();
										gtoperation.exeFactor = operation[o].Aufkt;
										gtoperation.Werks = operation[o].Werks2gop;
										gtoperation.actType = operation[o].Larnt2gop;
										gtoperation.stdTextKey = operation[o].Ktsch;
										gtoperation.assembly = operation[o].Tistru;
										gtoperation.noOfTime = operation[o].Loanz;
										gtoperation.sutability = operation[o].Qualf2gop;
										gtoperation.wageGroup = operation[o].Logrp2gop;
										gtoperation.wageType = operation[o].Loart;
										gtoperation.sysCondition = operation[o].Tanlzu;
										gtoperation.orderQty = operation[o].Bmvrg;
										gtoperation.ordQtyUnit = operation[o].Bmeih;
										gtoperation.netPrice = operation[o].Opreis;
										gtoperation.currency = operation[o].Owaers;
										gtoperation.priceUnit = operation[o].Opeinh;
										gtoperation.planDelTime = operation[o].Plifz;
										gtoperation.costElement = operation[o].Sakto2gop;
										gtoperation.materialGrp = operation[o].Omatkl;
										gtoperation.puchGroup = operation[o].Oekgrp;
										gtoperation.vendor = operation[o].Lifnr;
										gtoperation.purchOrg = operation[o].Ekorg;
										gtoperation.shortTerm = operation[o].Sortl;
										gtoperation.purchInfo = operation[o].Infnr;
										gtoperation.fieldKey = operation[o].Slwid;
										gtoperation.purchDoc = operation[o].Ebeln;
										gtoperation.purchDocItem = operation[o].Ebelp2gop;
										gtoperation.userFld = operation[o].Slwid;
										gtoperation.capCat = operation[o].Qlkapar;
										gtoperation.capCatDesc = operation[o].Kapartxt;
										gtoperation.quantity1_ = operation[o].Use04;
										gtoperation.quantity1 = operation[o].Usr04;
										gtoperation.quantity2 = operation[o].Usr05;
										gtoperation.quantity2_ = operation[o].Use05;
										gtoperation.value3 = operation[o].Usr06;
										gtoperation.value4 = operation[o].Usr07;
										gtoperation.value3_ = operation[o].Use06;
										gtoperation.value4_ = operation[o].Use07;
										gtoperation.text1 = operation[o].Usr00;
										gtoperation.text2 = operation[o].Usr01;
										gtoperation.text3 = operation[o].Usr03;
										gtoperation.text4 = operation[o].Usr04;
										gtoperation.date1 = operation[o].Usr08;
										gtoperation.date2 = operation[o].Usr09;
										gtoperation.indicator1 = operation[o].Usr10;
										gtoperation.indicator2 = operation[o].Usr11;
										gtoperation.Usrtxtname1 = operation[o].Usrtxtname1;
										gtoperation.Usrtxtflg1 = operation[o].Usrtxtflg1;
										gtoperation.Usrtxtname2 = operation[o].Usrtxtname2;
										gtoperation.Usrtxtflg2 = operation[o].Usrtxtflg2;
										gtoperation.Usrtxtname3 = operation[o].Usrtxtname3;
										gtoperation.Usrtxtflg3 = operation[o].Usrtxtflg3;
										gtoperation.Usrtxtname4 = operation[o].Usrtxtname4;
										gtoperation.Usrtxtflg4 = operation[o].Usrtxtflg4;
										gtoperation.Usrqtyname1 = operation[o].Usrqtyname1;
										gtoperation.Usrqtyflg1 = operation[o].Usrqtyflg1;
										gtoperation.Usrqtyname2 = operation[o].Usrqtyname2;
										gtoperation.Usrqtyflg2 = operation[o].Usrqtyflg2;
										gtoperation.Usrvalname1 = operation[o].Usrvalname1;
										gtoperation.Usrvalflg1 = operation[o].Usrvalflg1;
										gtoperation.Usrvalname2 = operation[o].Usrvalname2;
										gtoperation.Usrvalflg2 = operation[o].Usrvalflg2;
										gtoperation.Usrdatename1 = operation[o].Usrdatename1;
										gtoperation.Usrdatflg1 = operation[o].Usrdatflg1;
										gtoperation.Usrdatename2 = operation[o].Usrdatename2;
										gtoperation.Usrdatflg2 = operation[o].Usrdatflg2;
										gtoperation.Usrindname1 = operation[o].Usrindname1;
										gtoperation.Usrindflag1 = operation[o].Usrindflag1;
										gtoperation.Usrindname2 = operation[o].Usrindname2;
										gtoperation.Usrindflag2 = operation[o].Usrindflag2;
										gtoperation.qual = operation[o].Qlotype;
										gtoperation.search = operation[o].Qsearchtm;
										gtoperation.groupCounter = operation[o].Tplnal;
										gtoperation.VornrEnable = false;
										gtoperation.UvornEnable = false;
										gtoperation.equi = operation[o].EqunrGop
										gtoperation.floc = operation[o].TplnrGop
											// gtoperation.Component = [];
										gtoperation.PRT = [];
										gtoperation.OprRel = [];
										gtoperation.SrvPckgOvrw = [];
										gtoperation.InspChar = [];

										var aGtOpRel = results.GTRel.results;
										if (aGtOpRel && aGtOpRel.length > 0) {
											for (var c in aGtOpRel) {
												if (gtlData.grp === aGtOpRel[c].Tlgnhdr && gtoperation.Plnal === aGtOpRel[c].Tplnal && gtoperation ===
													aGtOpRel[c].Vorn2) {
													var objOprRel = {
														Plnal: aGtOpRel[c].Tplnal,
														Vornr: aGtOpRel[c].Vorn2,
														OperationOR: aGtOpRel[c].Vornrgrel,
														Offset: aGtOpRel[c].Dauer,
														OUn: aGtOpRel[c].Zeinh,
														RelType: aGtOpRel[c].Aobar,
														PO: aGtOpRel[c].Gprznt,
														OI: aGtOpRel[c].Provg,
														ID: aGtOpRel[c].Gkalid,
														WrkCtrOR: aGtOpRel[c].Arbplgrel,
														PlantOR: aGtOpRel[c].Werksgrel,
													}
													gtoperation.OprRel.push(objOprRel);
												}
											}
										}
										var aGtPrt = results.GTPRT.results;
										if (aGtPrt && aGtPrt.length > 0) {
											for (var c = 0; c < aGtPrt.length; c++) {
												if (gtlData.grp === aGtPrt[c].Tlgnhdr && gtoperation.Plnal === aGtPrt[c].Tplnal && gtoperation.Vornr === aGtPrt[c].Vornrgprt) {
													var objPRT = {
														grp: aGtPrt[c].Tlgnhdr,
														Plnal: aGtPrt[c].Tplnal,
														Vornr: aGtPrt[c].Vornrgprt,
														ItmNum: aGtPrt[c].Psnfh,
														ItmCat: aGtPrt[c].Fhmar,
														PRT: aGtPrt[c].Fhmnr,
														// PRTDesc: aGtPrt[c].Fhwrk,
														Qty: aGtPrt[c].Mgvgw,
														UOM: aGtPrt[c].Mgeinh,
														QtyFrmla: aGtPrt[c].Mgform,
														PRTCtrl: aGtPrt[c].Steuf,
														PRTCtrlDesc: aGtPrt[c].Stftxt,
														StdUsgVal: aGtPrt[c].Ewvgw,
														StdUsgUOM: aGtPrt[c].Eweinh,
														UsgValFrmla: aGtPrt[c].Ewform,
														Plant: aGtPrt[c].Fhwrk,
														docType: aGtPrt[c].Dokareprt,
														docTypeDesc: "",
														docPart: aGtPrt[c].Doktleprt,
														docVersion: aGtPrt[c].Dokvreprt,
														prtEnable: false,
													}

													if (objPRT.ItmCat === "M") {
														objPRT.title = "Material";
														objPRT.matEnable = true;
														objPRT.eqEnable = false;
														objPRT.msptEnable = false;
														objPRT.docEnable = false;
														objPRT.othEnable = false;
													} else if (objPRT.ItmCat === "E") {
														objPRT.title = "Equipment";
														objPRT.matEnable = false;
														objPRT.eqEnable = true;
														objPRT.msptEnable = false;
														objPRT.docEnable = false;
														objPRT.othEnable = false;
													} else if (objPRT.ItmCat === "P") {
														objPRT.title = "Measuring Point";
														objPRT.matEnable = false;
														objPRT.eqEnable = false;
														objPRT.msptEnable = true;
														objPRT.docEnable = false;
														objPRT.othEnable = false;
													} else if (objPRT.ItmCat === "D") {
														objPRT.title = "Document";
														objPRT.matEnable = false;
														objPRT.eqEnable = false;
														objPRT.msptEnable = false;
														objPRT.docEnable = true;
														objPRT.othEnable = false;
													} else if (objPRT.ItmCat === "O") {
														objPRT.title = "Others";
														objPRT.matEnable = false;
														objPRT.eqEnable = false;
														objPRT.msptEnable = false;
														objPRT.docEnable = false;
														objPRT.othEnable = true;
													}
													gtoperation.PRT.push(objPRT);
												}
											}
										}
										var aGtInsp = results.GTInsp.results;
										if (aGtInsp && aGtInsp.length > 0) {
											for (var c = 0; c < aGtInsp.length; c++) {
												if (gtlData.grp === aGtInsp[c].Tlgnhdr && gtoperation.Plnal === aGtInsp[c].Tplnal && gtoperation.Vornr === aGtInsp[c].Vornrgins) {
													var objInsp = {
														group: aGtInsp[c].Tlgnhdr,
														Plnal: aGtInsp[c].Tplnal,
														Vornr: aGtInsp[c].Vornrgins,

														InspChar: aGtInsp[c].Merknr,
														PrstInd: aGtInsp[c].Vste2gins,
														QuanChar: formatter.statusSel(aGtInsp[c].Quantitat),
														QualChar: formatter.statusSel(aGtInsp[c].QpmkRef),
														MastInspChar: aGtInsp[c].Verw2gins,
														Plant: aGtInsp[c].Uzae2tlgn,
														Version: aGtInsp[c].Ver2tlgni,
														ShrtTxt: aGtInsp[c].Kurztext,
														InspMthd: aGtInsp[c].Pmth2gins,
														InspMthdPlnt: aGtInsp[c].Qwe2tlgni,
														TolKey: aGtInsp[c].Toleranzs,
														VrsnInspMthd: aGtInsp[c].Pmtversio,
														SampProc: aGtInsp[c].Stichprve,
														SampUOM: aGtInsp[c].Probemgeh,
														BaseSampQty: aGtInsp[c].Pruefeinh.toString(),
														CodeGrp: aGtInsp[c].Auswmenge,
														InspEnable: false
													};
													gtoperation.InspChar.push(objInsp);
												}
											}
										}
										var aGtSpack = results.GTSpack.results;
										if (aGtSpack && aGtSpack.length > 0) {
											for (var c = 0; c < aGtSpack.length; c++) {
												if (gtlData.grp === aGtSpack[c].Tlgnhdr && gtoperation.Plnal === aGtSpack[c].Tplnal &&
													gtoperation.Vornr === aGtSpack[c].Vornrr) {
													var oSPO = {
														group: aGtSpack[c].Tlgnhdr,
														Plnal: aGtSpack[c].Tplnal,
														Vornr: aGtSpack[c].Vornrr,
														LineNum: aGtSpack[c].SrvLine,
														DelIndSP: formatter.statusSel(aGtSpack[c].Del),
														ActNum: aGtSpack[c].Srvpos,
														ShrtTxt: aGtSpack[c].Ktext1,
														Qty: aGtSpack[c].Mengegspk,
														BUomSP: aGtSpack[c].Meinsgspk,
														GrossPrc: aGtSpack[c].Tbtwr,
														CurKey: aGtSpack[c].Waersgspk,
														Work: aGtSpack[c].IntWork,
														UnitOfWork: aGtSpack[c].Iwein,
														SPEnabled: false,
														DelIndSPEnabled: false
													};
													gtoperation.SrvPckgOvrw.push(oSPO);
												}
											}
										}

										gtlData.operation.push(gtoperation);

										var maintPckgDefault = results.GTMpackRead.results;
										var currReadMpack = [];
										if (maintPckgDefault.length > 0) {
											for (var w in maintPckgDefault) {
												if (gtlData.grp === maintPckgDefault[w].Tlgnhdr && gtoperation.Plnal === maintPckgDefault[w].Tplnal) {
													currReadMpack.push(maintPckgDefault[w]);
												}
											}
										}

										var maintPckg = results.GTMPack.results;
										var currSelMpack = [];
										if (maintPckg && maintPckg.length > 0) {
											for (var x in maintPckg) {
												if (gtlData.grp === maintPckg[x].Tlgnhdr && gtoperation.Plnal === maintPckg[x].Tplnal &&
													gtoperation.Vornr === maintPckg[x].Vorn2gmpk) {
													currSelMpack.push(maintPckg[x]);
												}
											}
										}

										var oMaintPckg = {};
										if (currReadMpack.length > 0) {
											oMaintPckg = {
												Plnal: currReadMpack[0].Tplnal,
												Vornr: gtoperation.Vornr,
												Strat: currReadMpack[0].Startgmpk,
												SOp: "",
												Ltxa1: gtoperation.Ltxa1,
												flag: currReadMpack[0].Tplnal + "-" + gtoperation.Vornr,
												MPArr: [],
											};
											for (var f in currReadMpack) {
												var currReadObj = currReadMpack[f];
												oMaintPckg[currReadObj.Paketgmpk] = false;
											}
										}

										if (currSelMpack.length > 0) {
											for (var z in currSelMpack) {
												currSelMpack[z].Vornr = currSelMpack[z].Vorn2gmpk;
												currSelMpack[z].Strat = currSelMpack[z].Startgmpk;
												currSelMpack[z].Paket = currSelMpack[z].Paketgmpk;
												currSelMpack[z].MPEnable = false;

												var currSelObj = currSelMpack[z];
												// if (currSelMpack[z].IsSelected === 'X') {
												oMaintPckg[currSelObj.Paketgmpk] = true;
												// }
											}
											oMaintPckg.MPArr = currSelMpack;
										}
										gtlData.MaintPckg.push(oMaintPckg);
									}
								}
							}
							var component = results.GTComp.results;
							if (component.length > 0) {
								// gtlData.component = component;
								for (var c = 0; c < component.length; c++) {
									if (gtlData.grp === component[c].Tlgnhdr) {
										var gtcomponent = {};
										gtcomponent = component[c];
										gtcomponent.matDesc = component[c].Maktx;
										gtcomponent.slNo = c + 1;
										gtcomponent.Plnal = component[c].Tplnal;
										gtcomponent.Vornr = component[c].Vornr;
										gtcomponent.activity = component[c].Vornr;
										gtcomponent.flag = component[c].Tplnal + "-" + component[c].Vornr + "-" + gtcomponent.slNo;
										gtcomponent.hFlag = component[c].Tplnal + "-" + component[c].Vornr;
										gtcomponent.group = component[c].Tlgnhdr;
										gtcomponent.grp = component[c].Tlgnhdr;
										gtcomponent.groupCounter = component[c].Tplnal;
										gtcomponent.activity = component[c].Vorn2gcmp;
										gtcomponent.Idnrk = component[c].Idnrk;
										gtcomponent.component = component[c].Idnrk;
										gtcomponent.compDesc = component[c].Maktx;
										gtcomponent.Menge = component[c].Menge;
										gtcomponent.compQty = component[c].Menge;
										gtcomponent.MeinsGcp = component[c].MeinsGcp;
										gtcomponent.compUnit = component[c].MeinsGcp;
										gtcomponent.backFlush = component[c].RgekzGcp;
										//gtcomponent.resv = component[c].Disp;
										gtcomponent.resv = component[c].Disp === "" ? component[c].Disptxt : component[c].Disp;
										gtcomponent.resvDesc = component[c].Disptxt;
										gtcomponent.storageLoc = component[c].Lgortgcmp;
										gtcomponent.costElement = component[c].Saktogcmp;
										gtcomponent.bom = component[c].Stlnrgcmp;
										gtcomponent.bomCat = component[c].Stltygcmp;
										gtcomponent.bomCatDesc = component[c].Stltygcmptxt;
										gtcomponent.itCat = component[c].Postp;
										gtcomponent.assembly = component[c].Istru;
										gtcomponent.sortStr = component[c].Sortf;
										gtcomponent.itemNo = component[c].Posnr;
										gtcomponent.plantMaint = component[c].Sanin;
										gtcomponent.relSales = component[c].Rvrel;
										gtcomponent.relCost = component[c].Sanka;
										gtcomponent.pmAssembly = component[c].Stkkz;
										gtcomponent.spare = component[c].Erskz;
										gtcomponent.matProv = component[c].Beikz;
										gtcomponent.isPlant = component[c].Pswrk;
										gtcomponent.bulkMat = component[c].Schgt;
										gtcomponent.plant = component[c].Werksgcmp;
										gtcomponent.purchGrp = component[c].Ekgrp;
										gtcomponent.price = component[c].Preis;
										gtcomponent.currency = component[c].Waers;
										gtcomponent.prUnit = component[c].Peinh;
										gtcomponent.delTimeD = component[c].Lifzt;
										gtcomponent.matGrp = component[c].Matkl;
										gtcomponent.qtyFix = component[c].Fmeng;
										gtcomponent.altBom = component[c].Stlal;

										gtcomponent.cmpCompEnable = false;
										gtcomponent.cmpEnable = false;
										gtcomponent.cmpVisible = true;
										gtlData.component.push(gtcomponent);
									}
								}
								g.cmpData = component;
							}
							var classList = results.GTClass.results;
							if (classList) {
								if (classList.length > 0) {
									for (var i = 0; i < classList.length; i++) {
										if (gtlData.grp === classList[i].Tlgnhdr) {
											classList[i].ctEnable = false;
											classList[i].classEnable = false;
											classList[i].ClassTypeDesc = classList[i].Artxt;
											delete classList[i].Artxt;
											classList[i].ClassDesc = classList[i].Kltxt;
											delete classList[i].Kltxt;
											delete classList[i].Changerequestid;
											delete classList[i].Clint;
											delete classList[i].Service;
											classList[i].slNo = i + 1;
											classList[i].Plnal = classList[i].Tplnal;
											classList[i].flag = classList[i].Tplnal + "-" + classList[i].slNo;
											gtlData.Class.push(classList[i]);
										}
									}
									g.cData = classList;
									// gtlData.Class = classList;
									/*cModel = new sap.ui.model.json.JSONModel();
									cModel.setData(classList);
									g.class.setModel(cModel);*/
									// g.getView().byId("newClass").setEnabled(true); // check
								}
							}
							var charList = results.GTVal.results;
							if (charList) {
								if (charList.length > 0) {
									for (var j = 0; j < charList.length; j++) {
										if (gtlData.grp === charList[j].Tlgnhdr) {
											charList[j].cNameEnable = false;
											delete charList[j].Ataut;
											delete charList[j].Ataw1;
											delete charList[j].Atawe;
											delete charList[j].Atcod;
											delete charList[j].Atflb;
											delete charList[j].Atflv;
											delete charList[j].Atimb;
											delete charList[j].Atsrt;
											delete charList[j].Atvglart;
											delete charList[j].Atzis;
											delete charList[j].Changerequestid;
											// delete charList[j].CharName;
											delete charList[j].Charid;
											delete charList[j].Classtype;
											delete charList[j].Service;
											delete charList[j].Valcnt;
											charList[j].slNo = j + 1;
											charList[j].Plnal = charList[j].Tplnal;
											charList[j].flag = charList[j].Tplnal + "-" + charList[j].Class + "-" + charList[j].slNo;
											gtlData.Char.push(charList[j]);
										}
										g.chData = charList;
										/*_cModel = new sap.ui.model.json.JSONModel();
										_cModel.setData(charList);
										g.char.setModel(_cModel);*/
										// gtlData.Char = charList;
									}

									for (var z = 0; z < gtlData.Char.length; z++) {
										var count = 1;
										for (var y = 0; y < gtlData.Char.length; y++) {
											if (z === y) {
												continue;
											}
											if (gtlData.Char[y].Atnam === gtlData.Char[z].Atnam) {
												count++;
											}
										}
										if (count > 1) {
											gtlData.Char[z].charDltEnable = true;
										} else {
											gtlData.Char[z].charDltEnable = false;
										}
									}
								}
							}
							// g.getView().setModel(tlDetailModel, "tlDetailModel");
							AIWListGTLData.push(gtlData);
						}
					}
					sap.ui.getCore().getModel("AIWListGTLModel").setSizeLimit(AIWListGTLData.length);
					sap.ui.getCore().getModel("AIWListGTLModel").setData(AIWListGTLData);
					g.updateCount("generalTL", AIWListGTLData);

					var AIWListETLData = sap.ui.getCore().getModel("AIWListETLModel").getData();
					var basic = results.ETList.results; //ETHdr
					for (var etl = 0; etl < basic.length; etl++) {
						var etlData = {
							validFrm: formatter.getDateFormat(basic[etl].Datuv),
							grp: basic[etl].Tleqhdr,
							// vEquiLbl: true,
							// vEqui: true,
							// vEquiDesc: true,
							// vFlocLbl: false,
							// vFloc: false,
							// vFlocDesc: false,
							// flocEnb: false,
							// bAddComponent: true,
							enable: true,
							KDenable: true,
							equiEnb: false,
							header: [],
							operation: [],
							component: [],
							Class: [],
							Char: [],
							MaintPckg: [],
						};
						var header = results.ETList.results;
						if (header.length > 0) {
							for (var h = 0; h < header.length; h++) {
								if (etlData.grp === header[h].Tleqhdr) {
									var etheader = {};
									etheader.pPlantDesc = header[h].Iwerktxt;
									etheader.Grpenable = false;
									etheader.usageDesc = header[h].TlUsgTxt;
									etheader.plGrpDesc = header[h].Plnnrgrptxt;
									etheader.statusDesc = header[h].Statustxt;
									etheader.sysCondDesc = header[h].Anlzux;
									etheader.stratDesc = header[h].Strattxt;
									etheader.Plnal = header[h].Tplnal;
									etheader.Verwe = header[h].Tverwe;
									etheader.plEnable = false;
									etheader.Ktext = header[h].Ktext;
									etheader.valueStateT = "None";
									etheader.valueStatePP = "None";
									etheader.valueStateU = "None";
									etheader.valueStateS = "None";

									// etheader.groupCounter = header[h].Plnal;
									etheader.profile = header[h].Profident;
									// etheader.Ktext = header[h].Eqktx;
									etheader.keydate = header[h].Keydate;
									// etheader.Ktext = header[h].Werks2etl;
									etheader.wc = header[h].Tarbpl;
									etheader.plant = header[h].Wcplant;
									etheader.Iwerk = header[h].Werks;
									etheader.usage = header[h].Tverwe;
									etheader.plannerGrp = header[h].Vagrp;
									etheader.Statu = header[h].Statu;
									etheader.systemCond = header[h].Anlzu;
									etheader.groupVal = header[h].Tleqhdr;
									etheader.groupCounterDesc = header[h].Eqktx;
									etheader.wcDesc = header[h].Wcdescription;
									// etheader.assembly = header[h].Istru;
									etheader.equipment = header[h].Eq2tl;
									etheader.equipmentDesc = header[h].Eqktx;
									etheader.deletion = header[h].Delkz;
									etheader.TlUsgTxt = header[h].TlUsgTxt;
									etheader.Plnnrgrptxt = header[h].Plnnrgrptxt;
									etheader.Statustxt = header[h].Statustxt;
									etheader.Anlzux = header[h].Anlzux;
									// etheader.Istrux = header[h].Istrux;
									etheader.insPtDesc = header[h].Slwbeztxt;
									etheader.insPt = header[h].Slwbez;
									etheader.extNum = header[h].Extnumtxt;
									etheader.tlusg = header[h].Tverwe;
									etheader.grp = header[h].Tlgnhdr;
									etheader.assmbly = header[h].Istru;
									etheader.assmblyDesc = header[h].Istrux;
									etlData.Strat = header[h].Strat;
									etlData.equipment = header[h].Eq2tl; // Equipment of Group
									etlData.equipmentDesc = header[h].Eqktx; // Equipment description of Group
									etlData.vEquiLbl = true;
									etlData.vEqui = true;
									etlData.vEquiDesc = true;
									etlData.vFlocLbl = false;
									etlData.vFloc = false;
									etlData.vFlocDesc = false;
									etlData.bAddComponent = true;
									// etlData.modeflag = header[h].Type ? "Crt" : "Chg";
									etlData.header.push(etheader);
								}
							}
							/*var oModel = new sap.ui.model.json.JSONModel();
							oModel.setData(etlData.header);*/
						}
						var operation = results.ETOprs.results;
						if (operation.length > 0) {
							// etlData.operation = operation;
							for (var o = 0; o < operation.length; o++) {
								if (etlData.grp === operation[o].Tleqhdr) {
									var etOperation = {};
									etOperation = operation[o];
									etOperation.calcKeyDesc = "";
									etOperation.actTypDesc = "";
									etOperation.flag = operation[o].Tplnal + "-" + operation[o].Vornr;
									etOperation.Arbpl = operation[o].TlArbpl;
									etOperation.Plnal = operation[o].Tplnal;
									etOperation.Vornr = operation[o].Vornr;
									etOperation.opState = "None";
									etOperation.opDescState = "None";
									etOperation.wcState = "None";
									etOperation.plantState = "None";
									etOperation.ctrlKeyState = "None";

									etOperation.operation = operation[o].Evornr2op;
									etOperation.groupCounter = operation[o].Tplnal;
									etOperation.subOp = operation[o].Uvorn;
									etOperation.workCenter = operation[o].TlArbpl;
									etOperation.Werks = operation[o].Werks2eop;
									etOperation.plant = operation[o].Werks2eop;
									etOperation.controlKey = operation[o].Steus2eop;
									etOperation.Steus = operation[o].Steus2gop;
									etOperation.shortText = operation[o].Ltxa1;
									etOperation.work = operation[o].Arbei;
									etOperation.unitForWork = operation[o].Arbeh;
									etOperation.number = operation[o].Anzzl;
									etOperation.calcKey = operation[o].Indet;
									etOperation.normDuration = operation[o].Dauno;
									etOperation.uomDuration = operation[o].Daune;
									etOperation.workPerc = operation[o].Prznt.toString();
									etOperation.exeFactor = operation[o].Aufkt;
									etOperation.actType = operation[o].Larnt2eop;
									etOperation.stdTextKey = operation[o].Ktsch;
									etOperation.assembly = operation[o].Tistru;
									etOperation.noOfTime = operation[o].Loanz;
									etOperation.sutability = operation[o].Qualf2eop;
									etOperation.wageGroup = operation[o].Logrp2eop;
									etOperation.wageType = operation[o].Loart;
									etOperation.sysCondition = operation[o].Tanlzu;
									etOperation.orderQty = operation[o].Bmvrg;
									etOperation.ordQtyUnit = operation[o].Bmeih;
									etOperation.netPrice = operation[o].Opreis;
									etOperation.currency = operation[o].Owaers;
									etOperation.priceUnit = operation[o].Opeinh;
									etOperation.planDelTime = operation[o].Plifz;
									etOperation.costElement = operation[o].Sakto2eop;
									etOperation.materialGrp = operation[o].Omatkl;
									etOperation.puchGroup = operation[o].Oekgrp;
									etOperation.vendor = operation[o].Lifnr;
									etOperation.purchOrg = operation[o].Ekorg;
									etOperation.shortTerm = operation[o].Sortl;
									etOperation.purchInfo = operation[o].Infnr;
									etOperation.fieldKey = operation[o].Slwid;
									etOperation.purchDoc = operation[o].Ebeln;
									etOperation.purchDocItem = operation[o].Ebelp2eop;
									etOperation.userFld = operation[o].Slwid;
									etOperation.capCat = operation[o].Qlkapar;
									etOperation.capCatDesc = operation[o].Kapartxt;
									etOperation.quantity1_ = operation[o].Use04;
									etOperation.quantity1 = operation[o].Usr04;
									etOperation.quantity2 = operation[o].Usr05;
									etOperation.quantity2_ = operation[o].Use05;
									etOperation.value3 = operation[o].Usr06;
									etOperation.value4 = operation[o].Usr07;
									etOperation.value3_ = operation[o].Use06;
									etOperation.value4_ = operation[o].Use07;
									etOperation.text1 = operation[o].Usr00;
									etOperation.text2 = operation[o].Usr01;
									etOperation.text3 = operation[o].Usr03;
									etOperation.text4 = operation[o].Usr04;
									etOperation.date1 = operation[o].Usr08;
									etOperation.date2 = operation[o].Usr09;
									etOperation.indicator1 = operation[o].Usr10;
									etOperation.indicator2 = operation[o].Usr11;
									etOperation.Usrtxtname1 = operation[o].Usrtxtname1;
									etOperation.Usrtxtflg1 = operation[o].Usrtxtflg1;
									etOperation.Usrtxtname2 = operation[o].Usrtxtname2;
									etOperation.Usrtxtflg2 = operation[o].Usrtxtflg2;
									etOperation.Usrtxtname3 = operation[o].Usrtxtname3;
									etOperation.Usrtxtflg3 = operation[o].Usrtxtflg3;
									etOperation.Usrtxtname4 = operation[o].Usrtxtname4;
									etOperation.Usrtxtflg4 = operation[o].Usrtxtflg4;
									etOperation.Usrqtyname1 = operation[o].Usrqtyname1;
									etOperation.Usrqtyflg1 = operation[o].Usrqtyflg1;
									etOperation.Usrqtyname2 = operation[o].Usrqtyname2;
									etOperation.Usrqtyflg2 = operation[o].Usrqtyflg2;
									etOperation.Usrvalname1 = operation[o].Usrvalname1;
									etOperation.Usrvalflg1 = operation[o].Usrvalflg1;
									etOperation.Usrvalname2 = operation[o].Usrvalname2;
									etOperation.Usrvalflg2 = operation[o].Usrvalflg2;
									etOperation.Usrdatename1 = operation[o].Usrdatename1;
									etOperation.Usrdatflg1 = operation[o].Usrdatflg1;
									etOperation.Usrdatename2 = operation[o].Usrdatename2;
									etOperation.Usrdatflg2 = operation[o].Usrdatflg2;
									etOperation.Usrindname1 = operation[o].Usrindname1;
									etOperation.Usrindflag1 = operation[o].Usrindflag1;
									etOperation.Usrindname2 = operation[o].Usrindname2;
									etOperation.Usrindflag2 = operation[o].Usrindflag2;
									etOperation.qual = operation[o].Qlotype;
									etOperation.search = operation[o].Qsearchtm;
									etOperation.VornrEnable = false;
									etOperation.UvornEnable = false;
									etOperation.equi = operation[o].EqunrEop
									etOperation.floc = operation[o].TplnrEop
									etOperation.PRT = [];
									etOperation.OprRel = [];
									etOperation.SrvPckgOvrw = [];
									etOperation.InspChar = [];

									var aEtOpRel = results.ETRel.results;
									if (aEtOpRel && aEtOpRel.length > 0) {
										for (var c = 0; c < aEtOpRel.length; c++) {
											if (etlData.grp === aEtOpRel[c].Tleqhdr && etOperation.Plnal === aEtOpRel[c].Tplnal && etOperation.Vornr ===
												aEtOpRel[c].Vorn2) {
												var objOprRel = {
													Plnal: aEtOpRel[c].Tplnal,
													Vornr: aEtOpRel[c].Vorn2,
													OperationOR: aEtOpRel[c].Vornrerel,
													Offset: aEtOpRel[c].Dauer,
													OUn: aEtOpRel[c].Zeinh,
													RelType: aEtOpRel[c].Aobar,
													PO: aEtOpRel[c].Eprznt,
													OI: aEtOpRel[c].Provg,
													ID: aEtOpRel[c].Ekalid,
													WrkCtrOR: aEtOpRel[c].Arbplerel,
													PlantOR: aEtOpRel[c].Werkserel,
												}
												etOperation.OprRel.push(objOprRel);
											}
										}
									}
									var aEtInsp = results.ETInsp.results;
									if (aEtInsp && aEtInsp.length > 0) {
										for (var c = 0; c < aEtInsp.length; c++) {
											if (etlData.grp === aEtInsp[c].Tleqhdr && etOperation.Plnal === aEtInsp[c].Tplnal && etOperation.Vornr === aEtInsp[c].Vornreins) {
												var objInsp = {
													group: aEtInsp[c].Tlgnhdr,
													Plnal: aEtInsp[c].Tplnal,
													Vornr: aEtInsp[c].Vornreins,
													InspChar: aEtInsp[c].Merknr,
													PrstInd: aEtInsp[c].Vste2eins,
													QuanChar: formatter.statusSel(aEtInsp[c].Quantitat),
													QualChar: formatter.statusSel(aEtInsp[c].QpmkRef),
													MastInspChar: aEtInsp[c].Verw2eins,
													Plant: aEtInsp[c].Uzae2tlen,
													Version: aEtInsp[c].Ver2tleqi,
													ShrtTxt: aEtInsp[c].Kurztext,
													InspMthd: aEtInsp[c].Pmth2eins,
													InspMthdPlnt: aEtInsp[c].Qwe2tleqi,
													TolKey: aEtInsp[c].Toleranzs,
													VrsnInspMthd: aEtInsp[c].Pmtversio,
													SampProc: aEtInsp[c].Stichprve,
													SampUOM: aEtInsp[c].Probemgeh,
													BaseSampQty: aEtInsp[c].Pruefeinh.toString(),
													CodeGrp: aEtInsp[c].Auswmenge,
													InspEnable: false
												};
												etOperation.InspChar.push(objInsp);
											}
										}
									}
									var aEtSpack = results.ETSpack.results;
									if (aEtSpack && aEtSpack.length > 0) {
										for (var c = 0; c < aEtSpack.length; c++) {
											if (etlData.grp === aEtSpack[c].Tleqhdr && etOperation.Plnal === aEtSpack[c].Tplnal &&
												etOperation.Vornr === aEtSpack[c].Vornrr) {
												var oSPO = {
													group: aEtSpack[c].Tleqhdr,
													Plnal: aEtSpack[c].Tplnal,
													Vornr: aEtSpack[c].Vornrr,
													LineNum: aEtSpack[c].SrvLine,
													DelIndSP: formatter.statusSel(aEtSpack[c].Del),
													ActNum: aEtSpack[c].Srvpos,
													ShrtTxt: aEtSpack[c].Ktext1,
													Qty: aEtSpack[c].Mengeespk,
													BUomSP: aEtSpack[c].Meinsespk,
													GrossPrc: aEtSpack[c].Tbtwr,
													CurKey: aEtSpack[c].Waersespk,
													Work: aEtSpack[c].IntWork,
													UnitOfWork: aEtSpack[c].Iwein,
													DelIndSPEnabled: false,
													SPEnabled: false,
												};
												etOperation.SrvPckgOvrw.push(oSPO);
											}
										}
									}
									var aEtPrt = results.ETPRT.results;
									if (aEtPrt && aEtPrt.length > 0) {
										for (var c = 0; c < aEtPrt.length; c++) {
											if (etlData.grp === aEtPrt[c].Tleqhdr && etOperation.Plnal === aEtPrt[c].Tplnal && etOperation.Vornr === aEtPrt[c].Vornreprt) {
												var objPRT = {
													grp: aEtPrt[c].Tleqhdr,
													Plnal: aEtPrt[c].Tplnal,
													Vornr: aEtPrt[c].Vornreprt,

													ItmNum: aEtPrt[c].Psnfh,
													ItmCat: aEtPrt[c].Fhmar,
													PRT: aEtPrt[c].Fhmnr,
													// PRTDesc: aEtPrt[c].Fhwrk,
													Qty: aEtPrt[c].Mgvgw,
													UOM: aEtPrt[c].Mgeinh,
													QtyFrmla: aEtPrt[c].Mgform,
													PRTCtrl: aEtPrt[c].Steuf,
													PRTCtrlDesc: aEtPrt[c].Stftxt,
													StdUsgVal: aEtPrt[c].Ewvgw,
													StdUsgUOM: aEtPrt[c].Eweinh,
													UsgValFrmla: aEtPrt[c].Ewform,
													Plant: aEtPrt[c].Fhwrk,
													docType: aEtPrt[c].Dokareprt,
													docTypeDesc: "",
													docPart: aEtPrt[c].Doktleprt,
													docVersion: aEtPrt[c].Dokvreprt,
													prtEnable: false,
												}

												if (objPRT.ItmCat === "M") {
													objPRT.title = "Material";
													objPRT.matEnable = true;
													objPRT.eqEnable = false;
													objPRT.msptEnable = false;
													objPRT.docEnable = false;
													objPRT.othEnable = false;
												} else if (objPRT.ItmCat === "E") {
													objPRT.title = "Equipment";
													objPRT.matEnable = false;
													objPRT.eqEnable = true;
													objPRT.msptEnable = false;
													objPRT.docEnable = false;
													objPRT.othEnable = false;
												} else if (objPRT.ItmCat === "P") {
													objPRT.title = "Measuring Point";
													objPRT.matEnable = false;
													objPRT.eqEnable = false;
													objPRT.msptEnable = true;
													objPRT.docEnable = false;
													objPRT.othEnable = false;
												} else if (objPRT.ItmCat === "D") {
													objPRT.title = "Document";
													objPRT.matEnable = false;
													objPRT.eqEnable = false;
													objPRT.msptEnable = false;
													objPRT.docEnable = true;
													objPRT.othEnable = false;
												} else if (objPRT.ItmCat === "O") {
													objPRT.title = "Others";
													objPRT.matEnable = false;
													objPRT.eqEnable = false;
													objPRT.msptEnable = false;
													objPRT.docEnable = false;
													objPRT.othEnable = true;
												}
												etOperation.PRT.push(objPRT);
											}
										}
									}

									etlData.operation.push(etOperation);

									var maintPckgDefault = results.ETMpackRead.results;
									var currReadMpack = [];
									if (maintPckgDefault.length > 0) {
										for (var w in maintPckgDefault) {
											if (etlData.grp === maintPckgDefault[w].Tleqhdr && etOperation.Plnal === maintPckgDefault[w].Tplnal) {
												currReadMpack.push(maintPckgDefault[w]);
											}
										}
									}

									var maintPckg = results.ETMPack.results;
									var currSelMpack = [];
									if (maintPckg.length > 0) {
										for (var x in maintPckg) {
											if (etlData.grp === maintPckg[x].Tleqhdr && etOperation.Plnal === maintPckg[x].Tplnal &&
												etOperation.Vornr === maintPckg[x].Vorn2empk) {
												currSelMpack.push(maintPckg[x]);
											}
										}
									}

									var oMaintPckg = {};
									if (currReadMpack.length > 0) {
										oMaintPckg = {
											Plnal: currReadMpack[0].Tplnal,
											Vornr: etOperationVornr,
											Strat: currReadMpack[0].Startempk,
											SOp: "",
											Ltxa1: etOperation.Ltxa1,
											flag: currReadMpack[0].Tplnal + "-" + etOperation.Vornr,
											MPArr: [],
										};
										for (var f in currReadMpack) {
											var currReadObj = currReadMpack[f];
											oMaintPckg[currReadObj.Paketempk] = false;
										}
									}

									if (currSelMpack.length > 0) {
										for (var z in currSelMpack) {
											currSelMpack[z].Vornr = currSelMpack[z].Vorn2empk;
											currSelMpack[z].Strat = currSelMpack[z].Startempk;
											currSelMpack[z].Paket = currSelMpack[z].Paketempk;
											currSelMpack[z].MPEnable = false;

											var currSelObj = currSelMpack[z];
											if (currSelMpack[z].IsSelected === 'X') {
												oMaintPckg[currSelObj.Paketempk] = true;
											}
										}
										oMaintPckg.MPArr = currSelMpack;
									}
									etlData.MaintPckg.push(oMaintPckg);

								}
							}
							g.oData = etlData.operation;
						}
						component = results.ETComp.results;
						if (component.length > 0) {
							// etlData.component = component;
							for (var e = 0; e < component.length; e++) {
								if (etlData.grp === component[e].Tleqhdr) {
									var etComponent = {};
									etComponent = component[e];
									etComponent.matDesc = component[e].Maktx;
									etComponent.slNo = e + 1;
									etComponent.flag = component[e].Tplnal + "-" + component[e].Vornr + "-" + component[e].slNo;
									etComponent.hFlag = component[e].Tplnal + "-" + component[e].Vornr;
									etComponent.Vornr = component[e].Vornr;
									etComponent.activity = component[e].Vornr;
									etComponent.group = component[e].Tleqhdr;
									etComponent.grp = component[e].Tleqhdr;
									etComponent.groupCounter = component[e].Tplnal;
									//etComponent.activity = component[e].Vorn2ecmp;
									etComponent.component = component[e].Idnrk;
									etComponent.compDesc = component[e].Maktx;
									etComponent.compQty = component[e].Menge;
									etComponent.compUnit = component[e].MeinsEcp;
									etComponent.backFlush = component[e].RgekzEcp;
									//etComponent.resv = component[e].Disp;
									etComponent.resv = component[e].Disp === "" ? component[e].Disptxt : component[e].Disp;
									etComponent.resvDesc = component[e].Disptxt;
									etComponent.storageLoc = component[e].Lgortecmp;
									etComponent.costElement = component[e].Saktoecmp;
									etComponent.bom = component[e].Stlnrecmp;
									etComponent.bomCat = component[e].Stltyecmp;
									etComponent.bomCatDesc = component[e].Stltyecmptxt;
									etComponent.itCat = component[e].Postp;
									etComponent.assembly = component[e].Istru;
									etComponent.sortStr = component[e].Sortf;
									etComponent.itemNo = component[e].Posnr;
									etComponent.plantMaint = component[e].Sanin;
									etComponent.relSales = component[e].Rvrel;
									etComponent.relCost = component[e].Sanka;
									etComponent.pmAssembly = component[e].Stkkz;
									etComponent.spare = component[e].Erskz;
									etComponent.matProv = component[e].Beikz;
									etComponent.isPlant = component[e].Pswrk;
									etComponent.bulkMat = component[e].Schgt;
									etComponent.plant = component[e].Werksecmp;
									etComponent.purchGrp = component[e].Ekgrp;
									etComponent.price = component[e].Preis;
									etComponent.currency = component[e].Waers;
									etComponent.prUnit = component[e].Peinh;
									etComponent.delTimeD = component[e].Lifzt;
									etComponent.matGrp = component[e].Matkl;
									etComponent.qtyFix = component[e].Fmeng;
									etComponent.altBom = component[e].Stlal;
									etComponent.cmpCompEnable = false;
									etComponent.cmpEnable = false;
									etComponent.cmpVisible = true;
									etlData.component.push(etComponent);

								}
							}
							g.cmpData = component;
						}
						var classList = results.ETClass.results;
						if (classList) {
							if (classList.length > 0) {
								for (var i = 0; i < classList.length; i++) {
									if (etlData.grp === classList[i].Tleqhdr) {
										classList[i].ctEnable = false;
										classList[i].classEnable = false;
										classList[i].ClassTypeDesc = classList[i].Artxt;
										delete classList[i].Artxt;
										classList[i].ClassDesc = classList[i].Kltxt;
										delete classList[i].Kltxt;
										delete classList[i].Changerequestid;
										delete classList[i].Clint;
										delete classList[i].Service;
										classList[i].slNo = i + 1;
										classList[i].Plnal = classList[i].Tplnal;
										classList[i].flag = classList[i].Tplnal + "-" + classList[i].slNo;
										etlData.Class.push(classList[i]);

									}
								}
								g.cData = classList;
								/*cModel = new sap.ui.model.json.JSONModel();
								cModel.setData(classList);
								g.class.setModel(cModel);*/
								// etlData.Class = classList;
							}
						}
						var charList = results.ETVal.results;
						if (charList) {
							if (charList.length > 0) {
								for (var j = 0; j < charList.length; j++) {
									if (etlData.grp === charList[j].Tleqhdr) {
										charList[j].cNameEnable = false;
										delete charList[j].Ataut;
										delete charList[j].Ataw1;
										delete charList[j].Atawe;
										delete charList[j].Atcod;
										delete charList[j].Atflb;
										delete charList[j].Atflv;
										delete charList[j].Atimb;
										delete charList[j].Atsrt;
										delete charList[j].Atvglart;
										delete charList[j].Atzis;
										delete charList[j].Changerequestid;
										// delete charList[j].CharName;
										delete charList[j].Charid;
										delete charList[j].Classtype;
										delete charList[j].Service;
										delete charList[j].Valcnt;
										charList[j].slNo = j + 1;
										charList[j].Plnal = charList[j].Tplnal;
										charList[j].flag = charList[j].Tplnal + "-" + charList[j].Class + "-" + charList[j].slNo;
										etlData.Char.push(charList[j]);

									}
									g.chData = charList;
									/*_cModel = new sap.ui.model.json.JSONModel();
									_cModel.setData(charList);
									g.char.setModel(_cModel);*/
									// etlData.Char = charList;
								}

								for (var z = 0; z < etlData.Char.length; z++) {
									var count = 1;
									for (var y = 0; y < etlData.Char.length; y++) {
										if (z === y) {
											continue;
										}
										if (etlData.Char[y].Atnam === etlData.Char[z].Atnam) {
											count++;
										}
									}
									if (count > 1) {
										etlData.Char[z].charDltEnable = true;
									} else {
										etlData.Char[z].charDltEnable = false;
									}
								}
							}
						}
						AIWListETLData.push(etlData);
					}
					sap.ui.getCore().getModel("AIWListETLModel").setSizeLimit(AIWListETLData.length);
					sap.ui.getCore().getModel("AIWListETLModel").setData(AIWListETLData);
					g.updateCount("equiTL", AIWListETLData);

					var AIWListFTLData = sap.ui.getCore().getModel("AIWListFTLModel").getData();
					var basic = results.FTList.results; //FTHdr
					for (var ftl = 0; ftl < basic.length; ftl++) {
						var ftlData = {
							validFrm: formatter.getDateFormat(basic[ftl].Datuv),
							grp: basic[ftl].Tlflhdr,
							vEquiLbl: false,
							vEqui: false,
							vEquiDesc: false,
							/*floc: basic.Fl2tl,
							flocDesc: basic.Ftxt2tlR,*/
							// vFlocLbl: true,
							// vFloc: true,
							// vFlocDesc: true,
							// flocEnb: false,
							// equiEnb: false,
							// bAddComponent: true,
							enable: true,
							KDenable: true,
							header: [],
							operation: [],
							component: [],
							Class: [],
							Char: [],
							MaintPckg: [],
						};
						var header = results.FTList.results;
						if (header.length > 0) {
							for (var h = 0; h < header.length; h++) {
								if (ftlData.grp === header[h].Tlflhdr) {
									var ftHeader = {};
									ftHeader.Grpenable = false;
									ftHeader.pPlantDesc = header[h].Iwerktxt;
									ftHeader.usageDesc = header[h].TlUsgTxt;
									ftHeader.plGrpDesc = header[h].Plnnrgrptxt;
									ftHeader.statusDesc = header[h].Statustxt;
									ftHeader.sysCondDesc = header[h].Anlzux;
									ftHeader.stratDesc = header[h].Strattxt;
									ftHeader.Plnal = header[h].Tplnal;
									ftHeader.Verwe = header[h].Tverwe;
									ftHeader.plEnable = false;
									ftHeader.Ktext = header[h].Ktext;
									ftHeader.valueStateT = "None";
									ftHeader.valueStatePP = "None";
									ftHeader.valueStateU = "None";
									ftHeader.valueStateS = "None";

									// ftHeader.groupCounter = header[h].Plnal;
									// ftHeader.Ktext = header[h].Pltxt;
									ftHeader.profile = header[h].Profident;
									ftHeader.keydate = header[h].Keydate;
									// ftHeader.Ktext = header[h].Werks2ftl;
									ftHeader.wc = header[h].Tarbpl;
									ftHeader.Iwerk = header[h].Werks;
									ftHeader.plant = header[h].Wcplant;
									ftHeader.tlusg = header[h].Tverwe;
									ftHeader.plannerGrp = header[h].Vagrp;
									ftHeader.Statu = header[h].Statu;
									ftHeader.systemCond = header[h].Anlzu;
									ftHeader.groupVal = header[h].Tlflhdr;
									ftHeader.groupCounterDesc = header[h].Pltxt;
									ftHeader.wcDesc = header[h].Wcdescription;
									ftHeader.assembly = header[h].Istru;
									ftHeader.floc = header[h].Fl2tl;
									ftHeader.flocDesc = header[h].Pltxt;
									ftHeader.deletion = header[h].Delkz;
									ftHeader.TlUsgTxt = header[h].TlUsgTxt;
									ftHeader.Plnnrgrptxt = header[h].Plnnrgrptxt;
									ftHeader.Statustxt = header[h].Statustxt;
									ftHeader.Anlzux = header[h].Anlzux;
									// ftHeader.Istrux = header[h].Istrux;
									ftHeader.insPtDesc = header[h].Slwbeztxt;
									ftHeader.insPt = header[h].Slwbez;
									ftHeader.extNum = header[h].Extnumtxt;
									ftHeader.grp = header[h].Tlgnhdr;
									ftHeader.assmbly = header[h].Istru;
									ftHeader.assmblyDesc = header[h].Istrux;
									ftlData.Strat = header[h].Strat;
									ftlData.floc = header[h].Fl2tl; // FLOC of Group
									ftlData.flocDesc = header[h].Pltxt; // FLOC description of Group
									ftlData.vEquiLbl = false;
									ftlData.vEqui = false;
									ftlData.vEquiDesc = false;
									ftlData.vFlocLbl = true;
									ftlData.vFloc = true;
									ftlData.vFlocDesc = true;
									ftlData.bAddComponent = true;
									// ftlData.modeflag = header[h].Type ? "Crt" : "Chg";
									ftlData.header.push(ftHeader);
								}
							}
							/*var oModel = new sap.ui.model.json.JSONModel();
							oModel.setData(ftlData.header);*/
							/*g.getView().byId("taskListHeaderOverview").setModel(oModel, "tlDetailModel");
							g.getModel("tlDetailModel").setProperty("/header", header);*/
						}
						var operation = results.FTOprs.results;
						if (operation.length > 0) {
							// ftlData.operation = operation;
							for (var o = 0; o < operation.length; o++) {
								if (ftlData.grp === operation[o].Tlflhdr) {
									var ftOperation = {};
									ftOperation = operation[o];
									ftOperation.calcKeyDesc = "";
									ftOperation.actTypDesc = "";
									ftOperation.flag = operation[o].Tplnal + "-" + operation[o].Vornr;
									ftOperation.Arbpl = operation[o].TlArbpl;
									ftOperation.Plnal = operation[o].Tplnal;
									ftOperation.Vornr = operation[o].Vornr;
									ftOperation.opState = "None";
									ftOperation.opDescState = "None";
									ftOperation.wcState = "None";
									ftOperation.plantState = "None";
									ftOperation.ctrlKeyState = "None";

									ftOperation.groupCounter = operation[o].Tplnal;
									ftOperation.operation = operation[o].Fvornr2op;
									ftOperation.subOp = operation[o].Uvorn;
									ftOperation.workCenter = operation[o].TlArbpl;
									ftOperation.plant = operation[o].Werks2fop;
									ftOperation.controlKey = operation[o].Steus2fop;
									ftOperation.Steus = operation[o].Steus2gop;
									ftOperation.shortText = operation[o].Ltxa1;
									ftOperation.work = operation[o].Arbei;
									ftOperation.unitForWork = operation[o].Arbeh;
									ftOperation.number = operation[o].Anzzl;
									ftOperation.calcKey = operation[o].Indet;
									ftOperation.Werks = operation[o].Werks2fop;
									ftOperation.normDuration = operation[o].Dauno;
									ftOperation.uomDuration = operation[o].Daune;
									ftOperation.workPerc = operation[o].Prznt.toString();
									ftOperation.exeFactor = operation[o].Aufkt;
									ftOperation.actType = operation[o].Larnt2fop;
									ftOperation.stdTextKey = operation[o].Ktsch;
									ftOperation.assembly = operation[o].Tistru;
									ftOperation.noOfTime = operation[o].Loanz;
									ftOperation.sutability = operation[o].Qualf2fop;
									ftOperation.wageGroup = operation[o].Logrp2fop;
									ftOperation.wageType = operation[o].Loart;
									ftOperation.sysCondition = operation[o].Tanlzu;
									ftOperation.orderQty = operation[o].Bmvrg;
									ftOperation.ordQtyUnit = operation[o].Bmeih;
									ftOperation.netPrice = operation[o].Opreis;
									ftOperation.currency = operation[o].Owaers;
									ftOperation.priceUnit = operation[o].Opeinh;
									ftOperation.planDelTime = operation[o].Plifz;
									ftOperation.costElement = operation[o].Sakto2fop;
									ftOperation.materialGrp = operation[o].Omatkl;
									ftOperation.puchGroup = operation[o].Oekgrp;
									ftOperation.vendor = operation[o].Lifnr;
									ftOperation.purchOrg = operation[o].Ekorg;
									ftOperation.shortTerm = operation[o].Sortl;
									ftOperation.purchInfo = operation[o].Infnr;
									ftOperation.fieldKey = operation[o].Slwid;
									ftOperation.purchDoc = operation[o].Ebeln;
									ftOperation.purchDocItem = operation[o].Ebelp2fop;
									ftOperation.userFld = operation[o].Slwid;
									ftOperation.capCat = operation[o].Qlkapar;
									ftOperation.capCatDesc = operation[o].Kapartxt;
									ftOperation.quantity1_ = operation[o].Use04;
									ftOperation.quantity1 = operation[o].Usr04;
									ftOperation.quantity2 = operation[o].Usr05;
									ftOperation.quantity2_ = operation[o].Use05;
									ftOperation.value3 = operation[o].Usr06;
									ftOperation.value4 = operation[o].Usr07;
									ftOperation.value3_ = operation[o].Use06;
									ftOperation.value4_ = operation[o].Use07;
									ftOperation.text1 = operation[o].Usr00;
									ftOperation.text2 = operation[o].Usr01;
									ftOperation.text3 = operation[o].Usr03;
									ftOperation.text4 = operation[o].Usr04;
									ftOperation.date1 = operation[o].Usr08;
									ftOperation.date2 = operation[o].Usr09;
									ftOperation.indicator1 = operation[o].Usr10;
									ftOperation.indicator2 = operation[o].Usr11;
									ftOperation.Usrtxtname1 = operation[o].Usrtxtname1;
									ftOperation.Usrtxtflg1 = operation[o].Usrtxtflg1;
									ftOperation.Usrtxtname2 = operation[o].Usrtxtname2;
									ftOperation.Usrtxtflg2 = operation[o].Usrtxtflg2;
									ftOperation.Usrtxtname3 = operation[o].Usrtxtname3;
									ftOperation.Usrtxtflg3 = operation[o].Usrtxtflg3;
									ftOperation.Usrtxtname4 = operation[o].Usrtxtname4;
									ftOperation.Usrtxtflg4 = operation[o].Usrtxtflg4;
									ftOperation.Usrqtyname1 = operation[o].Usrqtyname1;
									ftOperation.Usrqtyflg1 = operation[o].Usrqtyflg1;
									ftOperation.Usrqtyname2 = operation[o].Usrqtyname2;
									ftOperation.Usrqtyflg2 = operation[o].Usrqtyflg2;
									ftOperation.Usrvalname1 = operation[o].Usrvalname1;
									ftOperation.Usrvalflg1 = operation[o].Usrvalflg1;
									ftOperation.Usrvalname2 = operation[o].Usrvalname2;
									ftOperation.Usrvalflg2 = operation[o].Usrvalflg2;
									ftOperation.Usrdatename1 = operation[o].Usrdatename1;
									ftOperation.Usrdatflg1 = operation[o].Usrdatflg1;
									ftOperation.Usrdatename2 = operation[o].Usrdatename2;
									ftOperation.Usrdatflg2 = operation[o].Usrdatflg2;
									ftOperation.Usrindname1 = operation[o].Usrindname1;
									ftOperation.Usrindflag1 = operation[o].Usrindflag1;
									ftOperation.Usrindname2 = operation[o].Usrindname2;
									ftOperation.Usrindflag2 = operation[o].Usrindflag2;
									ftOperation.qual = operation[o].Qlotype;
									ftOperation.search = operation[o].Qsearchtm;
									ftOperation.VornrEnable = false;
									ftOperation.UvornEnable = false;
									ftOperation.equi = operation[o].EqunrFop
									ftOperation.floc = operation[o].TplnrFop
									ftOperation.PRT = [];
									ftOperation.OprRel = [];
									ftOperation.SrvPckgOvrw = [];
									ftOperation.InspChar = [];

									var aFtRel = results.FTRel.results;
									if (aFtRel && aFtRel.length > 0) {
										for (var c = 0; c < aFtRel.length; c++) {
											if (ftlData.grp === aFtRel[c].Tlflhdr && ftOperation.Plnal === aFtRel[c].Tplnal && ftOperation.Vornr ===
												aFtRel[c].Vorn2) {
												var objOprRel = {
													Plnal: aFtRel[c].Tplnal,
													Vornr: aFtRel[c].Vorn2,
													OperationOR: aFtRel[c].Vornrfrel,
													Offset: aFtRel[c].Dauer,
													OUn: aFtRel[c].Zeinh,
													RelType: aFtRel[c].Aobar,
													PO: aFtRel[c].Fprznt,
													OI: aFtRel[c].Provg,
													ID: aFtRel[c].Fkalid,
													WrkCtrOR: aFtRel[c].Arbplfrel,
													PlantOR: aFtRel[c].Werksfrel,
												}
												ftOperation.OprRel.push(objOprRel);
											}
										}
									}
									var aFtInsp = results.FTInsp.results;
									if (aFtInsp && aFtInsp.length > 0) {
										for (var c = 0; c < aFtInsp.length; c++) {
											if (ftlData.grp === aFtInsp[c].Tlflhdr && ftOperation.Plnal === aFtInsp[c].Tplnal && ftOperation.Vornr === aFtInsp[c].Vornrfins) {
												var objInsp = {
													group: aFtInsp[c].Tlflhdr,
													Plnal: aFtInsp[c].Tplnal,
													Vornr: aFtInsp[c].Vornrfins,
													InspChar: aFtInsp[c].Merknr,
													PrstInd: aFtInsp[c].Vste2fins,
													QuanChar: formatter.statusSel(aFtInsp[c].Quantitat),
													QualChar: formatter.statusSel(aFtInsp[c].QpmkRef),
													MastInspChar: aFtInsp[c].Verw2fins,
													Plant: aFtInsp[c].Uzae2tlfn,
													Version: aFtInsp[c].Ver2tlfli,
													ShrtTxt: aFtInsp[c].Kurztext,
													InspMthd: aFtInsp[c].Pmth2fins,
													InspMthdPlnt: aFtInsp[c].Qwe2tlfli,
													TolKey: aFtInsp[c].Toleranzs,
													VrsnInspMthd: aFtInsp[c].Pmtversio,
													SampProc: aFtInsp[c].Stichprve,
													SampUOM: aFtInsp[c].Probemgeh,
													BaseSampQty: aFtInsp[c].Pruefeinh.toString(),
													CodeGrp: aFtInsp[c].Auswmenge,
													InspEnable: false
												};
												ftOperation.InspChar.push(objInsp);
											}
										}
									}
									var aFtSpack = results.FTSpack.results;
									if (aFtSpack && aFtSpack.length > 0) {
										for (var c = 0; c < aFtSpack.length; c++) {
											if (ftlData.grp === aFtSpack[c].Tlflhdr && ftOperation.Plnal === aFtSpack[c].Tplnal &&
												ftOperation.Vornr === aFtSpack[c].Vornrr) {
												var oSPO = {
													group: aFtSpack[c].Tlflhdr,
													Plnal: aFtSpack[c].Tplnal,
													Vornr: aFtSpack[c].Vornrr,
													LineNum: aFtSpack[c].SrvLine,
													DelIndSP: formatter.statusSel(aFtSpack[c].Del),
													ActNum: aFtSpack[c].Srvpos,
													ShrtTxt: aFtSpack[c].Ktext1,
													Qty: aFtSpack[c].Mengefspk,
													BUomSP: aFtSpack[c].Meinsfspk,
													GrossPrc: aFtSpack[c].Tbtwr,
													CurKey: aFtSpack[c].Waersfspk,
													Work: aFtSpack[c].IntWork,
													UnitOfWork: aFtSpack[c].Iwein,
													DelIndSPEnabled: false,
													SPEnabled: false
												};
												ftOperation.SrvPckgOvrw.push(oSPO);
											}
										}
									}
									var aFtPrt = results.FTPRT.results;
									if (aFtPrt && aFtPrt.length > 0) {
										for (var c = 0; c < aFtPrt.length; c++) {
											if (ftlData.grp === aFtPrt[c].Tlflhdr && ftOperation.Plnal === aFtPrt[c].Tplnal && ftOperation.Vornr === aFtPrt[c].Vornrfprt) {
												var objPRT = {
													grp: aFtPrt[c].Tlflhdr,
													Plnal: aFtPrt[c].Tplnal,
													Vornr: aFtPrt[c].Vornrfprt,
													ItmNum: aFtPrt[c].Psnfh,
													ItmCat: aFtPrt[c].Fhmar,
													PRT: aFtPrt[c].Fhmnr,
													// PRTDesc: aFtPrt[c].Fhwrk,
													Qty: aFtPrt[c].Mgvgw,
													UOM: aFtPrt[c].Mgeinh,
													QtyFrmla: aFtPrt[c].Mgform,
													PRTCtrl: aFtPrt[c].Steuf,
													PRTCtrlDesc: aFtPrt[c].Stftxt,
													StdUsgVal: aFtPrt[c].Ewvgw,
													StdUsgUOM: aFtPrt[c].Eweinh,
													UsgValFrmla: aFtPrt[c].Ewform,
													Plant: aFtPrt[c].Fhwrk,
													docType: aFtPrt[c].Dokareprt,
													docTypeDesc: "",
													docPart: aFtPrt[c].Doktleprt,
													docVersion: aFtPrt[c].Dokvreprt,
													prtEnable: false,
												}

												if (objPRT.ItmCat === "M") {
													objPRT.title = "Material";
													objPRT.matEnable = true;
													objPRT.eqEnable = false;
													objPRT.msptEnable = false;
													objPRT.docEnable = false;
													objPRT.othEnable = false;
												} else if (objPRT.ItmCat === "E") {
													objPRT.title = "Equipment";
													objPRT.matEnable = false;
													objPRT.eqEnable = true;
													objPRT.msptEnable = false;
													objPRT.docEnable = false;
													objPRT.othEnable = false;
												} else if (objPRT.ItmCat === "P") {
													objPRT.title = "Measuring Point";
													objPRT.matEnable = false;
													objPRT.eqEnable = false;
													objPRT.msptEnable = true;
													objPRT.docEnable = false;
													objPRT.othEnable = false;
												} else if (objPRT.ItmCat === "D") {
													objPRT.title = "Document";
													objPRT.matEnable = false;
													objPRT.eqEnable = false;
													objPRT.msptEnable = false;
													objPRT.docEnable = true;
													objPRT.othEnable = false;
												} else if (objPRT.ItmCat === "O") {
													objPRT.title = "Others";
													objPRT.matEnable = false;
													objPRT.eqEnable = false;
													objPRT.msptEnable = false;
													objPRT.docEnable = false;
													objPRT.othEnable = true;
												}
												ftOperation.PRT.push(objPRT);
											}
										}
									}
									ftlData.operation.push(ftOperation);

									var maintPckgDefault = results.FTMpackRead.results;
									var currReadMpack = [];
									if (maintPckgDefault.length > 0) {
										for (var w in maintPckgDefault) {
											if (ftlData.grp === maintPckgDefault[w].Tlflhdr && ftOperation.Plnal === maintPckgDefault[w].Tplnal) {
												currReadMpack.push(maintPckgDefault[w]);
											}
										}
									}

									var maintPckg = results.FTMPack.results;
									var currSelMpack = [];
									if (maintPckg.length > 0) {
										for (var x in maintPckg) {
											if (ftlData.grp === maintPckg[x].Tlflhdr && ftOperation.Plnal === maintPckg[x].Tplnal &&
												ftOperation.Vornr === maintPckg[x].Vorn2fmpk) {
												currSelMpack.push(maintPckg[x]);
											}
										}
									}

									var oMaintPckg = {};
									if (currReadMpack.length > 0) {
										oMaintPckg = {
											Plnal: currReadMpack[0].Tplnal,
											Vornr: ftOperation.Vornr,
											Strat: currReadMpack[0].Startfmpk,
											SOp: "",
											Ltxa1: ftOperation.Ltxa1,
											flag: currReadMpack[0].Tplnal + "-" + ftOperation.Vornr,
											MPArr: [],
										};
										for (var f in currReadMpack) {
											var currReadObj = currReadMpack[f];
											oMaintPckg[currReadObj.Paketfmpk] = false;
										}
									}

									if (currSelMpack.length > 0) {
										for (var z in currSelMpack) {
											currSelMpack[z].Vornr = currSelMpack[z].Vorn2fmpk;
											currSelMpack[z].Strat = currSelMpack[z].Startfmpk;
											currSelMpack[z].Paket = currSelMpack[z].Paketfmpk;
											currSelMpack[z].MPEnable = true;

											var currSelObj = currSelMpack[z];
											if (currSelMpack[z].IsSelected === 'X') {
												oMaintPckg[currSelObj.Paketfmpk] = true;
											}
										}
										oMaintPckg.MPArr = currSelMpack;
									}
									ftlData.MaintPckg.push(oMaintPckg);
								}
							}
						}
						component = results.FTComp.results;
						if (component.length > 0) {
							//ftlData.component = component;
							for (var f = 0; f < component.length; f++) {
								if (ftlData.grp === component[f].Tlflhdr) {
									var ftComponent = {};
									ftComponent = component[f];
									ftComponent.matDesc = component[f].Maktx;
									ftComponent.slNo = e + 1;
									ftComponent.flag = component[f].Tplnal + "-" + component[f].Vornr + "-" + component[f].slNo;
									ftComponent.hFlag = component[f].Tplnal + "-" + component[f].Vornr;

									ftComponent.group = component[f].Tlflhdr;
									ftComponent.grp = component[f].Tlflhdr;
									ftComponent.groupCounter = component[f].Tplnal;
									ftComponent.activity = component[f].Vornr;
									ftComponent.Vornr = component[f].Vornr;
									// ftComponent.activity = component[f].Vorn2fcmp;
									ftComponent.component = component[f].Idnrk;
									ftComponent.compDesc = component[f].Maktx;
									ftComponent.compQty = component[f].Menge;
									ftComponent.compUnit = component[f].MeinsFcp;
									ftComponent.backFlush = component[f].RgekzFcp;
									//ftComponent.resv = component[f].Disp;
									ftComponent.resv = component[f].Disp === "" ? component[f].Disptxt : component[f].Disp;
									ftComponent.resvDesc = component[f].Disptxt;
									ftComponent.storageLoc = component[f].Lgortfcmp;
									ftComponent.costElement = component[f].Saktofcmp;
									ftComponent.bom = component[f].Stlnrfcmp;
									ftComponent.bomCat = component[f].Stltyfcmp;
									ftComponent.bomCatDesc = component[f].Stltyfcmptxt;
									ftComponent.itCat = component[f].Postp;
									ftComponent.assembly = component[f].Istru;
									ftComponent.sortStr = component[f].Sortf;
									ftComponent.itemNo = component[f].Posnr;
									ftComponent.plantMaint = component[f].Sanin;
									ftComponent.relSales = component[f].Rvrel;
									ftComponent.relCost = component[f].Sanka;
									ftComponent.pmAssembly = component[f].Stkkz;
									ftComponent.spare = component[f].Erskz;
									ftComponent.matProv = component[f].Beikz;
									ftComponent.isPlant = component[f].Pswrk;
									ftComponent.bulkMat = component[f].Schgt;
									ftComponent.plant = component[f].Werksfcmp;
									ftComponent.purchGrp = component[f].Ekgrp;
									ftComponent.price = component[f].Preis;
									ftComponent.currency = component[f].Waers;
									ftComponent.prUnit = component[f].Peinh;
									ftComponent.delTimeD = component[f].Lifzt;
									ftComponent.matGrp = component[f].Matkl;
									ftComponent.qtyFix = component[f].Fmeng;
									ftComponent.altBom = component[f].Stlal;
									ftComponent.cmpCompEnable = false;
									ftComponent.cmpEnable = false;
									ftComponent.cmpVisible = true;
									ftlData.component.push(ftComponent);

								}
							}
							g.cmpData = component;
							/*compModel = new sap.ui.model.json.JSONModel();
							compModel.setData(ftlData.component);*/
						}
						var classList = results.FTClass.results;
						if (classList) {
							if (classList.length > 0) {
								for (var i = 0; i < classList.length; i++) {
									if (ftlData.grp === classList[i].Tlflhdr) {
										classList[i].ctEnable = false;
										classList[i].classEnable = false;
										classList[i].ClassTypeDesc = classList[i].Artxt;
										delete classList[i].Artxt;
										classList[i].ClassDesc = classList[i].Kltxt;
										delete classList[i].Kltxt;
										delete classList[i].Changerequestid;
										delete classList[i].Clint;
										delete classList[i].Service;
										classList[i].slNo = i + 1;
										classList[i].Plnal = classList[i].Tplnal;
										classList[i].flag = classList[i].Tplnal + "-" + classList[i].slNo;
										ftlData.Class.push(classList[i]);

									}
								}
								g.cData = classList;
								/*cModel = new sap.ui.model.json.JSONModel();
								cModel.setData(classList);
								g.class.setModel(cModel);*/
								// ftlData.Class = classList;
							}
						}
						var charList = results.FTVal.results;
						if (charList) {
							if (charList.length > 0) {
								for (var j = 0; j < charList.length; j++) {
									if (ftlData.grp === charList[j].Tlflhdr) {
										charList[j].cNameEnable = false;
										delete charList[j].Ataut;
										delete charList[j].Ataw1;
										delete charList[j].Atawe;
										delete charList[j].Atcod;
										delete charList[j].Atflb;
										delete charList[j].Atflv;
										delete charList[j].Atimb;
										delete charList[j].Atsrt;
										delete charList[j].Atvglart;
										delete charList[j].Atzis;
										delete charList[j].Changerequestid;
										// delete charList[j].CharName;
										delete charList[j].Charid;
										delete charList[j].Classtype;
										delete charList[j].Service;
										delete charList[j].Valcnt;
										charList[j].slNo = j + 1;
										charList[j].Plnal = charList[j].Tplnal;
										charList[j].flag = charList[j].Tplnal + "-" + charList[j].Class + "-" + charList[j].slNo;
										ftlData.Char.push(charList[j]);

									}
									g.chData = charList;
									/*_cModel = new sap.ui.model.json.JSONModel();
									_cModel.setData(charList);
									g.char.setModel(_cModel);*/
									// ftlData.Char = charList;
								}

								for (var z = 0; z < ftlData.Char.length; z++) {
									var count = 1;
									for (var y = 0; y < ftlData.Char.length; y++) {
										if (z === y) {
											continue;
										}
										if (ftlData.Char[y].Atnam === ftlData.Char[z].Atnam) {
											count++;
										}
									}
									if (count > 1) {
										ftlData.Char[z].charDltEnable = true;
									} else {
										ftlData.Char[z].charDltEnable = false;
									}
								}
							}
						}
						AIWListFTLData.push(ftlData);
					}
					sap.ui.getCore().getModel("AIWListFTLModel").setSizeLimit(AIWListFTLData.length);
					sap.ui.getCore().getModel("AIWListFTLModel").setData(AIWListFTLData);
					g.updateCount("flocTL", AIWListFTLData);

					var AIWListOLData = sap.ui.getCore().getModel("AIWListOLModel").getData();
					var d = results.Olink.results;
					// g.olData = d;
					if (d !== null) {
						for (var i = 0; i < d.length; i++) {
							var objLink = {};
							objLink.lenable = true; //false;
							objLink.linkCat = d[i].Netyp;
							objLink.objCat = d[i].Kantyp;
							objLink.link = d[i].Objlink;
							// Netyp: d[i].Netyp,
							// objLink.linkCat = d[i].Netyp;
							objLink.linkCatDesc = d[i].Netyptxt;
							// Kantyp= d[i].Kantyp;
							objLink.objCat = d[i].Kantyp;
							objLink.objCatDesc = d[i].Kantyptxt;
							objLink.linkDesc = d[i].Kanxt;
							objLink.netId = d[i].Netid;
							objLink.netIdDesc = d[i].Netidtxt;
							objLink.linkNum = d[i].Lfdknr;
							objLink.autGrp = d[i].Begru;
							objLink.autGrpDesc = d[i].Begtx;
							objLink.validFrm = formatter.getDateFormat(d[i].Datva);
							objLink.timeFrm = formatter.getTime(d[i].Zeitva);
							objLink.validTo = formatter.getDateFormat(d[i].Datvb);
							objLink.timeTo = formatter.getTime(d[i].Zeitvb);
							objLink.medium = d[i].Mediu;
							objLink.mediumDesc = d[i].Medkxt;
							objLink.linkFrmFlEn = false;
							objLink.linkToFlEn = false;
							objLink.linkObjFlEn = false;
							objLink.linkFromEQEn = false;
							objLink.linkToEQEn = false;
							objLink.linkObjEqEn = false;
							objLink.linkCatEn = false;
							objLink.linkCatVS = "None";
							objLink.objCatEn = false;
							objLink.objCatVS = "None";
							objLink.linkFEqLblRQ = true;
							objLink.linkToEqLblRQ = true;
							objLink.linkFrmEq = "";
							objLink.linkFrmEqDesc = "";
							objLink.linkToEq = "";
							objLink.linkToEqDesc = "";
							objLink.linkObjEq = "";
							objLink.linkObjEqDesc = "";
							objLink.linkFrmflLblV = false;
							objLink.linkFrmFlV = false;
							objLink.linkFrmFlDescV = false;
							objLink.linkToFlLblV = false;
							objLink.linkToFlV = false;
							objLink.linkToFlDescV = false;
							objLink.linkObjFlLblV = false;
							objLink.linkObjFlV = false;
							objLink.linkObjFlDescV = false;
							objLink.linkFrmEqLblV = true;
							objLink.linkFrmEqV = true;
							objLink.linkFrmEqDescV = true;
							objLink.linkToEqLblV = true;
							objLink.linkToEQV = true;
							objLink.linkToEqDescV = true;
							objLink.linkObjEqLblV = true;
							objLink.linkObjEqV = true;
							objLink.linkObjEqDescV = true;
							objLink.enable = true; //false;
							objLink.LAM = [];
							objLink.Class = [];
							objLink.Char = [];
							objLink.classItems = [];
							objLink.characteristics = [];
							if (objLink.objCat === "E") {
								objLink.linkCatEn = false;
								objLink.linkFrmFlEn = false;
								objLink.linkToFlEn = false;
								objLink.linkObjFlEn = false;
								objLink.linkFromEQEn = true;
								objLink.linkToEQEn = true;
								objLink.linkObjEqEn = true;
								objLink.linkFEqLblRQ = true;
								objLink.linkToEqLblRQ = true;
								objLink.linkFrmflLblV = false;
								objLink.linkFrmFlV = false;
								objLink.linkFrmFlDescV = false;
								objLink.linkToFlLblV = false;
								objLink.linkToFlV = false;
								objLink.linkToFlDescV = false;
								objLink.linkObjFlLblV = false;
								objLink.linkObjFlV = false;
								objLink.linkObjFlDescV = false;
								objLink.linkCatVS = "None";
								objLink.objCatEn = false;
								objLink.objCatVS = "None";
								objLink.linkFEqLblRQ = true;
								objLink.linkToEqLblRQ = true;
								objLink.linkFrmEq = d[i].Eqvon;
								objLink.linkFrmEqDesc = d[i].Eqtxtf;
								objLink.linkToEq = d[i].Eqnach;
								objLink.linkToEqDesc = d[i].Eqtxtt;
								objLink.linkObjEq = d[i].Eqkant;
								objLink.linkObjEqDesc = d[i].Eqtxtl;
								objLink.linkFrmflLblV = false;
								objLink.linkFrmFlV = false;
								objLink.linkFrmFlDescV = false;
								objLink.linkToFlLblV = false;
								objLink.linkToFlV = false;
								objLink.linkToFlDescV = false;
								objLink.linkObjFlLblV = false;
								objLink.linkObjFlV = false;
								objLink.linkObjFlDescV = false;
								objLink.linkFrmEqLblV = true;
								objLink.linkFrmEqV = true;
								objLink.linkFrmEqDescV = true;
								objLink.linkToEqLblV = true;
								objLink.linkToEQV = true;
								objLink.linkToEqDescV = true;
								objLink.linkObjEqLblV = true;
								objLink.linkObjEqV = true;
								objLink.linkObjEqDescV = true;
								// readStatusProf(objLink.linkCat);
							} else if (objLink.objCat === "T") {
								objLink.linkCatEn = false;
								objLink.linkFromEQEn = false;
								objLink.linkToEQEn = false;
								objLink.linkObjEqEn = false;
								objLink.linkFrmFlEn = true;
								objLink.linkToFlEn = true;
								objLink.linkObjFlEn = true;
								objLink.linkFrmflLblRQ = true;
								objLink.linkToFlLblRQ = true;
								objLink.linkFrmEqLblV = false;
								objLink.linkFrmEqV = false;
								objLink.linkFrmEqDescV = false;
								objLink.linkToEqLblV = false;
								objLink.linkToEQV = false;
								objLink.linkToEqDescV = false;
								objLink.linkObjEqLblV = false;
								objLink.linkObjEqV = false;
								objLink.linkObjEqDescV = false;
								objLink.linkCatVS = "None";
								objLink.objCatEn = false;
								objLink.objCatVS = "None";
								objLink.linkFrmflLblRQ = true;
								objLink.linkToFlLblRQ = true;
								objLink.linkFrmFl = d[i].Tpvon;
								objLink.linkFrmFlDesc = d[i].Fltxtf;
								objLink.linkToFl = d[i].Tpnach;
								objLink.linkToFlDesc = d[i].Fltxtt;
								objLink.linkObjFl = d[i].Tpkant;
								objLink.linkObjFlDesc = d[i].Fltxtl;
								objLink.linkFrmflLblV = true;
								objLink.linkFrmFlV = true;
								objLink.linkFrmFlDescV = true;
								objLink.linkToFlLblV = true;
								objLink.linkToFlV = true;
								objLink.linkToFlDescV = true;
								objLink.linkObjFlLblV = true;
								objLink.linkObjFlV = true;
								objLink.linkObjFlDescV = true;
								objLink.linkFrmEqLblV = false;
								objLink.linkFrmEqV = false;
								objLink.linkFrmEqDescV = false;
								objLink.linkToEqLblV = false;
								objLink.linkToEQV = false;
								objLink.linkToEqDescV = false;
								objLink.linkObjEqLblV = false;
								objLink.linkObjEqV = false;
								objLink.linkObjEqDescV = false;
								// readStatusProf(objLink.linkCat);
							}

							if (d[i].Bezarp === "2") {
								// objLink._oView.byId("twoWayRel").setSelected(true);
								objLink.twoWayRel = true;
								objLink.oneWayRel = false;
							} else if (d[i].Bezarp === "1") {
								// objLink._oView.byId("oneWayRel").setSelected(true);
								objLink.oneWayRel = true;
								objLink.twoWayRel = false;
							}

							if (d[i].Bezarl === "2") {
								// objLink._oView.byId("twoWayUsd").setSelected(true);
								objLink.twoWayUsd = true;
								objLink.oneWayUsd = false;
								objLink.relNotUsd = false;
							} else if (d[i].Bezarl === "1") {
								// objLink._oView.byId("oneWayUsd").setSelected(true);
								objLink.oneWayUsd = true;
								objLink.relNotUsd = false;
								objLink.twoWayUsd = false;
							} else if (d[i].Bezarl === "0") {
								// objLink._oView.byId("relNotUsd").setSelected(true);
								objLink.relNotUsd = true;
								objLink.oneWayUsd = false;
								objLink.twoWayUsd = false;
							}

							var lamData = results.OLLAM.results;
							if (lamData) {
								var lModel = new sap.ui.model.json.JSONModel();
								lModel.setData(lamData);
								objLink.LAM = lamData;
							}

							var classList = results.OLClass.results;
							if (classList) {
								if (classList.length > 0) {
									for (var h = 0; h < classList.length; h++) {
										if (objLink.link === classList[h].Objlink) {
											classList[h].ctEnable = false;
											classList[h].classEnable = false;
											classList[h].ClassTypeDesc = classList[h].Artxt;
											delete classList[h].Artxt;
											classList[h].ClassDesc = classList[h].Kltxt;
											delete classList[h].Kltxt;
											delete classList[h].Changerequestid;
											delete classList[h].Clint;
											delete classList[h].Service;
											objLink.Class.push(classList[h]);
											// pApproveObject.classItems.push(classList[h]);
										}
										/*var cModel = new sap.ui.model.json.JSONModel();
										cModel.setData(classList);
										g.class.setModel(cModel);*/
										// g.olData.Class = classList;
									}
								}
							}

							var charList = results.OLVal.results;
							if (charList) {
								if (charList.length > 0) {
									for (var j = 0; j < charList.length; j++) {
										if (objLink.link === charList[j].Objlink) {
											charList[j].cNameEnable = false;
											delete charList[j].Ataut;
											delete charList[j].Ataw1;
											delete charList[j].Atawe;
											delete charList[j].Atcod;
											delete charList[j].Atflb;
											delete charList[j].Atflv;
											delete charList[j].Atimb;
											delete charList[j].Atsrt;
											delete charList[j].Atvglart;
											delete charList[j].Atzis;
											delete charList[j].Changerequestid;
											// delete charList[j].CharName;
											delete charList[j].Charid;
											delete charList[j].Classtype;
											delete charList[j].Service;
											delete charList[j].Valcnt;
											charList[j].slNo = j + 1;
											charList[j].flag = charList[j].Class + "-" + charList[j].slNo;
											objLink.Char.push(charList[j]);
											// pApproveObject.characteristics.push(charList[j]);
										}
										/*var _cModel = new sap.ui.model.json.JSONModel();
										_cModel.setData(charList);
										g.char.setModel(_cModel);*/
										// g.olData.Char = charList;
										// g.chData = charList;
									}

									for (var z = 0; z < objLink.Char.Char.length; z++) {
										var count = 1;
										for (var y = 0; y < objLink.Char.Char.length; y++) {
											if (z === y) {
												continue;
											}
											if (objLink.Char.Char[y].Atnam === objLink.Char.Char[z].Atnam) {
												count++;
											}
										}
										if (count > 1) {
											objLink.Char.Char[z].charDltEnable = true;
										} else {
											objLink.Char.Char[z].charDltEnable = false;
										}
									}
								}
							}

							AIWListOLData.push(objLink);
							// g.setCommonApprovalData("AIWListOLModel", pApproveObject);
						}
						sap.ui.getCore().getModel("AIWListOLModel").setData(AIWListOLData);
						sap.ui.getCore().getModel("AIWListOLModel").refresh();
						g.updateCount("objLink", AIWListOLData);
						if (AIWListOLData.length > 0) {
							readStatusProf(AIWListOLData[AIWListOLData.length - 1].linkCat, AIWListOLData.length);
						}
					}

					g.setTabVisibility();
					g.getView().byId("_iconTabBar1").setSelectedKey("General");
				},
				error: function (err) {
					g.BusyDialog.close();
				}
			});
		},

		setTabVisibility: function () {
			var g = this;
			if (sap.ui.getCore().getModel("AIWMSPT").getData().length > 0) {
				g.getView().getModel('EnableModel').setProperty("/Measuring Point", true);
			}
			if (sap.ui.getCore().getModel("AIWMPMI").getData().length > 0) {
				g.getView().getModel('EnableModel').setProperty("/Maintenance Plan", true);
			}
			if (sap.ui.getCore().getModel("AIWListWCModel").getData().length > 0) {
				g.getView().getModel('EnableModel').setProperty("/Work Center", true);
			}
			if (sap.ui.getCore().getModel("AIWListGTLModel").getData().length > 0 || sap.ui.getCore().getModel("AIWListETLModel").getData().length >
				0 || sap.ui.getCore().getModel("AIWListFTLModel").getData().length > 0) {
				g.getView().getModel('EnableModel').setProperty("/Task List", true);
			}
			if (sap.ui.getCore().getModel("AIWListOLModel").getData().length > 0) {
				g.getView().getModel('EnableModel').setProperty("/Object Link", true);
			}
			if (sap.ui.getCore().getModel("AIWListONModel").getData().length > 0) {
				g.getView().getModel('EnableModel').setProperty("/Object Network", true);
			}
			g.getView().getModel('EnableModel').refresh();
		}

	});

});